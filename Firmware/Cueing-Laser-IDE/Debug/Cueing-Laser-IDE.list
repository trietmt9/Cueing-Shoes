
Cueing-Laser-IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080082d0  080082d0  000182d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c8  080086c8  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d0  080086d0  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  080086d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000210  080088e8  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  080088e8  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001542b  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235c  00000000  00000000  000356ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00037a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b14  00000000  00000000  00038878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003fb4  00000000  00000000  0003938c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b4f  00000000  00000000  0003d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8aec  00000000  00000000  0004ee8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d00  00000000  00000000  0014797c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014c67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082b4 	.word	0x080082b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	080082b4 	.word	0x080082b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <CS_SELECT>:
 * @brief Activates the chip select pin.
 *
 * This function Activates the chip select pin (GPIOA4) by setting it to GPIO_PIN_RESET.
 */
inline static void CS_SELECT()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f001 fab3 	bl	80024f4 <HAL_Delay>
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2120      	movs	r1, #32
 8000f92:	4802      	ldr	r0, [pc, #8]	; (8000f9c <CS_SELECT+0x18>)
 8000f94:	f001 ffbe 	bl	8002f14 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020800 	.word	0x40020800

08000fa0 <CS_UNSELECT>:
 * @brief Deactivates the chip select pin.
 *
 * This function deactivates the chip select pin (GPIOA4) by setting it to GPIO_PIN_SET.
 */
inline static void CS_UNSELECT(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <CS_UNSELECT+0x14>)
 8000faa:	f001 ffb3 	bl	8002f14 <HAL_GPIO_WritePin>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <SPI_WriteByte>:
 * then writes the data from the provided pointer.
 *
 * @note The SPI handle must be initialized and configured before calling this function.
 */
void SPI_WriteByte(SPI_HandleTypeDef *SPIx, uint8_t Register, uint8_t* pData, uint8_t Data_length)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	72fb      	strb	r3, [r7, #11]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	72bb      	strb	r3, [r7, #10]
    CS_SELECT();
 8000fcc:	f7ff ffda 	bl	8000f84 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 8000fd0:	f107 010b 	add.w	r1, r7, #11
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f002 fe42 	bl	8003c62 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pData, Data_length, SPI_TIMEOUT);
 8000fde:	7abb      	ldrb	r3, [r7, #10]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	2364      	movs	r3, #100	; 0x64
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f002 fe3b 	bl	8003c62 <HAL_SPI_Transmit>
    CS_UNSELECT();
 8000fec:	f7ff ffd8 	bl	8000fa0 <CS_UNSELECT>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <USER_BANK_SELECTION>:
 * 
 * @param user_bank The user bank to select.
 * @param SPIx The SPI handle.
 */
void USER_BANK_SELECTION(SPI_HandleTypeDef *SPIx, uint8_t USER_BANK_SELECT)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
    uint8_t user_bank_options = 0; 
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
    user_bank_options = (USER_BANK_SELECT << USER_BANK); // select the user bank 
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	b2db      	uxtb	r3, r3
 800100e:	73fb      	strb	r3, [r7, #15]
    CS_SELECT();
 8001010:	f7ff ffb8 	bl	8000f84 <CS_SELECT>
    SPI_WriteByte(SPIx, ICM20948_REG_BANK_SEL, &user_bank_options, 1);
 8001014:	f107 020f 	add.w	r2, r7, #15
 8001018:	2301      	movs	r3, #1
 800101a:	217f      	movs	r1, #127	; 0x7f
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ffcb 	bl	8000fb8 <SPI_WriteByte>
    CS_UNSELECT();
 8001022:	f7ff ffbd 	bl	8000fa0 <CS_UNSELECT>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <SPI_WriteRegisters>:
 * @param Register The register to write to.
 * @param Data The data to write.
 * @param Data_length The length of the data to write.
 */
void SPI_WriteRegisters(usrbank_sel user_bank, SPI_HandleTypeDef *SPIx, uint8_t Register, uint8_t* Data, uint8_t Data_length)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4603      	mov	r3, r0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	4613      	mov	r3, r2
 800103e:	73bb      	strb	r3, [r7, #14]
    USER_BANK_SELECTION(SPIx, user_bank);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4619      	mov	r1, r3
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f7ff ffd7 	bl	8000ff8 <USER_BANK_SELECTION>
    CS_SELECT();
 800104a:	f7ff ff9b 	bl	8000f84 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 800104e:	f107 010e 	add.w	r1, r7, #14
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	2201      	movs	r2, #1
 8001056:	68b8      	ldr	r0, [r7, #8]
 8001058:	f002 fe03 	bl	8003c62 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, Data, Data_length, SPI_TIMEOUT);
 800105c:	7e3b      	ldrb	r3, [r7, #24]
 800105e:	b29a      	uxth	r2, r3
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f002 fdfc 	bl	8003c62 <HAL_SPI_Transmit>
    CS_UNSELECT();
 800106a:	f7ff ff99 	bl	8000fa0 <CS_UNSELECT>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <SPI_ReadRegisters>:
 * @param Register The register to read from.
 * @param pData The data to read into.
 * @param Data_length The length of the data to read.
 */
void SPI_ReadRegisters(usrbank_sel user_bank, SPI_HandleTypeDef *SPIx, uint8_t reg, uint8_t* pData, uint8_t Data_length) 
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	4613      	mov	r3, r2
 8001086:	73bb      	strb	r3, [r7, #14]
    reg |= 0x80;
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73bb      	strb	r3, [r7, #14]
    USER_BANK_SELECTION(SPIx, user_bank);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4619      	mov	r1, r3
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff ffae 	bl	8000ff8 <USER_BANK_SELECTION>
    CS_SELECT();
 800109c:	f7ff ff72 	bl	8000f84 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &reg, 1, SPI_TIMEOUT);
 80010a0:	f107 010e 	add.w	r1, r7, #14
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	2201      	movs	r2, #1
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f002 fdda 	bl	8003c62 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pData, Data_length, SPI_TIMEOUT);
 80010ae:	7e3b      	ldrb	r3, [r7, #24]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f002 ff16 	bl	8003ee8 <HAL_SPI_Receive>
    CS_UNSELECT();
 80010bc:	f7ff ff70 	bl	8000fa0 <CS_UNSELECT>
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <WHO_AM_I_CHECK>:
 *
 * @param[in] SPIx The SPI handle to use for communication.
 * @param[out] who_am_i The pointer to the byte of data to be read.
 */
void WHO_AM_I_CHECK(SPI_HandleTypeDef *SPIx, uint8_t* who_am_i)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_WHO_AM_I, who_am_i, 1);
 80010d2:	2301      	movs	r3, #1
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff ffca 	bl	8001076 <SPI_ReadRegisters>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	0000      	movs	r0, r0
 80010ec:	0000      	movs	r0, r0
	...

080010f0 <ICM20948_Read>:
 *
 * @param[in] SPIx The SPI handle to use for communication.
 * @param[out] data A pointer to a struct containing the accelerometer and gyroscope data.
 */
void ICM20948_Read(SPI_HandleTypeDef* SPIx, gyro_accel_data_t* data)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
    // Read accelerometer data
    uint8_t accel_data[6];
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_ACCEL_XOUT_H, accel_data, 6);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	2206      	movs	r2, #6
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	222d      	movs	r2, #45	; 0x2d
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff ffb5 	bl	8001076 <SPI_ReadRegisters>
    data->RAW_Ax = (int16_t)(accel_data[0]<<8|accel_data[1]);
 800110c:	7c3b      	ldrb	r3, [r7, #16]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	7c7b      	ldrb	r3, [r7, #17]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21a      	sxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	80da      	strh	r2, [r3, #6]
    data->RAW_Ay = (int16_t)(accel_data[2]<<8|accel_data[3]);
 800111e:	7cbb      	ldrb	r3, [r7, #18]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	7cfb      	ldrb	r3, [r7, #19]
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21a      	sxth	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	811a      	strh	r2, [r3, #8]
    data->RAW_Az = (int16_t)(accel_data[4]<<8|accel_data[5]);
 8001130:	7d3b      	ldrb	r3, [r7, #20]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	815a      	strh	r2, [r3, #10]

    // Convert accelerometer raw data to true accelerometer data
    data->Ax = (double)data->RAW_Ax / 8;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa0b 	bl	8000564 <__aeabi_i2d>
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b99      	ldr	r3, [pc, #612]	; (80013b8 <ICM20948_Read+0x2c8>)
 8001154:	f7ff fb9a 	bl	800088c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd42 	bl	8000be8 <__aeabi_d2f>
 8001164:	4602      	mov	r2, r0
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
    data->Ay = (double)data->RAW_Ay / 8;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9f7 	bl	8000564 <__aeabi_i2d>
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b8f      	ldr	r3, [pc, #572]	; (80013b8 <ICM20948_Read+0x2c8>)
 800117c:	f7ff fb86 	bl	800088c <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd2e 	bl	8000be8 <__aeabi_d2f>
 800118c:	4602      	mov	r2, r0
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
    data->Az = (double)data->RAW_Az / 8;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9e3 	bl	8000564 <__aeabi_i2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <ICM20948_Read+0x2c8>)
 80011a4:	f7ff fb72 	bl	800088c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd1a 	bl	8000be8 <__aeabi_d2f>
 80011b4:	4602      	mov	r2, r0
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c

    // Read gyroscope data
    uint8_t gyro_data[6];
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_GYRO_XOUT_H, gyro_data, 6);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	2206      	movs	r2, #6
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	2233      	movs	r2, #51	; 0x33
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff ff55 	bl	8001076 <SPI_ReadRegisters>
    data->RAW_Gx = (int16_t)(gyro_data[0]<<8|gyro_data[1]);
 80011cc:	7a3b      	ldrb	r3, [r7, #8]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7a7b      	ldrb	r3, [r7, #9]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21a      	sxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	801a      	strh	r2, [r3, #0]
    data->RAW_Gy = (int16_t)(gyro_data[2]<<8|gyro_data[3]);
 80011de:	7abb      	ldrb	r3, [r7, #10]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	805a      	strh	r2, [r3, #2]
    data->RAW_Gz = (int16_t)(gyro_data[4]<<8|gyro_data[5]);
 80011f0:	7b3b      	ldrb	r3, [r7, #12]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7b7b      	ldrb	r3, [r7, #13]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	809a      	strh	r2, [r3, #4]

    // Convert gyroscope raw data to true gyroscope data
    data->Gx = (double)data->RAW_Gx / 500;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9ab 	bl	8000564 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <ICM20948_Read+0x2cc>)
 8001214:	f7ff fb3a 	bl	800088c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fce2 	bl	8000be8 <__aeabi_d2f>
 8001224:	4602      	mov	r2, r0
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	619a      	str	r2, [r3, #24]
    data->Gy = (double)data->RAW_Gy / 500;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f997 	bl	8000564 <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b60      	ldr	r3, [pc, #384]	; (80013bc <ICM20948_Read+0x2cc>)
 800123c:	f7ff fb26 	bl	800088c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcce 	bl	8000be8 <__aeabi_d2f>
 800124c:	4602      	mov	r2, r0
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	61da      	str	r2, [r3, #28]
    data->Gz = (double)data->RAW_Gz / 500;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f983 	bl	8000564 <__aeabi_i2d>
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <ICM20948_Read+0x2cc>)
 8001264:	f7ff fb12 	bl	800088c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fcba 	bl	8000be8 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	621a      	str	r2, [r3, #32]

    // compute Roll Pitch angle
    data->Roll = atan2(data->Ay, sqrt((data->Ax*data->Ax) + (data->Az*data->Az))) * 180 / M_PI;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f982 	bl	8000588 <__aeabi_f2d>
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	ee17 0a90 	vmov	r0, s15
 80012b0:	f7ff f96a 	bl	8000588 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	ec43 2b10 	vmov	d0, r2, r3
 80012bc:	f006 fc82 	bl	8007bc4 <sqrt>
 80012c0:	eeb0 7a40 	vmov.f32	s14, s0
 80012c4:	eef0 7a60 	vmov.f32	s15, s1
 80012c8:	eeb0 1a47 	vmov.f32	s2, s14
 80012cc:	eef0 1a67 	vmov.f32	s3, s15
 80012d0:	ec45 4b10 	vmov	d0, r4, r5
 80012d4:	f006 fc74 	bl	8007bc0 <atan2>
 80012d8:	ec51 0b10 	vmov	r0, r1, d0
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <ICM20948_Read+0x2d0>)
 80012e2:	f7ff f9a9 	bl	8000638 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	a330      	add	r3, pc, #192	; (adr r3, 80013b0 <ICM20948_Read+0x2c0>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff faca 	bl	800088c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc72 	bl	8000be8 <__aeabi_d2f>
 8001304:	4602      	mov	r2, r0
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
    data->Pitch = atan2(-data->Ax, sqrt((data->Ay*data->Ay) + (data->Az*data->Az))) * 180 / M_PI;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001310:	eef1 7a67 	vneg.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f935 	bl	8000588 <__aeabi_f2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800133e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	ee17 0a90 	vmov	r0, s15
 800134a:	f7ff f91d 	bl	8000588 <__aeabi_f2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	ec43 2b10 	vmov	d0, r2, r3
 8001356:	f006 fc35 	bl	8007bc4 <sqrt>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	eef0 7a60 	vmov.f32	s15, s1
 8001362:	eeb0 1a47 	vmov.f32	s2, s14
 8001366:	eef0 1a67 	vmov.f32	s3, s15
 800136a:	ec45 4b10 	vmov	d0, r4, r5
 800136e:	f006 fc27 	bl	8007bc0 <atan2>
 8001372:	ec51 0b10 	vmov	r0, r1, d0
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <ICM20948_Read+0x2d0>)
 800137c:	f7ff f95c 	bl	8000638 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	a309      	add	r3, pc, #36	; (adr r3, 80013b0 <ICM20948_Read+0x2c0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff fa7d 	bl	800088c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fc25 	bl	8000be8 <__aeabi_d2f>
 800139e:	4602      	mov	r2, r0
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bdb0      	pop	{r4, r5, r7, pc}
 80013ac:	f3af 8000 	nop.w
 80013b0:	54442d18 	.word	0x54442d18
 80013b4:	400921fb 	.word	0x400921fb
 80013b8:	40200000 	.word	0x40200000
 80013bc:	407f4000 	.word	0x407f4000
 80013c0:	40668000 	.word	0x40668000

080013c4 <ICM20948_Init>:
 * @brief Initial setting for the accelerometer and gyroscope data of the ICM20948 sensor.
 *
 * @param[in] SPIx The SPI handle to use for communication.
 */
void ICM20948_Init(SPI_HandleTypeDef *SPIx)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
    uint8_t temp_data = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
    uint8_t who_am_i = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
    WHO_AM_I_CHECK(SPIx, &who_am_i);
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fe74 	bl	80010c8 <WHO_AM_I_CHECK>
    if(who_am_i == ICM20948_AVAILABLE)
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2bea      	cmp	r3, #234	; 0xea
 80013e4:	d17c      	bne.n	80014e0 <ICM20948_Init+0x11c>
    {
        // Disable I2C slave module
        temp_data = (I2C_DISABLE<< I2C_IF_DIS);
 80013e6:	2310      	movs	r3, #16
 80013e8:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_USER_CTRL, &temp_data, sizeof(temp_data));
 80013ea:	f107 030f 	add.w	r3, r7, #15
 80013ee:	2201      	movs	r2, #1
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	2203      	movs	r2, #3
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fe19 	bl	800102e <SPI_WriteRegisters>

        // Reset the IMU, in this configuration temp will equal to 0xC1u 
        temp_data = 0; 
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
        temp_data |= (BEST_CLK_SRC << CLKSEL)|( SLEEP_EN << SLEEP)|(DEVICE_RST << DEVICE_RESET);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8001406:	b2db      	uxtb	r3, r3
 8001408:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_PWR_MGMT_1, &temp_data, sizeof(temp_data));
 800140a:	f107 030f 	add.w	r3, r7, #15
 800140e:	2201      	movs	r2, #1
 8001410:	9200      	str	r2, [sp, #0]
 8001412:	2206      	movs	r2, #6
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff fe09 	bl	800102e <SPI_WriteRegisters>

        // Exit sleep mode
        temp_data = 0; 
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (BEST_CLK_SRC << CLKSEL);
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_PWR_MGMT_1, &temp_data, sizeof(temp_data));
 800142a:	f107 030f 	add.w	r3, r7, #15
 800142e:	2201      	movs	r2, #1
 8001430:	9200      	str	r2, [sp, #0]
 8001432:	2206      	movs	r2, #6
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fdf9 	bl	800102e <SPI_WriteRegisters>

        // Bias cancellation

        // GYRO_BIAS_CANCELLATION(SPIx);
        // Choose sample rate divider at 100, temp = 0x64u
        temp_data = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (GYRO_SMPLRT_DIV_100 << GYRO_SMPLRT_DIV);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f043 0364 	orr.w	r3, r3, #100	; 0x64
 8001446:	b2db      	uxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, GYRO_SMPLRT_DIV, &temp_data, sizeof(temp_data));
 800144a:	f107 030f 	add.w	r3, r7, #15
 800144e:	2201      	movs	r2, #1
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	2002      	movs	r0, #2
 8001458:	f7ff fde9 	bl	800102e <SPI_WriteRegisters>

        // Enable low-pass filter  
        // Choose full scale rate at 500 dps with 3 decibels band-with is 51.2Hz and Noise band-with is 73.3Hz
        temp_data = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (DLPF_ENABLED << GYRO_FCHOICE)|(GYRO_FS_500DPS << GYRO_FS_SEL)|(GYRO_11_6Hz_17_8Hz << GYRO_DLPFCFG);
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001466:	b2db      	uxtb	r3, r3
 8001468:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_GYRO_CONFIG_1, &temp_data, sizeof(temp_data));
 800146a:	f107 030f 	add.w	r3, r7, #15
 800146e:	2201      	movs	r2, #1
 8001470:	9200      	str	r2, [sp, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	2002      	movs	r0, #2
 8001478:	f7ff fdd9 	bl	800102e <SPI_WriteRegisters>

        // Enable output data rate alignment 
        temp_data = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (ODR_ALGIN_ON << ODR_ALIGN_EN);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ODR_ALIGN_EN, &temp_data, sizeof(temp_data));
 800148a:	f107 030f 	add.w	r3, r7, #15
 800148e:	2201      	movs	r2, #1
 8001490:	9200      	str	r2, [sp, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff fdc9 	bl	800102e <SPI_WriteRegisters>

        // Select sample rate divider for Accelerometer 
        temp_data = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (ACCEL_SMPLRT_DIV_1000<<ACCEL_SMPLRT_DIV_2);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	f063 0317 	orn	r3, r3, #23
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_ACCEL_SMPLRT_DIV_2, &temp_data, sizeof(temp_data));
 80014ae:	f107 030f 	add.w	r3, r7, #15
 80014b2:	2201      	movs	r2, #1
 80014b4:	9200      	str	r2, [sp, #0]
 80014b6:	2211      	movs	r2, #17
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff fdb7 	bl	800102e <SPI_WriteRegisters>

        // Select accelerometer at 8g 
        // Enable low-pass filter 
        temp_data = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
        temp_data |= (DLPF_ENABLED << ACCEL_FCHOICE)|(ACCEL_FS_8G << ACCEL_FS_SEL)|(ACCEL_111_4Hz_136Hz << ACCEL_DLPFCFG);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f043 0315 	orr.w	r3, r3, #21
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_ACCEL_CONFIG_1, &temp_data, sizeof(temp_data));
 80014ce:	f107 030f 	add.w	r3, r7, #15
 80014d2:	2201      	movs	r2, #1
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	2214      	movs	r2, #20
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	2002      	movs	r0, #2
 80014dc:	f7ff fda7 	bl	800102e <SPI_WriteRegisters>

    }
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Kalman_Filter>:
#include <kalman_filter.h>
double Kalman_Filter(kalman_t *KalmanData, double Gyro, double Accel, float dt)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b090      	sub	sp, #64	; 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6178      	str	r0, [r7, #20]
 80014f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80014f4:	ed87 1b00 	vstr	d1, [r7]
 80014f8:	ed87 2a04 	vstr	s4, [r7, #16]
     // Time Update "Predict"
    double rate = Gyro - KalmanData->theta;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f841 	bl	8000588 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800150e:	f7fe fedb 	bl	80002c8 <__aeabi_dsub>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    KalmanData->theta_dot += rate * dt;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f832 	bl	8000588 <__aeabi_f2d>
 8001524:	4604      	mov	r4, r0
 8001526:	460d      	mov	r5, r1
 8001528:	6938      	ldr	r0, [r7, #16]
 800152a:	f7ff f82d 	bl	8000588 <__aeabi_f2d>
 800152e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001532:	f7ff f881 	bl	8000638 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe fec5 	bl	80002cc <__adddf3>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb4d 	bl	8000be8 <__aeabi_d2f>
 800154e:	4602      	mov	r2, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	605a      	str	r2, [r3, #4]

    // Update error covariance matrix P
    KalmanData->P[0][0] += dt * (dt * KalmanData->P[1][1] - KalmanData->P[0][1] - KalmanData->P[1][0] + KalmanData->Q_theta_dot);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	ed93 7a02 	vldr	s14, [r3, #8]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001560:	edd7 7a04 	vldr	s15, [r7, #16]
 8001564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	edd3 7a03 	vldr	s15, [r3, #12]
 800156e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	edd3 7a04 	vldr	s15, [r3, #16]
 8001578:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001582:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001586:	edd7 7a04 	vldr	s15, [r7, #16]
 800158a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	edc3 7a02 	vstr	s15, [r3, #8]
    KalmanData->P[0][1] -= KalmanData->P[1][1] * dt;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	ed93 7a03 	vldr	s14, [r3, #12]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	edd3 6a05 	vldr	s13, [r3, #20]
 80015a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	edc3 7a03 	vstr	s15, [r3, #12]
    KalmanData->P[1][0] -= KalmanData->P[1][1] * dt;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	edd3 6a05 	vldr	s13, [r3, #20]
 80015c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	edc3 7a04 	vstr	s15, [r3, #16]
    KalmanData->P[1][1] += KalmanData->Q_theta * dt;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80015e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	edc3 7a05 	vstr	s15, [r3, #20]

    // Measurement Update "Correct"
    double S = KalmanData->P[0][0] + KalmanData->R; // Innovation (or residual) covariance
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001602:	ee17 0a90 	vmov	r0, s15
 8001606:	f7fe ffbf 	bl	8000588 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    KalmanData->K[0] = KalmanData->P[0][0] / S; // Kalman gain for theta_dot
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ffb6 	bl	8000588 <__aeabi_f2d>
 800161c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001620:	f7ff f934 	bl	800088c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fadc 	bl	8000be8 <__aeabi_d2f>
 8001630:	4602      	mov	r2, r0
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	619a      	str	r2, [r3, #24]
    KalmanData->K[1] = KalmanData->P[1][0] / S; // Kalman gain for theta
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ffa4 	bl	8000588 <__aeabi_f2d>
 8001640:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001644:	f7ff f922 	bl	800088c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff faca 	bl	8000be8 <__aeabi_d2f>
 8001654:	4602      	mov	r2, r0
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	61da      	str	r2, [r3, #28]

    double y = Accel - KalmanData->theta_dot; // Innovation or measurement residual
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff92 	bl	8000588 <__aeabi_f2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800166c:	f7fe fe2c 	bl	80002c8 <__aeabi_dsub>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    KalmanData->theta_dot += KalmanData->K[0] * y;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff83 	bl	8000588 <__aeabi_f2d>
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff7c 	bl	8000588 <__aeabi_f2d>
 8001690:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001694:	f7fe ffd0 	bl	8000638 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7fe fe14 	bl	80002cc <__adddf3>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa9c 	bl	8000be8 <__aeabi_d2f>
 80016b0:	4602      	mov	r2, r0
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	605a      	str	r2, [r3, #4]
    KalmanData->theta += KalmanData->K[1] * y;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff64 	bl	8000588 <__aeabi_f2d>
 80016c0:	4604      	mov	r4, r0
 80016c2:	460d      	mov	r5, r1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff5d 	bl	8000588 <__aeabi_f2d>
 80016ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016d2:	f7fe ffb1 	bl	8000638 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7fe fdf5 	bl	80002cc <__adddf3>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa7d 	bl	8000be8 <__aeabi_d2f>
 80016ee:	4602      	mov	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	601a      	str	r2, [r3, #0]

    // Update the error covariance matrix P
    double P_00 = KalmanData->P[0][0];
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff45 	bl	8000588 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double P_01 = KalmanData->P[0][1];
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff3c 	bl	8000588 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	e9c7 2306 	strd	r2, r3, [r7, #24]
    KalmanData->P[0][0] -= KalmanData->K[0] * P_00;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff33 	bl	8000588 <__aeabi_f2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff2c 	bl	8000588 <__aeabi_f2d>
 8001730:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001734:	f7fe ff80 	bl	8000638 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe fdc2 	bl	80002c8 <__aeabi_dsub>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff fa4c 	bl	8000be8 <__aeabi_d2f>
 8001750:	4602      	mov	r2, r0
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	609a      	str	r2, [r3, #8]
    KalmanData->P[0][1] -= KalmanData->K[0] * P_01;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff14 	bl	8000588 <__aeabi_f2d>
 8001760:	4604      	mov	r4, r0
 8001762:	460d      	mov	r5, r1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe ff0d 	bl	8000588 <__aeabi_f2d>
 800176e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001772:	f7fe ff61 	bl	8000638 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4620      	mov	r0, r4
 800177c:	4629      	mov	r1, r5
 800177e:	f7fe fda3 	bl	80002c8 <__aeabi_dsub>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa2d 	bl	8000be8 <__aeabi_d2f>
 800178e:	4602      	mov	r2, r0
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	60da      	str	r2, [r3, #12]
    KalmanData->P[1][0] -= KalmanData->K[1] * P_00;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fef5 	bl	8000588 <__aeabi_f2d>
 800179e:	4604      	mov	r4, r0
 80017a0:	460d      	mov	r5, r1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe feee 	bl	8000588 <__aeabi_f2d>
 80017ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b0:	f7fe ff42 	bl	8000638 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7fe fd84 	bl	80002c8 <__aeabi_dsub>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff fa0e 	bl	8000be8 <__aeabi_d2f>
 80017cc:	4602      	mov	r2, r0
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	611a      	str	r2, [r3, #16]
    KalmanData->P[1][1] -= KalmanData->K[1] * P_01;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fed6 	bl	8000588 <__aeabi_f2d>
 80017dc:	4604      	mov	r4, r0
 80017de:	460d      	mov	r5, r1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fecf 	bl	8000588 <__aeabi_f2d>
 80017ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ee:	f7fe ff23 	bl	8000638 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe fd65 	bl	80002c8 <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f9ef 	bl	8000be8 <__aeabi_d2f>
 800180a:	4602      	mov	r2, r0
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	615a      	str	r2, [r3, #20]

    return KalmanData->theta_dot;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe feb7 	bl	8000588 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b17 	vmov	d7, r2, r3
 8001822:	eeb0 0a47 	vmov.f32	s0, s14
 8001826:	eef0 0a67 	vmov.f32	s1, s15
 800182a:	3740      	adds	r7, #64	; 0x40
 800182c:	46bd      	mov	sp, r7
 800182e:	bdb0      	pop	{r4, r5, r7, pc}

08001830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001834:	f000 fdec 	bl	8002410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001838:	f000 f898 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183c:	f000 fac0 	bl	8001dc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001840:	f000 f95a 	bl	8001af8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001844:	f000 f98e 	bl	8001b64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001848:	f000 fa22 	bl	8001c90 <MX_TIM4_Init>
  MX_ADC1_Init();
 800184c:	f000 f902 	bl	8001a54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  
  ICM20948_Init(&hspi1);
 8001850:	483b      	ldr	r0, [pc, #236]	; (8001940 <main+0x110>)
 8001852:	f7ff fdb7 	bl	80013c4 <ICM20948_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  T0 = HAL_GetTick();
 8001856:	f000 fe41 	bl	80024dc <HAL_GetTick>
 800185a:	4603      	mov	r3, r0
 800185c:	4a39      	ldr	r2, [pc, #228]	; (8001944 <main+0x114>)
 800185e:	6013      	str	r3, [r2, #0]
  while (1)
  {
  T1 = HAL_GetTick();
 8001860:	f000 fe3c 	bl	80024dc <HAL_GetTick>
 8001864:	4603      	mov	r3, r0
 8001866:	4a38      	ldr	r2, [pc, #224]	; (8001948 <main+0x118>)
 8001868:	6013      	str	r3, [r2, #0]
  dt =(float)(T1 - T0)/1000.0f;
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <main+0x118>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <main+0x114>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187c:	eddf 6a33 	vldr	s13, [pc, #204]	; 800194c <main+0x11c>
 8001880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <main+0x120>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  ICM20948_Read(&hspi1, &data);
 800188a:	4932      	ldr	r1, [pc, #200]	; (8001954 <main+0x124>)
 800188c:	482c      	ldr	r0, [pc, #176]	; (8001940 <main+0x110>)
 800188e:	f7ff fc2f 	bl	80010f0 <ICM20948_Read>
 // Capture Roll and Pitch angle
  MotionCapture[0] = data.Roll;
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <main+0x124>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a30      	ldr	r2, [pc, #192]	; (8001958 <main+0x128>)
 8001898:	6013      	str	r3, [r2, #0]
  MotionCapture[1] = data.Pitch;
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <main+0x124>)
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <main+0x128>)
 80018a0:	6053      	str	r3, [r2, #4]

//
 // Apply Kalman filter for both angle
  Filter_Data[0] = Kalman_Filter(&Kalman, data.Gx, data.Roll, dt);
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <main+0x124>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe6e 	bl	8000588 <__aeabi_f2d>
 80018ac:	4604      	mov	r4, r0
 80018ae:	460d      	mov	r5, r1
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <main+0x124>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe67 	bl	8000588 <__aeabi_f2d>
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <main+0x120>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	eeb0 2a67 	vmov.f32	s4, s15
 80018c4:	ec41 0b11 	vmov	d1, r0, r1
 80018c8:	ec45 4b10 	vmov	d0, r4, r5
 80018cc:	4823      	ldr	r0, [pc, #140]	; (800195c <main+0x12c>)
 80018ce:	f7ff fe0b 	bl	80014e8 <Kalman_Filter>
 80018d2:	ec53 2b10 	vmov	r2, r3, d0
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f985 	bl	8000be8 <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <main+0x130>)
 80018e2:	6013      	str	r3, [r2, #0]
  Filter_Data[1] = Kalman_Filter(&Kalman, data.Gy, data.Pitch, dt);
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <main+0x124>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fe4d 	bl	8000588 <__aeabi_f2d>
 80018ee:	4604      	mov	r4, r0
 80018f0:	460d      	mov	r5, r1
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <main+0x124>)
 80018f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe46 	bl	8000588 <__aeabi_f2d>
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <main+0x120>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eeb0 2a67 	vmov.f32	s4, s15
 8001906:	ec41 0b11 	vmov	d1, r0, r1
 800190a:	ec45 4b10 	vmov	d0, r4, r5
 800190e:	4813      	ldr	r0, [pc, #76]	; (800195c <main+0x12c>)
 8001910:	f7ff fdea 	bl	80014e8 <Kalman_Filter>
 8001914:	ec53 2b10 	vmov	r2, r3, d0
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f964 	bl	8000be8 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <main+0x130>)
 8001924:	6053      	str	r3, [r2, #4]
  Roll = Filter_Data[0];
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <main+0x130>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <main+0x134>)
 800192c:	6013      	str	r3, [r2, #0]
  Pitch = Filter_Data[1];
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <main+0x130>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <main+0x138>)
 8001934:	6013      	str	r3, [r2, #0]
	// 		HAL_Delay(10);
	// 		if(i == 180) i = 0;
	// 	}
  // NRF24_Transmit(&hspi1, &Tx_Data);
  // HAL_Delay(1000);
  T0 = T1;
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <main+0x118>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a02      	ldr	r2, [pc, #8]	; (8001944 <main+0x114>)
 800193c:	6013      	str	r3, [r2, #0]
  T1 = HAL_GetTick();
 800193e:	e78f      	b.n	8001860 <main+0x30>
 8001940:	20000274 	.word	0x20000274
 8001944:	200003bc 	.word	0x200003bc
 8001948:	200003c0 	.word	0x200003c0
 800194c:	447a0000 	.word	0x447a0000
 8001950:	200003b8 	.word	0x200003b8
 8001954:	2000035c 	.word	0x2000035c
 8001958:	20000398 	.word	0x20000398
 800195c:	20000000 	.word	0x20000000
 8001960:	200003a4 	.word	0x200003a4
 8001964:	200003b0 	.word	0x200003b0
 8001968:	200003b4 	.word	0x200003b4

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b094      	sub	sp, #80	; 0x50
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	2234      	movs	r2, #52	; 0x34
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f004 f9cd 	bl	8005d1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <SystemClock_Config+0xe0>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <SystemClock_Config+0xe0>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <SystemClock_Config+0xe0>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <SystemClock_Config+0xe4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <SystemClock_Config+0xe4>)
 80019b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <SystemClock_Config+0xe4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d2:	2302      	movs	r3, #2
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019dc:	2308      	movs	r3, #8
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80019e0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80019e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019ea:	2307      	movs	r3, #7
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019ee:	2302      	movs	r3, #2
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fe0c 	bl	8003614 <HAL_RCC_OscConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a02:	f000 fa83 	bl	8001f0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a06:	f001 fa9f 	bl	8002f48 <HAL_PWREx_EnableOverDrive>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001a10:	f000 fa7c 	bl	8001f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	2105      	movs	r1, #5
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fad8 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001a3e:	f000 fa65 	bl	8001f0c <Error_Handler>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3750      	adds	r7, #80	; 0x50
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <MX_ADC1_Init+0x9c>)
 8001a6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <MX_ADC1_Init+0xa0>)
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_ADC1_Init+0x98>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_ADC1_Init+0x98>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_ADC1_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_ADC1_Init+0x98>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <MX_ADC1_Init+0x98>)
 8001ab6:	f000 fd41 	bl	800253c <HAL_ADC_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ac0:	f000 fa24 	bl	8001f0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_ADC1_Init+0x98>)
 8001ad6:	f000 fd75 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ae0:	f000 fa14 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000022c 	.word	0x2000022c
 8001af0:	40012000 	.word	0x40012000
 8001af4:	0f000001 	.word	0x0f000001

08001af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <MX_SPI1_Init+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b2c:	2218      	movs	r2, #24
 8001b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b44:	220a      	movs	r2, #10
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b4a:	f002 f801 	bl	8003b50 <HAL_SPI_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b54:	f000 f9da 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000274 	.word	0x20000274
 8001b60:	40013000 	.word	0x40013000

08001b64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b94:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001b96:	4a3d      	ldr	r2, [pc, #244]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001b98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001b9c:	2259      	movs	r2, #89	; 0x59
 8001b9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001ba8:	2263      	movs	r2, #99	; 0x63
 8001baa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bb8:	4833      	ldr	r0, [pc, #204]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001bba:	f002 fd9f 	bl	80046fc <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001bc4:	f000 f9a2 	bl	8001f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	482c      	ldr	r0, [pc, #176]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001bd6:	f002 fefb 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001be0:	f000 f994 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001be4:	4828      	ldr	r0, [pc, #160]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001be6:	f002 fdd8 	bl	800479a <HAL_TIM_PWM_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001bf0:	f000 f98c 	bl	8001f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bfc:	f107 0320 	add.w	r3, r7, #32
 8001c00:	4619      	mov	r1, r3
 8001c02:	4821      	ldr	r0, [pc, #132]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001c04:	f003 faa2 	bl	800514c <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001c0e:	f000 f97d 	bl	8001f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c12:	2360      	movs	r3, #96	; 0x60
 8001c14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4817      	ldr	r0, [pc, #92]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001c2a:	f002 fe0f 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001c34:	f000 f96a 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4812      	ldr	r0, [pc, #72]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001c40:	f002 fe04 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001c4a:	f000 f95f 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2208      	movs	r2, #8
 8001c52:	4619      	mov	r1, r3
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001c56:	f002 fdf9 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001c60:	f000 f954 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	220c      	movs	r2, #12
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4807      	ldr	r0, [pc, #28]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001c6c:	f002 fdee 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001c76:	f000 f949 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <MX_TIM3_Init+0x124>)
 8001c7c:	f000 fa38 	bl	80020f0 <HAL_TIM_MspPostInit>

}
 8001c80:	bf00      	nop
 8001c82:	3738      	adds	r7, #56	; 0x38
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200002cc 	.word	0x200002cc
 8001c8c:	40000400 	.word	0x40000400

08001c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08e      	sub	sp, #56	; 0x38
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	615a      	str	r2, [r3, #20]
 8001cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001cc2:	4a3e      	ldr	r2, [pc, #248]	; (8001dbc <MX_TIM4_Init+0x12c>)
 8001cc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 8001cc6:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001cc8:	f242 3227 	movw	r2, #8999	; 0x2327
 8001ccc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001cd6:	22c7      	movs	r2, #199	; 0xc7
 8001cd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ce6:	4834      	ldr	r0, [pc, #208]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001ce8:	f002 fd08 	bl	80046fc <HAL_TIM_Base_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001cf2:	f000 f90b 	bl	8001f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d00:	4619      	mov	r1, r3
 8001d02:	482d      	ldr	r0, [pc, #180]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001d04:	f002 fe64 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d0e:	f000 f8fd 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d12:	4829      	ldr	r0, [pc, #164]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001d14:	f002 fd41 	bl	800479a <HAL_TIM_PWM_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d1e:	f000 f8f5 	bl	8001f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d2a:	f107 0320 	add.w	r3, r7, #32
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4821      	ldr	r0, [pc, #132]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001d32:	f003 fa0b 	bl	800514c <HAL_TIMEx_MasterConfigSynchronization>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d3c:	f000 f8e6 	bl	8001f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d40:	2360      	movs	r3, #96	; 0x60
 8001d42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	4818      	ldr	r0, [pc, #96]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001d58:	f002 fd78 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001d62:	f000 f8d3 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2204      	movs	r2, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001d6e:	f002 fd6d 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001d78:	f000 f8c8 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2208      	movs	r2, #8
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001d84:	f002 fd62 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001d8e:	f000 f8bd 	bl	8001f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	220c      	movs	r2, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001d9a:	f002 fd57 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001da4:	f000 f8b2 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <MX_TIM4_Init+0x128>)
 8001daa:	f000 f9a1 	bl	80020f0 <HAL_TIM_MspPostInit>

}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	; 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000314 	.word	0x20000314
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b48      	ldr	r3, [pc, #288]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a47      	ldr	r2, [pc, #284]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b45      	ldr	r3, [pc, #276]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a40      	ldr	r2, [pc, #256]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b37      	ldr	r3, [pc, #220]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b33      	ldr	r3, [pc, #204]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a32      	ldr	r2, [pc, #200]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <MX_GPIO_Init+0x13c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CE_Pin|NRF24_CS_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2118      	movs	r1, #24
 8001e4a:	482d      	ldr	r0, [pc, #180]	; (8001f00 <MX_GPIO_Init+0x140>)
 8001e4c:	f001 f862 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2120      	movs	r1, #32
 8001e54:	482b      	ldr	r0, [pc, #172]	; (8001f04 <MX_GPIO_Init+0x144>)
 8001e56:	f001 f85d 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	482a      	ldr	r0, [pc, #168]	; (8001f08 <MX_GPIO_Init+0x148>)
 8001e60:	f001 f858 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e64:	2301      	movs	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e74:	230a      	movs	r3, #10
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4821      	ldr	r0, [pc, #132]	; (8001f04 <MX_GPIO_Init+0x144>)
 8001e80:	f000 feb4 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_CE_Pin NRF24_CS_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CS_Pin;
 8001e84:	2318      	movs	r3, #24
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4819      	ldr	r0, [pc, #100]	; (8001f00 <MX_GPIO_Init+0x140>)
 8001e9c:	f000 fea6 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_INT_Pin */
  GPIO_InitStruct.Pin = NRF24_INT_Pin;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_INT_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4813      	ldr	r0, [pc, #76]	; (8001f04 <MX_GPIO_Init+0x144>)
 8001eb6:	f000 fe99 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MX_GPIO_Init+0x144>)
 8001ed2:	f000 fe8b 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <MX_GPIO_Init+0x148>)
 8001eee:	f000 fe7d 	bl	8002bec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020400 	.word	0x40020400

08001f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f10:	b672      	cpsid	i
}
 8001f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <Error_Handler+0x8>
	...

08001f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f56:	2007      	movs	r0, #7
 8001f58:	f000 fe14 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_ADC_MspInit+0x7c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d127      	bne.n	8001fda <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_ADC_MspInit+0x80>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <HAL_ADC_MspInit+0x80>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_ADC_MspInit+0x80>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_ADC_MspInit+0x80>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_ADC_MspInit+0x80>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_ADC_MspInit+0x80>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_ADC_MspInit+0x84>)
 8001fd6:	f000 fe09 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40012000 	.word	0x40012000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020800 	.word	0x40020800

08001ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_SPI_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_SPI_MspInit+0x88>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_SPI_MspInit+0x88>)
 800201c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_SPI_MspInit+0x88>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_SPI_MspInit+0x88>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_SPI_MspInit+0x88>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_SPI_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800204a:	23e0      	movs	r3, #224	; 0xe0
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800205a:	2305      	movs	r3, #5
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_SPI_MspInit+0x8c>)
 8002066:	f000 fdc1 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40013000 	.word	0x40013000
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000

08002080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_TIM_Base_MspInit+0x64>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ae:	e012      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_TIM_Base_MspInit+0x6c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10d      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40000800 	.word	0x40000800

080020f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a25      	ldr	r2, [pc, #148]	; (80021a4 <HAL_TIM_MspPostInit+0xb4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d11f      	bne.n	8002152 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_TIM_MspPostInit+0xb8>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <HAL_TIM_MspPostInit+0xb8>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_TIM_MspPostInit+0xb8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800212e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002140:	2302      	movs	r3, #2
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4619      	mov	r1, r3
 800214a:	4818      	ldr	r0, [pc, #96]	; (80021ac <HAL_TIM_MspPostInit+0xbc>)
 800214c:	f000 fd4e 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002150:	e023      	b.n	800219a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_TIM_MspPostInit+0xc0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d11e      	bne.n	800219a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_TIM_MspPostInit+0xb8>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_TIM_MspPostInit+0xb8>)
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_TIM_MspPostInit+0xb8>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002178:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800218a:	2302      	movs	r3, #2
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <HAL_TIM_MspPostInit+0xc4>)
 8002196:	f000 fd29 	bl	8002bec <HAL_GPIO_Init>
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40020400 	.word	0x40020400

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021bc:	e7fe      	b.n	80021bc <NMI_Handler+0x4>

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002204:	f000 f956 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return 1;
 8002210:	2301      	movs	r3, #1
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_kill>:

int _kill(int pid, int sig)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002226:	f003 fdcb 	bl	8005dc0 <__errno>
 800222a:	4603      	mov	r3, r0
 800222c:	2216      	movs	r2, #22
 800222e:	601a      	str	r2, [r3, #0]
  return -1;
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_exit>:

void _exit (int status)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ffe7 	bl	800221c <_kill>
  while (1) {}    /* Make sure we hang here */
 800224e:	e7fe      	b.n	800224e <_exit+0x12>

08002250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	e00a      	b.n	8002278 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002262:	f3af 8000 	nop.w
 8002266:	4601      	mov	r1, r0
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	60ba      	str	r2, [r7, #8]
 800226e:	b2ca      	uxtb	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	dbf0      	blt.n	8002262 <_read+0x12>
  }

  return len;
 8002280:	687b      	ldr	r3, [r7, #4]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e009      	b.n	80022b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60ba      	str	r2, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3301      	adds	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbf1      	blt.n	800229c <_write+0x12>
  }
  return len;
 80022b8:	687b      	ldr	r3, [r7, #4]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_close>:

int _close(int file)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ea:	605a      	str	r2, [r3, #4]
  return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_isatty>:

int _isatty(int file)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <_sbrk+0x5c>)
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <_sbrk+0x60>)
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <_sbrk+0x64>)
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <_sbrk+0x68>)
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	429a      	cmp	r2, r3
 800235a:	d207      	bcs.n	800236c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800235c:	f003 fd30 	bl	8005dc0 <__errno>
 8002360:	4603      	mov	r3, r0
 8002362:	220c      	movs	r2, #12
 8002364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	e009      	b.n	8002380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <_sbrk+0x64>)
 800237c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20020000 	.word	0x20020000
 800238c:	00000400 	.word	0x00000400
 8002390:	200003c4 	.word	0x200003c4
 8002394:	20000518 	.word	0x20000518

08002398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <SystemInit+0x20>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <SystemInit+0x20>)
 80023a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023c0:	f7ff ffea 	bl	8002398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023c6:	490d      	ldr	r1, [pc, #52]	; (80023fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023dc:	4c0a      	ldr	r4, [pc, #40]	; (8002408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023ea:	f003 fcef 	bl	8005dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ee:	f7ff fa1f 	bl	8001830 <main>
  bx  lr    
 80023f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002400:	080086d8 	.word	0x080086d8
  ldr r2, =_sbss
 8002404:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002408:	20000518 	.word	0x20000518

0800240c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC_IRQHandler>
	...

08002410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_Init+0x40>)
 800241a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_Init+0x40>)
 8002426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_Init+0x40>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 fba3 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f000 f808 	bl	8002454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fd68 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00

08002454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x54>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x58>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fbad 	bl	8002bd2 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 fb83 	bl	8002b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_InitTick+0x5c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2000002c 	.word	0x2000002c
 80024ac:	20000034 	.word	0x20000034
 80024b0:	20000030 	.word	0x20000030

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000034 	.word	0x20000034
 80024d8:	200003c8 	.word	0x200003c8

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200003c8 	.word	0x200003c8

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000034 	.word	0x20000034

0800253c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e033      	b.n	80025ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fd04 	bl	8001f68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d118      	bne.n	80025ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002582:	f023 0302 	bic.w	r3, r3, #2
 8002586:	f043 0202 	orr.w	r2, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f94a 	bl	8002828 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f023 0303 	bic.w	r3, r3, #3
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
 80025aa:	e001      	b.n	80025b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1c>
 80025dc:	2302      	movs	r3, #2
 80025de:	e113      	b.n	8002808 <HAL_ADC_ConfigChannel+0x244>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d925      	bls.n	800263c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68d9      	ldr	r1, [r3, #12]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	3b1e      	subs	r3, #30
 8002606:	2207      	movs	r2, #7
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43da      	mvns	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	400a      	ands	r2, r1
 8002614:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68d9      	ldr	r1, [r3, #12]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	4618      	mov	r0, r3
 8002628:	4603      	mov	r3, r0
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4403      	add	r3, r0
 800262e:	3b1e      	subs	r3, #30
 8002630:	409a      	lsls	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	e022      	b.n	8002682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6919      	ldr	r1, [r3, #16]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	2207      	movs	r2, #7
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	400a      	ands	r2, r1
 800265e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6919      	ldr	r1, [r3, #16]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	4603      	mov	r3, r0
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4403      	add	r3, r0
 8002678:	409a      	lsls	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b06      	cmp	r3, #6
 8002688:	d824      	bhi.n	80026d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3b05      	subs	r3, #5
 800269c:	221f      	movs	r2, #31
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	400a      	ands	r2, r1
 80026aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	3b05      	subs	r3, #5
 80026c6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
 80026d2:	e04c      	b.n	800276e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d824      	bhi.n	8002726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	3b23      	subs	r3, #35	; 0x23
 80026ee:	221f      	movs	r2, #31
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43da      	mvns	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	400a      	ands	r2, r1
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	4618      	mov	r0, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	3b23      	subs	r3, #35	; 0x23
 8002718:	fa00 f203 	lsl.w	r2, r0, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
 8002724:	e023      	b.n	800276e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3b41      	subs	r3, #65	; 0x41
 8002738:	221f      	movs	r2, #31
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	400a      	ands	r2, r1
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	3b41      	subs	r3, #65	; 0x41
 8002762:	fa00 f203 	lsl.w	r2, r0, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800276e:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_ADC_ConfigChannel+0x250>)
 8002770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_ADC_ConfigChannel+0x254>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d10f      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1d8>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b12      	cmp	r3, #18
 8002782:	d10b      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_ADC_ConfigChannel+0x254>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12b      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x23a>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_ADC_ConfigChannel+0x258>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <HAL_ADC_ConfigChannel+0x1f4>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b11      	cmp	r3, #17
 80027b6:	d122      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_ADC_ConfigChannel+0x258>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d111      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_ADC_ConfigChannel+0x25c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_ADC_ConfigChannel+0x260>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	0c9a      	lsrs	r2, r3, #18
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027f0:	e002      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f9      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40012300 	.word	0x40012300
 8002818:	40012000 	.word	0x40012000
 800281c:	10000012 	.word	0x10000012
 8002820:	2000002c 	.word	0x2000002c
 8002824:	431bde83 	.word	0x431bde83

08002828 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002830:	4b79      	ldr	r3, [pc, #484]	; (8002a18 <ADC_Init+0x1f0>)
 8002832:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800285c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	021a      	lsls	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	4a58      	ldr	r2, [pc, #352]	; (8002a1c <ADC_Init+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	e00f      	b.n	8002926 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002924:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0202 	bic.w	r2, r2, #2
 8002934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6899      	ldr	r1, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e1b      	ldrb	r3, [r3, #24]
 8002940:	005a      	lsls	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002962:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002972:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	3b01      	subs	r3, #1
 8002980:	035a      	lsls	r2, r3, #13
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e007      	b.n	800299c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	051a      	lsls	r2, r3, #20
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029de:	025a      	lsls	r2, r3, #9
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	029a      	lsls	r2, r3, #10
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	0f000001 	.word	0x0f000001

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff47 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bac:	f7ff ff5c 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff ff8e 	bl	8002ad8 <NVIC_EncodePriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5d 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ffb0 	bl	8002b40 <SysTick_Config>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	e165      	b.n	8002ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	f040 8154 	bne.w	8002ece <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d005      	beq.n	8002c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d130      	bne.n	8002ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	2203      	movs	r2, #3
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c74:	2201      	movs	r2, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0201 	and.w	r2, r3, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d017      	beq.n	8002cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d123      	bne.n	8002d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	08da      	lsrs	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3208      	adds	r2, #8
 8002cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	220f      	movs	r2, #15
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	08da      	lsrs	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3208      	adds	r2, #8
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0203 	and.w	r2, r3, #3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80ae 	beq.w	8002ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_GPIO_Init+0x300>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a5c      	ldr	r2, [pc, #368]	; (8002eec <HAL_GPIO_Init+0x300>)
 8002d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b5a      	ldr	r3, [pc, #360]	; (8002eec <HAL_GPIO_Init+0x300>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d8e:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_GPIO_Init+0x304>)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	3302      	adds	r3, #2
 8002d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	220f      	movs	r2, #15
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4f      	ldr	r2, [pc, #316]	; (8002ef4 <HAL_GPIO_Init+0x308>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d025      	beq.n	8002e06 <HAL_GPIO_Init+0x21a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4e      	ldr	r2, [pc, #312]	; (8002ef8 <HAL_GPIO_Init+0x30c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01f      	beq.n	8002e02 <HAL_GPIO_Init+0x216>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4d      	ldr	r2, [pc, #308]	; (8002efc <HAL_GPIO_Init+0x310>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_GPIO_Init+0x212>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4c      	ldr	r2, [pc, #304]	; (8002f00 <HAL_GPIO_Init+0x314>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4b      	ldr	r2, [pc, #300]	; (8002f04 <HAL_GPIO_Init+0x318>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x20a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4a      	ldr	r2, [pc, #296]	; (8002f08 <HAL_GPIO_Init+0x31c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x206>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a49      	ldr	r2, [pc, #292]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x202>
 8002dea:	2306      	movs	r3, #6
 8002dec:	e00c      	b.n	8002e08 <HAL_GPIO_Init+0x21c>
 8002dee:	2307      	movs	r3, #7
 8002df0:	e00a      	b.n	8002e08 <HAL_GPIO_Init+0x21c>
 8002df2:	2305      	movs	r3, #5
 8002df4:	e008      	b.n	8002e08 <HAL_GPIO_Init+0x21c>
 8002df6:	2304      	movs	r3, #4
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x21c>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e004      	b.n	8002e08 <HAL_GPIO_Init+0x21c>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_Init+0x21c>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x21c>
 8002e06:	2300      	movs	r3, #0
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f002 0203 	and.w	r2, r2, #3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4093      	lsls	r3, r2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e18:	4935      	ldr	r1, [pc, #212]	; (8002ef0 <HAL_GPIO_Init+0x304>)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e26:	4b3a      	ldr	r3, [pc, #232]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4a:	4a31      	ldr	r2, [pc, #196]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e7a:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	f67f ae96 	bls.w	8002c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40021400 	.word	0x40021400
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40013c00 	.word	0x40013c00

08002f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f30:	e003      	b.n	8002f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	041a      	lsls	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	619a      	str	r2, [r3, #24]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_PWREx_EnableOverDrive+0x94>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f74:	f7ff fab2 	bl	80024dc <HAL_GetTick>
 8002f78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f7a:	e009      	b.n	8002f90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f7c:	f7ff faae 	bl	80024dc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f8a:	d901      	bls.n	8002f90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e01f      	b.n	8002fd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d1ee      	bne.n	8002f7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa4:	f7ff fa9a 	bl	80024dc <HAL_GetTick>
 8002fa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002faa:	e009      	b.n	8002fc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fac:	f7ff fa96 	bl	80024dc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fba:	d901      	bls.n	8002fc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e007      	b.n	8002fd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fcc:	d1ee      	bne.n	8002fac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	420e0040 	.word	0x420e0040
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	420e0044 	.word	0x420e0044

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d90c      	bls.n	8003024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e067      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4934      	ldr	r1, [pc, #208]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7ff fa00 	bl	80024dc <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7ff f9fc 	bl	80024dc <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f960 	bl	8002454 <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
 80031a8:	080082d0 	.word	0x080082d0
 80031ac:	2000002c 	.word	0x2000002c
 80031b0:	20000030 	.word	0x20000030

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b0ae      	sub	sp, #184	; 0xb8
 80031ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031da:	4bcb      	ldr	r3, [pc, #812]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	f200 8206 	bhi.w	80035f4 <HAL_RCC_GetSysClockFreq+0x440>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003225 	.word	0x08003225
 80031f4:	080035f5 	.word	0x080035f5
 80031f8:	080035f5 	.word	0x080035f5
 80031fc:	080035f5 	.word	0x080035f5
 8003200:	0800322d 	.word	0x0800322d
 8003204:	080035f5 	.word	0x080035f5
 8003208:	080035f5 	.word	0x080035f5
 800320c:	080035f5 	.word	0x080035f5
 8003210:	08003235 	.word	0x08003235
 8003214:	080035f5 	.word	0x080035f5
 8003218:	080035f5 	.word	0x080035f5
 800321c:	080035f5 	.word	0x080035f5
 8003220:	08003425 	.word	0x08003425
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4bb9      	ldr	r3, [pc, #740]	; (800350c <HAL_RCC_GetSysClockFreq+0x358>)
 8003226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800322a:	e1e7      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322c:	4bb8      	ldr	r3, [pc, #736]	; (8003510 <HAL_RCC_GetSysClockFreq+0x35c>)
 800322e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003232:	e1e3      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003234:	4bb4      	ldr	r3, [pc, #720]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800323c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003240:	4bb1      	ldr	r3, [pc, #708]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d071      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324c:	4bae      	ldr	r3, [pc, #696]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003258:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800325c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800326e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003284:	0150      	lsls	r0, r2, #5
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4621      	mov	r1, r4
 800328c:	1a51      	subs	r1, r2, r1
 800328e:	6439      	str	r1, [r7, #64]	; 0x40
 8003290:	4629      	mov	r1, r5
 8003292:	eb63 0301 	sbc.w	r3, r3, r1
 8003296:	647b      	str	r3, [r7, #68]	; 0x44
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80032a4:	4649      	mov	r1, r9
 80032a6:	018b      	lsls	r3, r1, #6
 80032a8:	4641      	mov	r1, r8
 80032aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ae:	4641      	mov	r1, r8
 80032b0:	018a      	lsls	r2, r1, #6
 80032b2:	4641      	mov	r1, r8
 80032b4:	1a51      	subs	r1, r2, r1
 80032b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80032b8:	4649      	mov	r1, r9
 80032ba:	eb63 0301 	sbc.w	r3, r3, r1
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80032cc:	4649      	mov	r1, r9
 80032ce:	00cb      	lsls	r3, r1, #3
 80032d0:	4641      	mov	r1, r8
 80032d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032d6:	4641      	mov	r1, r8
 80032d8:	00ca      	lsls	r2, r1, #3
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	4622      	mov	r2, r4
 80032e2:	189b      	adds	r3, r3, r2
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
 80032e6:	462b      	mov	r3, r5
 80032e8:	460a      	mov	r2, r1
 80032ea:	eb42 0303 	adc.w	r3, r2, r3
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032fc:	4629      	mov	r1, r5
 80032fe:	024b      	lsls	r3, r1, #9
 8003300:	4621      	mov	r1, r4
 8003302:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003306:	4621      	mov	r1, r4
 8003308:	024a      	lsls	r2, r1, #9
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800331c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003320:	f7fd fcb2 	bl	8000c88 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800332e:	e067      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003330:	4b75      	ldr	r3, [pc, #468]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800333c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003348:	67bb      	str	r3, [r7, #120]	; 0x78
 800334a:	2300      	movs	r3, #0
 800334c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800334e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003352:	4622      	mov	r2, r4
 8003354:	462b      	mov	r3, r5
 8003356:	f04f 0000 	mov.w	r0, #0
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	0159      	lsls	r1, r3, #5
 8003360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003364:	0150      	lsls	r0, r2, #5
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4621      	mov	r1, r4
 800336c:	1a51      	subs	r1, r2, r1
 800336e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003370:	4629      	mov	r1, r5
 8003372:	eb63 0301 	sbc.w	r3, r3, r1
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003384:	4649      	mov	r1, r9
 8003386:	018b      	lsls	r3, r1, #6
 8003388:	4641      	mov	r1, r8
 800338a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800338e:	4641      	mov	r1, r8
 8003390:	018a      	lsls	r2, r1, #6
 8003392:	4641      	mov	r1, r8
 8003394:	ebb2 0a01 	subs.w	sl, r2, r1
 8003398:	4649      	mov	r1, r9
 800339a:	eb63 0b01 	sbc.w	fp, r3, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b2:	4692      	mov	sl, r2
 80033b4:	469b      	mov	fp, r3
 80033b6:	4623      	mov	r3, r4
 80033b8:	eb1a 0303 	adds.w	r3, sl, r3
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	462b      	mov	r3, r5
 80033c0:	eb4b 0303 	adc.w	r3, fp, r3
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033d2:	4629      	mov	r1, r5
 80033d4:	028b      	lsls	r3, r1, #10
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033dc:	4621      	mov	r1, r4
 80033de:	028a      	lsls	r2, r1, #10
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033e8:	2200      	movs	r2, #0
 80033ea:	673b      	str	r3, [r7, #112]	; 0x70
 80033ec:	677a      	str	r2, [r7, #116]	; 0x74
 80033ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033f2:	f7fd fc49 	bl	8000c88 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4613      	mov	r3, r2
 80033fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003400:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	3301      	adds	r3, #1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003422:	e0eb      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003424:	4b38      	ldr	r3, [pc, #224]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800342c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003430:	4b35      	ldr	r3, [pc, #212]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d06b      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343c:	4b32      	ldr	r3, [pc, #200]	; (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	2200      	movs	r2, #0
 8003444:	66bb      	str	r3, [r7, #104]	; 0x68
 8003446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344e:	663b      	str	r3, [r7, #96]	; 0x60
 8003450:	2300      	movs	r3, #0
 8003452:	667b      	str	r3, [r7, #100]	; 0x64
 8003454:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003458:	4622      	mov	r2, r4
 800345a:	462b      	mov	r3, r5
 800345c:	f04f 0000 	mov.w	r0, #0
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	0159      	lsls	r1, r3, #5
 8003466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346a:	0150      	lsls	r0, r2, #5
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4621      	mov	r1, r4
 8003472:	1a51      	subs	r1, r2, r1
 8003474:	61b9      	str	r1, [r7, #24]
 8003476:	4629      	mov	r1, r5
 8003478:	eb63 0301 	sbc.w	r3, r3, r1
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800348a:	4659      	mov	r1, fp
 800348c:	018b      	lsls	r3, r1, #6
 800348e:	4651      	mov	r1, sl
 8003490:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003494:	4651      	mov	r1, sl
 8003496:	018a      	lsls	r2, r1, #6
 8003498:	4651      	mov	r1, sl
 800349a:	ebb2 0801 	subs.w	r8, r2, r1
 800349e:	4659      	mov	r1, fp
 80034a0:	eb63 0901 	sbc.w	r9, r3, r1
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b8:	4690      	mov	r8, r2
 80034ba:	4699      	mov	r9, r3
 80034bc:	4623      	mov	r3, r4
 80034be:	eb18 0303 	adds.w	r3, r8, r3
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	462b      	mov	r3, r5
 80034c6:	eb49 0303 	adc.w	r3, r9, r3
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034d8:	4629      	mov	r1, r5
 80034da:	024b      	lsls	r3, r1, #9
 80034dc:	4621      	mov	r1, r4
 80034de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e2:	4621      	mov	r1, r4
 80034e4:	024a      	lsls	r2, r1, #9
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ee:	2200      	movs	r2, #0
 80034f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80034f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80034f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034f8:	f7fd fbc6 	bl	8000c88 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4613      	mov	r3, r2
 8003502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003506:	e065      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x420>
 8003508:	40023800 	.word	0x40023800
 800350c:	00f42400 	.word	0x00f42400
 8003510:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003514:	4b3d      	ldr	r3, [pc, #244]	; (800360c <HAL_RCC_GetSysClockFreq+0x458>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	2200      	movs	r2, #0
 800351c:	4618      	mov	r0, r3
 800351e:	4611      	mov	r1, r2
 8003520:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003524:	653b      	str	r3, [r7, #80]	; 0x50
 8003526:	2300      	movs	r3, #0
 8003528:	657b      	str	r3, [r7, #84]	; 0x54
 800352a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800352e:	4642      	mov	r2, r8
 8003530:	464b      	mov	r3, r9
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f04f 0100 	mov.w	r1, #0
 800353a:	0159      	lsls	r1, r3, #5
 800353c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003540:	0150      	lsls	r0, r2, #5
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4641      	mov	r1, r8
 8003548:	1a51      	subs	r1, r2, r1
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	4649      	mov	r1, r9
 800354e:	eb63 0301 	sbc.w	r3, r3, r1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003560:	4659      	mov	r1, fp
 8003562:	018b      	lsls	r3, r1, #6
 8003564:	4651      	mov	r1, sl
 8003566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356a:	4651      	mov	r1, sl
 800356c:	018a      	lsls	r2, r1, #6
 800356e:	4651      	mov	r1, sl
 8003570:	1a54      	subs	r4, r2, r1
 8003572:	4659      	mov	r1, fp
 8003574:	eb63 0501 	sbc.w	r5, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	00eb      	lsls	r3, r5, #3
 8003582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003586:	00e2      	lsls	r2, r4, #3
 8003588:	4614      	mov	r4, r2
 800358a:	461d      	mov	r5, r3
 800358c:	4643      	mov	r3, r8
 800358e:	18e3      	adds	r3, r4, r3
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	464b      	mov	r3, r9
 8003594:	eb45 0303 	adc.w	r3, r5, r3
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a6:	4629      	mov	r1, r5
 80035a8:	028b      	lsls	r3, r1, #10
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b0:	4621      	mov	r1, r4
 80035b2:	028a      	lsls	r2, r1, #10
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035bc:	2200      	movs	r2, #0
 80035be:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035c6:	f7fd fb5f 	bl	8000c88 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4613      	mov	r3, r2
 80035d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035d4:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_RCC_GetSysClockFreq+0x458>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	0f1b      	lsrs	r3, r3, #28
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80035e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035f2:	e003      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_RCC_GetSysClockFreq+0x45c>)
 80035f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003600:	4618      	mov	r0, r3
 8003602:	37b8      	adds	r7, #184	; 0xb8
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400

08003614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e28d      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8083 	beq.w	800373a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003634:	4b94      	ldr	r3, [pc, #592]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b04      	cmp	r3, #4
 800363e:	d019      	beq.n	8003674 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003640:	4b91      	ldr	r3, [pc, #580]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003648:	2b08      	cmp	r3, #8
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800364c:	4b8e      	ldr	r3, [pc, #568]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003658:	d00c      	beq.n	8003674 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365a:	4b8b      	ldr	r3, [pc, #556]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d112      	bne.n	800368c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003666:	4b88      	ldr	r3, [pc, #544]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003672:	d10b      	bne.n	800368c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	4b84      	ldr	r3, [pc, #528]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05b      	beq.n	8003738 <HAL_RCC_OscConfig+0x124>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d157      	bne.n	8003738 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e25a      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x90>
 8003696:	4b7c      	ldr	r3, [pc, #496]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7b      	ldr	r2, [pc, #492]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e01d      	b.n	80036e0 <HAL_RCC_OscConfig+0xcc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0xb4>
 80036ae:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a75      	ldr	r2, [pc, #468]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80036b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b73      	ldr	r3, [pc, #460]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a72      	ldr	r2, [pc, #456]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0xcc>
 80036c8:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6e      	ldr	r2, [pc, #440]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b6c      	ldr	r3, [pc, #432]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a6b      	ldr	r2, [pc, #428]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80036da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe fef8 	bl	80024dc <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fe fef4 	bl	80024dc <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e21f      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b61      	ldr	r3, [pc, #388]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0xdc>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe fee4 	bl	80024dc <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003718:	f7fe fee0 	bl	80024dc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e20b      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	4b57      	ldr	r3, [pc, #348]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x104>
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d06f      	beq.n	8003826 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003746:	4b50      	ldr	r3, [pc, #320]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b00      	cmp	r3, #0
 8003750:	d017      	beq.n	8003782 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003752:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800375a:	2b08      	cmp	r3, #8
 800375c:	d105      	bne.n	800376a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800375e:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d11c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b44      	ldr	r3, [pc, #272]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x186>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1d3      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4937      	ldr	r1, [pc, #220]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	e03a      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b8:	4b34      	ldr	r3, [pc, #208]	; (800388c <HAL_RCC_OscConfig+0x278>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe fe8d 	bl	80024dc <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c6:	f7fe fe89 	bl	80024dc <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1b4      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4925      	ldr	r1, [pc, #148]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_OscConfig+0x278>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe fe6c 	bl	80024dc <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003808:	f7fe fe68 	bl	80024dc <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e193      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d036      	beq.n	80038a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_RCC_OscConfig+0x27c>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fe fe4c 	bl	80024dc <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003848:	f7fe fe48 	bl	80024dc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e173      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800385c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x234>
 8003866:	e01b      	b.n	80038a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_OscConfig+0x27c>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fe fe35 	bl	80024dc <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	e00e      	b.n	8003894 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003876:	f7fe fe31 	bl	80024dc <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d907      	bls.n	8003894 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e15c      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
 8003888:	40023800 	.word	0x40023800
 800388c:	42470000 	.word	0x42470000
 8003890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	4b8a      	ldr	r3, [pc, #552]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ea      	bne.n	8003876 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8097 	beq.w	80039dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b2:	4b83      	ldr	r3, [pc, #524]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	4b7f      	ldr	r3, [pc, #508]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a7e      	ldr	r2, [pc, #504]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
 80038ce:	4b7c      	ldr	r3, [pc, #496]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <HAL_RCC_OscConfig+0x4b0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <HAL_RCC_OscConfig+0x4b0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a75      	ldr	r2, [pc, #468]	; (8003ac4 <HAL_RCC_OscConfig+0x4b0>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7fe fdf1 	bl	80024dc <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7fe fded 	bl	80024dc <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e118      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCC_OscConfig+0x4b0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x31e>
 8003924:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a65      	ldr	r2, [pc, #404]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
 8003930:	e01c      	b.n	800396c <HAL_RCC_OscConfig+0x358>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b05      	cmp	r3, #5
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x340>
 800393a:	4b61      	ldr	r3, [pc, #388]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a60      	ldr	r2, [pc, #384]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
 8003946:	4b5e      	ldr	r3, [pc, #376]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4a5d      	ldr	r2, [pc, #372]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6713      	str	r3, [r2, #112]	; 0x70
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x358>
 8003954:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	4a59      	ldr	r2, [pc, #356]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	; 0x70
 8003960:	4b57      	ldr	r3, [pc, #348]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a56      	ldr	r2, [pc, #344]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003966:	f023 0304 	bic.w	r3, r3, #4
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fe fdb2 	bl	80024dc <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fe fdae 	bl	80024dc <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0d7      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003992:	4b4b      	ldr	r3, [pc, #300]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ee      	beq.n	800397c <HAL_RCC_OscConfig+0x368>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fe fd9c 	bl	80024dc <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fe fd98 	bl	80024dc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0c1      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039be:	4b40      	ldr	r3, [pc, #256]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ee      	bne.n	80039a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d0:	4b3b      	ldr	r3, [pc, #236]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	4a3a      	ldr	r2, [pc, #232]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80039d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80ad 	beq.w	8003b40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d060      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d145      	bne.n	8003a86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <HAL_RCC_OscConfig+0x4b4>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe fd6c 	bl	80024dc <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fd68 	bl	80024dc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e093      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	071b      	lsls	r3, r3, #28
 8003a52:	491b      	ldr	r1, [pc, #108]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a58:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <HAL_RCC_OscConfig+0x4b4>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fe fd3d 	bl	80024dc <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fe fd39 	bl	80024dc <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e064      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x452>
 8003a84:	e05c      	b.n	8003b40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCC_OscConfig+0x4b4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fd26 	bl	80024dc <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fe fd22 	bl	80024dc <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e04d      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x480>
 8003ab2:	e045      	b.n	8003b40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e040      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003acc:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_RCC_OscConfig+0x538>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d030      	beq.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d129      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d122      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d119      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d10f      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800

08003b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e07b      	b.n	8003c5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d108      	bne.n	8003b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b72:	d009      	beq.n	8003b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
 8003b7a:	e005      	b.n	8003b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe fa24 	bl	8001ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	ea42 0103 	orr.w	r1, r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	f003 0104 	and.w	r1, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0210 	and.w	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b088      	sub	sp, #32
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_SPI_Transmit+0x22>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e12d      	b.n	8003ee0 <HAL_SPI_Transmit+0x27e>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c8c:	f7fe fc26 	bl	80024dc <HAL_GetTick>
 8003c90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d002      	beq.n	8003ca8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ca6:	e116      	b.n	8003ed6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_SPI_Transmit+0x52>
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cb8:	e10d      	b.n	8003ed6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d00:	d10f      	bne.n	8003d22 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d007      	beq.n	8003d40 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d48:	d14f      	bne.n	8003dea <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_SPI_Transmit+0xf6>
 8003d52:	8afb      	ldrh	r3, [r7, #22]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d142      	bne.n	8003dde <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	881a      	ldrh	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	1c9a      	adds	r2, r3, #2
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d7c:	e02f      	b.n	8003dde <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d112      	bne.n	8003db2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8003db0:	e015      	b.n	8003dde <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db2:	f7fe fb93 	bl	80024dc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d803      	bhi.n	8003dca <HAL_SPI_Transmit+0x168>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d102      	bne.n	8003dd0 <HAL_SPI_Transmit+0x16e>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ddc:	e07b      	b.n	8003ed6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ca      	bne.n	8003d7e <HAL_SPI_Transmit+0x11c>
 8003de8:	e050      	b.n	8003e8c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_SPI_Transmit+0x196>
 8003df2:	8afb      	ldrh	r3, [r7, #22]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d144      	bne.n	8003e82 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	7812      	ldrb	r2, [r2, #0]
 8003e04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e1e:	e030      	b.n	8003e82 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d113      	bne.n	8003e56 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e54:	e015      	b.n	8003e82 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e56:	f7fe fb41 	bl	80024dc <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d803      	bhi.n	8003e6e <HAL_SPI_Transmit+0x20c>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d102      	bne.n	8003e74 <HAL_SPI_Transmit+0x212>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e80:	e029      	b.n	8003ed6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1c9      	bne.n	8003e20 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	6839      	ldr	r1, [r7, #0]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fbdf 	bl	8004654 <SPI_EndRxTxTransaction>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e003      	b.n	8003ed6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d002      	beq.n	8003f0e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f0c:	e0fb      	b.n	8004106 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f16:	d112      	bne.n	8003f3e <HAL_SPI_Receive+0x56>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10e      	bne.n	8003f3e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2204      	movs	r2, #4
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f8ef 	bl	8004118 <HAL_SPI_TransmitReceive>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	e0e8      	b.n	8004110 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_SPI_Receive+0x64>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e0e1      	b.n	8004110 <HAL_SPI_Receive+0x228>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f54:	f7fe fac2 	bl	80024dc <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_SPI_Receive+0x7e>
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f6a:	e0cc      	b.n	8004106 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb2:	d10f      	bne.n	8003fd4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d007      	beq.n	8003ff2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d16a      	bne.n	80040d0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ffa:	e032      	b.n	8004062 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d115      	bne.n	8004036 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f103 020c 	add.w	r2, r3, #12
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	7812      	ldrb	r2, [r2, #0]
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004034:	e015      	b.n	8004062 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004036:	f7fe fa51 	bl	80024dc <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d803      	bhi.n	800404e <HAL_SPI_Receive+0x166>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d102      	bne.n	8004054 <HAL_SPI_Receive+0x16c>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004060:	e051      	b.n	8004106 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1c7      	bne.n	8003ffc <HAL_SPI_Receive+0x114>
 800406c:	e035      	b.n	80040da <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d113      	bne.n	80040a4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	b292      	uxth	r2, r2
 8004088:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	1c9a      	adds	r2, r3, #2
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040a2:	e015      	b.n	80040d0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a4:	f7fe fa1a 	bl	80024dc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d803      	bhi.n	80040bc <HAL_SPI_Receive+0x1d4>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d102      	bne.n	80040c2 <HAL_SPI_Receive+0x1da>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040ce:	e01a      	b.n	8004106 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1c9      	bne.n	800406e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fa52 	bl	8004588 <SPI_EndRxTransaction>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
 80040fc:	e003      	b.n	8004106 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08c      	sub	sp, #48	; 0x30
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004126:	2301      	movs	r3, #1
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_SPI_TransmitReceive+0x26>
 800413a:	2302      	movs	r3, #2
 800413c:	e198      	b.n	8004470 <HAL_SPI_TransmitReceive+0x358>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004146:	f7fe f9c9 	bl	80024dc <HAL_GetTick>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004164:	2b01      	cmp	r3, #1
 8004166:	d00f      	beq.n	8004188 <HAL_SPI_TransmitReceive+0x70>
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416e:	d107      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x68>
 8004178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800417c:	2b04      	cmp	r3, #4
 800417e:	d003      	beq.n	8004188 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004186:	e16d      	b.n	8004464 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_SPI_TransmitReceive+0x82>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_TransmitReceive+0x82>
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041a0:	e160      	b.n	8004464 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d003      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2205      	movs	r2, #5
 80041b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	887a      	ldrh	r2, [r7, #2]
 80041c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	887a      	ldrh	r2, [r7, #2]
 80041de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d007      	beq.n	800420a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004212:	d17c      	bne.n	800430e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_SPI_TransmitReceive+0x10a>
 800421c:	8b7b      	ldrh	r3, [r7, #26]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d16a      	bne.n	80042f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	881a      	ldrh	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	1c9a      	adds	r2, r3, #2
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004246:	e057      	b.n	80042f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b02      	cmp	r3, #2
 8004254:	d11b      	bne.n	800428e <HAL_SPI_TransmitReceive+0x176>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d016      	beq.n	800428e <HAL_SPI_TransmitReceive+0x176>
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d113      	bne.n	800428e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	881a      	ldrh	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d119      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x1b8>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d014      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	b292      	uxth	r2, r2
 80042b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042cc:	2301      	movs	r3, #1
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042d0:	f7fe f904 	bl	80024dc <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042dc:	429a      	cmp	r2, r3
 80042de:	d80b      	bhi.n	80042f8 <HAL_SPI_TransmitReceive+0x1e0>
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d007      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042f6:	e0b5      	b.n	8004464 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1a2      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x130>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d19d      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x130>
 800430c:	e080      	b.n	8004410 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_TransmitReceive+0x204>
 8004316:	8b7b      	ldrh	r3, [r7, #26]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d16f      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	7812      	ldrb	r2, [r2, #0]
 8004328:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004342:	e05b      	b.n	80043fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d11c      	bne.n	800438c <HAL_SPI_TransmitReceive+0x274>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d017      	beq.n	800438c <HAL_SPI_TransmitReceive+0x274>
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d114      	bne.n	800438c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	7812      	ldrb	r2, [r2, #0]
 800436e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d119      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x2b6>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d014      	beq.n	80043ce <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ca:	2301      	movs	r3, #1
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043ce:	f7fe f885 	bl	80024dc <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043da:	429a      	cmp	r2, r3
 80043dc:	d803      	bhi.n	80043e6 <HAL_SPI_TransmitReceive+0x2ce>
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d102      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x2d4>
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80043fa:	e033      	b.n	8004464 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d19e      	bne.n	8004344 <HAL_SPI_TransmitReceive+0x22c>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d199      	bne.n	8004344 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f91d 	bl	8004654 <SPI_EndRxTxTransaction>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d006      	beq.n	800442e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800442c:	e01a      	b.n	8004464 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445a:	e003      	b.n	8004464 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800446c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004470:	4618      	mov	r0, r3
 8004472:	3730      	adds	r7, #48	; 0x30
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004488:	f7fe f828 	bl	80024dc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	4413      	add	r3, r2
 8004496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004498:	f7fe f820 	bl	80024dc <HAL_GetTick>
 800449c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800449e:	4b39      	ldr	r3, [pc, #228]	; (8004584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	015b      	lsls	r3, r3, #5
 80044a4:	0d1b      	lsrs	r3, r3, #20
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ae:	e054      	b.n	800455a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d050      	beq.n	800455a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044b8:	f7fe f810 	bl	80024dc <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d902      	bls.n	80044ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d13d      	bne.n	800454a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e6:	d111      	bne.n	800450c <SPI_WaitFlagStateUntilTimeout+0x94>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	d004      	beq.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fa:	d107      	bne.n	800450c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004514:	d10f      	bne.n	8004536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e017      	b.n	800457a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3b01      	subs	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4013      	ands	r3, r2
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	bf0c      	ite	eq
 800456a:	2301      	moveq	r3, #1
 800456c:	2300      	movne	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	429a      	cmp	r2, r3
 8004576:	d19b      	bne.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	2000002c 	.word	0x2000002c

08004588 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800459c:	d111      	bne.n	80045c2 <SPI_EndRxTransaction+0x3a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	d004      	beq.n	80045b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	d107      	bne.n	80045c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d12a      	bne.n	8004622 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d4:	d012      	beq.n	80045fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2200      	movs	r2, #0
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff ff49 	bl	8004478 <SPI_WaitFlagStateUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02d      	beq.n	8004648 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e026      	b.n	800464a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2200      	movs	r2, #0
 8004604:	2101      	movs	r1, #1
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff ff36 	bl	8004478 <SPI_WaitFlagStateUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01a      	beq.n	8004648 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e013      	b.n	800464a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2200      	movs	r2, #0
 800462a:	2101      	movs	r1, #1
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff ff23 	bl	8004478 <SPI_WaitFlagStateUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e000      	b.n	800464a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2201      	movs	r2, #1
 8004668:	2102      	movs	r1, #2
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff ff04 	bl	8004478 <SPI_WaitFlagStateUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f043 0220 	orr.w	r2, r3, #32
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e032      	b.n	80046ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004686:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <SPI_EndRxTxTransaction+0xa0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <SPI_EndRxTxTransaction+0xa4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	0d5b      	lsrs	r3, r3, #21
 8004692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a4:	d112      	bne.n	80046cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2200      	movs	r2, #0
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff fee1 	bl	8004478 <SPI_WaitFlagStateUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d016      	beq.n	80046ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e00f      	b.n	80046ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b80      	cmp	r3, #128	; 0x80
 80046e4:	d0f2      	beq.n	80046cc <SPI_EndRxTxTransaction+0x78>
 80046e6:	e000      	b.n	80046ea <SPI_EndRxTxTransaction+0x96>
        break;
 80046e8:	bf00      	nop
  }

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2000002c 	.word	0x2000002c
 80046f8:	165e9f81 	.word	0x165e9f81

080046fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e041      	b.n	8004792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fd fcac 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 fa10 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e041      	b.n	8004830 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f839 	bl	8004838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f000 f9c1 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004866:	2302      	movs	r3, #2
 8004868:	e0ae      	b.n	80049c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b0c      	cmp	r3, #12
 8004876:	f200 809f 	bhi.w	80049b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800487a:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	080048b5 	.word	0x080048b5
 8004884:	080049b9 	.word	0x080049b9
 8004888:	080049b9 	.word	0x080049b9
 800488c:	080049b9 	.word	0x080049b9
 8004890:	080048f5 	.word	0x080048f5
 8004894:	080049b9 	.word	0x080049b9
 8004898:	080049b9 	.word	0x080049b9
 800489c:	080049b9 	.word	0x080049b9
 80048a0:	08004937 	.word	0x08004937
 80048a4:	080049b9 	.word	0x080049b9
 80048a8:	080049b9 	.word	0x080049b9
 80048ac:	080049b9 	.word	0x080049b9
 80048b0:	08004977 	.word	0x08004977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f9fc 	bl	8004cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0204 	bic.w	r2, r2, #4
 80048de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6999      	ldr	r1, [r3, #24]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	619a      	str	r2, [r3, #24]
      break;
 80048f2:	e064      	b.n	80049be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fa4c 	bl	8004d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6999      	ldr	r1, [r3, #24]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	619a      	str	r2, [r3, #24]
      break;
 8004934:	e043      	b.n	80049be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 faa1 	bl	8004e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0208 	orr.w	r2, r2, #8
 8004950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0204 	bic.w	r2, r2, #4
 8004960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69d9      	ldr	r1, [r3, #28]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	61da      	str	r2, [r3, #28]
      break;
 8004974:	e023      	b.n	80049be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 faf5 	bl	8004f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69d9      	ldr	r1, [r3, #28]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	021a      	lsls	r2, r3, #8
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	61da      	str	r2, [r3, #28]
      break;
 80049b6:	e002      	b.n	80049be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
      break;
 80049bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIM_ConfigClockSource+0x1c>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e0b4      	b.n	8004b56 <HAL_TIM_ConfigClockSource+0x186>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a24:	d03e      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2a:	f200 8087 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	f000 8086 	beq.w	8004b42 <HAL_TIM_ConfigClockSource+0x172>
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d87f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d01a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0xa6>
 8004a40:	2b70      	cmp	r3, #112	; 0x70
 8004a42:	d87b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d050      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x11a>
 8004a48:	2b60      	cmp	r3, #96	; 0x60
 8004a4a:	d877      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b50      	cmp	r3, #80	; 0x50
 8004a4e:	d03c      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0xfa>
 8004a50:	2b50      	cmp	r3, #80	; 0x50
 8004a52:	d873      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d058      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x13a>
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d86f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d064      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a60:	2b30      	cmp	r3, #48	; 0x30
 8004a62:	d86b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d060      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d867      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05c      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d05a      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a74:	e062      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	f000 fb41 	bl	800510c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
      break;
 8004aa2:	e04f      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	f000 fb2a 	bl	800510c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e03c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fa9e 	bl	8005018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2150      	movs	r1, #80	; 0x50
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 faf7 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e02c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 fabd 	bl	8005076 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2160      	movs	r1, #96	; 0x60
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fae7 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e01c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 fa7e 	bl	8005018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fad7 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f000 face 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 8004b3a:	e003      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a46      	ldr	r2, [pc, #280]	; (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a43      	ldr	r2, [pc, #268]	; (8004c90 <TIM_Base_SetConfig+0x130>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a42      	ldr	r2, [pc, #264]	; (8004c94 <TIM_Base_SetConfig+0x134>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a41      	ldr	r2, [pc, #260]	; (8004c98 <TIM_Base_SetConfig+0x138>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a40      	ldr	r2, [pc, #256]	; (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a35      	ldr	r2, [pc, #212]	; (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d02b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d027      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a32      	ldr	r2, [pc, #200]	; (8004c90 <TIM_Base_SetConfig+0x130>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d023      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a31      	ldr	r2, [pc, #196]	; (8004c94 <TIM_Base_SetConfig+0x134>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01f      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a30      	ldr	r2, [pc, #192]	; (8004c98 <TIM_Base_SetConfig+0x138>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2f      	ldr	r2, [pc, #188]	; (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d017      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2e      	ldr	r2, [pc, #184]	; (8004ca0 <TIM_Base_SetConfig+0x140>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2d      	ldr	r2, [pc, #180]	; (8004ca4 <TIM_Base_SetConfig+0x144>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00f      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	; (8004ca8 <TIM_Base_SetConfig+0x148>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2b      	ldr	r2, [pc, #172]	; (8004cac <TIM_Base_SetConfig+0x14c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2a      	ldr	r2, [pc, #168]	; (8004cb0 <TIM_Base_SetConfig+0x150>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a29      	ldr	r2, [pc, #164]	; (8004cb4 <TIM_Base_SetConfig+0x154>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d108      	bne.n	8004c24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d103      	bne.n	8004c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	611a      	str	r2, [r3, #16]
  }
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40010400 	.word	0x40010400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800
 8004cac:	40001800 	.word	0x40001800
 8004cb0:	40001c00 	.word	0x40001c00
 8004cb4:	40002000 	.word	0x40002000

08004cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f023 0201 	bic.w	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 0302 	bic.w	r3, r3, #2
 8004d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <TIM_OC1_SetConfig+0xd8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_OC1_SetConfig+0x64>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <TIM_OC1_SetConfig+0xdc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d10c      	bne.n	8004d36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f023 0308 	bic.w	r3, r3, #8
 8004d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <TIM_OC1_SetConfig+0xd8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_OC1_SetConfig+0x8e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a14      	ldr	r2, [pc, #80]	; (8004d94 <TIM_OC1_SetConfig+0xdc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d111      	bne.n	8004d6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	621a      	str	r2, [r3, #32]
}
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40010400 	.word	0x40010400

08004d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f023 0210 	bic.w	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0320 	bic.w	r3, r3, #32
 8004de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <TIM_OC2_SetConfig+0xe4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_OC2_SetConfig+0x68>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <TIM_OC2_SetConfig+0xe8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10d      	bne.n	8004e1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <TIM_OC2_SetConfig+0xe4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_OC2_SetConfig+0x94>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <TIM_OC2_SetConfig+0xe8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d113      	bne.n	8004e54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40010400 	.word	0x40010400

08004e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <TIM_OC3_SetConfig+0xe0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_OC3_SetConfig+0x66>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <TIM_OC3_SetConfig+0xe4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10d      	bne.n	8004f06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a16      	ldr	r2, [pc, #88]	; (8004f64 <TIM_OC3_SetConfig+0xe0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_OC3_SetConfig+0x92>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <TIM_OC3_SetConfig+0xe4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d113      	bne.n	8004f3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	621a      	str	r2, [r3, #32]
}
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40010400 	.word	0x40010400

08004f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	031b      	lsls	r3, r3, #12
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <TIM_OC4_SetConfig+0xa4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_OC4_SetConfig+0x68>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a11      	ldr	r2, [pc, #68]	; (8005014 <TIM_OC4_SetConfig+0xa8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d109      	bne.n	8004fe8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	019b      	lsls	r3, r3, #6
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40010000 	.word	0x40010000
 8005014:	40010400 	.word	0x40010400

08005018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 030a 	bic.w	r3, r3, #10
 8005054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005076:	b480      	push	{r7}
 8005078:	b087      	sub	sp, #28
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f023 0210 	bic.w	r2, r3, #16
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	031b      	lsls	r3, r3, #12
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f043 0307 	orr.w	r3, r3, #7
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	609a      	str	r2, [r3, #8]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	021a      	lsls	r2, r3, #8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	431a      	orrs	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4313      	orrs	r3, r2
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005160:	2302      	movs	r3, #2
 8005162:	e05a      	b.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a21      	ldr	r2, [pc, #132]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d022      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b0:	d01d      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d018      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d009      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a17      	ldr	r2, [pc, #92]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10c      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40010400 	.word	0x40010400
 800523c:	40014000 	.word	0x40014000
 8005240:	40001800 	.word	0x40001800

08005244 <__cvt>:
 8005244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	ec55 4b10 	vmov	r4, r5, d0
 800524c:	2d00      	cmp	r5, #0
 800524e:	460e      	mov	r6, r1
 8005250:	4619      	mov	r1, r3
 8005252:	462b      	mov	r3, r5
 8005254:	bfbb      	ittet	lt
 8005256:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800525a:	461d      	movlt	r5, r3
 800525c:	2300      	movge	r3, #0
 800525e:	232d      	movlt	r3, #45	; 0x2d
 8005260:	700b      	strb	r3, [r1, #0]
 8005262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005264:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005268:	4691      	mov	r9, r2
 800526a:	f023 0820 	bic.w	r8, r3, #32
 800526e:	bfbc      	itt	lt
 8005270:	4622      	movlt	r2, r4
 8005272:	4614      	movlt	r4, r2
 8005274:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005278:	d005      	beq.n	8005286 <__cvt+0x42>
 800527a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800527e:	d100      	bne.n	8005282 <__cvt+0x3e>
 8005280:	3601      	adds	r6, #1
 8005282:	2102      	movs	r1, #2
 8005284:	e000      	b.n	8005288 <__cvt+0x44>
 8005286:	2103      	movs	r1, #3
 8005288:	ab03      	add	r3, sp, #12
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	ab02      	add	r3, sp, #8
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	ec45 4b10 	vmov	d0, r4, r5
 8005294:	4653      	mov	r3, sl
 8005296:	4632      	mov	r2, r6
 8005298:	f000 fe4a 	bl	8005f30 <_dtoa_r>
 800529c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052a0:	4607      	mov	r7, r0
 80052a2:	d102      	bne.n	80052aa <__cvt+0x66>
 80052a4:	f019 0f01 	tst.w	r9, #1
 80052a8:	d022      	beq.n	80052f0 <__cvt+0xac>
 80052aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052ae:	eb07 0906 	add.w	r9, r7, r6
 80052b2:	d110      	bne.n	80052d6 <__cvt+0x92>
 80052b4:	783b      	ldrb	r3, [r7, #0]
 80052b6:	2b30      	cmp	r3, #48	; 0x30
 80052b8:	d10a      	bne.n	80052d0 <__cvt+0x8c>
 80052ba:	2200      	movs	r2, #0
 80052bc:	2300      	movs	r3, #0
 80052be:	4620      	mov	r0, r4
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7fb fc21 	bl	8000b08 <__aeabi_dcmpeq>
 80052c6:	b918      	cbnz	r0, 80052d0 <__cvt+0x8c>
 80052c8:	f1c6 0601 	rsb	r6, r6, #1
 80052cc:	f8ca 6000 	str.w	r6, [sl]
 80052d0:	f8da 3000 	ldr.w	r3, [sl]
 80052d4:	4499      	add	r9, r3
 80052d6:	2200      	movs	r2, #0
 80052d8:	2300      	movs	r3, #0
 80052da:	4620      	mov	r0, r4
 80052dc:	4629      	mov	r1, r5
 80052de:	f7fb fc13 	bl	8000b08 <__aeabi_dcmpeq>
 80052e2:	b108      	cbz	r0, 80052e8 <__cvt+0xa4>
 80052e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80052e8:	2230      	movs	r2, #48	; 0x30
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	454b      	cmp	r3, r9
 80052ee:	d307      	bcc.n	8005300 <__cvt+0xbc>
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052f4:	1bdb      	subs	r3, r3, r7
 80052f6:	4638      	mov	r0, r7
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	b004      	add	sp, #16
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005300:	1c59      	adds	r1, r3, #1
 8005302:	9103      	str	r1, [sp, #12]
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e7f0      	b.n	80052ea <__cvt+0xa6>

08005308 <__exponent>:
 8005308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800530a:	4603      	mov	r3, r0
 800530c:	2900      	cmp	r1, #0
 800530e:	bfb8      	it	lt
 8005310:	4249      	neglt	r1, r1
 8005312:	f803 2b02 	strb.w	r2, [r3], #2
 8005316:	bfb4      	ite	lt
 8005318:	222d      	movlt	r2, #45	; 0x2d
 800531a:	222b      	movge	r2, #43	; 0x2b
 800531c:	2909      	cmp	r1, #9
 800531e:	7042      	strb	r2, [r0, #1]
 8005320:	dd2a      	ble.n	8005378 <__exponent+0x70>
 8005322:	f10d 0207 	add.w	r2, sp, #7
 8005326:	4617      	mov	r7, r2
 8005328:	260a      	movs	r6, #10
 800532a:	4694      	mov	ip, r2
 800532c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005330:	fb06 1415 	mls	r4, r6, r5, r1
 8005334:	3430      	adds	r4, #48	; 0x30
 8005336:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800533a:	460c      	mov	r4, r1
 800533c:	2c63      	cmp	r4, #99	; 0x63
 800533e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005342:	4629      	mov	r1, r5
 8005344:	dcf1      	bgt.n	800532a <__exponent+0x22>
 8005346:	3130      	adds	r1, #48	; 0x30
 8005348:	f1ac 0402 	sub.w	r4, ip, #2
 800534c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005350:	1c41      	adds	r1, r0, #1
 8005352:	4622      	mov	r2, r4
 8005354:	42ba      	cmp	r2, r7
 8005356:	d30a      	bcc.n	800536e <__exponent+0x66>
 8005358:	f10d 0209 	add.w	r2, sp, #9
 800535c:	eba2 020c 	sub.w	r2, r2, ip
 8005360:	42bc      	cmp	r4, r7
 8005362:	bf88      	it	hi
 8005364:	2200      	movhi	r2, #0
 8005366:	4413      	add	r3, r2
 8005368:	1a18      	subs	r0, r3, r0
 800536a:	b003      	add	sp, #12
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005372:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005376:	e7ed      	b.n	8005354 <__exponent+0x4c>
 8005378:	2330      	movs	r3, #48	; 0x30
 800537a:	3130      	adds	r1, #48	; 0x30
 800537c:	7083      	strb	r3, [r0, #2]
 800537e:	70c1      	strb	r1, [r0, #3]
 8005380:	1d03      	adds	r3, r0, #4
 8005382:	e7f1      	b.n	8005368 <__exponent+0x60>

08005384 <_printf_float>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	ed2d 8b02 	vpush	{d8}
 800538c:	b08d      	sub	sp, #52	; 0x34
 800538e:	460c      	mov	r4, r1
 8005390:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005394:	4616      	mov	r6, r2
 8005396:	461f      	mov	r7, r3
 8005398:	4605      	mov	r5, r0
 800539a:	f000 fcc7 	bl	8005d2c <_localeconv_r>
 800539e:	f8d0 a000 	ldr.w	sl, [r0]
 80053a2:	4650      	mov	r0, sl
 80053a4:	f7fa ff84 	bl	80002b0 <strlen>
 80053a8:	2300      	movs	r3, #0
 80053aa:	930a      	str	r3, [sp, #40]	; 0x28
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	9305      	str	r3, [sp, #20]
 80053b0:	f8d8 3000 	ldr.w	r3, [r8]
 80053b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053b8:	3307      	adds	r3, #7
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	f103 0208 	add.w	r2, r3, #8
 80053c2:	f8c8 2000 	str.w	r2, [r8]
 80053c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053ce:	9307      	str	r3, [sp, #28]
 80053d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80053d4:	ee08 0a10 	vmov	s16, r0
 80053d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80053dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053e0:	4b9e      	ldr	r3, [pc, #632]	; (800565c <_printf_float+0x2d8>)
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295
 80053e6:	f7fb fbc1 	bl	8000b6c <__aeabi_dcmpun>
 80053ea:	bb88      	cbnz	r0, 8005450 <_printf_float+0xcc>
 80053ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f0:	4b9a      	ldr	r3, [pc, #616]	; (800565c <_printf_float+0x2d8>)
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295
 80053f6:	f7fb fb9b 	bl	8000b30 <__aeabi_dcmple>
 80053fa:	bb48      	cbnz	r0, 8005450 <_printf_float+0xcc>
 80053fc:	2200      	movs	r2, #0
 80053fe:	2300      	movs	r3, #0
 8005400:	4640      	mov	r0, r8
 8005402:	4649      	mov	r1, r9
 8005404:	f7fb fb8a 	bl	8000b1c <__aeabi_dcmplt>
 8005408:	b110      	cbz	r0, 8005410 <_printf_float+0x8c>
 800540a:	232d      	movs	r3, #45	; 0x2d
 800540c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005410:	4a93      	ldr	r2, [pc, #588]	; (8005660 <_printf_float+0x2dc>)
 8005412:	4b94      	ldr	r3, [pc, #592]	; (8005664 <_printf_float+0x2e0>)
 8005414:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005418:	bf94      	ite	ls
 800541a:	4690      	movls	r8, r2
 800541c:	4698      	movhi	r8, r3
 800541e:	2303      	movs	r3, #3
 8005420:	6123      	str	r3, [r4, #16]
 8005422:	9b05      	ldr	r3, [sp, #20]
 8005424:	f023 0304 	bic.w	r3, r3, #4
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	9700      	str	r7, [sp, #0]
 8005430:	4633      	mov	r3, r6
 8005432:	aa0b      	add	r2, sp, #44	; 0x2c
 8005434:	4621      	mov	r1, r4
 8005436:	4628      	mov	r0, r5
 8005438:	f000 f9da 	bl	80057f0 <_printf_common>
 800543c:	3001      	adds	r0, #1
 800543e:	f040 8090 	bne.w	8005562 <_printf_float+0x1de>
 8005442:	f04f 30ff 	mov.w	r0, #4294967295
 8005446:	b00d      	add	sp, #52	; 0x34
 8005448:	ecbd 8b02 	vpop	{d8}
 800544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	4640      	mov	r0, r8
 8005456:	4649      	mov	r1, r9
 8005458:	f7fb fb88 	bl	8000b6c <__aeabi_dcmpun>
 800545c:	b140      	cbz	r0, 8005470 <_printf_float+0xec>
 800545e:	464b      	mov	r3, r9
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfbc      	itt	lt
 8005464:	232d      	movlt	r3, #45	; 0x2d
 8005466:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800546a:	4a7f      	ldr	r2, [pc, #508]	; (8005668 <_printf_float+0x2e4>)
 800546c:	4b7f      	ldr	r3, [pc, #508]	; (800566c <_printf_float+0x2e8>)
 800546e:	e7d1      	b.n	8005414 <_printf_float+0x90>
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005476:	9206      	str	r2, [sp, #24]
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	d13f      	bne.n	80054fc <_printf_float+0x178>
 800547c:	2306      	movs	r3, #6
 800547e:	6063      	str	r3, [r4, #4]
 8005480:	9b05      	ldr	r3, [sp, #20]
 8005482:	6861      	ldr	r1, [r4, #4]
 8005484:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005488:	2300      	movs	r3, #0
 800548a:	9303      	str	r3, [sp, #12]
 800548c:	ab0a      	add	r3, sp, #40	; 0x28
 800548e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005492:	ab09      	add	r3, sp, #36	; 0x24
 8005494:	ec49 8b10 	vmov	d0, r8, r9
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	6022      	str	r2, [r4, #0]
 800549c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054a0:	4628      	mov	r0, r5
 80054a2:	f7ff fecf 	bl	8005244 <__cvt>
 80054a6:	9b06      	ldr	r3, [sp, #24]
 80054a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054aa:	2b47      	cmp	r3, #71	; 0x47
 80054ac:	4680      	mov	r8, r0
 80054ae:	d108      	bne.n	80054c2 <_printf_float+0x13e>
 80054b0:	1cc8      	adds	r0, r1, #3
 80054b2:	db02      	blt.n	80054ba <_printf_float+0x136>
 80054b4:	6863      	ldr	r3, [r4, #4]
 80054b6:	4299      	cmp	r1, r3
 80054b8:	dd41      	ble.n	800553e <_printf_float+0x1ba>
 80054ba:	f1ab 0302 	sub.w	r3, fp, #2
 80054be:	fa5f fb83 	uxtb.w	fp, r3
 80054c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054c6:	d820      	bhi.n	800550a <_printf_float+0x186>
 80054c8:	3901      	subs	r1, #1
 80054ca:	465a      	mov	r2, fp
 80054cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054d0:	9109      	str	r1, [sp, #36]	; 0x24
 80054d2:	f7ff ff19 	bl	8005308 <__exponent>
 80054d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054d8:	1813      	adds	r3, r2, r0
 80054da:	2a01      	cmp	r2, #1
 80054dc:	4681      	mov	r9, r0
 80054de:	6123      	str	r3, [r4, #16]
 80054e0:	dc02      	bgt.n	80054e8 <_printf_float+0x164>
 80054e2:	6822      	ldr	r2, [r4, #0]
 80054e4:	07d2      	lsls	r2, r2, #31
 80054e6:	d501      	bpl.n	80054ec <_printf_float+0x168>
 80054e8:	3301      	adds	r3, #1
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d09c      	beq.n	800542e <_printf_float+0xaa>
 80054f4:	232d      	movs	r3, #45	; 0x2d
 80054f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054fa:	e798      	b.n	800542e <_printf_float+0xaa>
 80054fc:	9a06      	ldr	r2, [sp, #24]
 80054fe:	2a47      	cmp	r2, #71	; 0x47
 8005500:	d1be      	bne.n	8005480 <_printf_float+0xfc>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1bc      	bne.n	8005480 <_printf_float+0xfc>
 8005506:	2301      	movs	r3, #1
 8005508:	e7b9      	b.n	800547e <_printf_float+0xfa>
 800550a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800550e:	d118      	bne.n	8005542 <_printf_float+0x1be>
 8005510:	2900      	cmp	r1, #0
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	dd0b      	ble.n	800552e <_printf_float+0x1aa>
 8005516:	6121      	str	r1, [r4, #16]
 8005518:	b913      	cbnz	r3, 8005520 <_printf_float+0x19c>
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	07d0      	lsls	r0, r2, #31
 800551e:	d502      	bpl.n	8005526 <_printf_float+0x1a2>
 8005520:	3301      	adds	r3, #1
 8005522:	440b      	add	r3, r1
 8005524:	6123      	str	r3, [r4, #16]
 8005526:	65a1      	str	r1, [r4, #88]	; 0x58
 8005528:	f04f 0900 	mov.w	r9, #0
 800552c:	e7de      	b.n	80054ec <_printf_float+0x168>
 800552e:	b913      	cbnz	r3, 8005536 <_printf_float+0x1b2>
 8005530:	6822      	ldr	r2, [r4, #0]
 8005532:	07d2      	lsls	r2, r2, #31
 8005534:	d501      	bpl.n	800553a <_printf_float+0x1b6>
 8005536:	3302      	adds	r3, #2
 8005538:	e7f4      	b.n	8005524 <_printf_float+0x1a0>
 800553a:	2301      	movs	r3, #1
 800553c:	e7f2      	b.n	8005524 <_printf_float+0x1a0>
 800553e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005544:	4299      	cmp	r1, r3
 8005546:	db05      	blt.n	8005554 <_printf_float+0x1d0>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	6121      	str	r1, [r4, #16]
 800554c:	07d8      	lsls	r0, r3, #31
 800554e:	d5ea      	bpl.n	8005526 <_printf_float+0x1a2>
 8005550:	1c4b      	adds	r3, r1, #1
 8005552:	e7e7      	b.n	8005524 <_printf_float+0x1a0>
 8005554:	2900      	cmp	r1, #0
 8005556:	bfd4      	ite	le
 8005558:	f1c1 0202 	rsble	r2, r1, #2
 800555c:	2201      	movgt	r2, #1
 800555e:	4413      	add	r3, r2
 8005560:	e7e0      	b.n	8005524 <_printf_float+0x1a0>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	055a      	lsls	r2, r3, #21
 8005566:	d407      	bmi.n	8005578 <_printf_float+0x1f4>
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	4642      	mov	r2, r8
 800556c:	4631      	mov	r1, r6
 800556e:	4628      	mov	r0, r5
 8005570:	47b8      	blx	r7
 8005572:	3001      	adds	r0, #1
 8005574:	d12c      	bne.n	80055d0 <_printf_float+0x24c>
 8005576:	e764      	b.n	8005442 <_printf_float+0xbe>
 8005578:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800557c:	f240 80e0 	bls.w	8005740 <_printf_float+0x3bc>
 8005580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005584:	2200      	movs	r2, #0
 8005586:	2300      	movs	r3, #0
 8005588:	f7fb fabe 	bl	8000b08 <__aeabi_dcmpeq>
 800558c:	2800      	cmp	r0, #0
 800558e:	d034      	beq.n	80055fa <_printf_float+0x276>
 8005590:	4a37      	ldr	r2, [pc, #220]	; (8005670 <_printf_float+0x2ec>)
 8005592:	2301      	movs	r3, #1
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f af51 	beq.w	8005442 <_printf_float+0xbe>
 80055a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a4:	429a      	cmp	r2, r3
 80055a6:	db02      	blt.n	80055ae <_printf_float+0x22a>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	07d8      	lsls	r0, r3, #31
 80055ac:	d510      	bpl.n	80055d0 <_printf_float+0x24c>
 80055ae:	ee18 3a10 	vmov	r3, s16
 80055b2:	4652      	mov	r2, sl
 80055b4:	4631      	mov	r1, r6
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b8      	blx	r7
 80055ba:	3001      	adds	r0, #1
 80055bc:	f43f af41 	beq.w	8005442 <_printf_float+0xbe>
 80055c0:	f04f 0800 	mov.w	r8, #0
 80055c4:	f104 091a 	add.w	r9, r4, #26
 80055c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ca:	3b01      	subs	r3, #1
 80055cc:	4543      	cmp	r3, r8
 80055ce:	dc09      	bgt.n	80055e4 <_printf_float+0x260>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	079b      	lsls	r3, r3, #30
 80055d4:	f100 8107 	bmi.w	80057e6 <_printf_float+0x462>
 80055d8:	68e0      	ldr	r0, [r4, #12]
 80055da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055dc:	4298      	cmp	r0, r3
 80055de:	bfb8      	it	lt
 80055e0:	4618      	movlt	r0, r3
 80055e2:	e730      	b.n	8005446 <_printf_float+0xc2>
 80055e4:	2301      	movs	r3, #1
 80055e6:	464a      	mov	r2, r9
 80055e8:	4631      	mov	r1, r6
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b8      	blx	r7
 80055ee:	3001      	adds	r0, #1
 80055f0:	f43f af27 	beq.w	8005442 <_printf_float+0xbe>
 80055f4:	f108 0801 	add.w	r8, r8, #1
 80055f8:	e7e6      	b.n	80055c8 <_printf_float+0x244>
 80055fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dc39      	bgt.n	8005674 <_printf_float+0x2f0>
 8005600:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <_printf_float+0x2ec>)
 8005602:	2301      	movs	r3, #1
 8005604:	4631      	mov	r1, r6
 8005606:	4628      	mov	r0, r5
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	f43f af19 	beq.w	8005442 <_printf_float+0xbe>
 8005610:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005614:	4313      	orrs	r3, r2
 8005616:	d102      	bne.n	800561e <_printf_float+0x29a>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	07d9      	lsls	r1, r3, #31
 800561c:	d5d8      	bpl.n	80055d0 <_printf_float+0x24c>
 800561e:	ee18 3a10 	vmov	r3, s16
 8005622:	4652      	mov	r2, sl
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	47b8      	blx	r7
 800562a:	3001      	adds	r0, #1
 800562c:	f43f af09 	beq.w	8005442 <_printf_float+0xbe>
 8005630:	f04f 0900 	mov.w	r9, #0
 8005634:	f104 0a1a 	add.w	sl, r4, #26
 8005638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563a:	425b      	negs	r3, r3
 800563c:	454b      	cmp	r3, r9
 800563e:	dc01      	bgt.n	8005644 <_printf_float+0x2c0>
 8005640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005642:	e792      	b.n	800556a <_printf_float+0x1e6>
 8005644:	2301      	movs	r3, #1
 8005646:	4652      	mov	r2, sl
 8005648:	4631      	mov	r1, r6
 800564a:	4628      	mov	r0, r5
 800564c:	47b8      	blx	r7
 800564e:	3001      	adds	r0, #1
 8005650:	f43f aef7 	beq.w	8005442 <_printf_float+0xbe>
 8005654:	f109 0901 	add.w	r9, r9, #1
 8005658:	e7ee      	b.n	8005638 <_printf_float+0x2b4>
 800565a:	bf00      	nop
 800565c:	7fefffff 	.word	0x7fefffff
 8005660:	080082e0 	.word	0x080082e0
 8005664:	080082e4 	.word	0x080082e4
 8005668:	080082e8 	.word	0x080082e8
 800566c:	080082ec 	.word	0x080082ec
 8005670:	080082f0 	.word	0x080082f0
 8005674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005676:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005678:	429a      	cmp	r2, r3
 800567a:	bfa8      	it	ge
 800567c:	461a      	movge	r2, r3
 800567e:	2a00      	cmp	r2, #0
 8005680:	4691      	mov	r9, r2
 8005682:	dc37      	bgt.n	80056f4 <_printf_float+0x370>
 8005684:	f04f 0b00 	mov.w	fp, #0
 8005688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800568c:	f104 021a 	add.w	r2, r4, #26
 8005690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005692:	9305      	str	r3, [sp, #20]
 8005694:	eba3 0309 	sub.w	r3, r3, r9
 8005698:	455b      	cmp	r3, fp
 800569a:	dc33      	bgt.n	8005704 <_printf_float+0x380>
 800569c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a0:	429a      	cmp	r2, r3
 80056a2:	db3b      	blt.n	800571c <_printf_float+0x398>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	07da      	lsls	r2, r3, #31
 80056a8:	d438      	bmi.n	800571c <_printf_float+0x398>
 80056aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056ae:	eba2 0903 	sub.w	r9, r2, r3
 80056b2:	9b05      	ldr	r3, [sp, #20]
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	4591      	cmp	r9, r2
 80056b8:	bfa8      	it	ge
 80056ba:	4691      	movge	r9, r2
 80056bc:	f1b9 0f00 	cmp.w	r9, #0
 80056c0:	dc35      	bgt.n	800572e <_printf_float+0x3aa>
 80056c2:	f04f 0800 	mov.w	r8, #0
 80056c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ca:	f104 0a1a 	add.w	sl, r4, #26
 80056ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	eba3 0309 	sub.w	r3, r3, r9
 80056d8:	4543      	cmp	r3, r8
 80056da:	f77f af79 	ble.w	80055d0 <_printf_float+0x24c>
 80056de:	2301      	movs	r3, #1
 80056e0:	4652      	mov	r2, sl
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	f43f aeaa 	beq.w	8005442 <_printf_float+0xbe>
 80056ee:	f108 0801 	add.w	r8, r8, #1
 80056f2:	e7ec      	b.n	80056ce <_printf_float+0x34a>
 80056f4:	4613      	mov	r3, r2
 80056f6:	4631      	mov	r1, r6
 80056f8:	4642      	mov	r2, r8
 80056fa:	4628      	mov	r0, r5
 80056fc:	47b8      	blx	r7
 80056fe:	3001      	adds	r0, #1
 8005700:	d1c0      	bne.n	8005684 <_printf_float+0x300>
 8005702:	e69e      	b.n	8005442 <_printf_float+0xbe>
 8005704:	2301      	movs	r3, #1
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	9205      	str	r2, [sp, #20]
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	f43f ae97 	beq.w	8005442 <_printf_float+0xbe>
 8005714:	9a05      	ldr	r2, [sp, #20]
 8005716:	f10b 0b01 	add.w	fp, fp, #1
 800571a:	e7b9      	b.n	8005690 <_printf_float+0x30c>
 800571c:	ee18 3a10 	vmov	r3, s16
 8005720:	4652      	mov	r2, sl
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	d1be      	bne.n	80056aa <_printf_float+0x326>
 800572c:	e689      	b.n	8005442 <_printf_float+0xbe>
 800572e:	9a05      	ldr	r2, [sp, #20]
 8005730:	464b      	mov	r3, r9
 8005732:	4442      	add	r2, r8
 8005734:	4631      	mov	r1, r6
 8005736:	4628      	mov	r0, r5
 8005738:	47b8      	blx	r7
 800573a:	3001      	adds	r0, #1
 800573c:	d1c1      	bne.n	80056c2 <_printf_float+0x33e>
 800573e:	e680      	b.n	8005442 <_printf_float+0xbe>
 8005740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005742:	2a01      	cmp	r2, #1
 8005744:	dc01      	bgt.n	800574a <_printf_float+0x3c6>
 8005746:	07db      	lsls	r3, r3, #31
 8005748:	d53a      	bpl.n	80057c0 <_printf_float+0x43c>
 800574a:	2301      	movs	r3, #1
 800574c:	4642      	mov	r2, r8
 800574e:	4631      	mov	r1, r6
 8005750:	4628      	mov	r0, r5
 8005752:	47b8      	blx	r7
 8005754:	3001      	adds	r0, #1
 8005756:	f43f ae74 	beq.w	8005442 <_printf_float+0xbe>
 800575a:	ee18 3a10 	vmov	r3, s16
 800575e:	4652      	mov	r2, sl
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f43f ae6b 	beq.w	8005442 <_printf_float+0xbe>
 800576c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005770:	2200      	movs	r2, #0
 8005772:	2300      	movs	r3, #0
 8005774:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005778:	f7fb f9c6 	bl	8000b08 <__aeabi_dcmpeq>
 800577c:	b9d8      	cbnz	r0, 80057b6 <_printf_float+0x432>
 800577e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005782:	f108 0201 	add.w	r2, r8, #1
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	d10e      	bne.n	80057ae <_printf_float+0x42a>
 8005790:	e657      	b.n	8005442 <_printf_float+0xbe>
 8005792:	2301      	movs	r3, #1
 8005794:	4652      	mov	r2, sl
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	f43f ae50 	beq.w	8005442 <_printf_float+0xbe>
 80057a2:	f108 0801 	add.w	r8, r8, #1
 80057a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a8:	3b01      	subs	r3, #1
 80057aa:	4543      	cmp	r3, r8
 80057ac:	dcf1      	bgt.n	8005792 <_printf_float+0x40e>
 80057ae:	464b      	mov	r3, r9
 80057b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057b4:	e6da      	b.n	800556c <_printf_float+0x1e8>
 80057b6:	f04f 0800 	mov.w	r8, #0
 80057ba:	f104 0a1a 	add.w	sl, r4, #26
 80057be:	e7f2      	b.n	80057a6 <_printf_float+0x422>
 80057c0:	2301      	movs	r3, #1
 80057c2:	4642      	mov	r2, r8
 80057c4:	e7df      	b.n	8005786 <_printf_float+0x402>
 80057c6:	2301      	movs	r3, #1
 80057c8:	464a      	mov	r2, r9
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f ae36 	beq.w	8005442 <_printf_float+0xbe>
 80057d6:	f108 0801 	add.w	r8, r8, #1
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057de:	1a5b      	subs	r3, r3, r1
 80057e0:	4543      	cmp	r3, r8
 80057e2:	dcf0      	bgt.n	80057c6 <_printf_float+0x442>
 80057e4:	e6f8      	b.n	80055d8 <_printf_float+0x254>
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	f104 0919 	add.w	r9, r4, #25
 80057ee:	e7f4      	b.n	80057da <_printf_float+0x456>

080057f0 <_printf_common>:
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	4616      	mov	r6, r2
 80057f6:	4699      	mov	r9, r3
 80057f8:	688a      	ldr	r2, [r1, #8]
 80057fa:	690b      	ldr	r3, [r1, #16]
 80057fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005800:	4293      	cmp	r3, r2
 8005802:	bfb8      	it	lt
 8005804:	4613      	movlt	r3, r2
 8005806:	6033      	str	r3, [r6, #0]
 8005808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800580c:	4607      	mov	r7, r0
 800580e:	460c      	mov	r4, r1
 8005810:	b10a      	cbz	r2, 8005816 <_printf_common+0x26>
 8005812:	3301      	adds	r3, #1
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	0699      	lsls	r1, r3, #26
 800581a:	bf42      	ittt	mi
 800581c:	6833      	ldrmi	r3, [r6, #0]
 800581e:	3302      	addmi	r3, #2
 8005820:	6033      	strmi	r3, [r6, #0]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	f015 0506 	ands.w	r5, r5, #6
 8005828:	d106      	bne.n	8005838 <_printf_common+0x48>
 800582a:	f104 0a19 	add.w	sl, r4, #25
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	6832      	ldr	r2, [r6, #0]
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	42ab      	cmp	r3, r5
 8005836:	dc26      	bgt.n	8005886 <_printf_common+0x96>
 8005838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800583c:	1e13      	subs	r3, r2, #0
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	bf18      	it	ne
 8005842:	2301      	movne	r3, #1
 8005844:	0692      	lsls	r2, r2, #26
 8005846:	d42b      	bmi.n	80058a0 <_printf_common+0xb0>
 8005848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584c:	4649      	mov	r1, r9
 800584e:	4638      	mov	r0, r7
 8005850:	47c0      	blx	r8
 8005852:	3001      	adds	r0, #1
 8005854:	d01e      	beq.n	8005894 <_printf_common+0xa4>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	f003 0306 	and.w	r3, r3, #6
 800585e:	2b04      	cmp	r3, #4
 8005860:	bf02      	ittt	eq
 8005862:	68e5      	ldreq	r5, [r4, #12]
 8005864:	6833      	ldreq	r3, [r6, #0]
 8005866:	1aed      	subeq	r5, r5, r3
 8005868:	68a3      	ldr	r3, [r4, #8]
 800586a:	bf0c      	ite	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	2500      	movne	r5, #0
 8005872:	4293      	cmp	r3, r2
 8005874:	bfc4      	itt	gt
 8005876:	1a9b      	subgt	r3, r3, r2
 8005878:	18ed      	addgt	r5, r5, r3
 800587a:	2600      	movs	r6, #0
 800587c:	341a      	adds	r4, #26
 800587e:	42b5      	cmp	r5, r6
 8005880:	d11a      	bne.n	80058b8 <_printf_common+0xc8>
 8005882:	2000      	movs	r0, #0
 8005884:	e008      	b.n	8005898 <_printf_common+0xa8>
 8005886:	2301      	movs	r3, #1
 8005888:	4652      	mov	r2, sl
 800588a:	4649      	mov	r1, r9
 800588c:	4638      	mov	r0, r7
 800588e:	47c0      	blx	r8
 8005890:	3001      	adds	r0, #1
 8005892:	d103      	bne.n	800589c <_printf_common+0xac>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	3501      	adds	r5, #1
 800589e:	e7c6      	b.n	800582e <_printf_common+0x3e>
 80058a0:	18e1      	adds	r1, r4, r3
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	2030      	movs	r0, #48	; 0x30
 80058a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058aa:	4422      	add	r2, r4
 80058ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b4:	3302      	adds	r3, #2
 80058b6:	e7c7      	b.n	8005848 <_printf_common+0x58>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4622      	mov	r2, r4
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d0e6      	beq.n	8005894 <_printf_common+0xa4>
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7d9      	b.n	800587e <_printf_common+0x8e>
	...

080058cc <_printf_i>:
 80058cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	7e0f      	ldrb	r7, [r1, #24]
 80058d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d4:	2f78      	cmp	r7, #120	; 0x78
 80058d6:	4691      	mov	r9, r2
 80058d8:	4680      	mov	r8, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	469a      	mov	sl, r3
 80058de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e2:	d807      	bhi.n	80058f4 <_printf_i+0x28>
 80058e4:	2f62      	cmp	r7, #98	; 0x62
 80058e6:	d80a      	bhi.n	80058fe <_printf_i+0x32>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	f000 80d4 	beq.w	8005a96 <_printf_i+0x1ca>
 80058ee:	2f58      	cmp	r7, #88	; 0x58
 80058f0:	f000 80c0 	beq.w	8005a74 <_printf_i+0x1a8>
 80058f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058fc:	e03a      	b.n	8005974 <_printf_i+0xa8>
 80058fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005902:	2b15      	cmp	r3, #21
 8005904:	d8f6      	bhi.n	80058f4 <_printf_i+0x28>
 8005906:	a101      	add	r1, pc, #4	; (adr r1, 800590c <_printf_i+0x40>)
 8005908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800590c:	08005965 	.word	0x08005965
 8005910:	08005979 	.word	0x08005979
 8005914:	080058f5 	.word	0x080058f5
 8005918:	080058f5 	.word	0x080058f5
 800591c:	080058f5 	.word	0x080058f5
 8005920:	080058f5 	.word	0x080058f5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058f5 	.word	0x080058f5
 800592c:	080058f5 	.word	0x080058f5
 8005930:	080058f5 	.word	0x080058f5
 8005934:	080058f5 	.word	0x080058f5
 8005938:	08005a7d 	.word	0x08005a7d
 800593c:	080059a5 	.word	0x080059a5
 8005940:	08005a37 	.word	0x08005a37
 8005944:	080058f5 	.word	0x080058f5
 8005948:	080058f5 	.word	0x080058f5
 800594c:	08005a9f 	.word	0x08005a9f
 8005950:	080058f5 	.word	0x080058f5
 8005954:	080059a5 	.word	0x080059a5
 8005958:	080058f5 	.word	0x080058f5
 800595c:	080058f5 	.word	0x080058f5
 8005960:	08005a3f 	.word	0x08005a3f
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005974:	2301      	movs	r3, #1
 8005976:	e09f      	b.n	8005ab8 <_printf_i+0x1ec>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	0607      	lsls	r7, r0, #24
 800597e:	f103 0104 	add.w	r1, r3, #4
 8005982:	6029      	str	r1, [r5, #0]
 8005984:	d501      	bpl.n	800598a <_printf_i+0xbe>
 8005986:	681e      	ldr	r6, [r3, #0]
 8005988:	e003      	b.n	8005992 <_printf_i+0xc6>
 800598a:	0646      	lsls	r6, r0, #25
 800598c:	d5fb      	bpl.n	8005986 <_printf_i+0xba>
 800598e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005992:	2e00      	cmp	r6, #0
 8005994:	da03      	bge.n	800599e <_printf_i+0xd2>
 8005996:	232d      	movs	r3, #45	; 0x2d
 8005998:	4276      	negs	r6, r6
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599e:	485a      	ldr	r0, [pc, #360]	; (8005b08 <_printf_i+0x23c>)
 80059a0:	230a      	movs	r3, #10
 80059a2:	e012      	b.n	80059ca <_printf_i+0xfe>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	1d19      	adds	r1, r3, #4
 80059aa:	6029      	str	r1, [r5, #0]
 80059ac:	0605      	lsls	r5, r0, #24
 80059ae:	d501      	bpl.n	80059b4 <_printf_i+0xe8>
 80059b0:	681e      	ldr	r6, [r3, #0]
 80059b2:	e002      	b.n	80059ba <_printf_i+0xee>
 80059b4:	0641      	lsls	r1, r0, #25
 80059b6:	d5fb      	bpl.n	80059b0 <_printf_i+0xe4>
 80059b8:	881e      	ldrh	r6, [r3, #0]
 80059ba:	4853      	ldr	r0, [pc, #332]	; (8005b08 <_printf_i+0x23c>)
 80059bc:	2f6f      	cmp	r7, #111	; 0x6f
 80059be:	bf0c      	ite	eq
 80059c0:	2308      	moveq	r3, #8
 80059c2:	230a      	movne	r3, #10
 80059c4:	2100      	movs	r1, #0
 80059c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ca:	6865      	ldr	r5, [r4, #4]
 80059cc:	60a5      	str	r5, [r4, #8]
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	bfa2      	ittt	ge
 80059d2:	6821      	ldrge	r1, [r4, #0]
 80059d4:	f021 0104 	bicge.w	r1, r1, #4
 80059d8:	6021      	strge	r1, [r4, #0]
 80059da:	b90e      	cbnz	r6, 80059e0 <_printf_i+0x114>
 80059dc:	2d00      	cmp	r5, #0
 80059de:	d04b      	beq.n	8005a78 <_printf_i+0x1ac>
 80059e0:	4615      	mov	r5, r2
 80059e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059e6:	fb03 6711 	mls	r7, r3, r1, r6
 80059ea:	5dc7      	ldrb	r7, [r0, r7]
 80059ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f0:	4637      	mov	r7, r6
 80059f2:	42bb      	cmp	r3, r7
 80059f4:	460e      	mov	r6, r1
 80059f6:	d9f4      	bls.n	80059e2 <_printf_i+0x116>
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d10b      	bne.n	8005a14 <_printf_i+0x148>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	07de      	lsls	r6, r3, #31
 8005a00:	d508      	bpl.n	8005a14 <_printf_i+0x148>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	6861      	ldr	r1, [r4, #4]
 8005a06:	4299      	cmp	r1, r3
 8005a08:	bfde      	ittt	le
 8005a0a:	2330      	movle	r3, #48	; 0x30
 8005a0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	6122      	str	r2, [r4, #16]
 8005a18:	f8cd a000 	str.w	sl, [sp]
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	aa03      	add	r2, sp, #12
 8005a20:	4621      	mov	r1, r4
 8005a22:	4640      	mov	r0, r8
 8005a24:	f7ff fee4 	bl	80057f0 <_printf_common>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d14a      	bne.n	8005ac2 <_printf_i+0x1f6>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	b004      	add	sp, #16
 8005a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f043 0320 	orr.w	r3, r3, #32
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	4833      	ldr	r0, [pc, #204]	; (8005b0c <_printf_i+0x240>)
 8005a40:	2778      	movs	r7, #120	; 0x78
 8005a42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	6829      	ldr	r1, [r5, #0]
 8005a4a:	061f      	lsls	r7, r3, #24
 8005a4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a50:	d402      	bmi.n	8005a58 <_printf_i+0x18c>
 8005a52:	065f      	lsls	r7, r3, #25
 8005a54:	bf48      	it	mi
 8005a56:	b2b6      	uxthmi	r6, r6
 8005a58:	07df      	lsls	r7, r3, #31
 8005a5a:	bf48      	it	mi
 8005a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a60:	6029      	str	r1, [r5, #0]
 8005a62:	bf48      	it	mi
 8005a64:	6023      	strmi	r3, [r4, #0]
 8005a66:	b91e      	cbnz	r6, 8005a70 <_printf_i+0x1a4>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	f023 0320 	bic.w	r3, r3, #32
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	2310      	movs	r3, #16
 8005a72:	e7a7      	b.n	80059c4 <_printf_i+0xf8>
 8005a74:	4824      	ldr	r0, [pc, #144]	; (8005b08 <_printf_i+0x23c>)
 8005a76:	e7e4      	b.n	8005a42 <_printf_i+0x176>
 8005a78:	4615      	mov	r5, r2
 8005a7a:	e7bd      	b.n	80059f8 <_printf_i+0x12c>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	6826      	ldr	r6, [r4, #0]
 8005a80:	6961      	ldr	r1, [r4, #20]
 8005a82:	1d18      	adds	r0, r3, #4
 8005a84:	6028      	str	r0, [r5, #0]
 8005a86:	0635      	lsls	r5, r6, #24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	d501      	bpl.n	8005a90 <_printf_i+0x1c4>
 8005a8c:	6019      	str	r1, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <_printf_i+0x1ca>
 8005a90:	0670      	lsls	r0, r6, #25
 8005a92:	d5fb      	bpl.n	8005a8c <_printf_i+0x1c0>
 8005a94:	8019      	strh	r1, [r3, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	4615      	mov	r5, r2
 8005a9c:	e7bc      	b.n	8005a18 <_printf_i+0x14c>
 8005a9e:	682b      	ldr	r3, [r5, #0]
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	602a      	str	r2, [r5, #0]
 8005aa4:	681d      	ldr	r5, [r3, #0]
 8005aa6:	6862      	ldr	r2, [r4, #4]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fa fbb0 	bl	8000210 <memchr>
 8005ab0:	b108      	cbz	r0, 8005ab6 <_printf_i+0x1ea>
 8005ab2:	1b40      	subs	r0, r0, r5
 8005ab4:	6060      	str	r0, [r4, #4]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	2300      	movs	r3, #0
 8005abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac0:	e7aa      	b.n	8005a18 <_printf_i+0x14c>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d0ad      	beq.n	8005a2c <_printf_i+0x160>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	079b      	lsls	r3, r3, #30
 8005ad4:	d413      	bmi.n	8005afe <_printf_i+0x232>
 8005ad6:	68e0      	ldr	r0, [r4, #12]
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	4298      	cmp	r0, r3
 8005adc:	bfb8      	it	lt
 8005ade:	4618      	movlt	r0, r3
 8005ae0:	e7a6      	b.n	8005a30 <_printf_i+0x164>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	47d0      	blx	sl
 8005aec:	3001      	adds	r0, #1
 8005aee:	d09d      	beq.n	8005a2c <_printf_i+0x160>
 8005af0:	3501      	adds	r5, #1
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	9903      	ldr	r1, [sp, #12]
 8005af6:	1a5b      	subs	r3, r3, r1
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dcf2      	bgt.n	8005ae2 <_printf_i+0x216>
 8005afc:	e7eb      	b.n	8005ad6 <_printf_i+0x20a>
 8005afe:	2500      	movs	r5, #0
 8005b00:	f104 0619 	add.w	r6, r4, #25
 8005b04:	e7f5      	b.n	8005af2 <_printf_i+0x226>
 8005b06:	bf00      	nop
 8005b08:	080082f2 	.word	0x080082f2
 8005b0c:	08008303 	.word	0x08008303

08005b10 <std>:
 8005b10:	2300      	movs	r3, #0
 8005b12:	b510      	push	{r4, lr}
 8005b14:	4604      	mov	r4, r0
 8005b16:	e9c0 3300 	strd	r3, r3, [r0]
 8005b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b1e:	6083      	str	r3, [r0, #8]
 8005b20:	8181      	strh	r1, [r0, #12]
 8005b22:	6643      	str	r3, [r0, #100]	; 0x64
 8005b24:	81c2      	strh	r2, [r0, #14]
 8005b26:	6183      	str	r3, [r0, #24]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	305c      	adds	r0, #92	; 0x5c
 8005b2e:	f000 f8f4 	bl	8005d1a <memset>
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <std+0x58>)
 8005b34:	6263      	str	r3, [r4, #36]	; 0x24
 8005b36:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <std+0x5c>)
 8005b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <std+0x60>)
 8005b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <std+0x64>)
 8005b40:	6323      	str	r3, [r4, #48]	; 0x30
 8005b42:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <std+0x68>)
 8005b44:	6224      	str	r4, [r4, #32]
 8005b46:	429c      	cmp	r4, r3
 8005b48:	d006      	beq.n	8005b58 <std+0x48>
 8005b4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b4e:	4294      	cmp	r4, r2
 8005b50:	d002      	beq.n	8005b58 <std+0x48>
 8005b52:	33d0      	adds	r3, #208	; 0xd0
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d105      	bne.n	8005b64 <std+0x54>
 8005b58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b60:	f000 b958 	b.w	8005e14 <__retarget_lock_init_recursive>
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	bf00      	nop
 8005b68:	08005c95 	.word	0x08005c95
 8005b6c:	08005cb7 	.word	0x08005cb7
 8005b70:	08005cef 	.word	0x08005cef
 8005b74:	08005d13 	.word	0x08005d13
 8005b78:	200003cc 	.word	0x200003cc

08005b7c <stdio_exit_handler>:
 8005b7c:	4a02      	ldr	r2, [pc, #8]	; (8005b88 <stdio_exit_handler+0xc>)
 8005b7e:	4903      	ldr	r1, [pc, #12]	; (8005b8c <stdio_exit_handler+0x10>)
 8005b80:	4803      	ldr	r0, [pc, #12]	; (8005b90 <stdio_exit_handler+0x14>)
 8005b82:	f000 b869 	b.w	8005c58 <_fwalk_sglue>
 8005b86:	bf00      	nop
 8005b88:	20000038 	.word	0x20000038
 8005b8c:	08007519 	.word	0x08007519
 8005b90:	20000044 	.word	0x20000044

08005b94 <cleanup_stdio>:
 8005b94:	6841      	ldr	r1, [r0, #4]
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <cleanup_stdio+0x34>)
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	b510      	push	{r4, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	d001      	beq.n	8005ba4 <cleanup_stdio+0x10>
 8005ba0:	f001 fcba 	bl	8007518 <_fflush_r>
 8005ba4:	68a1      	ldr	r1, [r4, #8]
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <cleanup_stdio+0x38>)
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	d002      	beq.n	8005bb2 <cleanup_stdio+0x1e>
 8005bac:	4620      	mov	r0, r4
 8005bae:	f001 fcb3 	bl	8007518 <_fflush_r>
 8005bb2:	68e1      	ldr	r1, [r4, #12]
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <cleanup_stdio+0x3c>)
 8005bb6:	4299      	cmp	r1, r3
 8005bb8:	d004      	beq.n	8005bc4 <cleanup_stdio+0x30>
 8005bba:	4620      	mov	r0, r4
 8005bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc0:	f001 bcaa 	b.w	8007518 <_fflush_r>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200003cc 	.word	0x200003cc
 8005bcc:	20000434 	.word	0x20000434
 8005bd0:	2000049c 	.word	0x2000049c

08005bd4 <global_stdio_init.part.0>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <global_stdio_init.part.0+0x30>)
 8005bd8:	4c0b      	ldr	r4, [pc, #44]	; (8005c08 <global_stdio_init.part.0+0x34>)
 8005bda:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <global_stdio_init.part.0+0x38>)
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	4620      	mov	r0, r4
 8005be0:	2200      	movs	r2, #0
 8005be2:	2104      	movs	r1, #4
 8005be4:	f7ff ff94 	bl	8005b10 <std>
 8005be8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005bec:	2201      	movs	r2, #1
 8005bee:	2109      	movs	r1, #9
 8005bf0:	f7ff ff8e 	bl	8005b10 <std>
 8005bf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bfe:	2112      	movs	r1, #18
 8005c00:	f7ff bf86 	b.w	8005b10 <std>
 8005c04:	20000504 	.word	0x20000504
 8005c08:	200003cc 	.word	0x200003cc
 8005c0c:	08005b7d 	.word	0x08005b7d

08005c10 <__sfp_lock_acquire>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__sfp_lock_acquire+0x8>)
 8005c12:	f000 b900 	b.w	8005e16 <__retarget_lock_acquire_recursive>
 8005c16:	bf00      	nop
 8005c18:	2000050d 	.word	0x2000050d

08005c1c <__sfp_lock_release>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	; (8005c24 <__sfp_lock_release+0x8>)
 8005c1e:	f000 b8fb 	b.w	8005e18 <__retarget_lock_release_recursive>
 8005c22:	bf00      	nop
 8005c24:	2000050d 	.word	0x2000050d

08005c28 <__sinit>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	f7ff fff0 	bl	8005c10 <__sfp_lock_acquire>
 8005c30:	6a23      	ldr	r3, [r4, #32]
 8005c32:	b11b      	cbz	r3, 8005c3c <__sinit+0x14>
 8005c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c38:	f7ff bff0 	b.w	8005c1c <__sfp_lock_release>
 8005c3c:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <__sinit+0x28>)
 8005c3e:	6223      	str	r3, [r4, #32]
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <__sinit+0x2c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f5      	bne.n	8005c34 <__sinit+0xc>
 8005c48:	f7ff ffc4 	bl	8005bd4 <global_stdio_init.part.0>
 8005c4c:	e7f2      	b.n	8005c34 <__sinit+0xc>
 8005c4e:	bf00      	nop
 8005c50:	08005b95 	.word	0x08005b95
 8005c54:	20000504 	.word	0x20000504

08005c58 <_fwalk_sglue>:
 8005c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	4688      	mov	r8, r1
 8005c60:	4614      	mov	r4, r2
 8005c62:	2600      	movs	r6, #0
 8005c64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c68:	f1b9 0901 	subs.w	r9, r9, #1
 8005c6c:	d505      	bpl.n	8005c7a <_fwalk_sglue+0x22>
 8005c6e:	6824      	ldr	r4, [r4, #0]
 8005c70:	2c00      	cmp	r4, #0
 8005c72:	d1f7      	bne.n	8005c64 <_fwalk_sglue+0xc>
 8005c74:	4630      	mov	r0, r6
 8005c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7a:	89ab      	ldrh	r3, [r5, #12]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d907      	bls.n	8005c90 <_fwalk_sglue+0x38>
 8005c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c84:	3301      	adds	r3, #1
 8005c86:	d003      	beq.n	8005c90 <_fwalk_sglue+0x38>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	47c0      	blx	r8
 8005c8e:	4306      	orrs	r6, r0
 8005c90:	3568      	adds	r5, #104	; 0x68
 8005c92:	e7e9      	b.n	8005c68 <_fwalk_sglue+0x10>

08005c94 <__sread>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9c:	f000 f86c 	bl	8005d78 <_read_r>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	bfab      	itete	ge
 8005ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ca8:	181b      	addge	r3, r3, r0
 8005caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cae:	bfac      	ite	ge
 8005cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cb2:	81a3      	strhlt	r3, [r4, #12]
 8005cb4:	bd10      	pop	{r4, pc}

08005cb6 <__swrite>:
 8005cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cba:	461f      	mov	r7, r3
 8005cbc:	898b      	ldrh	r3, [r1, #12]
 8005cbe:	05db      	lsls	r3, r3, #23
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	d505      	bpl.n	8005cd4 <__swrite+0x1e>
 8005cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ccc:	2302      	movs	r3, #2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f000 f840 	bl	8005d54 <_lseek_r>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cde:	81a3      	strh	r3, [r4, #12]
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cea:	f000 b857 	b.w	8005d9c <_write_r>

08005cee <__sseek>:
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf6:	f000 f82d 	bl	8005d54 <_lseek_r>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	bf15      	itete	ne
 8005d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d0a:	81a3      	strheq	r3, [r4, #12]
 8005d0c:	bf18      	it	ne
 8005d0e:	81a3      	strhne	r3, [r4, #12]
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <__sclose>:
 8005d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d16:	f000 b80d 	b.w	8005d34 <_close_r>

08005d1a <memset>:
 8005d1a:	4402      	add	r2, r0
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d100      	bne.n	8005d24 <memset+0xa>
 8005d22:	4770      	bx	lr
 8005d24:	f803 1b01 	strb.w	r1, [r3], #1
 8005d28:	e7f9      	b.n	8005d1e <memset+0x4>
	...

08005d2c <_localeconv_r>:
 8005d2c:	4800      	ldr	r0, [pc, #0]	; (8005d30 <_localeconv_r+0x4>)
 8005d2e:	4770      	bx	lr
 8005d30:	20000184 	.word	0x20000184

08005d34 <_close_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4d06      	ldr	r5, [pc, #24]	; (8005d50 <_close_r+0x1c>)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f7fc fabf 	bl	80022c2 <_close>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_close_r+0x1a>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_close_r+0x1a>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	20000508 	.word	0x20000508

08005d54 <_lseek_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	; (8005d74 <_lseek_r+0x20>)
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4608      	mov	r0, r1
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	f7fc fad4 	bl	8002310 <_lseek>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_lseek_r+0x1e>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_lseek_r+0x1e>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20000508 	.word	0x20000508

08005d78 <_read_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d07      	ldr	r5, [pc, #28]	; (8005d98 <_read_r+0x20>)
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	4608      	mov	r0, r1
 8005d80:	4611      	mov	r1, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	602a      	str	r2, [r5, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f7fc fa62 	bl	8002250 <_read>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <_read_r+0x1e>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	b103      	cbz	r3, 8005d96 <_read_r+0x1e>
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	20000508 	.word	0x20000508

08005d9c <_write_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d07      	ldr	r5, [pc, #28]	; (8005dbc <_write_r+0x20>)
 8005da0:	4604      	mov	r4, r0
 8005da2:	4608      	mov	r0, r1
 8005da4:	4611      	mov	r1, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	602a      	str	r2, [r5, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f7fc fa6d 	bl	800228a <_write>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_write_r+0x1e>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_write_r+0x1e>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	20000508 	.word	0x20000508

08005dc0 <__errno>:
 8005dc0:	4b01      	ldr	r3, [pc, #4]	; (8005dc8 <__errno+0x8>)
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000090 	.word	0x20000090

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4d0d      	ldr	r5, [pc, #52]	; (8005e04 <__libc_init_array+0x38>)
 8005dd0:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <__libc_init_array+0x3c>)
 8005dd2:	1b64      	subs	r4, r4, r5
 8005dd4:	10a4      	asrs	r4, r4, #2
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	4d0b      	ldr	r5, [pc, #44]	; (8005e0c <__libc_init_array+0x40>)
 8005dde:	4c0c      	ldr	r4, [pc, #48]	; (8005e10 <__libc_init_array+0x44>)
 8005de0:	f002 fa68 	bl	80082b4 <_init>
 8005de4:	1b64      	subs	r4, r4, r5
 8005de6:	10a4      	asrs	r4, r4, #2
 8005de8:	2600      	movs	r6, #0
 8005dea:	42a6      	cmp	r6, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	4798      	blx	r3
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfe:	4798      	blx	r3
 8005e00:	3601      	adds	r6, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	080086d0 	.word	0x080086d0
 8005e08:	080086d0 	.word	0x080086d0
 8005e0c:	080086d0 	.word	0x080086d0
 8005e10:	080086d4 	.word	0x080086d4

08005e14 <__retarget_lock_init_recursive>:
 8005e14:	4770      	bx	lr

08005e16 <__retarget_lock_acquire_recursive>:
 8005e16:	4770      	bx	lr

08005e18 <__retarget_lock_release_recursive>:
 8005e18:	4770      	bx	lr

08005e1a <quorem>:
 8005e1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1e:	6903      	ldr	r3, [r0, #16]
 8005e20:	690c      	ldr	r4, [r1, #16]
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	4607      	mov	r7, r0
 8005e26:	db7e      	blt.n	8005f26 <quorem+0x10c>
 8005e28:	3c01      	subs	r4, #1
 8005e2a:	f101 0814 	add.w	r8, r1, #20
 8005e2e:	f100 0514 	add.w	r5, r0, #20
 8005e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e40:	3301      	adds	r3, #1
 8005e42:	429a      	cmp	r2, r3
 8005e44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e50:	d331      	bcc.n	8005eb6 <quorem+0x9c>
 8005e52:	f04f 0e00 	mov.w	lr, #0
 8005e56:	4640      	mov	r0, r8
 8005e58:	46ac      	mov	ip, r5
 8005e5a:	46f2      	mov	sl, lr
 8005e5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e60:	b293      	uxth	r3, r2
 8005e62:	fb06 e303 	mla	r3, r6, r3, lr
 8005e66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e6a:	0c1a      	lsrs	r2, r3, #16
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e72:	f8dc a000 	ldr.w	sl, [ip]
 8005e76:	fa13 f38a 	uxtah	r3, r3, sl
 8005e7a:	fb06 220e 	mla	r2, r6, lr, r2
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	9b00      	ldr	r3, [sp, #0]
 8005e82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e86:	b292      	uxth	r2, r2
 8005e88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e90:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e94:	4581      	cmp	r9, r0
 8005e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e9a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ea2:	d2db      	bcs.n	8005e5c <quorem+0x42>
 8005ea4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ea8:	b92b      	cbnz	r3, 8005eb6 <quorem+0x9c>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	d32c      	bcc.n	8005f0e <quorem+0xf4>
 8005eb4:	613c      	str	r4, [r7, #16]
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f001 f9a8 	bl	800720c <__mcmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	db22      	blt.n	8005f06 <quorem+0xec>
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005eca:	f8d1 c000 	ldr.w	ip, [r1]
 8005ece:	b293      	uxth	r3, r2
 8005ed0:	1ac3      	subs	r3, r0, r3
 8005ed2:	0c12      	lsrs	r2, r2, #16
 8005ed4:	fa13 f38c 	uxtah	r3, r3, ip
 8005ed8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ee6:	45c1      	cmp	r9, r8
 8005ee8:	f841 3b04 	str.w	r3, [r1], #4
 8005eec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ef0:	d2e9      	bcs.n	8005ec6 <quorem+0xac>
 8005ef2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ef6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005efa:	b922      	cbnz	r2, 8005f06 <quorem+0xec>
 8005efc:	3b04      	subs	r3, #4
 8005efe:	429d      	cmp	r5, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	d30a      	bcc.n	8005f1a <quorem+0x100>
 8005f04:	613c      	str	r4, [r7, #16]
 8005f06:	4630      	mov	r0, r6
 8005f08:	b003      	add	sp, #12
 8005f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	3b04      	subs	r3, #4
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	d1ce      	bne.n	8005eb4 <quorem+0x9a>
 8005f16:	3c01      	subs	r4, #1
 8005f18:	e7c9      	b.n	8005eae <quorem+0x94>
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	3b04      	subs	r3, #4
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	d1f0      	bne.n	8005f04 <quorem+0xea>
 8005f22:	3c01      	subs	r4, #1
 8005f24:	e7eb      	b.n	8005efe <quorem+0xe4>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e7ee      	b.n	8005f08 <quorem+0xee>
 8005f2a:	0000      	movs	r0, r0
 8005f2c:	0000      	movs	r0, r0
	...

08005f30 <_dtoa_r>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	ed2d 8b04 	vpush	{d8-d9}
 8005f38:	69c5      	ldr	r5, [r0, #28]
 8005f3a:	b093      	sub	sp, #76	; 0x4c
 8005f3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f40:	ec57 6b10 	vmov	r6, r7, d0
 8005f44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f48:	9107      	str	r1, [sp, #28]
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005f50:	b975      	cbnz	r5, 8005f70 <_dtoa_r+0x40>
 8005f52:	2010      	movs	r0, #16
 8005f54:	f000 fe2a 	bl	8006bac <malloc>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	61e0      	str	r0, [r4, #28]
 8005f5c:	b920      	cbnz	r0, 8005f68 <_dtoa_r+0x38>
 8005f5e:	4bae      	ldr	r3, [pc, #696]	; (8006218 <_dtoa_r+0x2e8>)
 8005f60:	21ef      	movs	r1, #239	; 0xef
 8005f62:	48ae      	ldr	r0, [pc, #696]	; (800621c <_dtoa_r+0x2ec>)
 8005f64:	f001 fb1e 	bl	80075a4 <__assert_func>
 8005f68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f6c:	6005      	str	r5, [r0, #0]
 8005f6e:	60c5      	str	r5, [r0, #12]
 8005f70:	69e3      	ldr	r3, [r4, #28]
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	b151      	cbz	r1, 8005f8c <_dtoa_r+0x5c>
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	604a      	str	r2, [r1, #4]
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4093      	lsls	r3, r2
 8005f7e:	608b      	str	r3, [r1, #8]
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 ff07 	bl	8006d94 <_Bfree>
 8005f86:	69e3      	ldr	r3, [r4, #28]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	1e3b      	subs	r3, r7, #0
 8005f8e:	bfbb      	ittet	lt
 8005f90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	9303      	strlt	r3, [sp, #12]
 8005f96:	2300      	movge	r3, #0
 8005f98:	2201      	movlt	r2, #1
 8005f9a:	bfac      	ite	ge
 8005f9c:	f8c8 3000 	strge.w	r3, [r8]
 8005fa0:	f8c8 2000 	strlt.w	r2, [r8]
 8005fa4:	4b9e      	ldr	r3, [pc, #632]	; (8006220 <_dtoa_r+0x2f0>)
 8005fa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005faa:	ea33 0308 	bics.w	r3, r3, r8
 8005fae:	d11b      	bne.n	8005fe8 <_dtoa_r+0xb8>
 8005fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005fbc:	4333      	orrs	r3, r6
 8005fbe:	f000 8593 	beq.w	8006ae8 <_dtoa_r+0xbb8>
 8005fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc4:	b963      	cbnz	r3, 8005fe0 <_dtoa_r+0xb0>
 8005fc6:	4b97      	ldr	r3, [pc, #604]	; (8006224 <_dtoa_r+0x2f4>)
 8005fc8:	e027      	b.n	800601a <_dtoa_r+0xea>
 8005fca:	4b97      	ldr	r3, [pc, #604]	; (8006228 <_dtoa_r+0x2f8>)
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	9800      	ldr	r0, [sp, #0]
 8005fd6:	b013      	add	sp, #76	; 0x4c
 8005fd8:	ecbd 8b04 	vpop	{d8-d9}
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	4b90      	ldr	r3, [pc, #576]	; (8006224 <_dtoa_r+0x2f4>)
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	3303      	adds	r3, #3
 8005fe6:	e7f3      	b.n	8005fd0 <_dtoa_r+0xa0>
 8005fe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	ec51 0b17 	vmov	r0, r1, d7
 8005ff2:	eeb0 8a47 	vmov.f32	s16, s14
 8005ff6:	eef0 8a67 	vmov.f32	s17, s15
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f7fa fd84 	bl	8000b08 <__aeabi_dcmpeq>
 8006000:	4681      	mov	r9, r0
 8006002:	b160      	cbz	r0, 800601e <_dtoa_r+0xee>
 8006004:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006006:	2301      	movs	r3, #1
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8568 	beq.w	8006ae2 <_dtoa_r+0xbb2>
 8006012:	4b86      	ldr	r3, [pc, #536]	; (800622c <_dtoa_r+0x2fc>)
 8006014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	3b01      	subs	r3, #1
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	e7da      	b.n	8005fd4 <_dtoa_r+0xa4>
 800601e:	aa10      	add	r2, sp, #64	; 0x40
 8006020:	a911      	add	r1, sp, #68	; 0x44
 8006022:	4620      	mov	r0, r4
 8006024:	eeb0 0a48 	vmov.f32	s0, s16
 8006028:	eef0 0a68 	vmov.f32	s1, s17
 800602c:	f001 f994 	bl	8007358 <__d2b>
 8006030:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006034:	4682      	mov	sl, r0
 8006036:	2d00      	cmp	r5, #0
 8006038:	d07f      	beq.n	800613a <_dtoa_r+0x20a>
 800603a:	ee18 3a90 	vmov	r3, s17
 800603e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006042:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006046:	ec51 0b18 	vmov	r0, r1, d8
 800604a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800604e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006052:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006056:	4619      	mov	r1, r3
 8006058:	2200      	movs	r2, #0
 800605a:	4b75      	ldr	r3, [pc, #468]	; (8006230 <_dtoa_r+0x300>)
 800605c:	f7fa f934 	bl	80002c8 <__aeabi_dsub>
 8006060:	a367      	add	r3, pc, #412	; (adr r3, 8006200 <_dtoa_r+0x2d0>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa fae7 	bl	8000638 <__aeabi_dmul>
 800606a:	a367      	add	r3, pc, #412	; (adr r3, 8006208 <_dtoa_r+0x2d8>)
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f7fa f92c 	bl	80002cc <__adddf3>
 8006074:	4606      	mov	r6, r0
 8006076:	4628      	mov	r0, r5
 8006078:	460f      	mov	r7, r1
 800607a:	f7fa fa73 	bl	8000564 <__aeabi_i2d>
 800607e:	a364      	add	r3, pc, #400	; (adr r3, 8006210 <_dtoa_r+0x2e0>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa fad8 	bl	8000638 <__aeabi_dmul>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4630      	mov	r0, r6
 800608e:	4639      	mov	r1, r7
 8006090:	f7fa f91c 	bl	80002cc <__adddf3>
 8006094:	4606      	mov	r6, r0
 8006096:	460f      	mov	r7, r1
 8006098:	f7fa fd7e 	bl	8000b98 <__aeabi_d2iz>
 800609c:	2200      	movs	r2, #0
 800609e:	4683      	mov	fp, r0
 80060a0:	2300      	movs	r3, #0
 80060a2:	4630      	mov	r0, r6
 80060a4:	4639      	mov	r1, r7
 80060a6:	f7fa fd39 	bl	8000b1c <__aeabi_dcmplt>
 80060aa:	b148      	cbz	r0, 80060c0 <_dtoa_r+0x190>
 80060ac:	4658      	mov	r0, fp
 80060ae:	f7fa fa59 	bl	8000564 <__aeabi_i2d>
 80060b2:	4632      	mov	r2, r6
 80060b4:	463b      	mov	r3, r7
 80060b6:	f7fa fd27 	bl	8000b08 <__aeabi_dcmpeq>
 80060ba:	b908      	cbnz	r0, 80060c0 <_dtoa_r+0x190>
 80060bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060c0:	f1bb 0f16 	cmp.w	fp, #22
 80060c4:	d857      	bhi.n	8006176 <_dtoa_r+0x246>
 80060c6:	4b5b      	ldr	r3, [pc, #364]	; (8006234 <_dtoa_r+0x304>)
 80060c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	ec51 0b18 	vmov	r0, r1, d8
 80060d4:	f7fa fd22 	bl	8000b1c <__aeabi_dcmplt>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d04e      	beq.n	800617a <_dtoa_r+0x24a>
 80060dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060e0:	2300      	movs	r3, #0
 80060e2:	930c      	str	r3, [sp, #48]	; 0x30
 80060e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060e6:	1b5b      	subs	r3, r3, r5
 80060e8:	1e5a      	subs	r2, r3, #1
 80060ea:	bf45      	ittet	mi
 80060ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80060f0:	9305      	strmi	r3, [sp, #20]
 80060f2:	2300      	movpl	r3, #0
 80060f4:	2300      	movmi	r3, #0
 80060f6:	9206      	str	r2, [sp, #24]
 80060f8:	bf54      	ite	pl
 80060fa:	9305      	strpl	r3, [sp, #20]
 80060fc:	9306      	strmi	r3, [sp, #24]
 80060fe:	f1bb 0f00 	cmp.w	fp, #0
 8006102:	db3c      	blt.n	800617e <_dtoa_r+0x24e>
 8006104:	9b06      	ldr	r3, [sp, #24]
 8006106:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800610a:	445b      	add	r3, fp
 800610c:	9306      	str	r3, [sp, #24]
 800610e:	2300      	movs	r3, #0
 8006110:	9308      	str	r3, [sp, #32]
 8006112:	9b07      	ldr	r3, [sp, #28]
 8006114:	2b09      	cmp	r3, #9
 8006116:	d868      	bhi.n	80061ea <_dtoa_r+0x2ba>
 8006118:	2b05      	cmp	r3, #5
 800611a:	bfc4      	itt	gt
 800611c:	3b04      	subgt	r3, #4
 800611e:	9307      	strgt	r3, [sp, #28]
 8006120:	9b07      	ldr	r3, [sp, #28]
 8006122:	f1a3 0302 	sub.w	r3, r3, #2
 8006126:	bfcc      	ite	gt
 8006128:	2500      	movgt	r5, #0
 800612a:	2501      	movle	r5, #1
 800612c:	2b03      	cmp	r3, #3
 800612e:	f200 8085 	bhi.w	800623c <_dtoa_r+0x30c>
 8006132:	e8df f003 	tbb	[pc, r3]
 8006136:	3b2e      	.short	0x3b2e
 8006138:	5839      	.short	0x5839
 800613a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800613e:	441d      	add	r5, r3
 8006140:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006144:	2b20      	cmp	r3, #32
 8006146:	bfc1      	itttt	gt
 8006148:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800614c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006150:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006154:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006158:	bfd6      	itet	le
 800615a:	f1c3 0320 	rsble	r3, r3, #32
 800615e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006162:	fa06 f003 	lslle.w	r0, r6, r3
 8006166:	f7fa f9ed 	bl	8000544 <__aeabi_ui2d>
 800616a:	2201      	movs	r2, #1
 800616c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006170:	3d01      	subs	r5, #1
 8006172:	920e      	str	r2, [sp, #56]	; 0x38
 8006174:	e76f      	b.n	8006056 <_dtoa_r+0x126>
 8006176:	2301      	movs	r3, #1
 8006178:	e7b3      	b.n	80060e2 <_dtoa_r+0x1b2>
 800617a:	900c      	str	r0, [sp, #48]	; 0x30
 800617c:	e7b2      	b.n	80060e4 <_dtoa_r+0x1b4>
 800617e:	9b05      	ldr	r3, [sp, #20]
 8006180:	eba3 030b 	sub.w	r3, r3, fp
 8006184:	9305      	str	r3, [sp, #20]
 8006186:	f1cb 0300 	rsb	r3, fp, #0
 800618a:	9308      	str	r3, [sp, #32]
 800618c:	2300      	movs	r3, #0
 800618e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006190:	e7bf      	b.n	8006112 <_dtoa_r+0x1e2>
 8006192:	2300      	movs	r3, #0
 8006194:	9309      	str	r3, [sp, #36]	; 0x24
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	dc52      	bgt.n	8006242 <_dtoa_r+0x312>
 800619c:	2301      	movs	r3, #1
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	461a      	mov	r2, r3
 80061a4:	920a      	str	r2, [sp, #40]	; 0x28
 80061a6:	e00b      	b.n	80061c0 <_dtoa_r+0x290>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e7f3      	b.n	8006194 <_dtoa_r+0x264>
 80061ac:	2300      	movs	r3, #0
 80061ae:	9309      	str	r3, [sp, #36]	; 0x24
 80061b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b2:	445b      	add	r3, fp
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	3301      	adds	r3, #1
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	bfb8      	it	lt
 80061be:	2301      	movlt	r3, #1
 80061c0:	69e0      	ldr	r0, [r4, #28]
 80061c2:	2100      	movs	r1, #0
 80061c4:	2204      	movs	r2, #4
 80061c6:	f102 0614 	add.w	r6, r2, #20
 80061ca:	429e      	cmp	r6, r3
 80061cc:	d93d      	bls.n	800624a <_dtoa_r+0x31a>
 80061ce:	6041      	str	r1, [r0, #4]
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fd9f 	bl	8006d14 <_Balloc>
 80061d6:	9000      	str	r0, [sp, #0]
 80061d8:	2800      	cmp	r0, #0
 80061da:	d139      	bne.n	8006250 <_dtoa_r+0x320>
 80061dc:	4b16      	ldr	r3, [pc, #88]	; (8006238 <_dtoa_r+0x308>)
 80061de:	4602      	mov	r2, r0
 80061e0:	f240 11af 	movw	r1, #431	; 0x1af
 80061e4:	e6bd      	b.n	8005f62 <_dtoa_r+0x32>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e7e1      	b.n	80061ae <_dtoa_r+0x27e>
 80061ea:	2501      	movs	r5, #1
 80061ec:	2300      	movs	r3, #0
 80061ee:	9307      	str	r3, [sp, #28]
 80061f0:	9509      	str	r5, [sp, #36]	; 0x24
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	2200      	movs	r2, #0
 80061fc:	2312      	movs	r3, #18
 80061fe:	e7d1      	b.n	80061a4 <_dtoa_r+0x274>
 8006200:	636f4361 	.word	0x636f4361
 8006204:	3fd287a7 	.word	0x3fd287a7
 8006208:	8b60c8b3 	.word	0x8b60c8b3
 800620c:	3fc68a28 	.word	0x3fc68a28
 8006210:	509f79fb 	.word	0x509f79fb
 8006214:	3fd34413 	.word	0x3fd34413
 8006218:	08008321 	.word	0x08008321
 800621c:	08008338 	.word	0x08008338
 8006220:	7ff00000 	.word	0x7ff00000
 8006224:	0800831d 	.word	0x0800831d
 8006228:	08008314 	.word	0x08008314
 800622c:	080082f1 	.word	0x080082f1
 8006230:	3ff80000 	.word	0x3ff80000
 8006234:	08008428 	.word	0x08008428
 8006238:	08008390 	.word	0x08008390
 800623c:	2301      	movs	r3, #1
 800623e:	9309      	str	r3, [sp, #36]	; 0x24
 8006240:	e7d7      	b.n	80061f2 <_dtoa_r+0x2c2>
 8006242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	e7ba      	b.n	80061c0 <_dtoa_r+0x290>
 800624a:	3101      	adds	r1, #1
 800624c:	0052      	lsls	r2, r2, #1
 800624e:	e7ba      	b.n	80061c6 <_dtoa_r+0x296>
 8006250:	69e3      	ldr	r3, [r4, #28]
 8006252:	9a00      	ldr	r2, [sp, #0]
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	2b0e      	cmp	r3, #14
 800625a:	f200 80a8 	bhi.w	80063ae <_dtoa_r+0x47e>
 800625e:	2d00      	cmp	r5, #0
 8006260:	f000 80a5 	beq.w	80063ae <_dtoa_r+0x47e>
 8006264:	f1bb 0f00 	cmp.w	fp, #0
 8006268:	dd38      	ble.n	80062dc <_dtoa_r+0x3ac>
 800626a:	4bc0      	ldr	r3, [pc, #768]	; (800656c <_dtoa_r+0x63c>)
 800626c:	f00b 020f 	and.w	r2, fp, #15
 8006270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006274:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006278:	e9d3 6700 	ldrd	r6, r7, [r3]
 800627c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006280:	d019      	beq.n	80062b6 <_dtoa_r+0x386>
 8006282:	4bbb      	ldr	r3, [pc, #748]	; (8006570 <_dtoa_r+0x640>)
 8006284:	ec51 0b18 	vmov	r0, r1, d8
 8006288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800628c:	f7fa fafe 	bl	800088c <__aeabi_ddiv>
 8006290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006294:	f008 080f 	and.w	r8, r8, #15
 8006298:	2503      	movs	r5, #3
 800629a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006570 <_dtoa_r+0x640>
 800629e:	f1b8 0f00 	cmp.w	r8, #0
 80062a2:	d10a      	bne.n	80062ba <_dtoa_r+0x38a>
 80062a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a8:	4632      	mov	r2, r6
 80062aa:	463b      	mov	r3, r7
 80062ac:	f7fa faee 	bl	800088c <__aeabi_ddiv>
 80062b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b4:	e02b      	b.n	800630e <_dtoa_r+0x3de>
 80062b6:	2502      	movs	r5, #2
 80062b8:	e7ef      	b.n	800629a <_dtoa_r+0x36a>
 80062ba:	f018 0f01 	tst.w	r8, #1
 80062be:	d008      	beq.n	80062d2 <_dtoa_r+0x3a2>
 80062c0:	4630      	mov	r0, r6
 80062c2:	4639      	mov	r1, r7
 80062c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80062c8:	f7fa f9b6 	bl	8000638 <__aeabi_dmul>
 80062cc:	3501      	adds	r5, #1
 80062ce:	4606      	mov	r6, r0
 80062d0:	460f      	mov	r7, r1
 80062d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062d6:	f109 0908 	add.w	r9, r9, #8
 80062da:	e7e0      	b.n	800629e <_dtoa_r+0x36e>
 80062dc:	f000 809f 	beq.w	800641e <_dtoa_r+0x4ee>
 80062e0:	f1cb 0600 	rsb	r6, fp, #0
 80062e4:	4ba1      	ldr	r3, [pc, #644]	; (800656c <_dtoa_r+0x63c>)
 80062e6:	4fa2      	ldr	r7, [pc, #648]	; (8006570 <_dtoa_r+0x640>)
 80062e8:	f006 020f 	and.w	r2, r6, #15
 80062ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	ec51 0b18 	vmov	r0, r1, d8
 80062f8:	f7fa f99e 	bl	8000638 <__aeabi_dmul>
 80062fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006300:	1136      	asrs	r6, r6, #4
 8006302:	2300      	movs	r3, #0
 8006304:	2502      	movs	r5, #2
 8006306:	2e00      	cmp	r6, #0
 8006308:	d17e      	bne.n	8006408 <_dtoa_r+0x4d8>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1d0      	bne.n	80062b0 <_dtoa_r+0x380>
 800630e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006310:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8084 	beq.w	8006422 <_dtoa_r+0x4f2>
 800631a:	4b96      	ldr	r3, [pc, #600]	; (8006574 <_dtoa_r+0x644>)
 800631c:	2200      	movs	r2, #0
 800631e:	4640      	mov	r0, r8
 8006320:	4649      	mov	r1, r9
 8006322:	f7fa fbfb 	bl	8000b1c <__aeabi_dcmplt>
 8006326:	2800      	cmp	r0, #0
 8006328:	d07b      	beq.n	8006422 <_dtoa_r+0x4f2>
 800632a:	9b04      	ldr	r3, [sp, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d078      	beq.n	8006422 <_dtoa_r+0x4f2>
 8006330:	9b01      	ldr	r3, [sp, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	dd39      	ble.n	80063aa <_dtoa_r+0x47a>
 8006336:	4b90      	ldr	r3, [pc, #576]	; (8006578 <_dtoa_r+0x648>)
 8006338:	2200      	movs	r2, #0
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa f97b 	bl	8000638 <__aeabi_dmul>
 8006342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006346:	9e01      	ldr	r6, [sp, #4]
 8006348:	f10b 37ff 	add.w	r7, fp, #4294967295
 800634c:	3501      	adds	r5, #1
 800634e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006352:	4628      	mov	r0, r5
 8006354:	f7fa f906 	bl	8000564 <__aeabi_i2d>
 8006358:	4642      	mov	r2, r8
 800635a:	464b      	mov	r3, r9
 800635c:	f7fa f96c 	bl	8000638 <__aeabi_dmul>
 8006360:	4b86      	ldr	r3, [pc, #536]	; (800657c <_dtoa_r+0x64c>)
 8006362:	2200      	movs	r2, #0
 8006364:	f7f9 ffb2 	bl	80002cc <__adddf3>
 8006368:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800636c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006370:	9303      	str	r3, [sp, #12]
 8006372:	2e00      	cmp	r6, #0
 8006374:	d158      	bne.n	8006428 <_dtoa_r+0x4f8>
 8006376:	4b82      	ldr	r3, [pc, #520]	; (8006580 <_dtoa_r+0x650>)
 8006378:	2200      	movs	r2, #0
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7f9 ffa3 	bl	80002c8 <__aeabi_dsub>
 8006382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006386:	4680      	mov	r8, r0
 8006388:	4689      	mov	r9, r1
 800638a:	f7fa fbe5 	bl	8000b58 <__aeabi_dcmpgt>
 800638e:	2800      	cmp	r0, #0
 8006390:	f040 8296 	bne.w	80068c0 <_dtoa_r+0x990>
 8006394:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006398:	4640      	mov	r0, r8
 800639a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800639e:	4649      	mov	r1, r9
 80063a0:	f7fa fbbc 	bl	8000b1c <__aeabi_dcmplt>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 8289 	bne.w	80068bc <_dtoa_r+0x98c>
 80063aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80063ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f2c0 814e 	blt.w	8006652 <_dtoa_r+0x722>
 80063b6:	f1bb 0f0e 	cmp.w	fp, #14
 80063ba:	f300 814a 	bgt.w	8006652 <_dtoa_r+0x722>
 80063be:	4b6b      	ldr	r3, [pc, #428]	; (800656c <_dtoa_r+0x63c>)
 80063c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f280 80dc 	bge.w	8006588 <_dtoa_r+0x658>
 80063d0:	9b04      	ldr	r3, [sp, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f300 80d8 	bgt.w	8006588 <_dtoa_r+0x658>
 80063d8:	f040 826f 	bne.w	80068ba <_dtoa_r+0x98a>
 80063dc:	4b68      	ldr	r3, [pc, #416]	; (8006580 <_dtoa_r+0x650>)
 80063de:	2200      	movs	r2, #0
 80063e0:	4640      	mov	r0, r8
 80063e2:	4649      	mov	r1, r9
 80063e4:	f7fa f928 	bl	8000638 <__aeabi_dmul>
 80063e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ec:	f7fa fbaa 	bl	8000b44 <__aeabi_dcmpge>
 80063f0:	9e04      	ldr	r6, [sp, #16]
 80063f2:	4637      	mov	r7, r6
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f040 8245 	bne.w	8006884 <_dtoa_r+0x954>
 80063fa:	9d00      	ldr	r5, [sp, #0]
 80063fc:	2331      	movs	r3, #49	; 0x31
 80063fe:	f805 3b01 	strb.w	r3, [r5], #1
 8006402:	f10b 0b01 	add.w	fp, fp, #1
 8006406:	e241      	b.n	800688c <_dtoa_r+0x95c>
 8006408:	07f2      	lsls	r2, r6, #31
 800640a:	d505      	bpl.n	8006418 <_dtoa_r+0x4e8>
 800640c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006410:	f7fa f912 	bl	8000638 <__aeabi_dmul>
 8006414:	3501      	adds	r5, #1
 8006416:	2301      	movs	r3, #1
 8006418:	1076      	asrs	r6, r6, #1
 800641a:	3708      	adds	r7, #8
 800641c:	e773      	b.n	8006306 <_dtoa_r+0x3d6>
 800641e:	2502      	movs	r5, #2
 8006420:	e775      	b.n	800630e <_dtoa_r+0x3de>
 8006422:	9e04      	ldr	r6, [sp, #16]
 8006424:	465f      	mov	r7, fp
 8006426:	e792      	b.n	800634e <_dtoa_r+0x41e>
 8006428:	9900      	ldr	r1, [sp, #0]
 800642a:	4b50      	ldr	r3, [pc, #320]	; (800656c <_dtoa_r+0x63c>)
 800642c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006430:	4431      	add	r1, r6
 8006432:	9102      	str	r1, [sp, #8]
 8006434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006436:	eeb0 9a47 	vmov.f32	s18, s14
 800643a:	eef0 9a67 	vmov.f32	s19, s15
 800643e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006446:	2900      	cmp	r1, #0
 8006448:	d044      	beq.n	80064d4 <_dtoa_r+0x5a4>
 800644a:	494e      	ldr	r1, [pc, #312]	; (8006584 <_dtoa_r+0x654>)
 800644c:	2000      	movs	r0, #0
 800644e:	f7fa fa1d 	bl	800088c <__aeabi_ddiv>
 8006452:	ec53 2b19 	vmov	r2, r3, d9
 8006456:	f7f9 ff37 	bl	80002c8 <__aeabi_dsub>
 800645a:	9d00      	ldr	r5, [sp, #0]
 800645c:	ec41 0b19 	vmov	d9, r0, r1
 8006460:	4649      	mov	r1, r9
 8006462:	4640      	mov	r0, r8
 8006464:	f7fa fb98 	bl	8000b98 <__aeabi_d2iz>
 8006468:	4606      	mov	r6, r0
 800646a:	f7fa f87b 	bl	8000564 <__aeabi_i2d>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4640      	mov	r0, r8
 8006474:	4649      	mov	r1, r9
 8006476:	f7f9 ff27 	bl	80002c8 <__aeabi_dsub>
 800647a:	3630      	adds	r6, #48	; 0x30
 800647c:	f805 6b01 	strb.w	r6, [r5], #1
 8006480:	ec53 2b19 	vmov	r2, r3, d9
 8006484:	4680      	mov	r8, r0
 8006486:	4689      	mov	r9, r1
 8006488:	f7fa fb48 	bl	8000b1c <__aeabi_dcmplt>
 800648c:	2800      	cmp	r0, #0
 800648e:	d164      	bne.n	800655a <_dtoa_r+0x62a>
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	4937      	ldr	r1, [pc, #220]	; (8006574 <_dtoa_r+0x644>)
 8006496:	2000      	movs	r0, #0
 8006498:	f7f9 ff16 	bl	80002c8 <__aeabi_dsub>
 800649c:	ec53 2b19 	vmov	r2, r3, d9
 80064a0:	f7fa fb3c 	bl	8000b1c <__aeabi_dcmplt>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f040 80b6 	bne.w	8006616 <_dtoa_r+0x6e6>
 80064aa:	9b02      	ldr	r3, [sp, #8]
 80064ac:	429d      	cmp	r5, r3
 80064ae:	f43f af7c 	beq.w	80063aa <_dtoa_r+0x47a>
 80064b2:	4b31      	ldr	r3, [pc, #196]	; (8006578 <_dtoa_r+0x648>)
 80064b4:	ec51 0b19 	vmov	r0, r1, d9
 80064b8:	2200      	movs	r2, #0
 80064ba:	f7fa f8bd 	bl	8000638 <__aeabi_dmul>
 80064be:	4b2e      	ldr	r3, [pc, #184]	; (8006578 <_dtoa_r+0x648>)
 80064c0:	ec41 0b19 	vmov	d9, r0, r1
 80064c4:	2200      	movs	r2, #0
 80064c6:	4640      	mov	r0, r8
 80064c8:	4649      	mov	r1, r9
 80064ca:	f7fa f8b5 	bl	8000638 <__aeabi_dmul>
 80064ce:	4680      	mov	r8, r0
 80064d0:	4689      	mov	r9, r1
 80064d2:	e7c5      	b.n	8006460 <_dtoa_r+0x530>
 80064d4:	ec51 0b17 	vmov	r0, r1, d7
 80064d8:	f7fa f8ae 	bl	8000638 <__aeabi_dmul>
 80064dc:	9b02      	ldr	r3, [sp, #8]
 80064de:	9d00      	ldr	r5, [sp, #0]
 80064e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80064e2:	ec41 0b19 	vmov	d9, r0, r1
 80064e6:	4649      	mov	r1, r9
 80064e8:	4640      	mov	r0, r8
 80064ea:	f7fa fb55 	bl	8000b98 <__aeabi_d2iz>
 80064ee:	4606      	mov	r6, r0
 80064f0:	f7fa f838 	bl	8000564 <__aeabi_i2d>
 80064f4:	3630      	adds	r6, #48	; 0x30
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7f9 fee3 	bl	80002c8 <__aeabi_dsub>
 8006502:	f805 6b01 	strb.w	r6, [r5], #1
 8006506:	9b02      	ldr	r3, [sp, #8]
 8006508:	429d      	cmp	r5, r3
 800650a:	4680      	mov	r8, r0
 800650c:	4689      	mov	r9, r1
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	d124      	bne.n	800655e <_dtoa_r+0x62e>
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <_dtoa_r+0x654>)
 8006516:	ec51 0b19 	vmov	r0, r1, d9
 800651a:	f7f9 fed7 	bl	80002cc <__adddf3>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f7fa fb17 	bl	8000b58 <__aeabi_dcmpgt>
 800652a:	2800      	cmp	r0, #0
 800652c:	d173      	bne.n	8006616 <_dtoa_r+0x6e6>
 800652e:	ec53 2b19 	vmov	r2, r3, d9
 8006532:	4914      	ldr	r1, [pc, #80]	; (8006584 <_dtoa_r+0x654>)
 8006534:	2000      	movs	r0, #0
 8006536:	f7f9 fec7 	bl	80002c8 <__aeabi_dsub>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7fa faeb 	bl	8000b1c <__aeabi_dcmplt>
 8006546:	2800      	cmp	r0, #0
 8006548:	f43f af2f 	beq.w	80063aa <_dtoa_r+0x47a>
 800654c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800654e:	1e6b      	subs	r3, r5, #1
 8006550:	930f      	str	r3, [sp, #60]	; 0x3c
 8006552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006556:	2b30      	cmp	r3, #48	; 0x30
 8006558:	d0f8      	beq.n	800654c <_dtoa_r+0x61c>
 800655a:	46bb      	mov	fp, r7
 800655c:	e04a      	b.n	80065f4 <_dtoa_r+0x6c4>
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <_dtoa_r+0x648>)
 8006560:	f7fa f86a 	bl	8000638 <__aeabi_dmul>
 8006564:	4680      	mov	r8, r0
 8006566:	4689      	mov	r9, r1
 8006568:	e7bd      	b.n	80064e6 <_dtoa_r+0x5b6>
 800656a:	bf00      	nop
 800656c:	08008428 	.word	0x08008428
 8006570:	08008400 	.word	0x08008400
 8006574:	3ff00000 	.word	0x3ff00000
 8006578:	40240000 	.word	0x40240000
 800657c:	401c0000 	.word	0x401c0000
 8006580:	40140000 	.word	0x40140000
 8006584:	3fe00000 	.word	0x3fe00000
 8006588:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800658c:	9d00      	ldr	r5, [sp, #0]
 800658e:	4642      	mov	r2, r8
 8006590:	464b      	mov	r3, r9
 8006592:	4630      	mov	r0, r6
 8006594:	4639      	mov	r1, r7
 8006596:	f7fa f979 	bl	800088c <__aeabi_ddiv>
 800659a:	f7fa fafd 	bl	8000b98 <__aeabi_d2iz>
 800659e:	9001      	str	r0, [sp, #4]
 80065a0:	f7f9 ffe0 	bl	8000564 <__aeabi_i2d>
 80065a4:	4642      	mov	r2, r8
 80065a6:	464b      	mov	r3, r9
 80065a8:	f7fa f846 	bl	8000638 <__aeabi_dmul>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7f9 fe88 	bl	80002c8 <__aeabi_dsub>
 80065b8:	9e01      	ldr	r6, [sp, #4]
 80065ba:	9f04      	ldr	r7, [sp, #16]
 80065bc:	3630      	adds	r6, #48	; 0x30
 80065be:	f805 6b01 	strb.w	r6, [r5], #1
 80065c2:	9e00      	ldr	r6, [sp, #0]
 80065c4:	1bae      	subs	r6, r5, r6
 80065c6:	42b7      	cmp	r7, r6
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	d134      	bne.n	8006638 <_dtoa_r+0x708>
 80065ce:	f7f9 fe7d 	bl	80002cc <__adddf3>
 80065d2:	4642      	mov	r2, r8
 80065d4:	464b      	mov	r3, r9
 80065d6:	4606      	mov	r6, r0
 80065d8:	460f      	mov	r7, r1
 80065da:	f7fa fabd 	bl	8000b58 <__aeabi_dcmpgt>
 80065de:	b9c8      	cbnz	r0, 8006614 <_dtoa_r+0x6e4>
 80065e0:	4642      	mov	r2, r8
 80065e2:	464b      	mov	r3, r9
 80065e4:	4630      	mov	r0, r6
 80065e6:	4639      	mov	r1, r7
 80065e8:	f7fa fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 80065ec:	b110      	cbz	r0, 80065f4 <_dtoa_r+0x6c4>
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	07db      	lsls	r3, r3, #31
 80065f2:	d40f      	bmi.n	8006614 <_dtoa_r+0x6e4>
 80065f4:	4651      	mov	r1, sl
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 fbcc 	bl	8006d94 <_Bfree>
 80065fc:	2300      	movs	r3, #0
 80065fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006600:	702b      	strb	r3, [r5, #0]
 8006602:	f10b 0301 	add.w	r3, fp, #1
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800660a:	2b00      	cmp	r3, #0
 800660c:	f43f ace2 	beq.w	8005fd4 <_dtoa_r+0xa4>
 8006610:	601d      	str	r5, [r3, #0]
 8006612:	e4df      	b.n	8005fd4 <_dtoa_r+0xa4>
 8006614:	465f      	mov	r7, fp
 8006616:	462b      	mov	r3, r5
 8006618:	461d      	mov	r5, r3
 800661a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800661e:	2a39      	cmp	r2, #57	; 0x39
 8006620:	d106      	bne.n	8006630 <_dtoa_r+0x700>
 8006622:	9a00      	ldr	r2, [sp, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d1f7      	bne.n	8006618 <_dtoa_r+0x6e8>
 8006628:	9900      	ldr	r1, [sp, #0]
 800662a:	2230      	movs	r2, #48	; 0x30
 800662c:	3701      	adds	r7, #1
 800662e:	700a      	strb	r2, [r1, #0]
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	3201      	adds	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e790      	b.n	800655a <_dtoa_r+0x62a>
 8006638:	4ba3      	ldr	r3, [pc, #652]	; (80068c8 <_dtoa_r+0x998>)
 800663a:	2200      	movs	r2, #0
 800663c:	f7f9 fffc 	bl	8000638 <__aeabi_dmul>
 8006640:	2200      	movs	r2, #0
 8006642:	2300      	movs	r3, #0
 8006644:	4606      	mov	r6, r0
 8006646:	460f      	mov	r7, r1
 8006648:	f7fa fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 800664c:	2800      	cmp	r0, #0
 800664e:	d09e      	beq.n	800658e <_dtoa_r+0x65e>
 8006650:	e7d0      	b.n	80065f4 <_dtoa_r+0x6c4>
 8006652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006654:	2a00      	cmp	r2, #0
 8006656:	f000 80ca 	beq.w	80067ee <_dtoa_r+0x8be>
 800665a:	9a07      	ldr	r2, [sp, #28]
 800665c:	2a01      	cmp	r2, #1
 800665e:	f300 80ad 	bgt.w	80067bc <_dtoa_r+0x88c>
 8006662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006664:	2a00      	cmp	r2, #0
 8006666:	f000 80a5 	beq.w	80067b4 <_dtoa_r+0x884>
 800666a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800666e:	9e08      	ldr	r6, [sp, #32]
 8006670:	9d05      	ldr	r5, [sp, #20]
 8006672:	9a05      	ldr	r2, [sp, #20]
 8006674:	441a      	add	r2, r3
 8006676:	9205      	str	r2, [sp, #20]
 8006678:	9a06      	ldr	r2, [sp, #24]
 800667a:	2101      	movs	r1, #1
 800667c:	441a      	add	r2, r3
 800667e:	4620      	mov	r0, r4
 8006680:	9206      	str	r2, [sp, #24]
 8006682:	f000 fc3d 	bl	8006f00 <__i2b>
 8006686:	4607      	mov	r7, r0
 8006688:	b165      	cbz	r5, 80066a4 <_dtoa_r+0x774>
 800668a:	9b06      	ldr	r3, [sp, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	dd09      	ble.n	80066a4 <_dtoa_r+0x774>
 8006690:	42ab      	cmp	r3, r5
 8006692:	9a05      	ldr	r2, [sp, #20]
 8006694:	bfa8      	it	ge
 8006696:	462b      	movge	r3, r5
 8006698:	1ad2      	subs	r2, r2, r3
 800669a:	9205      	str	r2, [sp, #20]
 800669c:	9a06      	ldr	r2, [sp, #24]
 800669e:	1aed      	subs	r5, r5, r3
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	9306      	str	r3, [sp, #24]
 80066a4:	9b08      	ldr	r3, [sp, #32]
 80066a6:	b1f3      	cbz	r3, 80066e6 <_dtoa_r+0x7b6>
 80066a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 80a3 	beq.w	80067f6 <_dtoa_r+0x8c6>
 80066b0:	2e00      	cmp	r6, #0
 80066b2:	dd10      	ble.n	80066d6 <_dtoa_r+0x7a6>
 80066b4:	4639      	mov	r1, r7
 80066b6:	4632      	mov	r2, r6
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 fce1 	bl	8007080 <__pow5mult>
 80066be:	4652      	mov	r2, sl
 80066c0:	4601      	mov	r1, r0
 80066c2:	4607      	mov	r7, r0
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 fc31 	bl	8006f2c <__multiply>
 80066ca:	4651      	mov	r1, sl
 80066cc:	4680      	mov	r8, r0
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fb60 	bl	8006d94 <_Bfree>
 80066d4:	46c2      	mov	sl, r8
 80066d6:	9b08      	ldr	r3, [sp, #32]
 80066d8:	1b9a      	subs	r2, r3, r6
 80066da:	d004      	beq.n	80066e6 <_dtoa_r+0x7b6>
 80066dc:	4651      	mov	r1, sl
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 fcce 	bl	8007080 <__pow5mult>
 80066e4:	4682      	mov	sl, r0
 80066e6:	2101      	movs	r1, #1
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 fc09 	bl	8006f00 <__i2b>
 80066ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	4606      	mov	r6, r0
 80066f4:	f340 8081 	ble.w	80067fa <_dtoa_r+0x8ca>
 80066f8:	461a      	mov	r2, r3
 80066fa:	4601      	mov	r1, r0
 80066fc:	4620      	mov	r0, r4
 80066fe:	f000 fcbf 	bl	8007080 <__pow5mult>
 8006702:	9b07      	ldr	r3, [sp, #28]
 8006704:	2b01      	cmp	r3, #1
 8006706:	4606      	mov	r6, r0
 8006708:	dd7a      	ble.n	8006800 <_dtoa_r+0x8d0>
 800670a:	f04f 0800 	mov.w	r8, #0
 800670e:	6933      	ldr	r3, [r6, #16]
 8006710:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006714:	6918      	ldr	r0, [r3, #16]
 8006716:	f000 fba5 	bl	8006e64 <__hi0bits>
 800671a:	f1c0 0020 	rsb	r0, r0, #32
 800671e:	9b06      	ldr	r3, [sp, #24]
 8006720:	4418      	add	r0, r3
 8006722:	f010 001f 	ands.w	r0, r0, #31
 8006726:	f000 8094 	beq.w	8006852 <_dtoa_r+0x922>
 800672a:	f1c0 0320 	rsb	r3, r0, #32
 800672e:	2b04      	cmp	r3, #4
 8006730:	f340 8085 	ble.w	800683e <_dtoa_r+0x90e>
 8006734:	9b05      	ldr	r3, [sp, #20]
 8006736:	f1c0 001c 	rsb	r0, r0, #28
 800673a:	4403      	add	r3, r0
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	9b06      	ldr	r3, [sp, #24]
 8006740:	4403      	add	r3, r0
 8006742:	4405      	add	r5, r0
 8006744:	9306      	str	r3, [sp, #24]
 8006746:	9b05      	ldr	r3, [sp, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	dd05      	ble.n	8006758 <_dtoa_r+0x828>
 800674c:	4651      	mov	r1, sl
 800674e:	461a      	mov	r2, r3
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fcef 	bl	8007134 <__lshift>
 8006756:	4682      	mov	sl, r0
 8006758:	9b06      	ldr	r3, [sp, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	dd05      	ble.n	800676a <_dtoa_r+0x83a>
 800675e:	4631      	mov	r1, r6
 8006760:	461a      	mov	r2, r3
 8006762:	4620      	mov	r0, r4
 8006764:	f000 fce6 	bl	8007134 <__lshift>
 8006768:	4606      	mov	r6, r0
 800676a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d072      	beq.n	8006856 <_dtoa_r+0x926>
 8006770:	4631      	mov	r1, r6
 8006772:	4650      	mov	r0, sl
 8006774:	f000 fd4a 	bl	800720c <__mcmp>
 8006778:	2800      	cmp	r0, #0
 800677a:	da6c      	bge.n	8006856 <_dtoa_r+0x926>
 800677c:	2300      	movs	r3, #0
 800677e:	4651      	mov	r1, sl
 8006780:	220a      	movs	r2, #10
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fb28 	bl	8006dd8 <__multadd>
 8006788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800678e:	4682      	mov	sl, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 81b0 	beq.w	8006af6 <_dtoa_r+0xbc6>
 8006796:	2300      	movs	r3, #0
 8006798:	4639      	mov	r1, r7
 800679a:	220a      	movs	r2, #10
 800679c:	4620      	mov	r0, r4
 800679e:	f000 fb1b 	bl	8006dd8 <__multadd>
 80067a2:	9b01      	ldr	r3, [sp, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	4607      	mov	r7, r0
 80067a8:	f300 8096 	bgt.w	80068d8 <_dtoa_r+0x9a8>
 80067ac:	9b07      	ldr	r3, [sp, #28]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	dc59      	bgt.n	8006866 <_dtoa_r+0x936>
 80067b2:	e091      	b.n	80068d8 <_dtoa_r+0x9a8>
 80067b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067ba:	e758      	b.n	800666e <_dtoa_r+0x73e>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	1e5e      	subs	r6, r3, #1
 80067c0:	9b08      	ldr	r3, [sp, #32]
 80067c2:	42b3      	cmp	r3, r6
 80067c4:	bfbf      	itttt	lt
 80067c6:	9b08      	ldrlt	r3, [sp, #32]
 80067c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80067ca:	9608      	strlt	r6, [sp, #32]
 80067cc:	1af3      	sublt	r3, r6, r3
 80067ce:	bfb4      	ite	lt
 80067d0:	18d2      	addlt	r2, r2, r3
 80067d2:	1b9e      	subge	r6, r3, r6
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	bfbc      	itt	lt
 80067d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80067da:	2600      	movlt	r6, #0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bfb7      	itett	lt
 80067e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80067e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80067e8:	1a9d      	sublt	r5, r3, r2
 80067ea:	2300      	movlt	r3, #0
 80067ec:	e741      	b.n	8006672 <_dtoa_r+0x742>
 80067ee:	9e08      	ldr	r6, [sp, #32]
 80067f0:	9d05      	ldr	r5, [sp, #20]
 80067f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067f4:	e748      	b.n	8006688 <_dtoa_r+0x758>
 80067f6:	9a08      	ldr	r2, [sp, #32]
 80067f8:	e770      	b.n	80066dc <_dtoa_r+0x7ac>
 80067fa:	9b07      	ldr	r3, [sp, #28]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	dc19      	bgt.n	8006834 <_dtoa_r+0x904>
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	b9bb      	cbnz	r3, 8006834 <_dtoa_r+0x904>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800680a:	b99b      	cbnz	r3, 8006834 <_dtoa_r+0x904>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006812:	0d1b      	lsrs	r3, r3, #20
 8006814:	051b      	lsls	r3, r3, #20
 8006816:	b183      	cbz	r3, 800683a <_dtoa_r+0x90a>
 8006818:	9b05      	ldr	r3, [sp, #20]
 800681a:	3301      	adds	r3, #1
 800681c:	9305      	str	r3, [sp, #20]
 800681e:	9b06      	ldr	r3, [sp, #24]
 8006820:	3301      	adds	r3, #1
 8006822:	9306      	str	r3, [sp, #24]
 8006824:	f04f 0801 	mov.w	r8, #1
 8006828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800682a:	2b00      	cmp	r3, #0
 800682c:	f47f af6f 	bne.w	800670e <_dtoa_r+0x7de>
 8006830:	2001      	movs	r0, #1
 8006832:	e774      	b.n	800671e <_dtoa_r+0x7ee>
 8006834:	f04f 0800 	mov.w	r8, #0
 8006838:	e7f6      	b.n	8006828 <_dtoa_r+0x8f8>
 800683a:	4698      	mov	r8, r3
 800683c:	e7f4      	b.n	8006828 <_dtoa_r+0x8f8>
 800683e:	d082      	beq.n	8006746 <_dtoa_r+0x816>
 8006840:	9a05      	ldr	r2, [sp, #20]
 8006842:	331c      	adds	r3, #28
 8006844:	441a      	add	r2, r3
 8006846:	9205      	str	r2, [sp, #20]
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	441a      	add	r2, r3
 800684c:	441d      	add	r5, r3
 800684e:	9206      	str	r2, [sp, #24]
 8006850:	e779      	b.n	8006746 <_dtoa_r+0x816>
 8006852:	4603      	mov	r3, r0
 8006854:	e7f4      	b.n	8006840 <_dtoa_r+0x910>
 8006856:	9b04      	ldr	r3, [sp, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	dc37      	bgt.n	80068cc <_dtoa_r+0x99c>
 800685c:	9b07      	ldr	r3, [sp, #28]
 800685e:	2b02      	cmp	r3, #2
 8006860:	dd34      	ble.n	80068cc <_dtoa_r+0x99c>
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	9b01      	ldr	r3, [sp, #4]
 8006868:	b963      	cbnz	r3, 8006884 <_dtoa_r+0x954>
 800686a:	4631      	mov	r1, r6
 800686c:	2205      	movs	r2, #5
 800686e:	4620      	mov	r0, r4
 8006870:	f000 fab2 	bl	8006dd8 <__multadd>
 8006874:	4601      	mov	r1, r0
 8006876:	4606      	mov	r6, r0
 8006878:	4650      	mov	r0, sl
 800687a:	f000 fcc7 	bl	800720c <__mcmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	f73f adbb 	bgt.w	80063fa <_dtoa_r+0x4ca>
 8006884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006886:	9d00      	ldr	r5, [sp, #0]
 8006888:	ea6f 0b03 	mvn.w	fp, r3
 800688c:	f04f 0800 	mov.w	r8, #0
 8006890:	4631      	mov	r1, r6
 8006892:	4620      	mov	r0, r4
 8006894:	f000 fa7e 	bl	8006d94 <_Bfree>
 8006898:	2f00      	cmp	r7, #0
 800689a:	f43f aeab 	beq.w	80065f4 <_dtoa_r+0x6c4>
 800689e:	f1b8 0f00 	cmp.w	r8, #0
 80068a2:	d005      	beq.n	80068b0 <_dtoa_r+0x980>
 80068a4:	45b8      	cmp	r8, r7
 80068a6:	d003      	beq.n	80068b0 <_dtoa_r+0x980>
 80068a8:	4641      	mov	r1, r8
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fa72 	bl	8006d94 <_Bfree>
 80068b0:	4639      	mov	r1, r7
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fa6e 	bl	8006d94 <_Bfree>
 80068b8:	e69c      	b.n	80065f4 <_dtoa_r+0x6c4>
 80068ba:	2600      	movs	r6, #0
 80068bc:	4637      	mov	r7, r6
 80068be:	e7e1      	b.n	8006884 <_dtoa_r+0x954>
 80068c0:	46bb      	mov	fp, r7
 80068c2:	4637      	mov	r7, r6
 80068c4:	e599      	b.n	80063fa <_dtoa_r+0x4ca>
 80068c6:	bf00      	nop
 80068c8:	40240000 	.word	0x40240000
 80068cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80c8 	beq.w	8006a64 <_dtoa_r+0xb34>
 80068d4:	9b04      	ldr	r3, [sp, #16]
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	2d00      	cmp	r5, #0
 80068da:	dd05      	ble.n	80068e8 <_dtoa_r+0x9b8>
 80068dc:	4639      	mov	r1, r7
 80068de:	462a      	mov	r2, r5
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fc27 	bl	8007134 <__lshift>
 80068e6:	4607      	mov	r7, r0
 80068e8:	f1b8 0f00 	cmp.w	r8, #0
 80068ec:	d05b      	beq.n	80069a6 <_dtoa_r+0xa76>
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fa0f 	bl	8006d14 <_Balloc>
 80068f6:	4605      	mov	r5, r0
 80068f8:	b928      	cbnz	r0, 8006906 <_dtoa_r+0x9d6>
 80068fa:	4b83      	ldr	r3, [pc, #524]	; (8006b08 <_dtoa_r+0xbd8>)
 80068fc:	4602      	mov	r2, r0
 80068fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006902:	f7ff bb2e 	b.w	8005f62 <_dtoa_r+0x32>
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	3202      	adds	r2, #2
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	f107 010c 	add.w	r1, r7, #12
 8006910:	300c      	adds	r0, #12
 8006912:	f000 fe39 	bl	8007588 <memcpy>
 8006916:	2201      	movs	r2, #1
 8006918:	4629      	mov	r1, r5
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fc0a 	bl	8007134 <__lshift>
 8006920:	9b00      	ldr	r3, [sp, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800692a:	4413      	add	r3, r2
 800692c:	9308      	str	r3, [sp, #32]
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	46b8      	mov	r8, r7
 8006936:	9306      	str	r3, [sp, #24]
 8006938:	4607      	mov	r7, r0
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	4631      	mov	r1, r6
 800693e:	3b01      	subs	r3, #1
 8006940:	4650      	mov	r0, sl
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	f7ff fa69 	bl	8005e1a <quorem>
 8006948:	4641      	mov	r1, r8
 800694a:	9002      	str	r0, [sp, #8]
 800694c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006950:	4650      	mov	r0, sl
 8006952:	f000 fc5b 	bl	800720c <__mcmp>
 8006956:	463a      	mov	r2, r7
 8006958:	9005      	str	r0, [sp, #20]
 800695a:	4631      	mov	r1, r6
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fc71 	bl	8007244 <__mdiff>
 8006962:	68c2      	ldr	r2, [r0, #12]
 8006964:	4605      	mov	r5, r0
 8006966:	bb02      	cbnz	r2, 80069aa <_dtoa_r+0xa7a>
 8006968:	4601      	mov	r1, r0
 800696a:	4650      	mov	r0, sl
 800696c:	f000 fc4e 	bl	800720c <__mcmp>
 8006970:	4602      	mov	r2, r0
 8006972:	4629      	mov	r1, r5
 8006974:	4620      	mov	r0, r4
 8006976:	9209      	str	r2, [sp, #36]	; 0x24
 8006978:	f000 fa0c 	bl	8006d94 <_Bfree>
 800697c:	9b07      	ldr	r3, [sp, #28]
 800697e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006980:	9d04      	ldr	r5, [sp, #16]
 8006982:	ea43 0102 	orr.w	r1, r3, r2
 8006986:	9b06      	ldr	r3, [sp, #24]
 8006988:	4319      	orrs	r1, r3
 800698a:	d110      	bne.n	80069ae <_dtoa_r+0xa7e>
 800698c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006990:	d029      	beq.n	80069e6 <_dtoa_r+0xab6>
 8006992:	9b05      	ldr	r3, [sp, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	dd02      	ble.n	800699e <_dtoa_r+0xa6e>
 8006998:	9b02      	ldr	r3, [sp, #8]
 800699a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800699e:	9b01      	ldr	r3, [sp, #4]
 80069a0:	f883 9000 	strb.w	r9, [r3]
 80069a4:	e774      	b.n	8006890 <_dtoa_r+0x960>
 80069a6:	4638      	mov	r0, r7
 80069a8:	e7ba      	b.n	8006920 <_dtoa_r+0x9f0>
 80069aa:	2201      	movs	r2, #1
 80069ac:	e7e1      	b.n	8006972 <_dtoa_r+0xa42>
 80069ae:	9b05      	ldr	r3, [sp, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	db04      	blt.n	80069be <_dtoa_r+0xa8e>
 80069b4:	9907      	ldr	r1, [sp, #28]
 80069b6:	430b      	orrs	r3, r1
 80069b8:	9906      	ldr	r1, [sp, #24]
 80069ba:	430b      	orrs	r3, r1
 80069bc:	d120      	bne.n	8006a00 <_dtoa_r+0xad0>
 80069be:	2a00      	cmp	r2, #0
 80069c0:	dded      	ble.n	800699e <_dtoa_r+0xa6e>
 80069c2:	4651      	mov	r1, sl
 80069c4:	2201      	movs	r2, #1
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 fbb4 	bl	8007134 <__lshift>
 80069cc:	4631      	mov	r1, r6
 80069ce:	4682      	mov	sl, r0
 80069d0:	f000 fc1c 	bl	800720c <__mcmp>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	dc03      	bgt.n	80069e0 <_dtoa_r+0xab0>
 80069d8:	d1e1      	bne.n	800699e <_dtoa_r+0xa6e>
 80069da:	f019 0f01 	tst.w	r9, #1
 80069de:	d0de      	beq.n	800699e <_dtoa_r+0xa6e>
 80069e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069e4:	d1d8      	bne.n	8006998 <_dtoa_r+0xa68>
 80069e6:	9a01      	ldr	r2, [sp, #4]
 80069e8:	2339      	movs	r3, #57	; 0x39
 80069ea:	7013      	strb	r3, [r2, #0]
 80069ec:	462b      	mov	r3, r5
 80069ee:	461d      	mov	r5, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069f6:	2a39      	cmp	r2, #57	; 0x39
 80069f8:	d06c      	beq.n	8006ad4 <_dtoa_r+0xba4>
 80069fa:	3201      	adds	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	e747      	b.n	8006890 <_dtoa_r+0x960>
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	dd07      	ble.n	8006a14 <_dtoa_r+0xae4>
 8006a04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a08:	d0ed      	beq.n	80069e6 <_dtoa_r+0xab6>
 8006a0a:	9a01      	ldr	r2, [sp, #4]
 8006a0c:	f109 0301 	add.w	r3, r9, #1
 8006a10:	7013      	strb	r3, [r2, #0]
 8006a12:	e73d      	b.n	8006890 <_dtoa_r+0x960>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	9a08      	ldr	r2, [sp, #32]
 8006a18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d043      	beq.n	8006aa8 <_dtoa_r+0xb78>
 8006a20:	4651      	mov	r1, sl
 8006a22:	2300      	movs	r3, #0
 8006a24:	220a      	movs	r2, #10
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 f9d6 	bl	8006dd8 <__multadd>
 8006a2c:	45b8      	cmp	r8, r7
 8006a2e:	4682      	mov	sl, r0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	f04f 020a 	mov.w	r2, #10
 8006a38:	4641      	mov	r1, r8
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	d107      	bne.n	8006a4e <_dtoa_r+0xb1e>
 8006a3e:	f000 f9cb 	bl	8006dd8 <__multadd>
 8006a42:	4680      	mov	r8, r0
 8006a44:	4607      	mov	r7, r0
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	e775      	b.n	800693a <_dtoa_r+0xa0a>
 8006a4e:	f000 f9c3 	bl	8006dd8 <__multadd>
 8006a52:	4639      	mov	r1, r7
 8006a54:	4680      	mov	r8, r0
 8006a56:	2300      	movs	r3, #0
 8006a58:	220a      	movs	r2, #10
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 f9bc 	bl	8006dd8 <__multadd>
 8006a60:	4607      	mov	r7, r0
 8006a62:	e7f0      	b.n	8006a46 <_dtoa_r+0xb16>
 8006a64:	9b04      	ldr	r3, [sp, #16]
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	9d00      	ldr	r5, [sp, #0]
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	f7ff f9d4 	bl	8005e1a <quorem>
 8006a72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a76:	9b00      	ldr	r3, [sp, #0]
 8006a78:	f805 9b01 	strb.w	r9, [r5], #1
 8006a7c:	1aea      	subs	r2, r5, r3
 8006a7e:	9b01      	ldr	r3, [sp, #4]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	dd07      	ble.n	8006a94 <_dtoa_r+0xb64>
 8006a84:	4651      	mov	r1, sl
 8006a86:	2300      	movs	r3, #0
 8006a88:	220a      	movs	r2, #10
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 f9a4 	bl	8006dd8 <__multadd>
 8006a90:	4682      	mov	sl, r0
 8006a92:	e7ea      	b.n	8006a6a <_dtoa_r+0xb3a>
 8006a94:	9b01      	ldr	r3, [sp, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfc8      	it	gt
 8006a9a:	461d      	movgt	r5, r3
 8006a9c:	9b00      	ldr	r3, [sp, #0]
 8006a9e:	bfd8      	it	le
 8006aa0:	2501      	movle	r5, #1
 8006aa2:	441d      	add	r5, r3
 8006aa4:	f04f 0800 	mov.w	r8, #0
 8006aa8:	4651      	mov	r1, sl
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fb41 	bl	8007134 <__lshift>
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4682      	mov	sl, r0
 8006ab6:	f000 fba9 	bl	800720c <__mcmp>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	dc96      	bgt.n	80069ec <_dtoa_r+0xabc>
 8006abe:	d102      	bne.n	8006ac6 <_dtoa_r+0xb96>
 8006ac0:	f019 0f01 	tst.w	r9, #1
 8006ac4:	d192      	bne.n	80069ec <_dtoa_r+0xabc>
 8006ac6:	462b      	mov	r3, r5
 8006ac8:	461d      	mov	r5, r3
 8006aca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ace:	2a30      	cmp	r2, #48	; 0x30
 8006ad0:	d0fa      	beq.n	8006ac8 <_dtoa_r+0xb98>
 8006ad2:	e6dd      	b.n	8006890 <_dtoa_r+0x960>
 8006ad4:	9a00      	ldr	r2, [sp, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d189      	bne.n	80069ee <_dtoa_r+0xabe>
 8006ada:	f10b 0b01 	add.w	fp, fp, #1
 8006ade:	2331      	movs	r3, #49	; 0x31
 8006ae0:	e796      	b.n	8006a10 <_dtoa_r+0xae0>
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <_dtoa_r+0xbdc>)
 8006ae4:	f7ff ba99 	b.w	800601a <_dtoa_r+0xea>
 8006ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f47f aa6d 	bne.w	8005fca <_dtoa_r+0x9a>
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <_dtoa_r+0xbe0>)
 8006af2:	f7ff ba92 	b.w	800601a <_dtoa_r+0xea>
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dcb5      	bgt.n	8006a68 <_dtoa_r+0xb38>
 8006afc:	9b07      	ldr	r3, [sp, #28]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	f73f aeb1 	bgt.w	8006866 <_dtoa_r+0x936>
 8006b04:	e7b0      	b.n	8006a68 <_dtoa_r+0xb38>
 8006b06:	bf00      	nop
 8006b08:	08008390 	.word	0x08008390
 8006b0c:	080082f0 	.word	0x080082f0
 8006b10:	08008314 	.word	0x08008314

08006b14 <_free_r>:
 8006b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b16:	2900      	cmp	r1, #0
 8006b18:	d044      	beq.n	8006ba4 <_free_r+0x90>
 8006b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b1e:	9001      	str	r0, [sp, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f1a1 0404 	sub.w	r4, r1, #4
 8006b26:	bfb8      	it	lt
 8006b28:	18e4      	addlt	r4, r4, r3
 8006b2a:	f000 f8e7 	bl	8006cfc <__malloc_lock>
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <_free_r+0x94>)
 8006b30:	9801      	ldr	r0, [sp, #4]
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	b933      	cbnz	r3, 8006b44 <_free_r+0x30>
 8006b36:	6063      	str	r3, [r4, #4]
 8006b38:	6014      	str	r4, [r2, #0]
 8006b3a:	b003      	add	sp, #12
 8006b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b40:	f000 b8e2 	b.w	8006d08 <__malloc_unlock>
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d908      	bls.n	8006b5a <_free_r+0x46>
 8006b48:	6825      	ldr	r5, [r4, #0]
 8006b4a:	1961      	adds	r1, r4, r5
 8006b4c:	428b      	cmp	r3, r1
 8006b4e:	bf01      	itttt	eq
 8006b50:	6819      	ldreq	r1, [r3, #0]
 8006b52:	685b      	ldreq	r3, [r3, #4]
 8006b54:	1949      	addeq	r1, r1, r5
 8006b56:	6021      	streq	r1, [r4, #0]
 8006b58:	e7ed      	b.n	8006b36 <_free_r+0x22>
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b10b      	cbz	r3, 8006b64 <_free_r+0x50>
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d9fa      	bls.n	8006b5a <_free_r+0x46>
 8006b64:	6811      	ldr	r1, [r2, #0]
 8006b66:	1855      	adds	r5, r2, r1
 8006b68:	42a5      	cmp	r5, r4
 8006b6a:	d10b      	bne.n	8006b84 <_free_r+0x70>
 8006b6c:	6824      	ldr	r4, [r4, #0]
 8006b6e:	4421      	add	r1, r4
 8006b70:	1854      	adds	r4, r2, r1
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	d1e0      	bne.n	8006b3a <_free_r+0x26>
 8006b78:	681c      	ldr	r4, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	6053      	str	r3, [r2, #4]
 8006b7e:	440c      	add	r4, r1
 8006b80:	6014      	str	r4, [r2, #0]
 8006b82:	e7da      	b.n	8006b3a <_free_r+0x26>
 8006b84:	d902      	bls.n	8006b8c <_free_r+0x78>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6003      	str	r3, [r0, #0]
 8006b8a:	e7d6      	b.n	8006b3a <_free_r+0x26>
 8006b8c:	6825      	ldr	r5, [r4, #0]
 8006b8e:	1961      	adds	r1, r4, r5
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf04      	itt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	bf04      	itt	eq
 8006b9c:	1949      	addeq	r1, r1, r5
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	6054      	str	r4, [r2, #4]
 8006ba2:	e7ca      	b.n	8006b3a <_free_r+0x26>
 8006ba4:	b003      	add	sp, #12
 8006ba6:	bd30      	pop	{r4, r5, pc}
 8006ba8:	20000510 	.word	0x20000510

08006bac <malloc>:
 8006bac:	4b02      	ldr	r3, [pc, #8]	; (8006bb8 <malloc+0xc>)
 8006bae:	4601      	mov	r1, r0
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	f000 b823 	b.w	8006bfc <_malloc_r>
 8006bb6:	bf00      	nop
 8006bb8:	20000090 	.word	0x20000090

08006bbc <sbrk_aligned>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4e0e      	ldr	r6, [pc, #56]	; (8006bf8 <sbrk_aligned+0x3c>)
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	6831      	ldr	r1, [r6, #0]
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	b911      	cbnz	r1, 8006bce <sbrk_aligned+0x12>
 8006bc8:	f000 fcce 	bl	8007568 <_sbrk_r>
 8006bcc:	6030      	str	r0, [r6, #0]
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 fcc9 	bl	8007568 <_sbrk_r>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d00a      	beq.n	8006bf0 <sbrk_aligned+0x34>
 8006bda:	1cc4      	adds	r4, r0, #3
 8006bdc:	f024 0403 	bic.w	r4, r4, #3
 8006be0:	42a0      	cmp	r0, r4
 8006be2:	d007      	beq.n	8006bf4 <sbrk_aligned+0x38>
 8006be4:	1a21      	subs	r1, r4, r0
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 fcbe 	bl	8007568 <_sbrk_r>
 8006bec:	3001      	adds	r0, #1
 8006bee:	d101      	bne.n	8006bf4 <sbrk_aligned+0x38>
 8006bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	20000514 	.word	0x20000514

08006bfc <_malloc_r>:
 8006bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c00:	1ccd      	adds	r5, r1, #3
 8006c02:	f025 0503 	bic.w	r5, r5, #3
 8006c06:	3508      	adds	r5, #8
 8006c08:	2d0c      	cmp	r5, #12
 8006c0a:	bf38      	it	cc
 8006c0c:	250c      	movcc	r5, #12
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	4607      	mov	r7, r0
 8006c12:	db01      	blt.n	8006c18 <_malloc_r+0x1c>
 8006c14:	42a9      	cmp	r1, r5
 8006c16:	d905      	bls.n	8006c24 <_malloc_r+0x28>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	4630      	mov	r0, r6
 8006c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cf8 <_malloc_r+0xfc>
 8006c28:	f000 f868 	bl	8006cfc <__malloc_lock>
 8006c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c30:	461c      	mov	r4, r3
 8006c32:	bb5c      	cbnz	r4, 8006c8c <_malloc_r+0x90>
 8006c34:	4629      	mov	r1, r5
 8006c36:	4638      	mov	r0, r7
 8006c38:	f7ff ffc0 	bl	8006bbc <sbrk_aligned>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	4604      	mov	r4, r0
 8006c40:	d155      	bne.n	8006cee <_malloc_r+0xf2>
 8006c42:	f8d8 4000 	ldr.w	r4, [r8]
 8006c46:	4626      	mov	r6, r4
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	d145      	bne.n	8006cd8 <_malloc_r+0xdc>
 8006c4c:	2c00      	cmp	r4, #0
 8006c4e:	d048      	beq.n	8006ce2 <_malloc_r+0xe6>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	4631      	mov	r1, r6
 8006c54:	4638      	mov	r0, r7
 8006c56:	eb04 0903 	add.w	r9, r4, r3
 8006c5a:	f000 fc85 	bl	8007568 <_sbrk_r>
 8006c5e:	4581      	cmp	r9, r0
 8006c60:	d13f      	bne.n	8006ce2 <_malloc_r+0xe6>
 8006c62:	6821      	ldr	r1, [r4, #0]
 8006c64:	1a6d      	subs	r5, r5, r1
 8006c66:	4629      	mov	r1, r5
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff ffa7 	bl	8006bbc <sbrk_aligned>
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d037      	beq.n	8006ce2 <_malloc_r+0xe6>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	442b      	add	r3, r5
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	f8d8 3000 	ldr.w	r3, [r8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d038      	beq.n	8006cf2 <_malloc_r+0xf6>
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	42a2      	cmp	r2, r4
 8006c84:	d12b      	bne.n	8006cde <_malloc_r+0xe2>
 8006c86:	2200      	movs	r2, #0
 8006c88:	605a      	str	r2, [r3, #4]
 8006c8a:	e00f      	b.n	8006cac <_malloc_r+0xb0>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	1b52      	subs	r2, r2, r5
 8006c90:	d41f      	bmi.n	8006cd2 <_malloc_r+0xd6>
 8006c92:	2a0b      	cmp	r2, #11
 8006c94:	d917      	bls.n	8006cc6 <_malloc_r+0xca>
 8006c96:	1961      	adds	r1, r4, r5
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	6025      	str	r5, [r4, #0]
 8006c9c:	bf18      	it	ne
 8006c9e:	6059      	strne	r1, [r3, #4]
 8006ca0:	6863      	ldr	r3, [r4, #4]
 8006ca2:	bf08      	it	eq
 8006ca4:	f8c8 1000 	streq.w	r1, [r8]
 8006ca8:	5162      	str	r2, [r4, r5]
 8006caa:	604b      	str	r3, [r1, #4]
 8006cac:	4638      	mov	r0, r7
 8006cae:	f104 060b 	add.w	r6, r4, #11
 8006cb2:	f000 f829 	bl	8006d08 <__malloc_unlock>
 8006cb6:	f026 0607 	bic.w	r6, r6, #7
 8006cba:	1d23      	adds	r3, r4, #4
 8006cbc:	1af2      	subs	r2, r6, r3
 8006cbe:	d0ae      	beq.n	8006c1e <_malloc_r+0x22>
 8006cc0:	1b9b      	subs	r3, r3, r6
 8006cc2:	50a3      	str	r3, [r4, r2]
 8006cc4:	e7ab      	b.n	8006c1e <_malloc_r+0x22>
 8006cc6:	42a3      	cmp	r3, r4
 8006cc8:	6862      	ldr	r2, [r4, #4]
 8006cca:	d1dd      	bne.n	8006c88 <_malloc_r+0x8c>
 8006ccc:	f8c8 2000 	str.w	r2, [r8]
 8006cd0:	e7ec      	b.n	8006cac <_malloc_r+0xb0>
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	6864      	ldr	r4, [r4, #4]
 8006cd6:	e7ac      	b.n	8006c32 <_malloc_r+0x36>
 8006cd8:	4634      	mov	r4, r6
 8006cda:	6876      	ldr	r6, [r6, #4]
 8006cdc:	e7b4      	b.n	8006c48 <_malloc_r+0x4c>
 8006cde:	4613      	mov	r3, r2
 8006ce0:	e7cc      	b.n	8006c7c <_malloc_r+0x80>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	603b      	str	r3, [r7, #0]
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f000 f80e 	bl	8006d08 <__malloc_unlock>
 8006cec:	e797      	b.n	8006c1e <_malloc_r+0x22>
 8006cee:	6025      	str	r5, [r4, #0]
 8006cf0:	e7dc      	b.n	8006cac <_malloc_r+0xb0>
 8006cf2:	605b      	str	r3, [r3, #4]
 8006cf4:	deff      	udf	#255	; 0xff
 8006cf6:	bf00      	nop
 8006cf8:	20000510 	.word	0x20000510

08006cfc <__malloc_lock>:
 8006cfc:	4801      	ldr	r0, [pc, #4]	; (8006d04 <__malloc_lock+0x8>)
 8006cfe:	f7ff b88a 	b.w	8005e16 <__retarget_lock_acquire_recursive>
 8006d02:	bf00      	nop
 8006d04:	2000050c 	.word	0x2000050c

08006d08 <__malloc_unlock>:
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <__malloc_unlock+0x8>)
 8006d0a:	f7ff b885 	b.w	8005e18 <__retarget_lock_release_recursive>
 8006d0e:	bf00      	nop
 8006d10:	2000050c 	.word	0x2000050c

08006d14 <_Balloc>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	69c6      	ldr	r6, [r0, #28]
 8006d18:	4604      	mov	r4, r0
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	b976      	cbnz	r6, 8006d3c <_Balloc+0x28>
 8006d1e:	2010      	movs	r0, #16
 8006d20:	f7ff ff44 	bl	8006bac <malloc>
 8006d24:	4602      	mov	r2, r0
 8006d26:	61e0      	str	r0, [r4, #28]
 8006d28:	b920      	cbnz	r0, 8006d34 <_Balloc+0x20>
 8006d2a:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <_Balloc+0x78>)
 8006d2c:	4818      	ldr	r0, [pc, #96]	; (8006d90 <_Balloc+0x7c>)
 8006d2e:	216b      	movs	r1, #107	; 0x6b
 8006d30:	f000 fc38 	bl	80075a4 <__assert_func>
 8006d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d38:	6006      	str	r6, [r0, #0]
 8006d3a:	60c6      	str	r6, [r0, #12]
 8006d3c:	69e6      	ldr	r6, [r4, #28]
 8006d3e:	68f3      	ldr	r3, [r6, #12]
 8006d40:	b183      	cbz	r3, 8006d64 <_Balloc+0x50>
 8006d42:	69e3      	ldr	r3, [r4, #28]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d4a:	b9b8      	cbnz	r0, 8006d7c <_Balloc+0x68>
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	fa01 f605 	lsl.w	r6, r1, r5
 8006d52:	1d72      	adds	r2, r6, #5
 8006d54:	0092      	lsls	r2, r2, #2
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 fc42 	bl	80075e0 <_calloc_r>
 8006d5c:	b160      	cbz	r0, 8006d78 <_Balloc+0x64>
 8006d5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d62:	e00e      	b.n	8006d82 <_Balloc+0x6e>
 8006d64:	2221      	movs	r2, #33	; 0x21
 8006d66:	2104      	movs	r1, #4
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 fc39 	bl	80075e0 <_calloc_r>
 8006d6e:	69e3      	ldr	r3, [r4, #28]
 8006d70:	60f0      	str	r0, [r6, #12]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e4      	bne.n	8006d42 <_Balloc+0x2e>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
 8006d7c:	6802      	ldr	r2, [r0, #0]
 8006d7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d82:	2300      	movs	r3, #0
 8006d84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d88:	e7f7      	b.n	8006d7a <_Balloc+0x66>
 8006d8a:	bf00      	nop
 8006d8c:	08008321 	.word	0x08008321
 8006d90:	080083a1 	.word	0x080083a1

08006d94 <_Bfree>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	69c6      	ldr	r6, [r0, #28]
 8006d98:	4605      	mov	r5, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	b976      	cbnz	r6, 8006dbc <_Bfree+0x28>
 8006d9e:	2010      	movs	r0, #16
 8006da0:	f7ff ff04 	bl	8006bac <malloc>
 8006da4:	4602      	mov	r2, r0
 8006da6:	61e8      	str	r0, [r5, #28]
 8006da8:	b920      	cbnz	r0, 8006db4 <_Bfree+0x20>
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <_Bfree+0x3c>)
 8006dac:	4809      	ldr	r0, [pc, #36]	; (8006dd4 <_Bfree+0x40>)
 8006dae:	218f      	movs	r1, #143	; 0x8f
 8006db0:	f000 fbf8 	bl	80075a4 <__assert_func>
 8006db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006db8:	6006      	str	r6, [r0, #0]
 8006dba:	60c6      	str	r6, [r0, #12]
 8006dbc:	b13c      	cbz	r4, 8006dce <_Bfree+0x3a>
 8006dbe:	69eb      	ldr	r3, [r5, #28]
 8006dc0:	6862      	ldr	r2, [r4, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dc8:	6021      	str	r1, [r4, #0]
 8006dca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	08008321 	.word	0x08008321
 8006dd4:	080083a1 	.word	0x080083a1

08006dd8 <__multadd>:
 8006dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ddc:	690d      	ldr	r5, [r1, #16]
 8006dde:	4607      	mov	r7, r0
 8006de0:	460c      	mov	r4, r1
 8006de2:	461e      	mov	r6, r3
 8006de4:	f101 0c14 	add.w	ip, r1, #20
 8006de8:	2000      	movs	r0, #0
 8006dea:	f8dc 3000 	ldr.w	r3, [ip]
 8006dee:	b299      	uxth	r1, r3
 8006df0:	fb02 6101 	mla	r1, r2, r1, r6
 8006df4:	0c1e      	lsrs	r6, r3, #16
 8006df6:	0c0b      	lsrs	r3, r1, #16
 8006df8:	fb02 3306 	mla	r3, r2, r6, r3
 8006dfc:	b289      	uxth	r1, r1
 8006dfe:	3001      	adds	r0, #1
 8006e00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e04:	4285      	cmp	r5, r0
 8006e06:	f84c 1b04 	str.w	r1, [ip], #4
 8006e0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e0e:	dcec      	bgt.n	8006dea <__multadd+0x12>
 8006e10:	b30e      	cbz	r6, 8006e56 <__multadd+0x7e>
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	42ab      	cmp	r3, r5
 8006e16:	dc19      	bgt.n	8006e4c <__multadd+0x74>
 8006e18:	6861      	ldr	r1, [r4, #4]
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	3101      	adds	r1, #1
 8006e1e:	f7ff ff79 	bl	8006d14 <_Balloc>
 8006e22:	4680      	mov	r8, r0
 8006e24:	b928      	cbnz	r0, 8006e32 <__multadd+0x5a>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <__multadd+0x84>)
 8006e2a:	480d      	ldr	r0, [pc, #52]	; (8006e60 <__multadd+0x88>)
 8006e2c:	21ba      	movs	r1, #186	; 0xba
 8006e2e:	f000 fbb9 	bl	80075a4 <__assert_func>
 8006e32:	6922      	ldr	r2, [r4, #16]
 8006e34:	3202      	adds	r2, #2
 8006e36:	f104 010c 	add.w	r1, r4, #12
 8006e3a:	0092      	lsls	r2, r2, #2
 8006e3c:	300c      	adds	r0, #12
 8006e3e:	f000 fba3 	bl	8007588 <memcpy>
 8006e42:	4621      	mov	r1, r4
 8006e44:	4638      	mov	r0, r7
 8006e46:	f7ff ffa5 	bl	8006d94 <_Bfree>
 8006e4a:	4644      	mov	r4, r8
 8006e4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e50:	3501      	adds	r5, #1
 8006e52:	615e      	str	r6, [r3, #20]
 8006e54:	6125      	str	r5, [r4, #16]
 8006e56:	4620      	mov	r0, r4
 8006e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5c:	08008390 	.word	0x08008390
 8006e60:	080083a1 	.word	0x080083a1

08006e64 <__hi0bits>:
 8006e64:	0c03      	lsrs	r3, r0, #16
 8006e66:	041b      	lsls	r3, r3, #16
 8006e68:	b9d3      	cbnz	r3, 8006ea0 <__hi0bits+0x3c>
 8006e6a:	0400      	lsls	r0, r0, #16
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e72:	bf04      	itt	eq
 8006e74:	0200      	lsleq	r0, r0, #8
 8006e76:	3308      	addeq	r3, #8
 8006e78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e7c:	bf04      	itt	eq
 8006e7e:	0100      	lsleq	r0, r0, #4
 8006e80:	3304      	addeq	r3, #4
 8006e82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e86:	bf04      	itt	eq
 8006e88:	0080      	lsleq	r0, r0, #2
 8006e8a:	3302      	addeq	r3, #2
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	db05      	blt.n	8006e9c <__hi0bits+0x38>
 8006e90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e94:	f103 0301 	add.w	r3, r3, #1
 8006e98:	bf08      	it	eq
 8006e9a:	2320      	moveq	r3, #32
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	4770      	bx	lr
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e7e4      	b.n	8006e6e <__hi0bits+0xa>

08006ea4 <__lo0bits>:
 8006ea4:	6803      	ldr	r3, [r0, #0]
 8006ea6:	f013 0207 	ands.w	r2, r3, #7
 8006eaa:	d00c      	beq.n	8006ec6 <__lo0bits+0x22>
 8006eac:	07d9      	lsls	r1, r3, #31
 8006eae:	d422      	bmi.n	8006ef6 <__lo0bits+0x52>
 8006eb0:	079a      	lsls	r2, r3, #30
 8006eb2:	bf49      	itett	mi
 8006eb4:	085b      	lsrmi	r3, r3, #1
 8006eb6:	089b      	lsrpl	r3, r3, #2
 8006eb8:	6003      	strmi	r3, [r0, #0]
 8006eba:	2201      	movmi	r2, #1
 8006ebc:	bf5c      	itt	pl
 8006ebe:	6003      	strpl	r3, [r0, #0]
 8006ec0:	2202      	movpl	r2, #2
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4770      	bx	lr
 8006ec6:	b299      	uxth	r1, r3
 8006ec8:	b909      	cbnz	r1, 8006ece <__lo0bits+0x2a>
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	2210      	movs	r2, #16
 8006ece:	b2d9      	uxtb	r1, r3
 8006ed0:	b909      	cbnz	r1, 8006ed6 <__lo0bits+0x32>
 8006ed2:	3208      	adds	r2, #8
 8006ed4:	0a1b      	lsrs	r3, r3, #8
 8006ed6:	0719      	lsls	r1, r3, #28
 8006ed8:	bf04      	itt	eq
 8006eda:	091b      	lsreq	r3, r3, #4
 8006edc:	3204      	addeq	r2, #4
 8006ede:	0799      	lsls	r1, r3, #30
 8006ee0:	bf04      	itt	eq
 8006ee2:	089b      	lsreq	r3, r3, #2
 8006ee4:	3202      	addeq	r2, #2
 8006ee6:	07d9      	lsls	r1, r3, #31
 8006ee8:	d403      	bmi.n	8006ef2 <__lo0bits+0x4e>
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	f102 0201 	add.w	r2, r2, #1
 8006ef0:	d003      	beq.n	8006efa <__lo0bits+0x56>
 8006ef2:	6003      	str	r3, [r0, #0]
 8006ef4:	e7e5      	b.n	8006ec2 <__lo0bits+0x1e>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	e7e3      	b.n	8006ec2 <__lo0bits+0x1e>
 8006efa:	2220      	movs	r2, #32
 8006efc:	e7e1      	b.n	8006ec2 <__lo0bits+0x1e>
	...

08006f00 <__i2b>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	460c      	mov	r4, r1
 8006f04:	2101      	movs	r1, #1
 8006f06:	f7ff ff05 	bl	8006d14 <_Balloc>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	b928      	cbnz	r0, 8006f1a <__i2b+0x1a>
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <__i2b+0x24>)
 8006f10:	4805      	ldr	r0, [pc, #20]	; (8006f28 <__i2b+0x28>)
 8006f12:	f240 1145 	movw	r1, #325	; 0x145
 8006f16:	f000 fb45 	bl	80075a4 <__assert_func>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	6144      	str	r4, [r0, #20]
 8006f1e:	6103      	str	r3, [r0, #16]
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	08008390 	.word	0x08008390
 8006f28:	080083a1 	.word	0x080083a1

08006f2c <__multiply>:
 8006f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	4691      	mov	r9, r2
 8006f32:	690a      	ldr	r2, [r1, #16]
 8006f34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	bfb8      	it	lt
 8006f3c:	460b      	movlt	r3, r1
 8006f3e:	460c      	mov	r4, r1
 8006f40:	bfbc      	itt	lt
 8006f42:	464c      	movlt	r4, r9
 8006f44:	4699      	movlt	r9, r3
 8006f46:	6927      	ldr	r7, [r4, #16]
 8006f48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f4c:	68a3      	ldr	r3, [r4, #8]
 8006f4e:	6861      	ldr	r1, [r4, #4]
 8006f50:	eb07 060a 	add.w	r6, r7, sl
 8006f54:	42b3      	cmp	r3, r6
 8006f56:	b085      	sub	sp, #20
 8006f58:	bfb8      	it	lt
 8006f5a:	3101      	addlt	r1, #1
 8006f5c:	f7ff feda 	bl	8006d14 <_Balloc>
 8006f60:	b930      	cbnz	r0, 8006f70 <__multiply+0x44>
 8006f62:	4602      	mov	r2, r0
 8006f64:	4b44      	ldr	r3, [pc, #272]	; (8007078 <__multiply+0x14c>)
 8006f66:	4845      	ldr	r0, [pc, #276]	; (800707c <__multiply+0x150>)
 8006f68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f6c:	f000 fb1a 	bl	80075a4 <__assert_func>
 8006f70:	f100 0514 	add.w	r5, r0, #20
 8006f74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f78:	462b      	mov	r3, r5
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4543      	cmp	r3, r8
 8006f7e:	d321      	bcc.n	8006fc4 <__multiply+0x98>
 8006f80:	f104 0314 	add.w	r3, r4, #20
 8006f84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f88:	f109 0314 	add.w	r3, r9, #20
 8006f8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f90:	9202      	str	r2, [sp, #8]
 8006f92:	1b3a      	subs	r2, r7, r4
 8006f94:	3a15      	subs	r2, #21
 8006f96:	f022 0203 	bic.w	r2, r2, #3
 8006f9a:	3204      	adds	r2, #4
 8006f9c:	f104 0115 	add.w	r1, r4, #21
 8006fa0:	428f      	cmp	r7, r1
 8006fa2:	bf38      	it	cc
 8006fa4:	2204      	movcc	r2, #4
 8006fa6:	9201      	str	r2, [sp, #4]
 8006fa8:	9a02      	ldr	r2, [sp, #8]
 8006faa:	9303      	str	r3, [sp, #12]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d80c      	bhi.n	8006fca <__multiply+0x9e>
 8006fb0:	2e00      	cmp	r6, #0
 8006fb2:	dd03      	ble.n	8006fbc <__multiply+0x90>
 8006fb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d05b      	beq.n	8007074 <__multiply+0x148>
 8006fbc:	6106      	str	r6, [r0, #16]
 8006fbe:	b005      	add	sp, #20
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	f843 2b04 	str.w	r2, [r3], #4
 8006fc8:	e7d8      	b.n	8006f7c <__multiply+0x50>
 8006fca:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fce:	f1ba 0f00 	cmp.w	sl, #0
 8006fd2:	d024      	beq.n	800701e <__multiply+0xf2>
 8006fd4:	f104 0e14 	add.w	lr, r4, #20
 8006fd8:	46a9      	mov	r9, r5
 8006fda:	f04f 0c00 	mov.w	ip, #0
 8006fde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006fe2:	f8d9 1000 	ldr.w	r1, [r9]
 8006fe6:	fa1f fb82 	uxth.w	fp, r2
 8006fea:	b289      	uxth	r1, r1
 8006fec:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ff0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ff8:	4461      	add	r1, ip
 8006ffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ffe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007002:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007006:	b289      	uxth	r1, r1
 8007008:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800700c:	4577      	cmp	r7, lr
 800700e:	f849 1b04 	str.w	r1, [r9], #4
 8007012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007016:	d8e2      	bhi.n	8006fde <__multiply+0xb2>
 8007018:	9a01      	ldr	r2, [sp, #4]
 800701a:	f845 c002 	str.w	ip, [r5, r2]
 800701e:	9a03      	ldr	r2, [sp, #12]
 8007020:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007024:	3304      	adds	r3, #4
 8007026:	f1b9 0f00 	cmp.w	r9, #0
 800702a:	d021      	beq.n	8007070 <__multiply+0x144>
 800702c:	6829      	ldr	r1, [r5, #0]
 800702e:	f104 0c14 	add.w	ip, r4, #20
 8007032:	46ae      	mov	lr, r5
 8007034:	f04f 0a00 	mov.w	sl, #0
 8007038:	f8bc b000 	ldrh.w	fp, [ip]
 800703c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007040:	fb09 220b 	mla	r2, r9, fp, r2
 8007044:	4452      	add	r2, sl
 8007046:	b289      	uxth	r1, r1
 8007048:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800704c:	f84e 1b04 	str.w	r1, [lr], #4
 8007050:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007054:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007058:	f8be 1000 	ldrh.w	r1, [lr]
 800705c:	fb09 110a 	mla	r1, r9, sl, r1
 8007060:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007064:	4567      	cmp	r7, ip
 8007066:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800706a:	d8e5      	bhi.n	8007038 <__multiply+0x10c>
 800706c:	9a01      	ldr	r2, [sp, #4]
 800706e:	50a9      	str	r1, [r5, r2]
 8007070:	3504      	adds	r5, #4
 8007072:	e799      	b.n	8006fa8 <__multiply+0x7c>
 8007074:	3e01      	subs	r6, #1
 8007076:	e79b      	b.n	8006fb0 <__multiply+0x84>
 8007078:	08008390 	.word	0x08008390
 800707c:	080083a1 	.word	0x080083a1

08007080 <__pow5mult>:
 8007080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007084:	4615      	mov	r5, r2
 8007086:	f012 0203 	ands.w	r2, r2, #3
 800708a:	4606      	mov	r6, r0
 800708c:	460f      	mov	r7, r1
 800708e:	d007      	beq.n	80070a0 <__pow5mult+0x20>
 8007090:	4c25      	ldr	r4, [pc, #148]	; (8007128 <__pow5mult+0xa8>)
 8007092:	3a01      	subs	r2, #1
 8007094:	2300      	movs	r3, #0
 8007096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800709a:	f7ff fe9d 	bl	8006dd8 <__multadd>
 800709e:	4607      	mov	r7, r0
 80070a0:	10ad      	asrs	r5, r5, #2
 80070a2:	d03d      	beq.n	8007120 <__pow5mult+0xa0>
 80070a4:	69f4      	ldr	r4, [r6, #28]
 80070a6:	b97c      	cbnz	r4, 80070c8 <__pow5mult+0x48>
 80070a8:	2010      	movs	r0, #16
 80070aa:	f7ff fd7f 	bl	8006bac <malloc>
 80070ae:	4602      	mov	r2, r0
 80070b0:	61f0      	str	r0, [r6, #28]
 80070b2:	b928      	cbnz	r0, 80070c0 <__pow5mult+0x40>
 80070b4:	4b1d      	ldr	r3, [pc, #116]	; (800712c <__pow5mult+0xac>)
 80070b6:	481e      	ldr	r0, [pc, #120]	; (8007130 <__pow5mult+0xb0>)
 80070b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80070bc:	f000 fa72 	bl	80075a4 <__assert_func>
 80070c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070c4:	6004      	str	r4, [r0, #0]
 80070c6:	60c4      	str	r4, [r0, #12]
 80070c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80070cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070d0:	b94c      	cbnz	r4, 80070e6 <__pow5mult+0x66>
 80070d2:	f240 2171 	movw	r1, #625	; 0x271
 80070d6:	4630      	mov	r0, r6
 80070d8:	f7ff ff12 	bl	8006f00 <__i2b>
 80070dc:	2300      	movs	r3, #0
 80070de:	f8c8 0008 	str.w	r0, [r8, #8]
 80070e2:	4604      	mov	r4, r0
 80070e4:	6003      	str	r3, [r0, #0]
 80070e6:	f04f 0900 	mov.w	r9, #0
 80070ea:	07eb      	lsls	r3, r5, #31
 80070ec:	d50a      	bpl.n	8007104 <__pow5mult+0x84>
 80070ee:	4639      	mov	r1, r7
 80070f0:	4622      	mov	r2, r4
 80070f2:	4630      	mov	r0, r6
 80070f4:	f7ff ff1a 	bl	8006f2c <__multiply>
 80070f8:	4639      	mov	r1, r7
 80070fa:	4680      	mov	r8, r0
 80070fc:	4630      	mov	r0, r6
 80070fe:	f7ff fe49 	bl	8006d94 <_Bfree>
 8007102:	4647      	mov	r7, r8
 8007104:	106d      	asrs	r5, r5, #1
 8007106:	d00b      	beq.n	8007120 <__pow5mult+0xa0>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	b938      	cbnz	r0, 800711c <__pow5mult+0x9c>
 800710c:	4622      	mov	r2, r4
 800710e:	4621      	mov	r1, r4
 8007110:	4630      	mov	r0, r6
 8007112:	f7ff ff0b 	bl	8006f2c <__multiply>
 8007116:	6020      	str	r0, [r4, #0]
 8007118:	f8c0 9000 	str.w	r9, [r0]
 800711c:	4604      	mov	r4, r0
 800711e:	e7e4      	b.n	80070ea <__pow5mult+0x6a>
 8007120:	4638      	mov	r0, r7
 8007122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007126:	bf00      	nop
 8007128:	080084f0 	.word	0x080084f0
 800712c:	08008321 	.word	0x08008321
 8007130:	080083a1 	.word	0x080083a1

08007134 <__lshift>:
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	460c      	mov	r4, r1
 800713a:	6849      	ldr	r1, [r1, #4]
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	4607      	mov	r7, r0
 8007146:	4691      	mov	r9, r2
 8007148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800714c:	f108 0601 	add.w	r6, r8, #1
 8007150:	42b3      	cmp	r3, r6
 8007152:	db0b      	blt.n	800716c <__lshift+0x38>
 8007154:	4638      	mov	r0, r7
 8007156:	f7ff fddd 	bl	8006d14 <_Balloc>
 800715a:	4605      	mov	r5, r0
 800715c:	b948      	cbnz	r0, 8007172 <__lshift+0x3e>
 800715e:	4602      	mov	r2, r0
 8007160:	4b28      	ldr	r3, [pc, #160]	; (8007204 <__lshift+0xd0>)
 8007162:	4829      	ldr	r0, [pc, #164]	; (8007208 <__lshift+0xd4>)
 8007164:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007168:	f000 fa1c 	bl	80075a4 <__assert_func>
 800716c:	3101      	adds	r1, #1
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	e7ee      	b.n	8007150 <__lshift+0x1c>
 8007172:	2300      	movs	r3, #0
 8007174:	f100 0114 	add.w	r1, r0, #20
 8007178:	f100 0210 	add.w	r2, r0, #16
 800717c:	4618      	mov	r0, r3
 800717e:	4553      	cmp	r3, sl
 8007180:	db33      	blt.n	80071ea <__lshift+0xb6>
 8007182:	6920      	ldr	r0, [r4, #16]
 8007184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007188:	f104 0314 	add.w	r3, r4, #20
 800718c:	f019 091f 	ands.w	r9, r9, #31
 8007190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007194:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007198:	d02b      	beq.n	80071f2 <__lshift+0xbe>
 800719a:	f1c9 0e20 	rsb	lr, r9, #32
 800719e:	468a      	mov	sl, r1
 80071a0:	2200      	movs	r2, #0
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	fa00 f009 	lsl.w	r0, r0, r9
 80071a8:	4310      	orrs	r0, r2
 80071aa:	f84a 0b04 	str.w	r0, [sl], #4
 80071ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b2:	459c      	cmp	ip, r3
 80071b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80071b8:	d8f3      	bhi.n	80071a2 <__lshift+0x6e>
 80071ba:	ebac 0304 	sub.w	r3, ip, r4
 80071be:	3b15      	subs	r3, #21
 80071c0:	f023 0303 	bic.w	r3, r3, #3
 80071c4:	3304      	adds	r3, #4
 80071c6:	f104 0015 	add.w	r0, r4, #21
 80071ca:	4584      	cmp	ip, r0
 80071cc:	bf38      	it	cc
 80071ce:	2304      	movcc	r3, #4
 80071d0:	50ca      	str	r2, [r1, r3]
 80071d2:	b10a      	cbz	r2, 80071d8 <__lshift+0xa4>
 80071d4:	f108 0602 	add.w	r6, r8, #2
 80071d8:	3e01      	subs	r6, #1
 80071da:	4638      	mov	r0, r7
 80071dc:	612e      	str	r6, [r5, #16]
 80071de:	4621      	mov	r1, r4
 80071e0:	f7ff fdd8 	bl	8006d94 <_Bfree>
 80071e4:	4628      	mov	r0, r5
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80071ee:	3301      	adds	r3, #1
 80071f0:	e7c5      	b.n	800717e <__lshift+0x4a>
 80071f2:	3904      	subs	r1, #4
 80071f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071fc:	459c      	cmp	ip, r3
 80071fe:	d8f9      	bhi.n	80071f4 <__lshift+0xc0>
 8007200:	e7ea      	b.n	80071d8 <__lshift+0xa4>
 8007202:	bf00      	nop
 8007204:	08008390 	.word	0x08008390
 8007208:	080083a1 	.word	0x080083a1

0800720c <__mcmp>:
 800720c:	b530      	push	{r4, r5, lr}
 800720e:	6902      	ldr	r2, [r0, #16]
 8007210:	690c      	ldr	r4, [r1, #16]
 8007212:	1b12      	subs	r2, r2, r4
 8007214:	d10e      	bne.n	8007234 <__mcmp+0x28>
 8007216:	f100 0314 	add.w	r3, r0, #20
 800721a:	3114      	adds	r1, #20
 800721c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007220:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007224:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007228:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800722c:	42a5      	cmp	r5, r4
 800722e:	d003      	beq.n	8007238 <__mcmp+0x2c>
 8007230:	d305      	bcc.n	800723e <__mcmp+0x32>
 8007232:	2201      	movs	r2, #1
 8007234:	4610      	mov	r0, r2
 8007236:	bd30      	pop	{r4, r5, pc}
 8007238:	4283      	cmp	r3, r0
 800723a:	d3f3      	bcc.n	8007224 <__mcmp+0x18>
 800723c:	e7fa      	b.n	8007234 <__mcmp+0x28>
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	e7f7      	b.n	8007234 <__mcmp+0x28>

08007244 <__mdiff>:
 8007244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	460c      	mov	r4, r1
 800724a:	4606      	mov	r6, r0
 800724c:	4611      	mov	r1, r2
 800724e:	4620      	mov	r0, r4
 8007250:	4690      	mov	r8, r2
 8007252:	f7ff ffdb 	bl	800720c <__mcmp>
 8007256:	1e05      	subs	r5, r0, #0
 8007258:	d110      	bne.n	800727c <__mdiff+0x38>
 800725a:	4629      	mov	r1, r5
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff fd59 	bl	8006d14 <_Balloc>
 8007262:	b930      	cbnz	r0, 8007272 <__mdiff+0x2e>
 8007264:	4b3a      	ldr	r3, [pc, #232]	; (8007350 <__mdiff+0x10c>)
 8007266:	4602      	mov	r2, r0
 8007268:	f240 2137 	movw	r1, #567	; 0x237
 800726c:	4839      	ldr	r0, [pc, #228]	; (8007354 <__mdiff+0x110>)
 800726e:	f000 f999 	bl	80075a4 <__assert_func>
 8007272:	2301      	movs	r3, #1
 8007274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	bfa4      	itt	ge
 800727e:	4643      	movge	r3, r8
 8007280:	46a0      	movge	r8, r4
 8007282:	4630      	mov	r0, r6
 8007284:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007288:	bfa6      	itte	ge
 800728a:	461c      	movge	r4, r3
 800728c:	2500      	movge	r5, #0
 800728e:	2501      	movlt	r5, #1
 8007290:	f7ff fd40 	bl	8006d14 <_Balloc>
 8007294:	b920      	cbnz	r0, 80072a0 <__mdiff+0x5c>
 8007296:	4b2e      	ldr	r3, [pc, #184]	; (8007350 <__mdiff+0x10c>)
 8007298:	4602      	mov	r2, r0
 800729a:	f240 2145 	movw	r1, #581	; 0x245
 800729e:	e7e5      	b.n	800726c <__mdiff+0x28>
 80072a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072a4:	6926      	ldr	r6, [r4, #16]
 80072a6:	60c5      	str	r5, [r0, #12]
 80072a8:	f104 0914 	add.w	r9, r4, #20
 80072ac:	f108 0514 	add.w	r5, r8, #20
 80072b0:	f100 0e14 	add.w	lr, r0, #20
 80072b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80072b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072bc:	f108 0210 	add.w	r2, r8, #16
 80072c0:	46f2      	mov	sl, lr
 80072c2:	2100      	movs	r1, #0
 80072c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80072c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072cc:	fa11 f88b 	uxtah	r8, r1, fp
 80072d0:	b299      	uxth	r1, r3
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	eba8 0801 	sub.w	r8, r8, r1
 80072d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072e0:	fa1f f888 	uxth.w	r8, r8
 80072e4:	1419      	asrs	r1, r3, #16
 80072e6:	454e      	cmp	r6, r9
 80072e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072ec:	f84a 3b04 	str.w	r3, [sl], #4
 80072f0:	d8e8      	bhi.n	80072c4 <__mdiff+0x80>
 80072f2:	1b33      	subs	r3, r6, r4
 80072f4:	3b15      	subs	r3, #21
 80072f6:	f023 0303 	bic.w	r3, r3, #3
 80072fa:	3304      	adds	r3, #4
 80072fc:	3415      	adds	r4, #21
 80072fe:	42a6      	cmp	r6, r4
 8007300:	bf38      	it	cc
 8007302:	2304      	movcc	r3, #4
 8007304:	441d      	add	r5, r3
 8007306:	4473      	add	r3, lr
 8007308:	469e      	mov	lr, r3
 800730a:	462e      	mov	r6, r5
 800730c:	4566      	cmp	r6, ip
 800730e:	d30e      	bcc.n	800732e <__mdiff+0xea>
 8007310:	f10c 0203 	add.w	r2, ip, #3
 8007314:	1b52      	subs	r2, r2, r5
 8007316:	f022 0203 	bic.w	r2, r2, #3
 800731a:	3d03      	subs	r5, #3
 800731c:	45ac      	cmp	ip, r5
 800731e:	bf38      	it	cc
 8007320:	2200      	movcc	r2, #0
 8007322:	4413      	add	r3, r2
 8007324:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007328:	b17a      	cbz	r2, 800734a <__mdiff+0x106>
 800732a:	6107      	str	r7, [r0, #16]
 800732c:	e7a4      	b.n	8007278 <__mdiff+0x34>
 800732e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007332:	fa11 f288 	uxtah	r2, r1, r8
 8007336:	1414      	asrs	r4, r2, #16
 8007338:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800733c:	b292      	uxth	r2, r2
 800733e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007342:	f84e 2b04 	str.w	r2, [lr], #4
 8007346:	1421      	asrs	r1, r4, #16
 8007348:	e7e0      	b.n	800730c <__mdiff+0xc8>
 800734a:	3f01      	subs	r7, #1
 800734c:	e7ea      	b.n	8007324 <__mdiff+0xe0>
 800734e:	bf00      	nop
 8007350:	08008390 	.word	0x08008390
 8007354:	080083a1 	.word	0x080083a1

08007358 <__d2b>:
 8007358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800735c:	460f      	mov	r7, r1
 800735e:	2101      	movs	r1, #1
 8007360:	ec59 8b10 	vmov	r8, r9, d0
 8007364:	4616      	mov	r6, r2
 8007366:	f7ff fcd5 	bl	8006d14 <_Balloc>
 800736a:	4604      	mov	r4, r0
 800736c:	b930      	cbnz	r0, 800737c <__d2b+0x24>
 800736e:	4602      	mov	r2, r0
 8007370:	4b24      	ldr	r3, [pc, #144]	; (8007404 <__d2b+0xac>)
 8007372:	4825      	ldr	r0, [pc, #148]	; (8007408 <__d2b+0xb0>)
 8007374:	f240 310f 	movw	r1, #783	; 0x30f
 8007378:	f000 f914 	bl	80075a4 <__assert_func>
 800737c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007384:	bb2d      	cbnz	r5, 80073d2 <__d2b+0x7a>
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	f1b8 0300 	subs.w	r3, r8, #0
 800738c:	d026      	beq.n	80073dc <__d2b+0x84>
 800738e:	4668      	mov	r0, sp
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	f7ff fd87 	bl	8006ea4 <__lo0bits>
 8007396:	e9dd 1200 	ldrd	r1, r2, [sp]
 800739a:	b1e8      	cbz	r0, 80073d8 <__d2b+0x80>
 800739c:	f1c0 0320 	rsb	r3, r0, #32
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	430b      	orrs	r3, r1
 80073a6:	40c2      	lsrs	r2, r0
 80073a8:	6163      	str	r3, [r4, #20]
 80073aa:	9201      	str	r2, [sp, #4]
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	61a3      	str	r3, [r4, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bf14      	ite	ne
 80073b4:	2202      	movne	r2, #2
 80073b6:	2201      	moveq	r2, #1
 80073b8:	6122      	str	r2, [r4, #16]
 80073ba:	b1bd      	cbz	r5, 80073ec <__d2b+0x94>
 80073bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073c0:	4405      	add	r5, r0
 80073c2:	603d      	str	r5, [r7, #0]
 80073c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073c8:	6030      	str	r0, [r6, #0]
 80073ca:	4620      	mov	r0, r4
 80073cc:	b003      	add	sp, #12
 80073ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073d6:	e7d6      	b.n	8007386 <__d2b+0x2e>
 80073d8:	6161      	str	r1, [r4, #20]
 80073da:	e7e7      	b.n	80073ac <__d2b+0x54>
 80073dc:	a801      	add	r0, sp, #4
 80073de:	f7ff fd61 	bl	8006ea4 <__lo0bits>
 80073e2:	9b01      	ldr	r3, [sp, #4]
 80073e4:	6163      	str	r3, [r4, #20]
 80073e6:	3020      	adds	r0, #32
 80073e8:	2201      	movs	r2, #1
 80073ea:	e7e5      	b.n	80073b8 <__d2b+0x60>
 80073ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073f4:	6038      	str	r0, [r7, #0]
 80073f6:	6918      	ldr	r0, [r3, #16]
 80073f8:	f7ff fd34 	bl	8006e64 <__hi0bits>
 80073fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007400:	e7e2      	b.n	80073c8 <__d2b+0x70>
 8007402:	bf00      	nop
 8007404:	08008390 	.word	0x08008390
 8007408:	080083a1 	.word	0x080083a1

0800740c <__sflush_r>:
 800740c:	898a      	ldrh	r2, [r1, #12]
 800740e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007412:	4605      	mov	r5, r0
 8007414:	0710      	lsls	r0, r2, #28
 8007416:	460c      	mov	r4, r1
 8007418:	d458      	bmi.n	80074cc <__sflush_r+0xc0>
 800741a:	684b      	ldr	r3, [r1, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc05      	bgt.n	800742c <__sflush_r+0x20>
 8007420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	dc02      	bgt.n	800742c <__sflush_r+0x20>
 8007426:	2000      	movs	r0, #0
 8007428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800742c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800742e:	2e00      	cmp	r6, #0
 8007430:	d0f9      	beq.n	8007426 <__sflush_r+0x1a>
 8007432:	2300      	movs	r3, #0
 8007434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007438:	682f      	ldr	r7, [r5, #0]
 800743a:	6a21      	ldr	r1, [r4, #32]
 800743c:	602b      	str	r3, [r5, #0]
 800743e:	d032      	beq.n	80074a6 <__sflush_r+0x9a>
 8007440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	075a      	lsls	r2, r3, #29
 8007446:	d505      	bpl.n	8007454 <__sflush_r+0x48>
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	1ac0      	subs	r0, r0, r3
 800744c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800744e:	b10b      	cbz	r3, 8007454 <__sflush_r+0x48>
 8007450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007452:	1ac0      	subs	r0, r0, r3
 8007454:	2300      	movs	r3, #0
 8007456:	4602      	mov	r2, r0
 8007458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745a:	6a21      	ldr	r1, [r4, #32]
 800745c:	4628      	mov	r0, r5
 800745e:	47b0      	blx	r6
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	d106      	bne.n	8007474 <__sflush_r+0x68>
 8007466:	6829      	ldr	r1, [r5, #0]
 8007468:	291d      	cmp	r1, #29
 800746a:	d82b      	bhi.n	80074c4 <__sflush_r+0xb8>
 800746c:	4a29      	ldr	r2, [pc, #164]	; (8007514 <__sflush_r+0x108>)
 800746e:	410a      	asrs	r2, r1
 8007470:	07d6      	lsls	r6, r2, #31
 8007472:	d427      	bmi.n	80074c4 <__sflush_r+0xb8>
 8007474:	2200      	movs	r2, #0
 8007476:	6062      	str	r2, [r4, #4]
 8007478:	04d9      	lsls	r1, r3, #19
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	6022      	str	r2, [r4, #0]
 800747e:	d504      	bpl.n	800748a <__sflush_r+0x7e>
 8007480:	1c42      	adds	r2, r0, #1
 8007482:	d101      	bne.n	8007488 <__sflush_r+0x7c>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b903      	cbnz	r3, 800748a <__sflush_r+0x7e>
 8007488:	6560      	str	r0, [r4, #84]	; 0x54
 800748a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748c:	602f      	str	r7, [r5, #0]
 800748e:	2900      	cmp	r1, #0
 8007490:	d0c9      	beq.n	8007426 <__sflush_r+0x1a>
 8007492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007496:	4299      	cmp	r1, r3
 8007498:	d002      	beq.n	80074a0 <__sflush_r+0x94>
 800749a:	4628      	mov	r0, r5
 800749c:	f7ff fb3a 	bl	8006b14 <_free_r>
 80074a0:	2000      	movs	r0, #0
 80074a2:	6360      	str	r0, [r4, #52]	; 0x34
 80074a4:	e7c0      	b.n	8007428 <__sflush_r+0x1c>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b0      	blx	r6
 80074ac:	1c41      	adds	r1, r0, #1
 80074ae:	d1c8      	bne.n	8007442 <__sflush_r+0x36>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c5      	beq.n	8007442 <__sflush_r+0x36>
 80074b6:	2b1d      	cmp	r3, #29
 80074b8:	d001      	beq.n	80074be <__sflush_r+0xb2>
 80074ba:	2b16      	cmp	r3, #22
 80074bc:	d101      	bne.n	80074c2 <__sflush_r+0xb6>
 80074be:	602f      	str	r7, [r5, #0]
 80074c0:	e7b1      	b.n	8007426 <__sflush_r+0x1a>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c8:	81a3      	strh	r3, [r4, #12]
 80074ca:	e7ad      	b.n	8007428 <__sflush_r+0x1c>
 80074cc:	690f      	ldr	r7, [r1, #16]
 80074ce:	2f00      	cmp	r7, #0
 80074d0:	d0a9      	beq.n	8007426 <__sflush_r+0x1a>
 80074d2:	0793      	lsls	r3, r2, #30
 80074d4:	680e      	ldr	r6, [r1, #0]
 80074d6:	bf08      	it	eq
 80074d8:	694b      	ldreq	r3, [r1, #20]
 80074da:	600f      	str	r7, [r1, #0]
 80074dc:	bf18      	it	ne
 80074de:	2300      	movne	r3, #0
 80074e0:	eba6 0807 	sub.w	r8, r6, r7
 80074e4:	608b      	str	r3, [r1, #8]
 80074e6:	f1b8 0f00 	cmp.w	r8, #0
 80074ea:	dd9c      	ble.n	8007426 <__sflush_r+0x1a>
 80074ec:	6a21      	ldr	r1, [r4, #32]
 80074ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074f0:	4643      	mov	r3, r8
 80074f2:	463a      	mov	r2, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b0      	blx	r6
 80074f8:	2800      	cmp	r0, #0
 80074fa:	dc06      	bgt.n	800750a <__sflush_r+0xfe>
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007502:	81a3      	strh	r3, [r4, #12]
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	e78e      	b.n	8007428 <__sflush_r+0x1c>
 800750a:	4407      	add	r7, r0
 800750c:	eba8 0800 	sub.w	r8, r8, r0
 8007510:	e7e9      	b.n	80074e6 <__sflush_r+0xda>
 8007512:	bf00      	nop
 8007514:	dfbffffe 	.word	0xdfbffffe

08007518 <_fflush_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	4605      	mov	r5, r0
 800751e:	460c      	mov	r4, r1
 8007520:	b913      	cbnz	r3, 8007528 <_fflush_r+0x10>
 8007522:	2500      	movs	r5, #0
 8007524:	4628      	mov	r0, r5
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	b118      	cbz	r0, 8007532 <_fflush_r+0x1a>
 800752a:	6a03      	ldr	r3, [r0, #32]
 800752c:	b90b      	cbnz	r3, 8007532 <_fflush_r+0x1a>
 800752e:	f7fe fb7b 	bl	8005c28 <__sinit>
 8007532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f3      	beq.n	8007522 <_fflush_r+0xa>
 800753a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800753c:	07d0      	lsls	r0, r2, #31
 800753e:	d404      	bmi.n	800754a <_fflush_r+0x32>
 8007540:	0599      	lsls	r1, r3, #22
 8007542:	d402      	bmi.n	800754a <_fflush_r+0x32>
 8007544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007546:	f7fe fc66 	bl	8005e16 <__retarget_lock_acquire_recursive>
 800754a:	4628      	mov	r0, r5
 800754c:	4621      	mov	r1, r4
 800754e:	f7ff ff5d 	bl	800740c <__sflush_r>
 8007552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007554:	07da      	lsls	r2, r3, #31
 8007556:	4605      	mov	r5, r0
 8007558:	d4e4      	bmi.n	8007524 <_fflush_r+0xc>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	059b      	lsls	r3, r3, #22
 800755e:	d4e1      	bmi.n	8007524 <_fflush_r+0xc>
 8007560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007562:	f7fe fc59 	bl	8005e18 <__retarget_lock_release_recursive>
 8007566:	e7dd      	b.n	8007524 <_fflush_r+0xc>

08007568 <_sbrk_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d06      	ldr	r5, [pc, #24]	; (8007584 <_sbrk_r+0x1c>)
 800756c:	2300      	movs	r3, #0
 800756e:	4604      	mov	r4, r0
 8007570:	4608      	mov	r0, r1
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	f7fa feda 	bl	800232c <_sbrk>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_sbrk_r+0x1a>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_sbrk_r+0x1a>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000508 	.word	0x20000508

08007588 <memcpy>:
 8007588:	440a      	add	r2, r1
 800758a:	4291      	cmp	r1, r2
 800758c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007590:	d100      	bne.n	8007594 <memcpy+0xc>
 8007592:	4770      	bx	lr
 8007594:	b510      	push	{r4, lr}
 8007596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800759a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759e:	4291      	cmp	r1, r2
 80075a0:	d1f9      	bne.n	8007596 <memcpy+0xe>
 80075a2:	bd10      	pop	{r4, pc}

080075a4 <__assert_func>:
 80075a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075a6:	4614      	mov	r4, r2
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <__assert_func+0x2c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4605      	mov	r5, r0
 80075b0:	68d8      	ldr	r0, [r3, #12]
 80075b2:	b14c      	cbz	r4, 80075c8 <__assert_func+0x24>
 80075b4:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <__assert_func+0x30>)
 80075b6:	9100      	str	r1, [sp, #0]
 80075b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075bc:	4906      	ldr	r1, [pc, #24]	; (80075d8 <__assert_func+0x34>)
 80075be:	462b      	mov	r3, r5
 80075c0:	f000 f844 	bl	800764c <fiprintf>
 80075c4:	f000 f854 	bl	8007670 <abort>
 80075c8:	4b04      	ldr	r3, [pc, #16]	; (80075dc <__assert_func+0x38>)
 80075ca:	461c      	mov	r4, r3
 80075cc:	e7f3      	b.n	80075b6 <__assert_func+0x12>
 80075ce:	bf00      	nop
 80075d0:	20000090 	.word	0x20000090
 80075d4:	08008506 	.word	0x08008506
 80075d8:	08008513 	.word	0x08008513
 80075dc:	08008541 	.word	0x08008541

080075e0 <_calloc_r>:
 80075e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075e2:	fba1 2402 	umull	r2, r4, r1, r2
 80075e6:	b94c      	cbnz	r4, 80075fc <_calloc_r+0x1c>
 80075e8:	4611      	mov	r1, r2
 80075ea:	9201      	str	r2, [sp, #4]
 80075ec:	f7ff fb06 	bl	8006bfc <_malloc_r>
 80075f0:	9a01      	ldr	r2, [sp, #4]
 80075f2:	4605      	mov	r5, r0
 80075f4:	b930      	cbnz	r0, 8007604 <_calloc_r+0x24>
 80075f6:	4628      	mov	r0, r5
 80075f8:	b003      	add	sp, #12
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	220c      	movs	r2, #12
 80075fe:	6002      	str	r2, [r0, #0]
 8007600:	2500      	movs	r5, #0
 8007602:	e7f8      	b.n	80075f6 <_calloc_r+0x16>
 8007604:	4621      	mov	r1, r4
 8007606:	f7fe fb88 	bl	8005d1a <memset>
 800760a:	e7f4      	b.n	80075f6 <_calloc_r+0x16>

0800760c <__ascii_mbtowc>:
 800760c:	b082      	sub	sp, #8
 800760e:	b901      	cbnz	r1, 8007612 <__ascii_mbtowc+0x6>
 8007610:	a901      	add	r1, sp, #4
 8007612:	b142      	cbz	r2, 8007626 <__ascii_mbtowc+0x1a>
 8007614:	b14b      	cbz	r3, 800762a <__ascii_mbtowc+0x1e>
 8007616:	7813      	ldrb	r3, [r2, #0]
 8007618:	600b      	str	r3, [r1, #0]
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	1e10      	subs	r0, r2, #0
 800761e:	bf18      	it	ne
 8007620:	2001      	movne	r0, #1
 8007622:	b002      	add	sp, #8
 8007624:	4770      	bx	lr
 8007626:	4610      	mov	r0, r2
 8007628:	e7fb      	b.n	8007622 <__ascii_mbtowc+0x16>
 800762a:	f06f 0001 	mvn.w	r0, #1
 800762e:	e7f8      	b.n	8007622 <__ascii_mbtowc+0x16>

08007630 <__ascii_wctomb>:
 8007630:	b149      	cbz	r1, 8007646 <__ascii_wctomb+0x16>
 8007632:	2aff      	cmp	r2, #255	; 0xff
 8007634:	bf85      	ittet	hi
 8007636:	238a      	movhi	r3, #138	; 0x8a
 8007638:	6003      	strhi	r3, [r0, #0]
 800763a:	700a      	strbls	r2, [r1, #0]
 800763c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007640:	bf98      	it	ls
 8007642:	2001      	movls	r0, #1
 8007644:	4770      	bx	lr
 8007646:	4608      	mov	r0, r1
 8007648:	4770      	bx	lr
	...

0800764c <fiprintf>:
 800764c:	b40e      	push	{r1, r2, r3}
 800764e:	b503      	push	{r0, r1, lr}
 8007650:	4601      	mov	r1, r0
 8007652:	ab03      	add	r3, sp, #12
 8007654:	4805      	ldr	r0, [pc, #20]	; (800766c <fiprintf+0x20>)
 8007656:	f853 2b04 	ldr.w	r2, [r3], #4
 800765a:	6800      	ldr	r0, [r0, #0]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	f000 f837 	bl	80076d0 <_vfiprintf_r>
 8007662:	b002      	add	sp, #8
 8007664:	f85d eb04 	ldr.w	lr, [sp], #4
 8007668:	b003      	add	sp, #12
 800766a:	4770      	bx	lr
 800766c:	20000090 	.word	0x20000090

08007670 <abort>:
 8007670:	b508      	push	{r3, lr}
 8007672:	2006      	movs	r0, #6
 8007674:	f000 fa04 	bl	8007a80 <raise>
 8007678:	2001      	movs	r0, #1
 800767a:	f7fa fddf 	bl	800223c <_exit>

0800767e <__sfputc_r>:
 800767e:	6893      	ldr	r3, [r2, #8]
 8007680:	3b01      	subs	r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	b410      	push	{r4}
 8007686:	6093      	str	r3, [r2, #8]
 8007688:	da08      	bge.n	800769c <__sfputc_r+0x1e>
 800768a:	6994      	ldr	r4, [r2, #24]
 800768c:	42a3      	cmp	r3, r4
 800768e:	db01      	blt.n	8007694 <__sfputc_r+0x16>
 8007690:	290a      	cmp	r1, #10
 8007692:	d103      	bne.n	800769c <__sfputc_r+0x1e>
 8007694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007698:	f000 b934 	b.w	8007904 <__swbuf_r>
 800769c:	6813      	ldr	r3, [r2, #0]
 800769e:	1c58      	adds	r0, r3, #1
 80076a0:	6010      	str	r0, [r2, #0]
 80076a2:	7019      	strb	r1, [r3, #0]
 80076a4:	4608      	mov	r0, r1
 80076a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <__sfputs_r>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	4606      	mov	r6, r0
 80076b0:	460f      	mov	r7, r1
 80076b2:	4614      	mov	r4, r2
 80076b4:	18d5      	adds	r5, r2, r3
 80076b6:	42ac      	cmp	r4, r5
 80076b8:	d101      	bne.n	80076be <__sfputs_r+0x12>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e007      	b.n	80076ce <__sfputs_r+0x22>
 80076be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c2:	463a      	mov	r2, r7
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff ffda 	bl	800767e <__sfputc_r>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	d1f3      	bne.n	80076b6 <__sfputs_r+0xa>
 80076ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076d0 <_vfiprintf_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	460d      	mov	r5, r1
 80076d6:	b09d      	sub	sp, #116	; 0x74
 80076d8:	4614      	mov	r4, r2
 80076da:	4698      	mov	r8, r3
 80076dc:	4606      	mov	r6, r0
 80076de:	b118      	cbz	r0, 80076e8 <_vfiprintf_r+0x18>
 80076e0:	6a03      	ldr	r3, [r0, #32]
 80076e2:	b90b      	cbnz	r3, 80076e8 <_vfiprintf_r+0x18>
 80076e4:	f7fe faa0 	bl	8005c28 <__sinit>
 80076e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ea:	07d9      	lsls	r1, r3, #31
 80076ec:	d405      	bmi.n	80076fa <_vfiprintf_r+0x2a>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	059a      	lsls	r2, r3, #22
 80076f2:	d402      	bmi.n	80076fa <_vfiprintf_r+0x2a>
 80076f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f6:	f7fe fb8e 	bl	8005e16 <__retarget_lock_acquire_recursive>
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	071b      	lsls	r3, r3, #28
 80076fe:	d501      	bpl.n	8007704 <_vfiprintf_r+0x34>
 8007700:	692b      	ldr	r3, [r5, #16]
 8007702:	b99b      	cbnz	r3, 800772c <_vfiprintf_r+0x5c>
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f000 f93a 	bl	8007980 <__swsetup_r>
 800770c:	b170      	cbz	r0, 800772c <_vfiprintf_r+0x5c>
 800770e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007710:	07dc      	lsls	r4, r3, #31
 8007712:	d504      	bpl.n	800771e <_vfiprintf_r+0x4e>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	b01d      	add	sp, #116	; 0x74
 800771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	0598      	lsls	r0, r3, #22
 8007722:	d4f7      	bmi.n	8007714 <_vfiprintf_r+0x44>
 8007724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007726:	f7fe fb77 	bl	8005e18 <__retarget_lock_release_recursive>
 800772a:	e7f3      	b.n	8007714 <_vfiprintf_r+0x44>
 800772c:	2300      	movs	r3, #0
 800772e:	9309      	str	r3, [sp, #36]	; 0x24
 8007730:	2320      	movs	r3, #32
 8007732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007736:	f8cd 800c 	str.w	r8, [sp, #12]
 800773a:	2330      	movs	r3, #48	; 0x30
 800773c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078f0 <_vfiprintf_r+0x220>
 8007740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007744:	f04f 0901 	mov.w	r9, #1
 8007748:	4623      	mov	r3, r4
 800774a:	469a      	mov	sl, r3
 800774c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007750:	b10a      	cbz	r2, 8007756 <_vfiprintf_r+0x86>
 8007752:	2a25      	cmp	r2, #37	; 0x25
 8007754:	d1f9      	bne.n	800774a <_vfiprintf_r+0x7a>
 8007756:	ebba 0b04 	subs.w	fp, sl, r4
 800775a:	d00b      	beq.n	8007774 <_vfiprintf_r+0xa4>
 800775c:	465b      	mov	r3, fp
 800775e:	4622      	mov	r2, r4
 8007760:	4629      	mov	r1, r5
 8007762:	4630      	mov	r0, r6
 8007764:	f7ff ffa2 	bl	80076ac <__sfputs_r>
 8007768:	3001      	adds	r0, #1
 800776a:	f000 80a9 	beq.w	80078c0 <_vfiprintf_r+0x1f0>
 800776e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007770:	445a      	add	r2, fp
 8007772:	9209      	str	r2, [sp, #36]	; 0x24
 8007774:	f89a 3000 	ldrb.w	r3, [sl]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 80a1 	beq.w	80078c0 <_vfiprintf_r+0x1f0>
 800777e:	2300      	movs	r3, #0
 8007780:	f04f 32ff 	mov.w	r2, #4294967295
 8007784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007788:	f10a 0a01 	add.w	sl, sl, #1
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007794:	931a      	str	r3, [sp, #104]	; 0x68
 8007796:	4654      	mov	r4, sl
 8007798:	2205      	movs	r2, #5
 800779a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779e:	4854      	ldr	r0, [pc, #336]	; (80078f0 <_vfiprintf_r+0x220>)
 80077a0:	f7f8 fd36 	bl	8000210 <memchr>
 80077a4:	9a04      	ldr	r2, [sp, #16]
 80077a6:	b9d8      	cbnz	r0, 80077e0 <_vfiprintf_r+0x110>
 80077a8:	06d1      	lsls	r1, r2, #27
 80077aa:	bf44      	itt	mi
 80077ac:	2320      	movmi	r3, #32
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b2:	0713      	lsls	r3, r2, #28
 80077b4:	bf44      	itt	mi
 80077b6:	232b      	movmi	r3, #43	; 0x2b
 80077b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077bc:	f89a 3000 	ldrb.w	r3, [sl]
 80077c0:	2b2a      	cmp	r3, #42	; 0x2a
 80077c2:	d015      	beq.n	80077f0 <_vfiprintf_r+0x120>
 80077c4:	9a07      	ldr	r2, [sp, #28]
 80077c6:	4654      	mov	r4, sl
 80077c8:	2000      	movs	r0, #0
 80077ca:	f04f 0c0a 	mov.w	ip, #10
 80077ce:	4621      	mov	r1, r4
 80077d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d4:	3b30      	subs	r3, #48	; 0x30
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d94d      	bls.n	8007876 <_vfiprintf_r+0x1a6>
 80077da:	b1b0      	cbz	r0, 800780a <_vfiprintf_r+0x13a>
 80077dc:	9207      	str	r2, [sp, #28]
 80077de:	e014      	b.n	800780a <_vfiprintf_r+0x13a>
 80077e0:	eba0 0308 	sub.w	r3, r0, r8
 80077e4:	fa09 f303 	lsl.w	r3, r9, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	46a2      	mov	sl, r4
 80077ee:	e7d2      	b.n	8007796 <_vfiprintf_r+0xc6>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	1d19      	adds	r1, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	9103      	str	r1, [sp, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfbb      	ittet	lt
 80077fc:	425b      	neglt	r3, r3
 80077fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007802:	9307      	strge	r3, [sp, #28]
 8007804:	9307      	strlt	r3, [sp, #28]
 8007806:	bfb8      	it	lt
 8007808:	9204      	strlt	r2, [sp, #16]
 800780a:	7823      	ldrb	r3, [r4, #0]
 800780c:	2b2e      	cmp	r3, #46	; 0x2e
 800780e:	d10c      	bne.n	800782a <_vfiprintf_r+0x15a>
 8007810:	7863      	ldrb	r3, [r4, #1]
 8007812:	2b2a      	cmp	r3, #42	; 0x2a
 8007814:	d134      	bne.n	8007880 <_vfiprintf_r+0x1b0>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	1d1a      	adds	r2, r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	9203      	str	r2, [sp, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	bfb8      	it	lt
 8007822:	f04f 33ff 	movlt.w	r3, #4294967295
 8007826:	3402      	adds	r4, #2
 8007828:	9305      	str	r3, [sp, #20]
 800782a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007900 <_vfiprintf_r+0x230>
 800782e:	7821      	ldrb	r1, [r4, #0]
 8007830:	2203      	movs	r2, #3
 8007832:	4650      	mov	r0, sl
 8007834:	f7f8 fcec 	bl	8000210 <memchr>
 8007838:	b138      	cbz	r0, 800784a <_vfiprintf_r+0x17a>
 800783a:	9b04      	ldr	r3, [sp, #16]
 800783c:	eba0 000a 	sub.w	r0, r0, sl
 8007840:	2240      	movs	r2, #64	; 0x40
 8007842:	4082      	lsls	r2, r0
 8007844:	4313      	orrs	r3, r2
 8007846:	3401      	adds	r4, #1
 8007848:	9304      	str	r3, [sp, #16]
 800784a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784e:	4829      	ldr	r0, [pc, #164]	; (80078f4 <_vfiprintf_r+0x224>)
 8007850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007854:	2206      	movs	r2, #6
 8007856:	f7f8 fcdb 	bl	8000210 <memchr>
 800785a:	2800      	cmp	r0, #0
 800785c:	d03f      	beq.n	80078de <_vfiprintf_r+0x20e>
 800785e:	4b26      	ldr	r3, [pc, #152]	; (80078f8 <_vfiprintf_r+0x228>)
 8007860:	bb1b      	cbnz	r3, 80078aa <_vfiprintf_r+0x1da>
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	3307      	adds	r3, #7
 8007866:	f023 0307 	bic.w	r3, r3, #7
 800786a:	3308      	adds	r3, #8
 800786c:	9303      	str	r3, [sp, #12]
 800786e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007870:	443b      	add	r3, r7
 8007872:	9309      	str	r3, [sp, #36]	; 0x24
 8007874:	e768      	b.n	8007748 <_vfiprintf_r+0x78>
 8007876:	fb0c 3202 	mla	r2, ip, r2, r3
 800787a:	460c      	mov	r4, r1
 800787c:	2001      	movs	r0, #1
 800787e:	e7a6      	b.n	80077ce <_vfiprintf_r+0xfe>
 8007880:	2300      	movs	r3, #0
 8007882:	3401      	adds	r4, #1
 8007884:	9305      	str	r3, [sp, #20]
 8007886:	4619      	mov	r1, r3
 8007888:	f04f 0c0a 	mov.w	ip, #10
 800788c:	4620      	mov	r0, r4
 800788e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007892:	3a30      	subs	r2, #48	; 0x30
 8007894:	2a09      	cmp	r2, #9
 8007896:	d903      	bls.n	80078a0 <_vfiprintf_r+0x1d0>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0c6      	beq.n	800782a <_vfiprintf_r+0x15a>
 800789c:	9105      	str	r1, [sp, #20]
 800789e:	e7c4      	b.n	800782a <_vfiprintf_r+0x15a>
 80078a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80078a4:	4604      	mov	r4, r0
 80078a6:	2301      	movs	r3, #1
 80078a8:	e7f0      	b.n	800788c <_vfiprintf_r+0x1bc>
 80078aa:	ab03      	add	r3, sp, #12
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	462a      	mov	r2, r5
 80078b0:	4b12      	ldr	r3, [pc, #72]	; (80078fc <_vfiprintf_r+0x22c>)
 80078b2:	a904      	add	r1, sp, #16
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7fd fd65 	bl	8005384 <_printf_float>
 80078ba:	4607      	mov	r7, r0
 80078bc:	1c78      	adds	r0, r7, #1
 80078be:	d1d6      	bne.n	800786e <_vfiprintf_r+0x19e>
 80078c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	d405      	bmi.n	80078d2 <_vfiprintf_r+0x202>
 80078c6:	89ab      	ldrh	r3, [r5, #12]
 80078c8:	059a      	lsls	r2, r3, #22
 80078ca:	d402      	bmi.n	80078d2 <_vfiprintf_r+0x202>
 80078cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ce:	f7fe faa3 	bl	8005e18 <__retarget_lock_release_recursive>
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	065b      	lsls	r3, r3, #25
 80078d6:	f53f af1d 	bmi.w	8007714 <_vfiprintf_r+0x44>
 80078da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078dc:	e71c      	b.n	8007718 <_vfiprintf_r+0x48>
 80078de:	ab03      	add	r3, sp, #12
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	462a      	mov	r2, r5
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <_vfiprintf_r+0x22c>)
 80078e6:	a904      	add	r1, sp, #16
 80078e8:	4630      	mov	r0, r6
 80078ea:	f7fd ffef 	bl	80058cc <_printf_i>
 80078ee:	e7e4      	b.n	80078ba <_vfiprintf_r+0x1ea>
 80078f0:	08008643 	.word	0x08008643
 80078f4:	0800864d 	.word	0x0800864d
 80078f8:	08005385 	.word	0x08005385
 80078fc:	080076ad 	.word	0x080076ad
 8007900:	08008649 	.word	0x08008649

08007904 <__swbuf_r>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	460e      	mov	r6, r1
 8007908:	4614      	mov	r4, r2
 800790a:	4605      	mov	r5, r0
 800790c:	b118      	cbz	r0, 8007916 <__swbuf_r+0x12>
 800790e:	6a03      	ldr	r3, [r0, #32]
 8007910:	b90b      	cbnz	r3, 8007916 <__swbuf_r+0x12>
 8007912:	f7fe f989 	bl	8005c28 <__sinit>
 8007916:	69a3      	ldr	r3, [r4, #24]
 8007918:	60a3      	str	r3, [r4, #8]
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	071a      	lsls	r2, r3, #28
 800791e:	d525      	bpl.n	800796c <__swbuf_r+0x68>
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	b31b      	cbz	r3, 800796c <__swbuf_r+0x68>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	6922      	ldr	r2, [r4, #16]
 8007928:	1a98      	subs	r0, r3, r2
 800792a:	6963      	ldr	r3, [r4, #20]
 800792c:	b2f6      	uxtb	r6, r6
 800792e:	4283      	cmp	r3, r0
 8007930:	4637      	mov	r7, r6
 8007932:	dc04      	bgt.n	800793e <__swbuf_r+0x3a>
 8007934:	4621      	mov	r1, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f7ff fdee 	bl	8007518 <_fflush_r>
 800793c:	b9e0      	cbnz	r0, 8007978 <__swbuf_r+0x74>
 800793e:	68a3      	ldr	r3, [r4, #8]
 8007940:	3b01      	subs	r3, #1
 8007942:	60a3      	str	r3, [r4, #8]
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	6022      	str	r2, [r4, #0]
 800794a:	701e      	strb	r6, [r3, #0]
 800794c:	6962      	ldr	r2, [r4, #20]
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	429a      	cmp	r2, r3
 8007952:	d004      	beq.n	800795e <__swbuf_r+0x5a>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	07db      	lsls	r3, r3, #31
 8007958:	d506      	bpl.n	8007968 <__swbuf_r+0x64>
 800795a:	2e0a      	cmp	r6, #10
 800795c:	d104      	bne.n	8007968 <__swbuf_r+0x64>
 800795e:	4621      	mov	r1, r4
 8007960:	4628      	mov	r0, r5
 8007962:	f7ff fdd9 	bl	8007518 <_fflush_r>
 8007966:	b938      	cbnz	r0, 8007978 <__swbuf_r+0x74>
 8007968:	4638      	mov	r0, r7
 800796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796c:	4621      	mov	r1, r4
 800796e:	4628      	mov	r0, r5
 8007970:	f000 f806 	bl	8007980 <__swsetup_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	d0d5      	beq.n	8007924 <__swbuf_r+0x20>
 8007978:	f04f 37ff 	mov.w	r7, #4294967295
 800797c:	e7f4      	b.n	8007968 <__swbuf_r+0x64>
	...

08007980 <__swsetup_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <__swsetup_r+0xac>)
 8007984:	4605      	mov	r5, r0
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	460c      	mov	r4, r1
 800798a:	b118      	cbz	r0, 8007994 <__swsetup_r+0x14>
 800798c:	6a03      	ldr	r3, [r0, #32]
 800798e:	b90b      	cbnz	r3, 8007994 <__swsetup_r+0x14>
 8007990:	f7fe f94a 	bl	8005c28 <__sinit>
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800799a:	0718      	lsls	r0, r3, #28
 800799c:	d422      	bmi.n	80079e4 <__swsetup_r+0x64>
 800799e:	06d9      	lsls	r1, r3, #27
 80079a0:	d407      	bmi.n	80079b2 <__swsetup_r+0x32>
 80079a2:	2309      	movs	r3, #9
 80079a4:	602b      	str	r3, [r5, #0]
 80079a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	e034      	b.n	8007a1c <__swsetup_r+0x9c>
 80079b2:	0758      	lsls	r0, r3, #29
 80079b4:	d512      	bpl.n	80079dc <__swsetup_r+0x5c>
 80079b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079b8:	b141      	cbz	r1, 80079cc <__swsetup_r+0x4c>
 80079ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079be:	4299      	cmp	r1, r3
 80079c0:	d002      	beq.n	80079c8 <__swsetup_r+0x48>
 80079c2:	4628      	mov	r0, r5
 80079c4:	f7ff f8a6 	bl	8006b14 <_free_r>
 80079c8:	2300      	movs	r3, #0
 80079ca:	6363      	str	r3, [r4, #52]	; 0x34
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	2300      	movs	r3, #0
 80079d6:	6063      	str	r3, [r4, #4]
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	f043 0308 	orr.w	r3, r3, #8
 80079e2:	81a3      	strh	r3, [r4, #12]
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	b94b      	cbnz	r3, 80079fc <__swsetup_r+0x7c>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f2:	d003      	beq.n	80079fc <__swsetup_r+0x7c>
 80079f4:	4621      	mov	r1, r4
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 f884 	bl	8007b04 <__smakebuf_r>
 80079fc:	89a0      	ldrh	r0, [r4, #12]
 80079fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a02:	f010 0301 	ands.w	r3, r0, #1
 8007a06:	d00a      	beq.n	8007a1e <__swsetup_r+0x9e>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60a3      	str	r3, [r4, #8]
 8007a0c:	6963      	ldr	r3, [r4, #20]
 8007a0e:	425b      	negs	r3, r3
 8007a10:	61a3      	str	r3, [r4, #24]
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	b943      	cbnz	r3, 8007a28 <__swsetup_r+0xa8>
 8007a16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a1a:	d1c4      	bne.n	80079a6 <__swsetup_r+0x26>
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	0781      	lsls	r1, r0, #30
 8007a20:	bf58      	it	pl
 8007a22:	6963      	ldrpl	r3, [r4, #20]
 8007a24:	60a3      	str	r3, [r4, #8]
 8007a26:	e7f4      	b.n	8007a12 <__swsetup_r+0x92>
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7f7      	b.n	8007a1c <__swsetup_r+0x9c>
 8007a2c:	20000090 	.word	0x20000090

08007a30 <_raise_r>:
 8007a30:	291f      	cmp	r1, #31
 8007a32:	b538      	push	{r3, r4, r5, lr}
 8007a34:	4604      	mov	r4, r0
 8007a36:	460d      	mov	r5, r1
 8007a38:	d904      	bls.n	8007a44 <_raise_r+0x14>
 8007a3a:	2316      	movs	r3, #22
 8007a3c:	6003      	str	r3, [r0, #0]
 8007a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a46:	b112      	cbz	r2, 8007a4e <_raise_r+0x1e>
 8007a48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a4c:	b94b      	cbnz	r3, 8007a62 <_raise_r+0x32>
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 f830 	bl	8007ab4 <_getpid_r>
 8007a54:	462a      	mov	r2, r5
 8007a56:	4601      	mov	r1, r0
 8007a58:	4620      	mov	r0, r4
 8007a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a5e:	f000 b817 	b.w	8007a90 <_kill_r>
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d00a      	beq.n	8007a7c <_raise_r+0x4c>
 8007a66:	1c59      	adds	r1, r3, #1
 8007a68:	d103      	bne.n	8007a72 <_raise_r+0x42>
 8007a6a:	2316      	movs	r3, #22
 8007a6c:	6003      	str	r3, [r0, #0]
 8007a6e:	2001      	movs	r0, #1
 8007a70:	e7e7      	b.n	8007a42 <_raise_r+0x12>
 8007a72:	2400      	movs	r4, #0
 8007a74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a78:	4628      	mov	r0, r5
 8007a7a:	4798      	blx	r3
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e7e0      	b.n	8007a42 <_raise_r+0x12>

08007a80 <raise>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	; (8007a8c <raise+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f7ff bfd3 	b.w	8007a30 <_raise_r>
 8007a8a:	bf00      	nop
 8007a8c:	20000090 	.word	0x20000090

08007a90 <_kill_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	; (8007ab0 <_kill_r+0x20>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	f7fa fbbd 	bl	800221c <_kill>
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	d102      	bne.n	8007aac <_kill_r+0x1c>
 8007aa6:	682b      	ldr	r3, [r5, #0]
 8007aa8:	b103      	cbz	r3, 8007aac <_kill_r+0x1c>
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	bd38      	pop	{r3, r4, r5, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000508 	.word	0x20000508

08007ab4 <_getpid_r>:
 8007ab4:	f7fa bbaa 	b.w	800220c <_getpid>

08007ab8 <__swhatbuf_r>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	460c      	mov	r4, r1
 8007abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	b096      	sub	sp, #88	; 0x58
 8007ac4:	4615      	mov	r5, r2
 8007ac6:	461e      	mov	r6, r3
 8007ac8:	da0d      	bge.n	8007ae6 <__swhatbuf_r+0x2e>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ad0:	f04f 0100 	mov.w	r1, #0
 8007ad4:	bf0c      	ite	eq
 8007ad6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ada:	2340      	movne	r3, #64	; 0x40
 8007adc:	2000      	movs	r0, #0
 8007ade:	6031      	str	r1, [r6, #0]
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	b016      	add	sp, #88	; 0x58
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	466a      	mov	r2, sp
 8007ae8:	f000 f848 	bl	8007b7c <_fstat_r>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	dbec      	blt.n	8007aca <__swhatbuf_r+0x12>
 8007af0:	9901      	ldr	r1, [sp, #4]
 8007af2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007af6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007afa:	4259      	negs	r1, r3
 8007afc:	4159      	adcs	r1, r3
 8007afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b02:	e7eb      	b.n	8007adc <__swhatbuf_r+0x24>

08007b04 <__smakebuf_r>:
 8007b04:	898b      	ldrh	r3, [r1, #12]
 8007b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b08:	079d      	lsls	r5, r3, #30
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	d507      	bpl.n	8007b20 <__smakebuf_r+0x1c>
 8007b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	2301      	movs	r3, #1
 8007b1a:	6163      	str	r3, [r4, #20]
 8007b1c:	b002      	add	sp, #8
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	ab01      	add	r3, sp, #4
 8007b22:	466a      	mov	r2, sp
 8007b24:	f7ff ffc8 	bl	8007ab8 <__swhatbuf_r>
 8007b28:	9900      	ldr	r1, [sp, #0]
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff f865 	bl	8006bfc <_malloc_r>
 8007b32:	b948      	cbnz	r0, 8007b48 <__smakebuf_r+0x44>
 8007b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b38:	059a      	lsls	r2, r3, #22
 8007b3a:	d4ef      	bmi.n	8007b1c <__smakebuf_r+0x18>
 8007b3c:	f023 0303 	bic.w	r3, r3, #3
 8007b40:	f043 0302 	orr.w	r3, r3, #2
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	e7e3      	b.n	8007b10 <__smakebuf_r+0xc>
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	6020      	str	r0, [r4, #0]
 8007b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	9b00      	ldr	r3, [sp, #0]
 8007b54:	6163      	str	r3, [r4, #20]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	6120      	str	r0, [r4, #16]
 8007b5a:	b15b      	cbz	r3, 8007b74 <__smakebuf_r+0x70>
 8007b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b60:	4630      	mov	r0, r6
 8007b62:	f000 f81d 	bl	8007ba0 <_isatty_r>
 8007b66:	b128      	cbz	r0, 8007b74 <__smakebuf_r+0x70>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	f023 0303 	bic.w	r3, r3, #3
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	431d      	orrs	r5, r3
 8007b78:	81a5      	strh	r5, [r4, #12]
 8007b7a:	e7cf      	b.n	8007b1c <__smakebuf_r+0x18>

08007b7c <_fstat_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d07      	ldr	r5, [pc, #28]	; (8007b9c <_fstat_r+0x20>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	602b      	str	r3, [r5, #0]
 8007b8a:	f7fa fba6 	bl	80022da <_fstat>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	d102      	bne.n	8007b98 <_fstat_r+0x1c>
 8007b92:	682b      	ldr	r3, [r5, #0]
 8007b94:	b103      	cbz	r3, 8007b98 <_fstat_r+0x1c>
 8007b96:	6023      	str	r3, [r4, #0]
 8007b98:	bd38      	pop	{r3, r4, r5, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000508 	.word	0x20000508

08007ba0 <_isatty_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d06      	ldr	r5, [pc, #24]	; (8007bbc <_isatty_r+0x1c>)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	4608      	mov	r0, r1
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	f7fa fba5 	bl	80022fa <_isatty>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_isatty_r+0x1a>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_isatty_r+0x1a>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20000508 	.word	0x20000508

08007bc0 <atan2>:
 8007bc0:	f000 b906 	b.w	8007dd0 <__ieee754_atan2>

08007bc4 <sqrt>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	ed2d 8b02 	vpush	{d8}
 8007bca:	ec55 4b10 	vmov	r4, r5, d0
 8007bce:	f000 f825 	bl	8007c1c <__ieee754_sqrt>
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	eeb0 8a40 	vmov.f32	s16, s0
 8007bde:	eef0 8a60 	vmov.f32	s17, s1
 8007be2:	f7f8 ffc3 	bl	8000b6c <__aeabi_dcmpun>
 8007be6:	b990      	cbnz	r0, 8007c0e <sqrt+0x4a>
 8007be8:	2200      	movs	r2, #0
 8007bea:	2300      	movs	r3, #0
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 ff94 	bl	8000b1c <__aeabi_dcmplt>
 8007bf4:	b158      	cbz	r0, 8007c0e <sqrt+0x4a>
 8007bf6:	f7fe f8e3 	bl	8005dc0 <__errno>
 8007bfa:	2321      	movs	r3, #33	; 0x21
 8007bfc:	6003      	str	r3, [r0, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2300      	movs	r3, #0
 8007c02:	4610      	mov	r0, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	f7f8 fe41 	bl	800088c <__aeabi_ddiv>
 8007c0a:	ec41 0b18 	vmov	d8, r0, r1
 8007c0e:	eeb0 0a48 	vmov.f32	s0, s16
 8007c12:	eef0 0a68 	vmov.f32	s1, s17
 8007c16:	ecbd 8b02 	vpop	{d8}
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}

08007c1c <__ieee754_sqrt>:
 8007c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	ec55 4b10 	vmov	r4, r5, d0
 8007c24:	4e67      	ldr	r6, [pc, #412]	; (8007dc4 <__ieee754_sqrt+0x1a8>)
 8007c26:	43ae      	bics	r6, r5
 8007c28:	ee10 0a10 	vmov	r0, s0
 8007c2c:	ee10 2a10 	vmov	r2, s0
 8007c30:	4629      	mov	r1, r5
 8007c32:	462b      	mov	r3, r5
 8007c34:	d10d      	bne.n	8007c52 <__ieee754_sqrt+0x36>
 8007c36:	f7f8 fcff 	bl	8000638 <__aeabi_dmul>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 fb43 	bl	80002cc <__adddf3>
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	ec45 4b10 	vmov	d0, r4, r5
 8007c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	2d00      	cmp	r5, #0
 8007c54:	dc0b      	bgt.n	8007c6e <__ieee754_sqrt+0x52>
 8007c56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007c5a:	4326      	orrs	r6, r4
 8007c5c:	d0f5      	beq.n	8007c4a <__ieee754_sqrt+0x2e>
 8007c5e:	b135      	cbz	r5, 8007c6e <__ieee754_sqrt+0x52>
 8007c60:	f7f8 fb32 	bl	80002c8 <__aeabi_dsub>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	f7f8 fe10 	bl	800088c <__aeabi_ddiv>
 8007c6c:	e7eb      	b.n	8007c46 <__ieee754_sqrt+0x2a>
 8007c6e:	1509      	asrs	r1, r1, #20
 8007c70:	f000 808d 	beq.w	8007d8e <__ieee754_sqrt+0x172>
 8007c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c78:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c80:	07c9      	lsls	r1, r1, #31
 8007c82:	bf5c      	itt	pl
 8007c84:	005b      	lslpl	r3, r3, #1
 8007c86:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007c8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c8e:	bf58      	it	pl
 8007c90:	0052      	lslpl	r2, r2, #1
 8007c92:	2500      	movs	r5, #0
 8007c94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007c98:	1076      	asrs	r6, r6, #1
 8007c9a:	0052      	lsls	r2, r2, #1
 8007c9c:	f04f 0e16 	mov.w	lr, #22
 8007ca0:	46ac      	mov	ip, r5
 8007ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ca6:	eb0c 0001 	add.w	r0, ip, r1
 8007caa:	4298      	cmp	r0, r3
 8007cac:	bfde      	ittt	le
 8007cae:	1a1b      	suble	r3, r3, r0
 8007cb0:	eb00 0c01 	addle.w	ip, r0, r1
 8007cb4:	186d      	addle	r5, r5, r1
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	f1be 0e01 	subs.w	lr, lr, #1
 8007cbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007cc0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007cc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007cc8:	d1ed      	bne.n	8007ca6 <__ieee754_sqrt+0x8a>
 8007cca:	4674      	mov	r4, lr
 8007ccc:	2720      	movs	r7, #32
 8007cce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007cd2:	4563      	cmp	r3, ip
 8007cd4:	eb01 000e 	add.w	r0, r1, lr
 8007cd8:	dc02      	bgt.n	8007ce0 <__ieee754_sqrt+0xc4>
 8007cda:	d113      	bne.n	8007d04 <__ieee754_sqrt+0xe8>
 8007cdc:	4290      	cmp	r0, r2
 8007cde:	d811      	bhi.n	8007d04 <__ieee754_sqrt+0xe8>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	eb00 0e01 	add.w	lr, r0, r1
 8007ce6:	da57      	bge.n	8007d98 <__ieee754_sqrt+0x17c>
 8007ce8:	f1be 0f00 	cmp.w	lr, #0
 8007cec:	db54      	blt.n	8007d98 <__ieee754_sqrt+0x17c>
 8007cee:	f10c 0801 	add.w	r8, ip, #1
 8007cf2:	eba3 030c 	sub.w	r3, r3, ip
 8007cf6:	4290      	cmp	r0, r2
 8007cf8:	bf88      	it	hi
 8007cfa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007cfe:	1a12      	subs	r2, r2, r0
 8007d00:	440c      	add	r4, r1
 8007d02:	46c4      	mov	ip, r8
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	3f01      	subs	r7, #1
 8007d08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007d0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007d10:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007d14:	d1dd      	bne.n	8007cd2 <__ieee754_sqrt+0xb6>
 8007d16:	4313      	orrs	r3, r2
 8007d18:	d01b      	beq.n	8007d52 <__ieee754_sqrt+0x136>
 8007d1a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007dc8 <__ieee754_sqrt+0x1ac>
 8007d1e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007dcc <__ieee754_sqrt+0x1b0>
 8007d22:	e9da 0100 	ldrd	r0, r1, [sl]
 8007d26:	e9db 2300 	ldrd	r2, r3, [fp]
 8007d2a:	f7f8 facd 	bl	80002c8 <__aeabi_dsub>
 8007d2e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f7f8 fef9 	bl	8000b30 <__aeabi_dcmple>
 8007d3e:	b140      	cbz	r0, 8007d52 <__ieee754_sqrt+0x136>
 8007d40:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007d44:	e9da 0100 	ldrd	r0, r1, [sl]
 8007d48:	e9db 2300 	ldrd	r2, r3, [fp]
 8007d4c:	d126      	bne.n	8007d9c <__ieee754_sqrt+0x180>
 8007d4e:	3501      	adds	r5, #1
 8007d50:	463c      	mov	r4, r7
 8007d52:	106a      	asrs	r2, r5, #1
 8007d54:	0863      	lsrs	r3, r4, #1
 8007d56:	07e9      	lsls	r1, r5, #31
 8007d58:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007d5c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007d60:	bf48      	it	mi
 8007d62:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007d66:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007d6a:	461c      	mov	r4, r3
 8007d6c:	e76d      	b.n	8007c4a <__ieee754_sqrt+0x2e>
 8007d6e:	0ad3      	lsrs	r3, r2, #11
 8007d70:	3815      	subs	r0, #21
 8007d72:	0552      	lsls	r2, r2, #21
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0fa      	beq.n	8007d6e <__ieee754_sqrt+0x152>
 8007d78:	02dc      	lsls	r4, r3, #11
 8007d7a:	d50a      	bpl.n	8007d92 <__ieee754_sqrt+0x176>
 8007d7c:	f1c1 0420 	rsb	r4, r1, #32
 8007d80:	fa22 f404 	lsr.w	r4, r2, r4
 8007d84:	1e4d      	subs	r5, r1, #1
 8007d86:	408a      	lsls	r2, r1
 8007d88:	4323      	orrs	r3, r4
 8007d8a:	1b41      	subs	r1, r0, r5
 8007d8c:	e772      	b.n	8007c74 <__ieee754_sqrt+0x58>
 8007d8e:	4608      	mov	r0, r1
 8007d90:	e7f0      	b.n	8007d74 <__ieee754_sqrt+0x158>
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	3101      	adds	r1, #1
 8007d96:	e7ef      	b.n	8007d78 <__ieee754_sqrt+0x15c>
 8007d98:	46e0      	mov	r8, ip
 8007d9a:	e7aa      	b.n	8007cf2 <__ieee754_sqrt+0xd6>
 8007d9c:	f7f8 fa96 	bl	80002cc <__adddf3>
 8007da0:	e9da 8900 	ldrd	r8, r9, [sl]
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	f7f8 feb6 	bl	8000b1c <__aeabi_dcmplt>
 8007db0:	b120      	cbz	r0, 8007dbc <__ieee754_sqrt+0x1a0>
 8007db2:	1ca0      	adds	r0, r4, #2
 8007db4:	bf08      	it	eq
 8007db6:	3501      	addeq	r5, #1
 8007db8:	3402      	adds	r4, #2
 8007dba:	e7ca      	b.n	8007d52 <__ieee754_sqrt+0x136>
 8007dbc:	3401      	adds	r4, #1
 8007dbe:	f024 0401 	bic.w	r4, r4, #1
 8007dc2:	e7c6      	b.n	8007d52 <__ieee754_sqrt+0x136>
 8007dc4:	7ff00000 	.word	0x7ff00000
 8007dc8:	20000200 	.word	0x20000200
 8007dcc:	20000208 	.word	0x20000208

08007dd0 <__ieee754_atan2>:
 8007dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	ec57 6b11 	vmov	r6, r7, d1
 8007dd8:	4273      	negs	r3, r6
 8007dda:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007f58 <__ieee754_atan2+0x188>
 8007dde:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007de2:	4333      	orrs	r3, r6
 8007de4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007de8:	4543      	cmp	r3, r8
 8007dea:	ec51 0b10 	vmov	r0, r1, d0
 8007dee:	ee11 5a10 	vmov	r5, s2
 8007df2:	d80a      	bhi.n	8007e0a <__ieee754_atan2+0x3a>
 8007df4:	4244      	negs	r4, r0
 8007df6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007dfa:	4304      	orrs	r4, r0
 8007dfc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007e00:	4544      	cmp	r4, r8
 8007e02:	ee10 9a10 	vmov	r9, s0
 8007e06:	468e      	mov	lr, r1
 8007e08:	d907      	bls.n	8007e1a <__ieee754_atan2+0x4a>
 8007e0a:	4632      	mov	r2, r6
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	f7f8 fa5d 	bl	80002cc <__adddf3>
 8007e12:	ec41 0b10 	vmov	d0, r0, r1
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007e1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e22:	4334      	orrs	r4, r6
 8007e24:	d103      	bne.n	8007e2e <__ieee754_atan2+0x5e>
 8007e26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2a:	f000 b899 	b.w	8007f60 <atan>
 8007e2e:	17bc      	asrs	r4, r7, #30
 8007e30:	f004 0402 	and.w	r4, r4, #2
 8007e34:	ea53 0909 	orrs.w	r9, r3, r9
 8007e38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007e3c:	d107      	bne.n	8007e4e <__ieee754_atan2+0x7e>
 8007e3e:	2c02      	cmp	r4, #2
 8007e40:	d05f      	beq.n	8007f02 <__ieee754_atan2+0x132>
 8007e42:	2c03      	cmp	r4, #3
 8007e44:	d1e5      	bne.n	8007e12 <__ieee754_atan2+0x42>
 8007e46:	a140      	add	r1, pc, #256	; (adr r1, 8007f48 <__ieee754_atan2+0x178>)
 8007e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4c:	e7e1      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007e4e:	4315      	orrs	r5, r2
 8007e50:	d106      	bne.n	8007e60 <__ieee754_atan2+0x90>
 8007e52:	f1be 0f00 	cmp.w	lr, #0
 8007e56:	da5f      	bge.n	8007f18 <__ieee754_atan2+0x148>
 8007e58:	a13d      	add	r1, pc, #244	; (adr r1, 8007f50 <__ieee754_atan2+0x180>)
 8007e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e5e:	e7d8      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007e60:	4542      	cmp	r2, r8
 8007e62:	d10f      	bne.n	8007e84 <__ieee754_atan2+0xb4>
 8007e64:	4293      	cmp	r3, r2
 8007e66:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e6a:	d107      	bne.n	8007e7c <__ieee754_atan2+0xac>
 8007e6c:	2c02      	cmp	r4, #2
 8007e6e:	d84c      	bhi.n	8007f0a <__ieee754_atan2+0x13a>
 8007e70:	4b33      	ldr	r3, [pc, #204]	; (8007f40 <__ieee754_atan2+0x170>)
 8007e72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e7a:	e7ca      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007e7c:	2c02      	cmp	r4, #2
 8007e7e:	d848      	bhi.n	8007f12 <__ieee754_atan2+0x142>
 8007e80:	4b30      	ldr	r3, [pc, #192]	; (8007f44 <__ieee754_atan2+0x174>)
 8007e82:	e7f6      	b.n	8007e72 <__ieee754_atan2+0xa2>
 8007e84:	4543      	cmp	r3, r8
 8007e86:	d0e4      	beq.n	8007e52 <__ieee754_atan2+0x82>
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007e8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e92:	da1e      	bge.n	8007ed2 <__ieee754_atan2+0x102>
 8007e94:	2f00      	cmp	r7, #0
 8007e96:	da01      	bge.n	8007e9c <__ieee754_atan2+0xcc>
 8007e98:	323c      	adds	r2, #60	; 0x3c
 8007e9a:	db1e      	blt.n	8007eda <__ieee754_atan2+0x10a>
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	f7f8 fcf4 	bl	800088c <__aeabi_ddiv>
 8007ea4:	ec41 0b10 	vmov	d0, r0, r1
 8007ea8:	f000 f9fa 	bl	80082a0 <fabs>
 8007eac:	f000 f858 	bl	8007f60 <atan>
 8007eb0:	ec51 0b10 	vmov	r0, r1, d0
 8007eb4:	2c01      	cmp	r4, #1
 8007eb6:	d013      	beq.n	8007ee0 <__ieee754_atan2+0x110>
 8007eb8:	2c02      	cmp	r4, #2
 8007eba:	d015      	beq.n	8007ee8 <__ieee754_atan2+0x118>
 8007ebc:	2c00      	cmp	r4, #0
 8007ebe:	d0a8      	beq.n	8007e12 <__ieee754_atan2+0x42>
 8007ec0:	a317      	add	r3, pc, #92	; (adr r3, 8007f20 <__ieee754_atan2+0x150>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 f9ff 	bl	80002c8 <__aeabi_dsub>
 8007eca:	a317      	add	r3, pc, #92	; (adr r3, 8007f28 <__ieee754_atan2+0x158>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	e014      	b.n	8007efc <__ieee754_atan2+0x12c>
 8007ed2:	a117      	add	r1, pc, #92	; (adr r1, 8007f30 <__ieee754_atan2+0x160>)
 8007ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ed8:	e7ec      	b.n	8007eb4 <__ieee754_atan2+0xe4>
 8007eda:	2000      	movs	r0, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	e7e9      	b.n	8007eb4 <__ieee754_atan2+0xe4>
 8007ee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	e794      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007ee8:	a30d      	add	r3, pc, #52	; (adr r3, 8007f20 <__ieee754_atan2+0x150>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 f9eb 	bl	80002c8 <__aeabi_dsub>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	a10c      	add	r1, pc, #48	; (adr r1, 8007f28 <__ieee754_atan2+0x158>)
 8007ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007efc:	f7f8 f9e4 	bl	80002c8 <__aeabi_dsub>
 8007f00:	e787      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f02:	a109      	add	r1, pc, #36	; (adr r1, 8007f28 <__ieee754_atan2+0x158>)
 8007f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f08:	e783      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f0a:	a10b      	add	r1, pc, #44	; (adr r1, 8007f38 <__ieee754_atan2+0x168>)
 8007f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f10:	e77f      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f12:	2000      	movs	r0, #0
 8007f14:	2100      	movs	r1, #0
 8007f16:	e77c      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f18:	a105      	add	r1, pc, #20	; (adr r1, 8007f30 <__ieee754_atan2+0x160>)
 8007f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f1e:	e778      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f20:	33145c07 	.word	0x33145c07
 8007f24:	3ca1a626 	.word	0x3ca1a626
 8007f28:	54442d18 	.word	0x54442d18
 8007f2c:	400921fb 	.word	0x400921fb
 8007f30:	54442d18 	.word	0x54442d18
 8007f34:	3ff921fb 	.word	0x3ff921fb
 8007f38:	54442d18 	.word	0x54442d18
 8007f3c:	3fe921fb 	.word	0x3fe921fb
 8007f40:	08008658 	.word	0x08008658
 8007f44:	08008670 	.word	0x08008670
 8007f48:	54442d18 	.word	0x54442d18
 8007f4c:	c00921fb 	.word	0xc00921fb
 8007f50:	54442d18 	.word	0x54442d18
 8007f54:	bff921fb 	.word	0xbff921fb
 8007f58:	7ff00000 	.word	0x7ff00000
 8007f5c:	00000000 	.word	0x00000000

08007f60 <atan>:
 8007f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	ec55 4b10 	vmov	r4, r5, d0
 8007f68:	4bc3      	ldr	r3, [pc, #780]	; (8008278 <atan+0x318>)
 8007f6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f6e:	429e      	cmp	r6, r3
 8007f70:	46ab      	mov	fp, r5
 8007f72:	dd18      	ble.n	8007fa6 <atan+0x46>
 8007f74:	4bc1      	ldr	r3, [pc, #772]	; (800827c <atan+0x31c>)
 8007f76:	429e      	cmp	r6, r3
 8007f78:	dc01      	bgt.n	8007f7e <atan+0x1e>
 8007f7a:	d109      	bne.n	8007f90 <atan+0x30>
 8007f7c:	b144      	cbz	r4, 8007f90 <atan+0x30>
 8007f7e:	4622      	mov	r2, r4
 8007f80:	462b      	mov	r3, r5
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	f7f8 f9a1 	bl	80002cc <__adddf3>
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	e006      	b.n	8007f9e <atan+0x3e>
 8007f90:	f1bb 0f00 	cmp.w	fp, #0
 8007f94:	f300 8131 	bgt.w	80081fa <atan+0x29a>
 8007f98:	a59b      	add	r5, pc, #620	; (adr r5, 8008208 <atan+0x2a8>)
 8007f9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f9e:	ec45 4b10 	vmov	d0, r4, r5
 8007fa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa6:	4bb6      	ldr	r3, [pc, #728]	; (8008280 <atan+0x320>)
 8007fa8:	429e      	cmp	r6, r3
 8007faa:	dc14      	bgt.n	8007fd6 <atan+0x76>
 8007fac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007fb0:	429e      	cmp	r6, r3
 8007fb2:	dc0d      	bgt.n	8007fd0 <atan+0x70>
 8007fb4:	a396      	add	r3, pc, #600	; (adr r3, 8008210 <atan+0x2b0>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	ee10 0a10 	vmov	r0, s0
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f7f8 f984 	bl	80002cc <__adddf3>
 8007fc4:	4baf      	ldr	r3, [pc, #700]	; (8008284 <atan+0x324>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f7f8 fdc6 	bl	8000b58 <__aeabi_dcmpgt>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d1e6      	bne.n	8007f9e <atan+0x3e>
 8007fd0:	f04f 3aff 	mov.w	sl, #4294967295
 8007fd4:	e02b      	b.n	800802e <atan+0xce>
 8007fd6:	f000 f963 	bl	80082a0 <fabs>
 8007fda:	4bab      	ldr	r3, [pc, #684]	; (8008288 <atan+0x328>)
 8007fdc:	429e      	cmp	r6, r3
 8007fde:	ec55 4b10 	vmov	r4, r5, d0
 8007fe2:	f300 80bf 	bgt.w	8008164 <atan+0x204>
 8007fe6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007fea:	429e      	cmp	r6, r3
 8007fec:	f300 80a0 	bgt.w	8008130 <atan+0x1d0>
 8007ff0:	ee10 2a10 	vmov	r2, s0
 8007ff4:	ee10 0a10 	vmov	r0, s0
 8007ff8:	462b      	mov	r3, r5
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f7f8 f966 	bl	80002cc <__adddf3>
 8008000:	4ba0      	ldr	r3, [pc, #640]	; (8008284 <atan+0x324>)
 8008002:	2200      	movs	r2, #0
 8008004:	f7f8 f960 	bl	80002c8 <__aeabi_dsub>
 8008008:	2200      	movs	r2, #0
 800800a:	4606      	mov	r6, r0
 800800c:	460f      	mov	r7, r1
 800800e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008012:	4620      	mov	r0, r4
 8008014:	4629      	mov	r1, r5
 8008016:	f7f8 f959 	bl	80002cc <__adddf3>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4630      	mov	r0, r6
 8008020:	4639      	mov	r1, r7
 8008022:	f7f8 fc33 	bl	800088c <__aeabi_ddiv>
 8008026:	f04f 0a00 	mov.w	sl, #0
 800802a:	4604      	mov	r4, r0
 800802c:	460d      	mov	r5, r1
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 faff 	bl	8000638 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4680      	mov	r8, r0
 8008040:	4689      	mov	r9, r1
 8008042:	f7f8 faf9 	bl	8000638 <__aeabi_dmul>
 8008046:	a374      	add	r3, pc, #464	; (adr r3, 8008218 <atan+0x2b8>)
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	4606      	mov	r6, r0
 800804e:	460f      	mov	r7, r1
 8008050:	f7f8 faf2 	bl	8000638 <__aeabi_dmul>
 8008054:	a372      	add	r3, pc, #456	; (adr r3, 8008220 <atan+0x2c0>)
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	f7f8 f937 	bl	80002cc <__adddf3>
 800805e:	4632      	mov	r2, r6
 8008060:	463b      	mov	r3, r7
 8008062:	f7f8 fae9 	bl	8000638 <__aeabi_dmul>
 8008066:	a370      	add	r3, pc, #448	; (adr r3, 8008228 <atan+0x2c8>)
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f7f8 f92e 	bl	80002cc <__adddf3>
 8008070:	4632      	mov	r2, r6
 8008072:	463b      	mov	r3, r7
 8008074:	f7f8 fae0 	bl	8000638 <__aeabi_dmul>
 8008078:	a36d      	add	r3, pc, #436	; (adr r3, 8008230 <atan+0x2d0>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 f925 	bl	80002cc <__adddf3>
 8008082:	4632      	mov	r2, r6
 8008084:	463b      	mov	r3, r7
 8008086:	f7f8 fad7 	bl	8000638 <__aeabi_dmul>
 800808a:	a36b      	add	r3, pc, #428	; (adr r3, 8008238 <atan+0x2d8>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 f91c 	bl	80002cc <__adddf3>
 8008094:	4632      	mov	r2, r6
 8008096:	463b      	mov	r3, r7
 8008098:	f7f8 face 	bl	8000638 <__aeabi_dmul>
 800809c:	a368      	add	r3, pc, #416	; (adr r3, 8008240 <atan+0x2e0>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f7f8 f913 	bl	80002cc <__adddf3>
 80080a6:	4642      	mov	r2, r8
 80080a8:	464b      	mov	r3, r9
 80080aa:	f7f8 fac5 	bl	8000638 <__aeabi_dmul>
 80080ae:	a366      	add	r3, pc, #408	; (adr r3, 8008248 <atan+0x2e8>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	4680      	mov	r8, r0
 80080b6:	4689      	mov	r9, r1
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 fabc 	bl	8000638 <__aeabi_dmul>
 80080c0:	a363      	add	r3, pc, #396	; (adr r3, 8008250 <atan+0x2f0>)
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 f8ff 	bl	80002c8 <__aeabi_dsub>
 80080ca:	4632      	mov	r2, r6
 80080cc:	463b      	mov	r3, r7
 80080ce:	f7f8 fab3 	bl	8000638 <__aeabi_dmul>
 80080d2:	a361      	add	r3, pc, #388	; (adr r3, 8008258 <atan+0x2f8>)
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f7f8 f8f6 	bl	80002c8 <__aeabi_dsub>
 80080dc:	4632      	mov	r2, r6
 80080de:	463b      	mov	r3, r7
 80080e0:	f7f8 faaa 	bl	8000638 <__aeabi_dmul>
 80080e4:	a35e      	add	r3, pc, #376	; (adr r3, 8008260 <atan+0x300>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 f8ed 	bl	80002c8 <__aeabi_dsub>
 80080ee:	4632      	mov	r2, r6
 80080f0:	463b      	mov	r3, r7
 80080f2:	f7f8 faa1 	bl	8000638 <__aeabi_dmul>
 80080f6:	a35c      	add	r3, pc, #368	; (adr r3, 8008268 <atan+0x308>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f7f8 f8e4 	bl	80002c8 <__aeabi_dsub>
 8008100:	4632      	mov	r2, r6
 8008102:	463b      	mov	r3, r7
 8008104:	f7f8 fa98 	bl	8000638 <__aeabi_dmul>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4640      	mov	r0, r8
 800810e:	4649      	mov	r1, r9
 8008110:	f7f8 f8dc 	bl	80002cc <__adddf3>
 8008114:	4622      	mov	r2, r4
 8008116:	462b      	mov	r3, r5
 8008118:	f7f8 fa8e 	bl	8000638 <__aeabi_dmul>
 800811c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	d14b      	bne.n	80081be <atan+0x25e>
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 f8cd 	bl	80002c8 <__aeabi_dsub>
 800812e:	e72c      	b.n	8007f8a <atan+0x2a>
 8008130:	ee10 0a10 	vmov	r0, s0
 8008134:	4b53      	ldr	r3, [pc, #332]	; (8008284 <atan+0x324>)
 8008136:	2200      	movs	r2, #0
 8008138:	4629      	mov	r1, r5
 800813a:	f7f8 f8c5 	bl	80002c8 <__aeabi_dsub>
 800813e:	4b51      	ldr	r3, [pc, #324]	; (8008284 <atan+0x324>)
 8008140:	4606      	mov	r6, r0
 8008142:	460f      	mov	r7, r1
 8008144:	2200      	movs	r2, #0
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 f8bf 	bl	80002cc <__adddf3>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4630      	mov	r0, r6
 8008154:	4639      	mov	r1, r7
 8008156:	f7f8 fb99 	bl	800088c <__aeabi_ddiv>
 800815a:	f04f 0a01 	mov.w	sl, #1
 800815e:	4604      	mov	r4, r0
 8008160:	460d      	mov	r5, r1
 8008162:	e764      	b.n	800802e <atan+0xce>
 8008164:	4b49      	ldr	r3, [pc, #292]	; (800828c <atan+0x32c>)
 8008166:	429e      	cmp	r6, r3
 8008168:	da1d      	bge.n	80081a6 <atan+0x246>
 800816a:	ee10 0a10 	vmov	r0, s0
 800816e:	4b48      	ldr	r3, [pc, #288]	; (8008290 <atan+0x330>)
 8008170:	2200      	movs	r2, #0
 8008172:	4629      	mov	r1, r5
 8008174:	f7f8 f8a8 	bl	80002c8 <__aeabi_dsub>
 8008178:	4b45      	ldr	r3, [pc, #276]	; (8008290 <atan+0x330>)
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	2200      	movs	r2, #0
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7f8 fa58 	bl	8000638 <__aeabi_dmul>
 8008188:	4b3e      	ldr	r3, [pc, #248]	; (8008284 <atan+0x324>)
 800818a:	2200      	movs	r2, #0
 800818c:	f7f8 f89e 	bl	80002cc <__adddf3>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4630      	mov	r0, r6
 8008196:	4639      	mov	r1, r7
 8008198:	f7f8 fb78 	bl	800088c <__aeabi_ddiv>
 800819c:	f04f 0a02 	mov.w	sl, #2
 80081a0:	4604      	mov	r4, r0
 80081a2:	460d      	mov	r5, r1
 80081a4:	e743      	b.n	800802e <atan+0xce>
 80081a6:	462b      	mov	r3, r5
 80081a8:	ee10 2a10 	vmov	r2, s0
 80081ac:	4939      	ldr	r1, [pc, #228]	; (8008294 <atan+0x334>)
 80081ae:	2000      	movs	r0, #0
 80081b0:	f7f8 fb6c 	bl	800088c <__aeabi_ddiv>
 80081b4:	f04f 0a03 	mov.w	sl, #3
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
 80081bc:	e737      	b.n	800802e <atan+0xce>
 80081be:	4b36      	ldr	r3, [pc, #216]	; (8008298 <atan+0x338>)
 80081c0:	4e36      	ldr	r6, [pc, #216]	; (800829c <atan+0x33c>)
 80081c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f7f8 f87d 	bl	80002c8 <__aeabi_dsub>
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	f7f8 f879 	bl	80002c8 <__aeabi_dsub>
 80081d6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80081e2:	f7f8 f871 	bl	80002c8 <__aeabi_dsub>
 80081e6:	f1bb 0f00 	cmp.w	fp, #0
 80081ea:	4604      	mov	r4, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	f6bf aed6 	bge.w	8007f9e <atan+0x3e>
 80081f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081f6:	461d      	mov	r5, r3
 80081f8:	e6d1      	b.n	8007f9e <atan+0x3e>
 80081fa:	a51d      	add	r5, pc, #116	; (adr r5, 8008270 <atan+0x310>)
 80081fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008200:	e6cd      	b.n	8007f9e <atan+0x3e>
 8008202:	bf00      	nop
 8008204:	f3af 8000 	nop.w
 8008208:	54442d18 	.word	0x54442d18
 800820c:	bff921fb 	.word	0xbff921fb
 8008210:	8800759c 	.word	0x8800759c
 8008214:	7e37e43c 	.word	0x7e37e43c
 8008218:	e322da11 	.word	0xe322da11
 800821c:	3f90ad3a 	.word	0x3f90ad3a
 8008220:	24760deb 	.word	0x24760deb
 8008224:	3fa97b4b 	.word	0x3fa97b4b
 8008228:	a0d03d51 	.word	0xa0d03d51
 800822c:	3fb10d66 	.word	0x3fb10d66
 8008230:	c54c206e 	.word	0xc54c206e
 8008234:	3fb745cd 	.word	0x3fb745cd
 8008238:	920083ff 	.word	0x920083ff
 800823c:	3fc24924 	.word	0x3fc24924
 8008240:	5555550d 	.word	0x5555550d
 8008244:	3fd55555 	.word	0x3fd55555
 8008248:	2c6a6c2f 	.word	0x2c6a6c2f
 800824c:	bfa2b444 	.word	0xbfa2b444
 8008250:	52defd9a 	.word	0x52defd9a
 8008254:	3fadde2d 	.word	0x3fadde2d
 8008258:	af749a6d 	.word	0xaf749a6d
 800825c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008260:	fe231671 	.word	0xfe231671
 8008264:	3fbc71c6 	.word	0x3fbc71c6
 8008268:	9998ebc4 	.word	0x9998ebc4
 800826c:	3fc99999 	.word	0x3fc99999
 8008270:	54442d18 	.word	0x54442d18
 8008274:	3ff921fb 	.word	0x3ff921fb
 8008278:	440fffff 	.word	0x440fffff
 800827c:	7ff00000 	.word	0x7ff00000
 8008280:	3fdbffff 	.word	0x3fdbffff
 8008284:	3ff00000 	.word	0x3ff00000
 8008288:	3ff2ffff 	.word	0x3ff2ffff
 800828c:	40038000 	.word	0x40038000
 8008290:	3ff80000 	.word	0x3ff80000
 8008294:	bff00000 	.word	0xbff00000
 8008298:	080086a8 	.word	0x080086a8
 800829c:	08008688 	.word	0x08008688

080082a0 <fabs>:
 80082a0:	ec51 0b10 	vmov	r0, r1, d0
 80082a4:	ee10 2a10 	vmov	r2, s0
 80082a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082ac:	ec43 2b10 	vmov	d0, r2, r3
 80082b0:	4770      	bx	lr
	...

080082b4 <_init>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr

080082c0 <_fini>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	bf00      	nop
 80082c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c6:	bc08      	pop	{r3}
 80082c8:	469e      	mov	lr, r3
 80082ca:	4770      	bx	lr
