
Cueing-Laser-IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000875c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08008930  08008930  00018930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d38  08008d38  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008d40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001e8  08008f28  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08008f28  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a5e  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002440  00000000  00000000  00035cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00038100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b34  00000000  00000000  00038f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003da8  00000000  00000000  00039abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118e2  00000000  00000000  0003d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8c7b  00000000  00000000  0004f146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e04  00000000  00000000  00147dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008914 	.word	0x08008914

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08008914 	.word	0x08008914

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <CS_SELECT>:
 * @brief Activates the chip select pin.
 *
 * This function Activates the chip select pin (GPIOA4) by setting it to GPIO_PIN_RESET.
 */
inline static void CS_SELECT()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f001 f8eb 	bl	8002164 <HAL_Delay>
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2110      	movs	r1, #16
 8000f92:	4802      	ldr	r0, [pc, #8]	; (8000f9c <CS_SELECT+0x18>)
 8000f94:	f002 fb42 	bl	800361c <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <CS_UNSELECT>:
 * @brief Deactivates the chip select pin.
 *
 * This function deactivates the chip select pin (GPIOA4) by setting it to GPIO_PIN_SET.
 */
inline static void CS_UNSELECT(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <CS_UNSELECT+0x14>)
 8000faa:	f002 fb37 	bl	800361c <HAL_GPIO_WritePin>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <SPI_WriteByte>:
 * then writes the data from the provided pointer.
 *
 * @note The SPI handle must be initialized and configured before calling this function.
 */
void SPI_WriteByte(SPI_HandleTypeDef *SPIx, uint8_t Register, uint8_t* pData, uint8_t Data_length)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	72fb      	strb	r3, [r7, #11]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	72bb      	strb	r3, [r7, #10]
    CS_SELECT();
 8000fcc:	f7ff ffda 	bl	8000f84 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 8000fd0:	f107 010b 	add.w	r1, r7, #11
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f003 f974 	bl	80042c6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pData, Data_length, SPI_TIMEOUT);
 8000fde:	7abb      	ldrb	r3, [r7, #10]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	2364      	movs	r3, #100	; 0x64
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f003 f96d 	bl	80042c6 <HAL_SPI_Transmit>
    CS_UNSELECT();
 8000fec:	f7ff ffd8 	bl	8000fa0 <CS_UNSELECT>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <USER_BANK_SELECTION>:
 * 
 * @param user_bank The user bank to select.
 * @param SPIx The SPI handle.
 */
void USER_BANK_SELECTION(SPI_HandleTypeDef *SPIx, uint8_t USER_BANK_SELECT)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
    uint8_t user_bank_options = 0; 
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
    user_bank_options = (USER_BANK_SELECT << USER_BANK); // select the user bank 
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	b2db      	uxtb	r3, r3
 800100e:	73fb      	strb	r3, [r7, #15]
    CS_SELECT();
 8001010:	f7ff ffb8 	bl	8000f84 <CS_SELECT>
    SPI_WriteByte(SPIx, ICM20948_REG_BANK_SEL, &user_bank_options, 1);
 8001014:	f107 020f 	add.w	r2, r7, #15
 8001018:	2301      	movs	r3, #1
 800101a:	217f      	movs	r1, #127	; 0x7f
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ffcb 	bl	8000fb8 <SPI_WriteByte>
    CS_UNSELECT();
 8001022:	f7ff ffbd 	bl	8000fa0 <CS_UNSELECT>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <SPI_WriteRegisters>:
 * @param Register The register to write to.
 * @param Data The data to write.
 * @param Data_length The length of the data to write.
 */
void SPI_WriteRegisters(usrbank_sel user_bank, SPI_HandleTypeDef *SPIx, uint8_t Register, uint8_t* Data, uint8_t Data_length)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4603      	mov	r3, r0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	4613      	mov	r3, r2
 800103e:	73bb      	strb	r3, [r7, #14]
    USER_BANK_SELECTION(SPIx, user_bank);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4619      	mov	r1, r3
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f7ff ffd7 	bl	8000ff8 <USER_BANK_SELECTION>
    CS_SELECT();
 800104a:	f7ff ff9b 	bl	8000f84 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 800104e:	f107 010e 	add.w	r1, r7, #14
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	2201      	movs	r2, #1
 8001056:	68b8      	ldr	r0, [r7, #8]
 8001058:	f003 f935 	bl	80042c6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, Data, Data_length, SPI_TIMEOUT);
 800105c:	7e3b      	ldrb	r3, [r7, #24]
 800105e:	b29a      	uxth	r2, r3
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f003 f92e 	bl	80042c6 <HAL_SPI_Transmit>
    CS_UNSELECT();
 800106a:	f7ff ff99 	bl	8000fa0 <CS_UNSELECT>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <SPI_ReadRegisters>:
 * @param Register The register to read from.
 * @param pData The data to read into.
 * @param Data_length The length of the data to read.
 */
void SPI_ReadRegisters(usrbank_sel user_bank, SPI_HandleTypeDef *SPIx, uint8_t reg, uint8_t* pData, uint8_t Data_length) 
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	4613      	mov	r3, r2
 8001086:	73bb      	strb	r3, [r7, #14]
    reg |= 0x80;
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73bb      	strb	r3, [r7, #14]
    USER_BANK_SELECTION(SPIx, user_bank);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4619      	mov	r1, r3
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff ffae 	bl	8000ff8 <USER_BANK_SELECTION>
    CS_SELECT();
 800109c:	f7ff ff72 	bl	8000f84 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &reg, 1, SPI_TIMEOUT);
 80010a0:	f107 010e 	add.w	r1, r7, #14
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	2201      	movs	r2, #1
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f003 f90c 	bl	80042c6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pData, Data_length, SPI_TIMEOUT);
 80010ae:	7e3b      	ldrb	r3, [r7, #24]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f003 fa48 	bl	800454c <HAL_SPI_Receive>
    CS_UNSELECT();
 80010bc:	f7ff ff70 	bl	8000fa0 <CS_UNSELECT>
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <WHO_AM_I_CHECK>:
 *
 * @param[in] SPIx The SPI handle to use for communication.
 * @param[out] who_am_i The pointer to the byte of data to be read.
 */
void WHO_AM_I_CHECK(SPI_HandleTypeDef *SPIx, uint8_t* who_am_i)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_WHO_AM_I, who_am_i, 1);
 80010d2:	2301      	movs	r3, #1
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff ffca 	bl	8001076 <SPI_ReadRegisters>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	0000      	movs	r0, r0
 80010ec:	0000      	movs	r0, r0
	...

080010f0 <ICM20948_Read>:
 *
 * @param[in] SPIx The SPI handle to use for communication.
 * @param[out] data A pointer to a struct containing the accelerometer and gyroscope data.
 */
void ICM20948_Read(SPI_HandleTypeDef* SPIx, gyro_accel_data_t* data)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
    // Read accelerometer data
    uint8_t accel_data[6];
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_ACCEL_XOUT_H, accel_data, 6);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	2206      	movs	r2, #6
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	222d      	movs	r2, #45	; 0x2d
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff ffb5 	bl	8001076 <SPI_ReadRegisters>
    data->RAW_Ax = (int16_t)(accel_data[0]<<8|accel_data[1]);
 800110c:	7c3b      	ldrb	r3, [r7, #16]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	7c7b      	ldrb	r3, [r7, #17]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21a      	sxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	80da      	strh	r2, [r3, #6]
    data->RAW_Ay = (int16_t)(accel_data[2]<<8|accel_data[3]);
 800111e:	7cbb      	ldrb	r3, [r7, #18]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	7cfb      	ldrb	r3, [r7, #19]
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21a      	sxth	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	811a      	strh	r2, [r3, #8]
    data->RAW_Az = (int16_t)(accel_data[4]<<8|accel_data[5]);
 8001130:	7d3b      	ldrb	r3, [r7, #20]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	815a      	strh	r2, [r3, #10]

    // Convert accelerometer raw data to true accelerometer data
    data->Ax = (double)data->RAW_Ax / 8;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa0b 	bl	8000564 <__aeabi_i2d>
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b99      	ldr	r3, [pc, #612]	; (80013b8 <ICM20948_Read+0x2c8>)
 8001154:	f7ff fb9a 	bl	800088c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd42 	bl	8000be8 <__aeabi_d2f>
 8001164:	4602      	mov	r2, r0
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
    data->Ay = (double)data->RAW_Ay / 8;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9f7 	bl	8000564 <__aeabi_i2d>
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b8f      	ldr	r3, [pc, #572]	; (80013b8 <ICM20948_Read+0x2c8>)
 800117c:	f7ff fb86 	bl	800088c <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd2e 	bl	8000be8 <__aeabi_d2f>
 800118c:	4602      	mov	r2, r0
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
    data->Az = (double)data->RAW_Az / 8;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9e3 	bl	8000564 <__aeabi_i2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <ICM20948_Read+0x2c8>)
 80011a4:	f7ff fb72 	bl	800088c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd1a 	bl	8000be8 <__aeabi_d2f>
 80011b4:	4602      	mov	r2, r0
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c

    // Read gyroscope data
    uint8_t gyro_data[6];
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_GYRO_XOUT_H, gyro_data, 6);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	2206      	movs	r2, #6
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	2233      	movs	r2, #51	; 0x33
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff ff55 	bl	8001076 <SPI_ReadRegisters>
    data->RAW_Gx = (int16_t)(gyro_data[0]<<8|gyro_data[1]);
 80011cc:	7a3b      	ldrb	r3, [r7, #8]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7a7b      	ldrb	r3, [r7, #9]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21a      	sxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	801a      	strh	r2, [r3, #0]
    data->RAW_Gy = (int16_t)(gyro_data[2]<<8|gyro_data[3]);
 80011de:	7abb      	ldrb	r3, [r7, #10]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	805a      	strh	r2, [r3, #2]
    data->RAW_Gz = (int16_t)(gyro_data[4]<<8|gyro_data[5]);
 80011f0:	7b3b      	ldrb	r3, [r7, #12]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7b7b      	ldrb	r3, [r7, #13]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	809a      	strh	r2, [r3, #4]

    // Convert gyroscope raw data to true gyroscope data
    data->Gx = (double)data->RAW_Gx / 500;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9ab 	bl	8000564 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <ICM20948_Read+0x2cc>)
 8001214:	f7ff fb3a 	bl	800088c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fce2 	bl	8000be8 <__aeabi_d2f>
 8001224:	4602      	mov	r2, r0
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	619a      	str	r2, [r3, #24]
    data->Gy = (double)data->RAW_Gy / 500;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f997 	bl	8000564 <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b60      	ldr	r3, [pc, #384]	; (80013bc <ICM20948_Read+0x2cc>)
 800123c:	f7ff fb26 	bl	800088c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcce 	bl	8000be8 <__aeabi_d2f>
 800124c:	4602      	mov	r2, r0
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	61da      	str	r2, [r3, #28]
    data->Gz = (double)data->RAW_Gz / 500;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f983 	bl	8000564 <__aeabi_i2d>
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <ICM20948_Read+0x2cc>)
 8001264:	f7ff fb12 	bl	800088c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fcba 	bl	8000be8 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	621a      	str	r2, [r3, #32]

    // compute Roll Pitch angle
    data->Roll = atan2(data->Ay, sqrt((data->Ax*data->Ax) + (data->Az*data->Az))) * 180 / M_PI;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f982 	bl	8000588 <__aeabi_f2d>
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	ee17 0a90 	vmov	r0, s15
 80012b0:	f7ff f96a 	bl	8000588 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	ec43 2b10 	vmov	d0, r2, r3
 80012bc:	f006 ffb2 	bl	8008224 <sqrt>
 80012c0:	eeb0 7a40 	vmov.f32	s14, s0
 80012c4:	eef0 7a60 	vmov.f32	s15, s1
 80012c8:	eeb0 1a47 	vmov.f32	s2, s14
 80012cc:	eef0 1a67 	vmov.f32	s3, s15
 80012d0:	ec45 4b10 	vmov	d0, r4, r5
 80012d4:	f006 ffa4 	bl	8008220 <atan2>
 80012d8:	ec51 0b10 	vmov	r0, r1, d0
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <ICM20948_Read+0x2d0>)
 80012e2:	f7ff f9a9 	bl	8000638 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	a330      	add	r3, pc, #192	; (adr r3, 80013b0 <ICM20948_Read+0x2c0>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff faca 	bl	800088c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc72 	bl	8000be8 <__aeabi_d2f>
 8001304:	4602      	mov	r2, r0
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
    data->Pitch = atan2(-data->Ax, sqrt((data->Ay*data->Ay) + (data->Az*data->Az))) * 180 / M_PI;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001310:	eef1 7a67 	vneg.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f935 	bl	8000588 <__aeabi_f2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800133e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	ee17 0a90 	vmov	r0, s15
 800134a:	f7ff f91d 	bl	8000588 <__aeabi_f2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	ec43 2b10 	vmov	d0, r2, r3
 8001356:	f006 ff65 	bl	8008224 <sqrt>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	eef0 7a60 	vmov.f32	s15, s1
 8001362:	eeb0 1a47 	vmov.f32	s2, s14
 8001366:	eef0 1a67 	vmov.f32	s3, s15
 800136a:	ec45 4b10 	vmov	d0, r4, r5
 800136e:	f006 ff57 	bl	8008220 <atan2>
 8001372:	ec51 0b10 	vmov	r0, r1, d0
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <ICM20948_Read+0x2d0>)
 800137c:	f7ff f95c 	bl	8000638 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	a309      	add	r3, pc, #36	; (adr r3, 80013b0 <ICM20948_Read+0x2c0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff fa7d 	bl	800088c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fc25 	bl	8000be8 <__aeabi_d2f>
 800139e:	4602      	mov	r2, r0
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bdb0      	pop	{r4, r5, r7, pc}
 80013ac:	f3af 8000 	nop.w
 80013b0:	54442d18 	.word	0x54442d18
 80013b4:	400921fb 	.word	0x400921fb
 80013b8:	40200000 	.word	0x40200000
 80013bc:	407f4000 	.word	0x407f4000
 80013c0:	40668000 	.word	0x40668000

080013c4 <ICM20948_Init>:
 * @brief Initial setting for the accelerometer and gyroscope data of the ICM20948 sensor.
 *
 * @param[in] SPIx The SPI handle to use for communication.
 */
void ICM20948_Init(SPI_HandleTypeDef *SPIx)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
    uint8_t temp_data = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
    uint8_t who_am_i = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
    WHO_AM_I_CHECK(SPIx, &who_am_i);
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fe74 	bl	80010c8 <WHO_AM_I_CHECK>
    if(who_am_i == ICM20948_AVAILABLE)
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2bea      	cmp	r3, #234	; 0xea
 80013e4:	d17c      	bne.n	80014e0 <ICM20948_Init+0x11c>
    {
        // Disable I2C slave module
        temp_data = (I2C_DISABLE<< I2C_IF_DIS);
 80013e6:	2310      	movs	r3, #16
 80013e8:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_USER_CTRL, &temp_data, sizeof(temp_data));
 80013ea:	f107 030f 	add.w	r3, r7, #15
 80013ee:	2201      	movs	r2, #1
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	2203      	movs	r2, #3
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fe19 	bl	800102e <SPI_WriteRegisters>

        // Reset the IMU, in this configuration temp will equal to 0xC1u 
        temp_data = 0; 
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
        temp_data |= (BEST_CLK_SRC << CLKSEL)|( SLEEP_EN << SLEEP)|(DEVICE_RST << DEVICE_RESET);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8001406:	b2db      	uxtb	r3, r3
 8001408:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_PWR_MGMT_1, &temp_data, sizeof(temp_data));
 800140a:	f107 030f 	add.w	r3, r7, #15
 800140e:	2201      	movs	r2, #1
 8001410:	9200      	str	r2, [sp, #0]
 8001412:	2206      	movs	r2, #6
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff fe09 	bl	800102e <SPI_WriteRegisters>

        // Exit sleep mode
        temp_data = 0; 
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (BEST_CLK_SRC << CLKSEL);
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_PWR_MGMT_1, &temp_data, sizeof(temp_data));
 800142a:	f107 030f 	add.w	r3, r7, #15
 800142e:	2201      	movs	r2, #1
 8001430:	9200      	str	r2, [sp, #0]
 8001432:	2206      	movs	r2, #6
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fdf9 	bl	800102e <SPI_WriteRegisters>

        // Bias cancellation

        // GYRO_BIAS_CANCELLATION(SPIx);
        // Choose sample rate divider at 100, temp = 0x64u
        temp_data = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (GYRO_SMPLRT_DIV_100 << GYRO_SMPLRT_DIV);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f043 0364 	orr.w	r3, r3, #100	; 0x64
 8001446:	b2db      	uxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, GYRO_SMPLRT_DIV, &temp_data, sizeof(temp_data));
 800144a:	f107 030f 	add.w	r3, r7, #15
 800144e:	2201      	movs	r2, #1
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	2002      	movs	r0, #2
 8001458:	f7ff fde9 	bl	800102e <SPI_WriteRegisters>

        // Enable low-pass filter  
        // Choose full scale rate at 500 dps with 3 decibels band-with is 51.2Hz and Noise band-with is 73.3Hz
        temp_data = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (DLPF_ENABLED << GYRO_FCHOICE)|(GYRO_FS_500DPS << GYRO_FS_SEL)|(GYRO_11_6Hz_17_8Hz << GYRO_DLPFCFG);
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001466:	b2db      	uxtb	r3, r3
 8001468:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_GYRO_CONFIG_1, &temp_data, sizeof(temp_data));
 800146a:	f107 030f 	add.w	r3, r7, #15
 800146e:	2201      	movs	r2, #1
 8001470:	9200      	str	r2, [sp, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	2002      	movs	r0, #2
 8001478:	f7ff fdd9 	bl	800102e <SPI_WriteRegisters>

        // Enable output data rate alignment 
        temp_data = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (ODR_ALGIN_ON << ODR_ALIGN_EN);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ODR_ALIGN_EN, &temp_data, sizeof(temp_data));
 800148a:	f107 030f 	add.w	r3, r7, #15
 800148e:	2201      	movs	r2, #1
 8001490:	9200      	str	r2, [sp, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff fdc9 	bl	800102e <SPI_WriteRegisters>

        // Select sample rate divider for Accelerometer 
        temp_data = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (ACCEL_SMPLRT_DIV_1000<<ACCEL_SMPLRT_DIV_2);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	f063 0317 	orn	r3, r3, #23
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_ACCEL_SMPLRT_DIV_2, &temp_data, sizeof(temp_data));
 80014ae:	f107 030f 	add.w	r3, r7, #15
 80014b2:	2201      	movs	r2, #1
 80014b4:	9200      	str	r2, [sp, #0]
 80014b6:	2211      	movs	r2, #17
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff fdb7 	bl	800102e <SPI_WriteRegisters>

        // Select accelerometer at 8g 
        // Enable low-pass filter 
        temp_data = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
        temp_data |= (DLPF_ENABLED << ACCEL_FCHOICE)|(ACCEL_FS_8G << ACCEL_FS_SEL)|(ACCEL_111_4Hz_136Hz << ACCEL_DLPFCFG);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f043 0315 	orr.w	r3, r3, #21
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_ACCEL_CONFIG_1, &temp_data, sizeof(temp_data));
 80014ce:	f107 030f 	add.w	r3, r7, #15
 80014d2:	2201      	movs	r2, #1
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	2214      	movs	r2, #20
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	2002      	movs	r0, #2
 80014dc:	f7ff fda7 	bl	800102e <SPI_WriteRegisters>

    }
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f000 fdc8 	bl	8002080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f82c 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f000 fa6e 	bl	80019d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f8:	f000 fa4c 	bl	8001994 <MX_DMA_Init>
  MX_SPI1_Init();
 80014fc:	f000 f8e6 	bl	80016cc <MX_SPI1_Init>
  MX_TIM3_Init();
 8001500:	f000 f91a 	bl	8001738 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001504:	f000 f9ae 	bl	8001864 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001508:	f000 f880 	bl	800160c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  
   ICM20948_Init(&hspi1);
 800150c:	480a      	ldr	r0, [pc, #40]	; (8001538 <main+0x50>)
 800150e:	f7ff ff59 	bl	80013c4 <ICM20948_Init>

//  NRF24_Init(&hspi1, 76, RF_PWR_MIN);
//  NRF24_Tx_Mode(&hspi1, &Tx_Address);
//  Servo3_setAngle(180);

  HAL_ADC_Start_DMA(&hadc1,analog,2);
 8001512:	2202      	movs	r2, #2
 8001514:	4909      	ldr	r1, [pc, #36]	; (800153c <main+0x54>)
 8001516:	480a      	ldr	r0, [pc, #40]	; (8001540 <main+0x58>)
 8001518:	f000 fe8c 	bl	8002234 <HAL_ADC_Start_DMA>
//  T1 = HAL_GetTick();
//  dt =(float)(T1 - T0)/1000.0f;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ICM20948_Read(&hspi1, &data);
 800151c:	4909      	ldr	r1, [pc, #36]	; (8001544 <main+0x5c>)
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <main+0x50>)
 8001520:	f7ff fde6 	bl	80010f0 <ICM20948_Read>
   // Capture Roll and Pitch angle
    MotionCapture[0] = data.Roll;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <main+0x5c>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <main+0x60>)
 800152a:	6013      	str	r3, [r2, #0]
    MotionCapture[1] = data.Pitch;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <main+0x5c>)
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	4a05      	ldr	r2, [pc, #20]	; (8001548 <main+0x60>)
 8001532:	6053      	str	r3, [r2, #4]
    ICM20948_Read(&hspi1, &data);
 8001534:	e7f2      	b.n	800151c <main+0x34>
 8001536:	bf00      	nop
 8001538:	200002ac 	.word	0x200002ac
 800153c:	20000394 	.word	0x20000394
 8001540:	20000204 	.word	0x20000204
 8001544:	2000039c 	.word	0x2000039c
 8001548:	200003d8 	.word	0x200003d8

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	2234      	movs	r2, #52	; 0x34
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f004 ff0f 	bl	800637e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <SystemClock_Config+0xb8>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <SystemClock_Config+0xb8>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <SystemClock_Config+0xb8>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <SystemClock_Config+0xbc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <SystemClock_Config+0xbc>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <SystemClock_Config+0xbc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fb5a 	bl	8003c78 <HAL_RCC_OscConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ca:	f000 fa99 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
 80015d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015d2:	2301      	movs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 f82f 	bl	8003650 <HAL_RCC_ClockConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015f8:	f000 fa82 	bl	8001b00 <Error_Handler>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3750      	adds	r7, #80	; 0x50
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000

0800160c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <MX_ADC1_Init+0xb4>)
 8001620:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <MX_ADC1_Init+0xb8>)
 8001622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_ADC1_Init+0xb4>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <MX_ADC1_Init+0xb4>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001630:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <MX_ADC1_Init+0xb4>)
 8001632:	2201      	movs	r2, #1
 8001634:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_ADC1_Init+0xb4>)
 8001638:	2201      	movs	r2, #1
 800163a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <MX_ADC1_Init+0xb4>)
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <MX_ADC1_Init+0xb4>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_ADC1_Init+0xb4>)
 800164c:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <MX_ADC1_Init+0xbc>)
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_ADC1_Init+0xb4>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_ADC1_Init+0xb4>)
 8001658:	2202      	movs	r2, #2
 800165a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_ADC1_Init+0xb4>)
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_ADC1_Init+0xb4>)
 8001666:	2201      	movs	r2, #1
 8001668:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800166a:	4815      	ldr	r0, [pc, #84]	; (80016c0 <MX_ADC1_Init+0xb4>)
 800166c:	f000 fd9e 	bl	80021ac <HAL_ADC_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 fa43 	bl	8001b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800167a:	230c      	movs	r3, #12
 800167c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_ADC1_Init+0xb4>)
 800168c:	f000 ff00 	bl	8002490 <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001696:	f000 fa33 	bl	8001b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800169a:	230d      	movs	r3, #13
 800169c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800169e:	2302      	movs	r3, #2
 80016a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a2:	463b      	mov	r3, r7
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_ADC1_Init+0xb4>)
 80016a8:	f000 fef2 	bl	8002490 <HAL_ADC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80016b2:	f000 fa25 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000204 	.word	0x20000204
 80016c4:	40012000 	.word	0x40012000
 80016c8:	0f000001 	.word	0x0f000001

080016cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_SPI1_Init+0x64>)
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <MX_SPI1_Init+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI1_Init+0x64>)
 80016d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI1_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI1_Init+0x64>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI1_Init+0x64>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI1_Init+0x64>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI1_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_SPI1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI1_Init+0x64>)
 8001718:	220a      	movs	r2, #10
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_SPI1_Init+0x64>)
 800171e:	f002 fd49 	bl	80041b4 <HAL_SPI_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001728:	f000 f9ea 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200002ac 	.word	0x200002ac
 8001734:	40013000 	.word	0x40013000

08001738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001768:	4b3c      	ldr	r3, [pc, #240]	; (800185c <MX_TIM3_Init+0x124>)
 800176a:	4a3d      	ldr	r2, [pc, #244]	; (8001860 <MX_TIM3_Init+0x128>)
 800176c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <MX_TIM3_Init+0x124>)
 8001770:	2259      	movs	r2, #89	; 0x59
 8001772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <MX_TIM3_Init+0x124>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <MX_TIM3_Init+0x124>)
 800177c:	2263      	movs	r2, #99	; 0x63
 800177e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <MX_TIM3_Init+0x124>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <MX_TIM3_Init+0x124>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800178c:	4833      	ldr	r0, [pc, #204]	; (800185c <MX_TIM3_Init+0x124>)
 800178e:	f003 fae7 	bl	8004d60 <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001798:	f000 f9b2 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a6:	4619      	mov	r1, r3
 80017a8:	482c      	ldr	r0, [pc, #176]	; (800185c <MX_TIM3_Init+0x124>)
 80017aa:	f003 fc43 	bl	8005034 <HAL_TIM_ConfigClockSource>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80017b4:	f000 f9a4 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017b8:	4828      	ldr	r0, [pc, #160]	; (800185c <MX_TIM3_Init+0x124>)
 80017ba:	f003 fb20 	bl	8004dfe <HAL_TIM_PWM_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80017c4:	f000 f99c 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4619      	mov	r1, r3
 80017d6:	4821      	ldr	r0, [pc, #132]	; (800185c <MX_TIM3_Init+0x124>)
 80017d8:	f003 ffea 	bl	80057b0 <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80017e2:	f000 f98d 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e6:	2360      	movs	r3, #96	; 0x60
 80017e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <MX_TIM3_Init+0x124>)
 80017fe:	f003 fb57 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001808:	f000 f97a 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2204      	movs	r2, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <MX_TIM3_Init+0x124>)
 8001814:	f003 fb4c 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800181e:	f000 f96f 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2208      	movs	r2, #8
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <MX_TIM3_Init+0x124>)
 800182a:	f003 fb41 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001834:	f000 f964 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	220c      	movs	r2, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4807      	ldr	r0, [pc, #28]	; (800185c <MX_TIM3_Init+0x124>)
 8001840:	f003 fb36 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 800184a:	f000 f959 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800184e:	4803      	ldr	r0, [pc, #12]	; (800185c <MX_TIM3_Init+0x124>)
 8001850:	f000 fa7c 	bl	8001d4c <HAL_TIM_MspPostInit>

}
 8001854:	bf00      	nop
 8001856:	3738      	adds	r7, #56	; 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000304 	.word	0x20000304
 8001860:	40000400 	.word	0x40000400

08001864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001894:	4b3d      	ldr	r3, [pc, #244]	; (800198c <MX_TIM4_Init+0x128>)
 8001896:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <MX_TIM4_Init+0x12c>)
 8001898:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 800189a:	4b3c      	ldr	r3, [pc, #240]	; (800198c <MX_TIM4_Init+0x128>)
 800189c:	f240 321f 	movw	r2, #799	; 0x31f
 80018a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <MX_TIM4_Init+0x128>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <MX_TIM4_Init+0x128>)
 80018aa:	22c7      	movs	r2, #199	; 0xc7
 80018ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <MX_TIM4_Init+0x128>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b35      	ldr	r3, [pc, #212]	; (800198c <MX_TIM4_Init+0x128>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018ba:	4834      	ldr	r0, [pc, #208]	; (800198c <MX_TIM4_Init+0x128>)
 80018bc:	f003 fa50 	bl	8004d60 <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80018c6:	f000 f91b 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d4:	4619      	mov	r1, r3
 80018d6:	482d      	ldr	r0, [pc, #180]	; (800198c <MX_TIM4_Init+0x128>)
 80018d8:	f003 fbac 	bl	8005034 <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80018e2:	f000 f90d 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018e6:	4829      	ldr	r0, [pc, #164]	; (800198c <MX_TIM4_Init+0x128>)
 80018e8:	f003 fa89 	bl	8004dfe <HAL_TIM_PWM_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80018f2:	f000 f905 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	4619      	mov	r1, r3
 8001904:	4821      	ldr	r0, [pc, #132]	; (800198c <MX_TIM4_Init+0x128>)
 8001906:	f003 ff53 	bl	80057b0 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001910:	f000 f8f6 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001914:	2360      	movs	r3, #96	; 0x60
 8001916:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	4818      	ldr	r0, [pc, #96]	; (800198c <MX_TIM4_Init+0x128>)
 800192c:	f003 fac0 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001936:	f000 f8e3 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2204      	movs	r2, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4812      	ldr	r0, [pc, #72]	; (800198c <MX_TIM4_Init+0x128>)
 8001942:	f003 fab5 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800194c:	f000 f8d8 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2208      	movs	r2, #8
 8001954:	4619      	mov	r1, r3
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_TIM4_Init+0x128>)
 8001958:	f003 faaa 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001962:	f000 f8cd 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	220c      	movs	r2, #12
 800196a:	4619      	mov	r1, r3
 800196c:	4807      	ldr	r0, [pc, #28]	; (800198c <MX_TIM4_Init+0x128>)
 800196e:	f003 fa9f 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001978:	f000 f8c2 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <MX_TIM4_Init+0x128>)
 800197e:	f000 f9e5 	bl	8001d4c <HAL_TIM_MspPostInit>

}
 8001982:	bf00      	nop
 8001984:	3738      	adds	r7, #56	; 0x38
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000034c 	.word	0x2000034c
 8001990:	40000800 	.word	0x40000800

08001994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_DMA_Init+0x3c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <MX_DMA_Init+0x3c>)
 80019a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_DMA_Init+0x3c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2038      	movs	r0, #56	; 0x38
 80019bc:	f001 f8f3 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019c0:	2038      	movs	r0, #56	; 0x38
 80019c2:	f001 f90c 	bl	8002bde <HAL_NVIC_EnableIRQ>

}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <MX_GPIO_Init+0x11c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a3f      	ldr	r2, [pc, #252]	; (8001af0 <MX_GPIO_Init+0x11c>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <MX_GPIO_Init+0x11c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a38      	ldr	r2, [pc, #224]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a31      	ldr	r2, [pc, #196]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a2a      	ldr	r2, [pc, #168]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <MX_GPIO_Init+0x11c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|IMU_CS_M_Pin|IMU_CS_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	211c      	movs	r1, #28
 8001a5e:	4825      	ldr	r0, [pc, #148]	; (8001af4 <MX_GPIO_Init+0x120>)
 8001a60:	f001 fddc 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2120      	movs	r1, #32
 8001a68:	4823      	ldr	r0, [pc, #140]	; (8001af8 <MX_GPIO_Init+0x124>)
 8001a6a:	f001 fdd7 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2101      	movs	r1, #1
 8001a72:	4822      	ldr	r0, [pc, #136]	; (8001afc <MX_GPIO_Init+0x128>)
 8001a74:	f001 fdd2 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 IMU_CS_M_Pin IMU_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|IMU_CS_M_Pin|IMU_CS_Pin;
 8001a78:	231c      	movs	r3, #28
 8001a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4819      	ldr	r0, [pc, #100]	; (8001af4 <MX_GPIO_Init+0x120>)
 8001a90:	f001 fc30 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_INT_Pin */
  GPIO_InitStruct.Pin = NRF24_INT_Pin;
 8001a94:	2310      	movs	r3, #16
 8001a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_INT_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <MX_GPIO_Init+0x124>)
 8001aaa:	f001 fc23 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CS_Pin */
  GPIO_InitStruct.Pin = NRF24_CS_Pin;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CS_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_GPIO_Init+0x124>)
 8001ac6:	f001 fc15 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001aca:	2301      	movs	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4806      	ldr	r0, [pc, #24]	; (8001afc <MX_GPIO_Init+0x128>)
 8001ae2:	f001 fc07 	bl	80032f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020400 	.word	0x40020400

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b4a:	2007      	movs	r0, #7
 8001b4c:	f001 f820 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <HAL_ADC_MspInit+0xdc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d157      	bne.n	8001c2e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_ADC_MspInit+0xe0>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <HAL_ADC_MspInit+0xe0>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_ADC_MspInit+0xe0>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_ADC_MspInit+0xe0>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <HAL_ADC_MspInit+0xe0>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_ADC_MspInit+0xe0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481d      	ldr	r0, [pc, #116]	; (8001c40 <HAL_ADC_MspInit+0xe4>)
 8001bca:	f001 fb93 	bl	80032f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_ADC_MspInit+0xec>)
 8001bd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001bf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001c14:	f000 fffe 	bl	8002c14 <HAL_DMA_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c1e:	f7ff ff6f 	bl	8001b00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_ADC_MspInit+0xe8>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40012000 	.word	0x40012000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020800 	.word	0x40020800
 8001c44:	2000024c 	.word	0x2000024c
 8001c48:	40026410 	.word	0x40026410

08001c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_SPI_MspInit+0x84>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d12b      	bne.n	8001cc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ca6:	23e0      	movs	r3, #224	; 0xe0
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_SPI_MspInit+0x8c>)
 8001cc2:	f001 fb17 	bl	80032f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40013000 	.word	0x40013000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020000 	.word	0x40020000

08001cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <HAL_TIM_Base_MspInit+0x64>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_TIM_Base_MspInit+0x68>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_TIM_Base_MspInit+0x68>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_TIM_Base_MspInit+0x68>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d0a:	e012      	b.n	8001d32 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_TIM_Base_MspInit+0x6c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10d      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_TIM_Base_MspInit+0x68>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_TIM_Base_MspInit+0x68>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_TIM_Base_MspInit+0x68>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40000800 	.word	0x40000800

08001d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <HAL_TIM_MspPostInit+0xb4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d11f      	bne.n	8001dae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_TIM_MspPostInit+0xb8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_TIM_MspPostInit+0xb8>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_TIM_MspPostInit+0xb8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d8a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	4818      	ldr	r0, [pc, #96]	; (8001e08 <HAL_TIM_MspPostInit+0xbc>)
 8001da8:	f001 faa4 	bl	80032f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dac:	e023      	b.n	8001df6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <HAL_TIM_MspPostInit+0xc0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d11e      	bne.n	8001df6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_TIM_MspPostInit+0xb8>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_TIM_MspPostInit+0xb8>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_TIM_MspPostInit+0xb8>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001dd4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001de6:	2302      	movs	r3, #2
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4807      	ldr	r0, [pc, #28]	; (8001e10 <HAL_TIM_MspPostInit+0xc4>)
 8001df2:	f001 fa7f 	bl	80032f4 <HAL_GPIO_Init>
}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40000800 	.word	0x40000800
 8001e10:	40020400 	.word	0x40020400

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e18:	e7fe      	b.n	8001e18 <NMI_Handler+0x4>

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e60:	f000 f960 	bl	8002124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <DMA2_Stream0_IRQHandler+0x10>)
 8001e6e:	f000 ffd7 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000024c 	.word	0x2000024c

08001e7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return 1;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_kill>:

int _kill(int pid, int sig)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e96:	f004 fac5 	bl	8006424 <__errno>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2216      	movs	r2, #22
 8001e9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_exit>:

void _exit (int status)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ffe7 	bl	8001e8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ebe:	e7fe      	b.n	8001ebe <_exit+0x12>

08001ec0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e00a      	b.n	8001ee8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed2:	f3af 8000 	nop.w
 8001ed6:	4601      	mov	r1, r0
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	b2ca      	uxtb	r2, r1
 8001ee0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbf0      	blt.n	8001ed2 <_read+0x12>
  }

  return len;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e009      	b.n	8001f20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60ba      	str	r2, [r7, #8]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dbf1      	blt.n	8001f0c <_write+0x12>
  }
  return len;
 8001f28:	687b      	ldr	r3, [r7, #4]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_close>:

int _close(int file)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_isatty>:

int _isatty(int file)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <_sbrk+0x5c>)
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <_sbrk+0x60>)
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <_sbrk+0x64>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <_sbrk+0x68>)
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d207      	bcs.n	8001fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fcc:	f004 fa2a 	bl	8006424 <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	e009      	b.n	8001ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <_sbrk+0x64>)
 8001fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20020000 	.word	0x20020000
 8001ffc:	00000400 	.word	0x00000400
 8002000:	200003e4 	.word	0x200003e4
 8002004:	20000538 	.word	0x20000538

08002008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <SystemInit+0x20>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <SystemInit+0x20>)
 8002014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800202c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002064 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002030:	f7ff ffea 	bl	8002008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002036:	490d      	ldr	r1, [pc, #52]	; (800206c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800204c:	4c0a      	ldr	r4, [pc, #40]	; (8002078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800205a:	f004 f9e9 	bl	8006430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205e:	f7ff fa43 	bl	80014e8 <main>
  bx  lr    
 8002062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800206c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002070:	08008d40 	.word	0x08008d40
  ldr r2, =_sbss
 8002074:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002078:	20000538 	.word	0x20000538

0800207c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800207c:	e7fe      	b.n	800207c <ADC_IRQHandler>
	...

08002080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <HAL_Init+0x40>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <HAL_Init+0x40>)
 8002096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <HAL_Init+0x40>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 fd71 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f808 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fd2a 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x54>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020da:	fbb3 f3f1 	udiv	r3, r3, r1
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fd89 	bl	8002bfa <HAL_SYSTICK_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00e      	b.n	8002110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d80a      	bhi.n	800210e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f000 fd51 	bl	8002ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <HAL_InitTick+0x5c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000000 	.word	0x20000000
 800211c:	20000008 	.word	0x20000008
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x20>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_IncTick+0x24>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_IncTick+0x24>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000008 	.word	0x20000008
 8002148:	200003e8 	.word	0x200003e8

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_GetTick+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200003e8 	.word	0x200003e8

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d005      	beq.n	800218a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_Delay+0x44>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800218a:	bf00      	nop
 800218c:	f7ff ffde 	bl	800214c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d8f7      	bhi.n	800218c <HAL_Delay+0x28>
  {
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008

080021ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e033      	b.n	800222a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fcc6 	bl	8001b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	f043 0202 	orr.w	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa78 	bl	80026f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
 800221a:	e001      	b.n	8002220 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Start_DMA+0x1e>
 800224e:	2302      	movs	r3, #2
 8002250:	e0e9      	b.n	8002426 <HAL_ADC_Start_DMA+0x1f2>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d018      	beq.n	800229a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002278:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_ADC_Start_DMA+0x1fc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6d      	ldr	r2, [pc, #436]	; (8002434 <HAL_ADC_Start_DMA+0x200>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9a      	lsrs	r2, r3, #18
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800228c:	e002      	b.n	8002294 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	3b01      	subs	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f9      	bne.n	800228e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a8:	d107      	bne.n	80022ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	f040 80a1 	bne.w	800240c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002308:	d106      	bne.n	8002318 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f023 0206 	bic.w	r2, r3, #6
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
 8002316:	e002      	b.n	800231e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002326:	4b44      	ldr	r3, [pc, #272]	; (8002438 <HAL_ADC_Start_DMA+0x204>)
 8002328:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4a43      	ldr	r2, [pc, #268]	; (800243c <HAL_ADC_Start_DMA+0x208>)
 8002330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	4a42      	ldr	r2, [pc, #264]	; (8002440 <HAL_ADC_Start_DMA+0x20c>)
 8002338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	4a41      	ldr	r2, [pc, #260]	; (8002444 <HAL_ADC_Start_DMA+0x210>)
 8002340:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800234a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800235a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800236a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	334c      	adds	r3, #76	; 0x4c
 8002376:	4619      	mov	r1, r3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f000 fcf8 	bl	8002d70 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	2b00      	cmp	r3, #0
 800238a:	d12a      	bne.n	80023e2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <HAL_ADC_Start_DMA+0x214>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d015      	beq.n	80023c2 <HAL_ADC_Start_DMA+0x18e>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a2c      	ldr	r2, [pc, #176]	; (800244c <HAL_ADC_Start_DMA+0x218>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d105      	bne.n	80023ac <HAL_ADC_Start_DMA+0x178>
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_ADC_Start_DMA+0x204>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <HAL_ADC_Start_DMA+0x21c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d136      	bne.n	8002424 <HAL_ADC_Start_DMA+0x1f0>
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_ADC_Start_DMA+0x204>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d130      	bne.n	8002424 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d129      	bne.n	8002424 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e020      	b.n	8002424 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a18      	ldr	r2, [pc, #96]	; (8002448 <HAL_ADC_Start_DMA+0x214>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d11b      	bne.n	8002424 <HAL_ADC_Start_DMA+0x1f0>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	e00b      	b.n	8002424 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000
 8002434:	431bde83 	.word	0x431bde83
 8002438:	40012300 	.word	0x40012300
 800243c:	080028ed 	.word	0x080028ed
 8002440:	080029a7 	.word	0x080029a7
 8002444:	080029c3 	.word	0x080029c3
 8002448:	40012000 	.word	0x40012000
 800244c:	40012100 	.word	0x40012100
 8002450:	40012200 	.word	0x40012200

08002454 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1c>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e113      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x244>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	d925      	bls.n	8002508 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68d9      	ldr	r1, [r3, #12]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3b1e      	subs	r3, #30
 80024d2:	2207      	movs	r2, #7
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43da      	mvns	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	400a      	ands	r2, r1
 80024e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68d9      	ldr	r1, [r3, #12]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	4603      	mov	r3, r0
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4403      	add	r3, r0
 80024fa:	3b1e      	subs	r3, #30
 80024fc:	409a      	lsls	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	e022      	b.n	800254e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6919      	ldr	r1, [r3, #16]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	2207      	movs	r2, #7
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	400a      	ands	r2, r1
 800252a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6919      	ldr	r1, [r3, #16]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	4618      	mov	r0, r3
 800253e:	4603      	mov	r3, r0
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4403      	add	r3, r0
 8002544:	409a      	lsls	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b06      	cmp	r3, #6
 8002554:	d824      	bhi.n	80025a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	3b05      	subs	r3, #5
 8002568:	221f      	movs	r2, #31
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	400a      	ands	r2, r1
 8002576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3b05      	subs	r3, #5
 8002592:	fa00 f203 	lsl.w	r2, r0, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	635a      	str	r2, [r3, #52]	; 0x34
 800259e:	e04c      	b.n	800263a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	d824      	bhi.n	80025f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b23      	subs	r3, #35	; 0x23
 80025ba:	221f      	movs	r2, #31
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43da      	mvns	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	400a      	ands	r2, r1
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	3b23      	subs	r3, #35	; 0x23
 80025e4:	fa00 f203 	lsl.w	r2, r0, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
 80025f0:	e023      	b.n	800263a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	3b41      	subs	r3, #65	; 0x41
 8002604:	221f      	movs	r2, #31
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	400a      	ands	r2, r1
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b41      	subs	r3, #65	; 0x41
 800262e:	fa00 f203 	lsl.w	r2, r0, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_ADC_ConfigChannel+0x250>)
 800263c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <HAL_ADC_ConfigChannel+0x254>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d10f      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1d8>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b12      	cmp	r3, #18
 800264e:	d10b      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_ADC_ConfigChannel+0x254>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d12b      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x23a>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_ADC_ConfigChannel+0x258>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x1f4>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b11      	cmp	r3, #17
 8002682:	d122      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_ADC_ConfigChannel+0x258>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d111      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_ADC_ConfigChannel+0x25c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_ADC_ConfigChannel+0x260>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	0c9a      	lsrs	r2, r3, #18
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026bc:	e002      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f9      	bne.n	80026be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40012300 	.word	0x40012300
 80026e4:	40012000 	.word	0x40012000
 80026e8:	10000012 	.word	0x10000012
 80026ec:	20000000 	.word	0x20000000
 80026f0:	431bde83 	.word	0x431bde83

080026f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fc:	4b79      	ldr	r3, [pc, #484]	; (80028e4 <ADC_Init+0x1f0>)
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	021a      	lsls	r2, r3, #8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800274c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <ADC_Init+0x1f4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d022      	beq.n	80027d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800279a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	e00f      	b.n	80027f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0202 	bic.w	r2, r2, #2
 8002800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7e1b      	ldrb	r3, [r3, #24]
 800280c:	005a      	lsls	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800282e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800283e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	3b01      	subs	r3, #1
 800284c:	035a      	lsls	r2, r3, #13
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	e007      	b.n	8002868 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002866:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	3b01      	subs	r3, #1
 8002884:	051a      	lsls	r2, r3, #20
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800289c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028aa:	025a      	lsls	r2, r3, #9
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	029a      	lsls	r2, r3, #10
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40012300 	.word	0x40012300
 80028e8:	0f000001 	.word	0x0f000001

080028ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002902:	2b00      	cmp	r3, #0
 8002904:	d13c      	bne.n	8002980 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d12b      	bne.n	8002978 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002924:	2b00      	cmp	r3, #0
 8002926:	d127      	bne.n	8002978 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002940:	2b00      	cmp	r3, #0
 8002942:	d119      	bne.n	8002978 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0220 	bic.w	r2, r2, #32
 8002952:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff fd6b 	bl	8002454 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800297e:	e00e      	b.n	800299e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff fd75 	bl	800247c <HAL_ADC_ErrorCallback>
}
 8002992:	e004      	b.n	800299e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff fd57 	bl	8002468 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f043 0204 	orr.w	r2, r3, #4
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff fd4a 	bl	800247c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <__NVIC_EnableIRQ+0x38>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100

08002a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db0a      	blt.n	8002aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <__NVIC_SetPriority+0x4c>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab8:	e00a      	b.n	8002ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4908      	ldr	r1, [pc, #32]	; (8002ae0 <__NVIC_SetPriority+0x50>)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440b      	add	r3, r1
 8002ace:	761a      	strb	r2, [r3, #24]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf28      	it	cs
 8002b02:	2304      	movcs	r3, #4
 8002b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d902      	bls.n	8002b14 <NVIC_EncodePriority+0x30>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b03      	subs	r3, #3
 8002b12:	e000      	b.n	8002b16 <NVIC_EncodePriority+0x32>
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	4313      	orrs	r3, r2
         );
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <SysTick_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f7ff ff8e 	bl	8002a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <SysTick_Config+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SysTick_Config+0x40>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff29 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb8:	f7ff ff3e 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f7ff ff8e 	bl	8002ae4 <NVIC_EncodePriority>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff5d 	bl	8002a90 <__NVIC_SetPriority>
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff31 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ffa2 	bl	8002b4c <SysTick_Config>
 8002c08:	4603      	mov	r3, r0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff fa94 	bl	800214c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e099      	b.n	8002d64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c50:	e00f      	b.n	8002c72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c52:	f7ff fa7b 	bl	800214c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d908      	bls.n	8002c72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e078      	b.n	8002d64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e8      	bne.n	8002c52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <HAL_DMA_Init+0x158>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d107      	bne.n	8002cdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0307 	bic.w	r3, r3, #7
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d117      	bne.n	8002d36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fa6f 	bl	80031fc <DMA_CheckFifoParam>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2240      	movs	r2, #64	; 0x40
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d32:	2301      	movs	r3, #1
 8002d34:	e016      	b.n	8002d64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa26 	bl	8003190 <DMA_CalcBaseAndBitshift>
 8002d44:	4603      	mov	r3, r0
 8002d46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	223f      	movs	r2, #63	; 0x3f
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	f010803f 	.word	0xf010803f

08002d70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_DMA_Start_IT+0x26>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e040      	b.n	8002e18 <HAL_DMA_Start_IT+0xa8>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d12f      	bne.n	8002e0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f9b8 	bl	8003134 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	223f      	movs	r2, #63	; 0x3f
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0216 	orr.w	r2, r2, #22
 8002dde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0208 	orr.w	r2, r2, #8
 8002df6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e005      	b.n	8002e16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e2c:	4b8e      	ldr	r3, [pc, #568]	; (8003068 <HAL_DMA_IRQHandler+0x248>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a8e      	ldr	r2, [pc, #568]	; (800306c <HAL_DMA_IRQHandler+0x24c>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01a      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	2208      	movs	r2, #8
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	2210      	movs	r2, #16
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d043      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03c      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d018      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d024      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
 8002f4e:	e01f      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e016      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0208 	bic.w	r2, r2, #8
 8002f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2220      	movs	r2, #32
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 808f 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8087 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d136      	bne.n	8003038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0216 	bic.w	r2, r2, #22
 8002fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_DMA_IRQHandler+0x1da>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0208 	bic.w	r2, r2, #8
 8003008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	223f      	movs	r2, #63	; 0x3f
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	2b00      	cmp	r3, #0
 800302c:	d07e      	beq.n	800312c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
        }
        return;
 8003036:	e079      	b.n	800312c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01d      	beq.n	8003082 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	2b00      	cmp	r3, #0
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e02c      	b.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
 8003066:	bf00      	nop
 8003068:	20000000 	.word	0x20000000
 800306c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d023      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
 8003080:	e01e      	b.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10f      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0210 	bic.w	r2, r2, #16
 800309e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d032      	beq.n	800312e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d022      	beq.n	800311a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	3301      	adds	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d307      	bcc.n	8003108 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f2      	bne.n	80030ec <HAL_DMA_IRQHandler+0x2cc>
 8003106:	e000      	b.n	800310a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003108:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e000      	b.n	800312e <HAL_DMA_IRQHandler+0x30e>
        return;
 800312c:	bf00      	nop
    }
  }
}
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003150:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d108      	bne.n	8003174 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003172:	e007      	b.n	8003184 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	3b10      	subs	r3, #16
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <DMA_CalcBaseAndBitshift+0x64>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <DMA_CalcBaseAndBitshift+0x68>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d909      	bls.n	80031d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	1d1a      	adds	r2, r3, #4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	659a      	str	r2, [r3, #88]	; 0x58
 80031d0:	e007      	b.n	80031e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	aaaaaaab 	.word	0xaaaaaaab
 80031f8:	08008940 	.word	0x08008940

080031fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11f      	bne.n	8003256 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d856      	bhi.n	80032ca <DMA_CheckFifoParam+0xce>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <DMA_CheckFifoParam+0x28>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003235 	.word	0x08003235
 8003228:	08003247 	.word	0x08003247
 800322c:	08003235 	.word	0x08003235
 8003230:	080032cb 	.word	0x080032cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d046      	beq.n	80032ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003244:	e043      	b.n	80032ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800324e:	d140      	bne.n	80032d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e03d      	b.n	80032d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325e:	d121      	bne.n	80032a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d837      	bhi.n	80032d6 <DMA_CheckFifoParam+0xda>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <DMA_CheckFifoParam+0x70>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003283 	.word	0x08003283
 8003274:	0800327d 	.word	0x0800327d
 8003278:	08003295 	.word	0x08003295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
      break;
 8003280:	e030      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d025      	beq.n	80032da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003292:	e022      	b.n	80032da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800329c:	d11f      	bne.n	80032de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032a2:	e01c      	b.n	80032de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d903      	bls.n	80032b2 <DMA_CheckFifoParam+0xb6>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d003      	beq.n	80032b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032b0:	e018      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      break;
 80032b6:	e015      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e00b      	b.n	80032e2 <DMA_CheckFifoParam+0xe6>
      break;
 80032ca:	bf00      	nop
 80032cc:	e00a      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ce:	bf00      	nop
 80032d0:	e008      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e006      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e004      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
    }
  } 
  
  return status; 
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	e165      	b.n	80035dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003310:	2201      	movs	r2, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	429a      	cmp	r2, r3
 800332a:	f040 8154 	bne.w	80035d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d005      	beq.n	8003346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003342:	2b02      	cmp	r3, #2
 8003344:	d130      	bne.n	80033a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	2203      	movs	r2, #3
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800337c:	2201      	movs	r2, #1
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 0201 	and.w	r2, r3, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d017      	beq.n	80033e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d123      	bne.n	8003438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	08da      	lsrs	r2, r3, #3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3208      	adds	r2, #8
 80033f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	08da      	lsrs	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3208      	adds	r2, #8
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0203 	and.w	r2, r3, #3
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80ae 	beq.w	80035d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_GPIO_Init+0x300>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_GPIO_Init+0x300>)
 8003484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003488:	6453      	str	r3, [r2, #68]	; 0x44
 800348a:	4b5a      	ldr	r3, [pc, #360]	; (80035f4 <HAL_GPIO_Init+0x300>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003496:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_GPIO_Init+0x304>)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4f      	ldr	r2, [pc, #316]	; (80035fc <HAL_GPIO_Init+0x308>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d025      	beq.n	800350e <HAL_GPIO_Init+0x21a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <HAL_GPIO_Init+0x30c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01f      	beq.n	800350a <HAL_GPIO_Init+0x216>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_GPIO_Init+0x310>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d019      	beq.n	8003506 <HAL_GPIO_Init+0x212>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <HAL_GPIO_Init+0x314>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_GPIO_Init+0x20e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4b      	ldr	r2, [pc, #300]	; (800360c <HAL_GPIO_Init+0x318>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00d      	beq.n	80034fe <HAL_GPIO_Init+0x20a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4a      	ldr	r2, [pc, #296]	; (8003610 <HAL_GPIO_Init+0x31c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <HAL_GPIO_Init+0x206>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a49      	ldr	r2, [pc, #292]	; (8003614 <HAL_GPIO_Init+0x320>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_GPIO_Init+0x202>
 80034f2:	2306      	movs	r3, #6
 80034f4:	e00c      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e00a      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e008      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 800350e:	2300      	movs	r3, #0
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	f002 0203 	and.w	r2, r2, #3
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003520:	4935      	ldr	r1, [pc, #212]	; (80035f8 <HAL_GPIO_Init+0x304>)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352e:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_GPIO_Init+0x324>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003552:	4a31      	ldr	r2, [pc, #196]	; (8003618 <HAL_GPIO_Init+0x324>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003558:	4b2f      	ldr	r3, [pc, #188]	; (8003618 <HAL_GPIO_Init+0x324>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_GPIO_Init+0x324>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003582:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_GPIO_Init+0x324>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_GPIO_Init+0x324>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_GPIO_Init+0x324>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_GPIO_Init+0x324>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3301      	adds	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b0f      	cmp	r3, #15
 80035e0:	f67f ae96 	bls.w	8003310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40013800 	.word	0x40013800
 80035fc:	40020000 	.word	0x40020000
 8003600:	40020400 	.word	0x40020400
 8003604:	40020800 	.word	0x40020800
 8003608:	40020c00 	.word	0x40020c00
 800360c:	40021000 	.word	0x40021000
 8003610:	40021400 	.word	0x40021400
 8003614:	40021800 	.word	0x40021800
 8003618:	40013c00 	.word	0x40013c00

0800361c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
 8003628:	4613      	mov	r3, r2
 800362a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800362c:	787b      	ldrb	r3, [r7, #1]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003638:	e003      	b.n	8003642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	041a      	lsls	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	619a      	str	r2, [r3, #24]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0cc      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b68      	ldr	r3, [pc, #416]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d90c      	bls.n	800368c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b63      	ldr	r3, [pc, #396]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0b8      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a4:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a58      	ldr	r2, [pc, #352]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036bc:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a52      	ldr	r2, [pc, #328]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	494d      	ldr	r1, [pc, #308]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d044      	beq.n	8003770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d119      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e07f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d003      	beq.n	800370e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370a:	2b03      	cmp	r3, #3
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	4b3b      	ldr	r3, [pc, #236]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e067      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4934      	ldr	r1, [pc, #208]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003740:	f7fe fd04 	bl	800214c <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fe fd00 	bl	800214c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e04f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 020c 	and.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	429a      	cmp	r2, r3
 800376e:	d1eb      	bne.n	8003748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d20c      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b22      	ldr	r3, [pc, #136]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e032      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4916      	ldr	r1, [pc, #88]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490e      	ldr	r1, [pc, #56]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037d6:	f000 f821 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490a      	ldr	r1, [pc, #40]	; (8003810 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a09      	ldr	r2, [pc, #36]	; (8003814 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fc64 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023c00 	.word	0x40023c00
 800380c:	40023800 	.word	0x40023800
 8003810:	08008930 	.word	0x08008930
 8003814:	20000000 	.word	0x20000000
 8003818:	20000004 	.word	0x20000004

0800381c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003820:	b0ae      	sub	sp, #184	; 0xb8
 8003822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003842:	4bcb      	ldr	r3, [pc, #812]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b0c      	cmp	r3, #12
 800384c:	f200 8204 	bhi.w	8003c58 <HAL_RCC_GetSysClockFreq+0x43c>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800388d 	.word	0x0800388d
 800385c:	08003c59 	.word	0x08003c59
 8003860:	08003c59 	.word	0x08003c59
 8003864:	08003c59 	.word	0x08003c59
 8003868:	08003895 	.word	0x08003895
 800386c:	08003c59 	.word	0x08003c59
 8003870:	08003c59 	.word	0x08003c59
 8003874:	08003c59 	.word	0x08003c59
 8003878:	0800389d 	.word	0x0800389d
 800387c:	08003c59 	.word	0x08003c59
 8003880:	08003c59 	.word	0x08003c59
 8003884:	08003c59 	.word	0x08003c59
 8003888:	08003a8d 	.word	0x08003a8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4bb9      	ldr	r3, [pc, #740]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x358>)
 800388e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003892:	e1e5      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003894:	4bb7      	ldr	r3, [pc, #732]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x358>)
 8003896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800389a:	e1e1      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389c:	4bb4      	ldr	r3, [pc, #720]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a8:	4bb1      	ldr	r3, [pc, #708]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d071      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b4:	4bae      	ldr	r3, [pc, #696]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80038c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038da:	4622      	mov	r2, r4
 80038dc:	462b      	mov	r3, r5
 80038de:	f04f 0000 	mov.w	r0, #0
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	0159      	lsls	r1, r3, #5
 80038e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ec:	0150      	lsls	r0, r2, #5
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4621      	mov	r1, r4
 80038f4:	1a51      	subs	r1, r2, r1
 80038f6:	6439      	str	r1, [r7, #64]	; 0x40
 80038f8:	4629      	mov	r1, r5
 80038fa:	eb63 0301 	sbc.w	r3, r3, r1
 80038fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800390c:	4649      	mov	r1, r9
 800390e:	018b      	lsls	r3, r1, #6
 8003910:	4641      	mov	r1, r8
 8003912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003916:	4641      	mov	r1, r8
 8003918:	018a      	lsls	r2, r1, #6
 800391a:	4641      	mov	r1, r8
 800391c:	1a51      	subs	r1, r2, r1
 800391e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003920:	4649      	mov	r1, r9
 8003922:	eb63 0301 	sbc.w	r3, r3, r1
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003934:	4649      	mov	r1, r9
 8003936:	00cb      	lsls	r3, r1, #3
 8003938:	4641      	mov	r1, r8
 800393a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800393e:	4641      	mov	r1, r8
 8003940:	00ca      	lsls	r2, r1, #3
 8003942:	4610      	mov	r0, r2
 8003944:	4619      	mov	r1, r3
 8003946:	4603      	mov	r3, r0
 8003948:	4622      	mov	r2, r4
 800394a:	189b      	adds	r3, r3, r2
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
 800394e:	462b      	mov	r3, r5
 8003950:	460a      	mov	r2, r1
 8003952:	eb42 0303 	adc.w	r3, r2, r3
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003964:	4629      	mov	r1, r5
 8003966:	028b      	lsls	r3, r1, #10
 8003968:	4621      	mov	r1, r4
 800396a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800396e:	4621      	mov	r1, r4
 8003970:	028a      	lsls	r2, r1, #10
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003980:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003984:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003988:	f7fd f97e 	bl	8000c88 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4613      	mov	r3, r2
 8003992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003996:	e067      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003998:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80039a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80039b2:	2300      	movs	r3, #0
 80039b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80039ba:	4622      	mov	r2, r4
 80039bc:	462b      	mov	r3, r5
 80039be:	f04f 0000 	mov.w	r0, #0
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	0159      	lsls	r1, r3, #5
 80039c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039cc:	0150      	lsls	r0, r2, #5
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4621      	mov	r1, r4
 80039d4:	1a51      	subs	r1, r2, r1
 80039d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80039d8:	4629      	mov	r1, r5
 80039da:	eb63 0301 	sbc.w	r3, r3, r1
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80039ec:	4649      	mov	r1, r9
 80039ee:	018b      	lsls	r3, r1, #6
 80039f0:	4641      	mov	r1, r8
 80039f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039f6:	4641      	mov	r1, r8
 80039f8:	018a      	lsls	r2, r1, #6
 80039fa:	4641      	mov	r1, r8
 80039fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a00:	4649      	mov	r1, r9
 8003a02:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a1a:	4692      	mov	sl, r2
 8003a1c:	469b      	mov	fp, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	eb1a 0303 	adds.w	r3, sl, r3
 8003a24:	623b      	str	r3, [r7, #32]
 8003a26:	462b      	mov	r3, r5
 8003a28:	eb4b 0303 	adc.w	r3, fp, r3
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	028b      	lsls	r3, r1, #10
 8003a3e:	4621      	mov	r1, r4
 8003a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a44:	4621      	mov	r1, r4
 8003a46:	028a      	lsls	r2, r1, #10
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a50:	2200      	movs	r2, #0
 8003a52:	673b      	str	r3, [r7, #112]	; 0x70
 8003a54:	677a      	str	r2, [r7, #116]	; 0x74
 8003a56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a5a:	f7fd f915 	bl	8000c88 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4613      	mov	r3, r2
 8003a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a68:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	3301      	adds	r3, #1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a8a:	e0e9      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a98:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d069      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	2200      	movs	r2, #0
 8003aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab8:	2300      	movs	r3, #0
 8003aba:	667b      	str	r3, [r7, #100]	; 0x64
 8003abc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	0159      	lsls	r1, r3, #5
 8003ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad2:	0150      	lsls	r0, r2, #5
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4621      	mov	r1, r4
 8003ada:	1a51      	subs	r1, r2, r1
 8003adc:	61b9      	str	r1, [r7, #24]
 8003ade:	4629      	mov	r1, r5
 8003ae0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003af2:	4659      	mov	r1, fp
 8003af4:	018b      	lsls	r3, r1, #6
 8003af6:	4651      	mov	r1, sl
 8003af8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afc:	4651      	mov	r1, sl
 8003afe:	018a      	lsls	r2, r1, #6
 8003b00:	4651      	mov	r1, sl
 8003b02:	ebb2 0801 	subs.w	r8, r2, r1
 8003b06:	4659      	mov	r1, fp
 8003b08:	eb63 0901 	sbc.w	r9, r3, r1
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b20:	4690      	mov	r8, r2
 8003b22:	4699      	mov	r9, r3
 8003b24:	4623      	mov	r3, r4
 8003b26:	eb18 0303 	adds.w	r3, r8, r3
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	eb49 0303 	adc.w	r3, r9, r3
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b40:	4629      	mov	r1, r5
 8003b42:	028b      	lsls	r3, r1, #10
 8003b44:	4621      	mov	r1, r4
 8003b46:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	028a      	lsls	r2, r1, #10
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b56:	2200      	movs	r2, #0
 8003b58:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b60:	f7fd f892 	bl	8000c88 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b6e:	e063      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x41c>
 8003b70:	40023800 	.word	0x40023800
 8003b74:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b78:	4b3d      	ldr	r3, [pc, #244]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x454>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	099b      	lsrs	r3, r3, #6
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	4611      	mov	r1, r2
 8003b84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b88:	653b      	str	r3, [r7, #80]	; 0x50
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003b92:	4642      	mov	r2, r8
 8003b94:	464b      	mov	r3, r9
 8003b96:	f04f 0000 	mov.w	r0, #0
 8003b9a:	f04f 0100 	mov.w	r1, #0
 8003b9e:	0159      	lsls	r1, r3, #5
 8003ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba4:	0150      	lsls	r0, r2, #5
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4641      	mov	r1, r8
 8003bac:	1a51      	subs	r1, r2, r1
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	018b      	lsls	r3, r1, #6
 8003bc8:	4651      	mov	r1, sl
 8003bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bce:	4651      	mov	r1, sl
 8003bd0:	018a      	lsls	r2, r1, #6
 8003bd2:	4651      	mov	r1, sl
 8003bd4:	1a54      	subs	r4, r2, r1
 8003bd6:	4659      	mov	r1, fp
 8003bd8:	eb63 0501 	sbc.w	r5, r3, r1
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	00eb      	lsls	r3, r5, #3
 8003be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bea:	00e2      	lsls	r2, r4, #3
 8003bec:	4614      	mov	r4, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	4643      	mov	r3, r8
 8003bf2:	18e3      	adds	r3, r4, r3
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	eb45 0303 	adc.w	r3, r5, r3
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	028b      	lsls	r3, r1, #10
 8003c0e:	4621      	mov	r1, r4
 8003c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c14:	4621      	mov	r1, r4
 8003c16:	028a      	lsls	r2, r1, #10
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c20:	2200      	movs	r2, #0
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c24:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c2a:	f7fd f82d 	bl	8000c88 <__aeabi_uldivmod>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4613      	mov	r3, r2
 8003c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x454>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	0f1b      	lsrs	r3, r3, #28
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c56:	e003      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	37b8      	adds	r7, #184	; 0xb8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800
 8003c74:	00f42400 	.word	0x00f42400

08003c78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e28d      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8083 	beq.w	8003d9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c98:	4b94      	ldr	r3, [pc, #592]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d019      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ca4:	4b91      	ldr	r3, [pc, #580]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cb0:	4b8e      	ldr	r3, [pc, #568]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cbe:	4b8b      	ldr	r3, [pc, #556]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d112      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cca:	4b88      	ldr	r3, [pc, #544]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	4b84      	ldr	r3, [pc, #528]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d05b      	beq.n	8003d9c <HAL_RCC_OscConfig+0x124>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d157      	bne.n	8003d9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e25a      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCC_OscConfig+0x90>
 8003cfa:	4b7c      	ldr	r3, [pc, #496]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7b      	ldr	r2, [pc, #492]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e01d      	b.n	8003d44 <HAL_RCC_OscConfig+0xcc>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0xb4>
 8003d12:	4b76      	ldr	r3, [pc, #472]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a75      	ldr	r2, [pc, #468]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4b73      	ldr	r3, [pc, #460]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a72      	ldr	r2, [pc, #456]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCC_OscConfig+0xcc>
 8003d2c:	4b6f      	ldr	r3, [pc, #444]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6e      	ldr	r2, [pc, #440]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b6c      	ldr	r3, [pc, #432]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6b      	ldr	r2, [pc, #428]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe f9fe 	bl	800214c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fe f9fa 	bl	800214c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	; 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e21f      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b61      	ldr	r3, [pc, #388]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0xdc>
 8003d72:	e014      	b.n	8003d9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe f9ea 	bl	800214c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fe f9e6 	bl	800214c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e20b      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8e:	4b57      	ldr	r3, [pc, #348]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x104>
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d06f      	beq.n	8003e8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003daa:	4b50      	ldr	r3, [pc, #320]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d017      	beq.n	8003de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003db6:	4b4d      	ldr	r3, [pc, #308]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dc2:	4b4a      	ldr	r3, [pc, #296]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d11c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dda:	4b44      	ldr	r3, [pc, #272]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d116      	bne.n	8003e14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de6:	4b41      	ldr	r3, [pc, #260]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_RCC_OscConfig+0x186>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d001      	beq.n	8003dfe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e1d3      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4937      	ldr	r1, [pc, #220]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e12:	e03a      	b.n	8003e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e1c:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <HAL_RCC_OscConfig+0x278>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fe f993 	bl	800214c <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e2a:	f7fe f98f 	bl	800214c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e1b4      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e48:	4b28      	ldr	r3, [pc, #160]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4925      	ldr	r1, [pc, #148]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]
 8003e5c:	e015      	b.n	8003e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_RCC_OscConfig+0x278>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe f972 	bl	800214c <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e6c:	f7fe f96e 	bl	800214c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e193      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d036      	beq.n	8003f04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <HAL_RCC_OscConfig+0x27c>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fe f952 	bl	800214c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eac:	f7fe f94e 	bl	800214c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e173      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_OscConfig+0x274>)
 8003ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x234>
 8003eca:	e01b      	b.n	8003f04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fe f93b 	bl	800214c <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed8:	e00e      	b.n	8003ef8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eda:	f7fe f937 	bl	800214c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d907      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e15c      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	42470000 	.word	0x42470000
 8003ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef8:	4b8a      	ldr	r3, [pc, #552]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ea      	bne.n	8003eda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8097 	beq.w	8004040 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f12:	2300      	movs	r3, #0
 8003f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f16:	4b83      	ldr	r3, [pc, #524]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10f      	bne.n	8003f42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	4b7f      	ldr	r3, [pc, #508]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4a7e      	ldr	r2, [pc, #504]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	; 0x40
 8003f32:	4b7c      	ldr	r3, [pc, #496]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f42:	4b79      	ldr	r3, [pc, #484]	; (8004128 <HAL_RCC_OscConfig+0x4b0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d118      	bne.n	8003f80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4e:	4b76      	ldr	r3, [pc, #472]	; (8004128 <HAL_RCC_OscConfig+0x4b0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a75      	ldr	r2, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x4b0>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5a:	f7fe f8f7 	bl	800214c <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f62:	f7fe f8f3 	bl	800214c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e118      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f74:	4b6c      	ldr	r3, [pc, #432]	; (8004128 <HAL_RCC_OscConfig+0x4b0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d106      	bne.n	8003f96 <HAL_RCC_OscConfig+0x31e>
 8003f88:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4a65      	ldr	r2, [pc, #404]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6713      	str	r3, [r2, #112]	; 0x70
 8003f94:	e01c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x358>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x340>
 8003f9e:	4b61      	ldr	r3, [pc, #388]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	4a60      	ldr	r2, [pc, #384]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	f043 0304 	orr.w	r3, r3, #4
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003faa:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	4a5d      	ldr	r2, [pc, #372]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb6:	e00b      	b.n	8003fd0 <HAL_RCC_OscConfig+0x358>
 8003fb8:	4b5a      	ldr	r3, [pc, #360]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a59      	ldr	r2, [pc, #356]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	4b57      	ldr	r3, [pc, #348]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	4a56      	ldr	r2, [pc, #344]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003fca:	f023 0304 	bic.w	r3, r3, #4
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d015      	beq.n	8004004 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fe f8b8 	bl	800214c <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fe f8b4 	bl	800214c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e0d7      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0ee      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x368>
 8004002:	e014      	b.n	800402e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fe f8a2 	bl	800214c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400a:	e00a      	b.n	8004022 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400c:	f7fe f89e 	bl	800214c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f241 3288 	movw	r2, #5000	; 0x1388
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e0c1      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004022:	4b40      	ldr	r3, [pc, #256]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1ee      	bne.n	800400c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800402e:	7dfb      	ldrb	r3, [r7, #23]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d105      	bne.n	8004040 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004034:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	4a3a      	ldr	r2, [pc, #232]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 800403a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80ad 	beq.w	80041a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800404a:	4b36      	ldr	r3, [pc, #216]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b08      	cmp	r3, #8
 8004054:	d060      	beq.n	8004118 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d145      	bne.n	80040ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405e:	4b33      	ldr	r3, [pc, #204]	; (800412c <HAL_RCC_OscConfig+0x4b4>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fe f872 	bl	800214c <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406c:	f7fe f86e 	bl	800214c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e093      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	4b29      	ldr	r3, [pc, #164]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	019b      	lsls	r3, r3, #6
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	3b01      	subs	r3, #1
 80040a4:	041b      	lsls	r3, r3, #16
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	071b      	lsls	r3, r3, #28
 80040b6:	491b      	ldr	r1, [pc, #108]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x4b4>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe f843 	bl	800214c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe f83f 	bl	800214c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e064      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x452>
 80040e8:	e05c      	b.n	80041a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_RCC_OscConfig+0x4b4>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe f82c 	bl	800214c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe f828 	bl	800214c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e04d      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x480>
 8004116:	e045      	b.n	80041a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e040      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000
 800412c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004130:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <HAL_RCC_OscConfig+0x538>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d030      	beq.n	80041a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d129      	bne.n	80041a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d122      	bne.n	80041a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004168:	4293      	cmp	r3, r2
 800416a:	d119      	bne.n	80041a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	3b01      	subs	r3, #1
 800417a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d10f      	bne.n	80041a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e07b      	b.n	80042be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d009      	beq.n	80041ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	61da      	str	r2, [r3, #28]
 80041de:	e005      	b.n	80041ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fd20 	bl	8001c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	ea42 0103 	orr.w	r1, r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	f003 0104 	and.w	r1, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	f003 0210 	and.w	r2, r3, #16
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b088      	sub	sp, #32
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_SPI_Transmit+0x22>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e12d      	b.n	8004544 <HAL_SPI_Transmit+0x27e>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f0:	f7fd ff2c 	bl	800214c <HAL_GetTick>
 80042f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d002      	beq.n	800430c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800430a:	e116      	b.n	800453a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Transmit+0x52>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800431c:	e10d      	b.n	800453a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2203      	movs	r2, #3
 8004322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004364:	d10f      	bne.n	8004386 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d007      	beq.n	80043a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ac:	d14f      	bne.n	800444e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_SPI_Transmit+0xf6>
 80043b6:	8afb      	ldrh	r3, [r7, #22]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d142      	bne.n	8004442 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	881a      	ldrh	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e0:	e02f      	b.n	8004442 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d112      	bne.n	8004416 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	881a      	ldrh	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	1c9a      	adds	r2, r3, #2
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	86da      	strh	r2, [r3, #54]	; 0x36
 8004414:	e015      	b.n	8004442 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004416:	f7fd fe99 	bl	800214c <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d803      	bhi.n	800442e <HAL_SPI_Transmit+0x168>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d102      	bne.n	8004434 <HAL_SPI_Transmit+0x16e>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004440:	e07b      	b.n	800453a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ca      	bne.n	80043e2 <HAL_SPI_Transmit+0x11c>
 800444c:	e050      	b.n	80044f0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0x196>
 8004456:	8afb      	ldrh	r3, [r7, #22]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d144      	bne.n	80044e6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	7812      	ldrb	r2, [r2, #0]
 8004468:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004482:	e030      	b.n	80044e6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d113      	bne.n	80044ba <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80044b8:	e015      	b.n	80044e6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ba:	f7fd fe47 	bl	800214c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d803      	bhi.n	80044d2 <HAL_SPI_Transmit+0x20c>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_Transmit+0x212>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044e4:	e029      	b.n	800453a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1c9      	bne.n	8004484 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fbdf 	bl	8004cb8 <SPI_EndRxTxTransaction>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e003      	b.n	800453a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004542:	7ffb      	ldrb	r3, [r7, #31]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d002      	beq.n	8004572 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800456c:	2302      	movs	r3, #2
 800456e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004570:	e0fb      	b.n	800476a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457a:	d112      	bne.n	80045a2 <HAL_SPI_Receive+0x56>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10e      	bne.n	80045a2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2204      	movs	r2, #4
 8004588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	4613      	mov	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f8ef 	bl	800477c <HAL_SPI_TransmitReceive>
 800459e:	4603      	mov	r3, r0
 80045a0:	e0e8      	b.n	8004774 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_SPI_Receive+0x64>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e0e1      	b.n	8004774 <HAL_SPI_Receive+0x228>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b8:	f7fd fdc8 	bl	800214c <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_Receive+0x7e>
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045ce:	e0cc      	b.n	800476a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2204      	movs	r2, #4
 80045d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	88fa      	ldrh	r2, [r7, #6]
 80045ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	d10f      	bne.n	8004638 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d007      	beq.n	8004656 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004654:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d16a      	bne.n	8004734 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800465e:	e032      	b.n	80046c6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d115      	bne.n	800469a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f103 020c 	add.w	r2, r3, #12
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004698:	e015      	b.n	80046c6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800469a:	f7fd fd57 	bl	800214c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d803      	bhi.n	80046b2 <HAL_SPI_Receive+0x166>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d102      	bne.n	80046b8 <HAL_SPI_Receive+0x16c>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046c4:	e051      	b.n	800476a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1c7      	bne.n	8004660 <HAL_SPI_Receive+0x114>
 80046d0:	e035      	b.n	800473e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d113      	bne.n	8004708 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	b292      	uxth	r2, r2
 80046ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	1c9a      	adds	r2, r3, #2
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004706:	e015      	b.n	8004734 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004708:	f7fd fd20 	bl	800214c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d803      	bhi.n	8004720 <HAL_SPI_Receive+0x1d4>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d102      	bne.n	8004726 <HAL_SPI_Receive+0x1da>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004732:	e01a      	b.n	800476a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1c9      	bne.n	80046d2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fa52 	bl	8004bec <SPI_EndRxTransaction>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
 8004760:	e003      	b.n	800476a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	; 0x30
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800478a:	2301      	movs	r3, #1
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_SPI_TransmitReceive+0x26>
 800479e:	2302      	movs	r3, #2
 80047a0:	e198      	b.n	8004ad4 <HAL_SPI_TransmitReceive+0x358>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047aa:	f7fd fccf 	bl	800214c <HAL_GetTick>
 80047ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d00f      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x70>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d2:	d107      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d103      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x68>
 80047dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d003      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047ea:	e16d      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x82>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x82>
 80047f8:	887b      	ldrh	r3, [r7, #2]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004804:	e160      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b04      	cmp	r3, #4
 8004810:	d003      	beq.n	800481a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2205      	movs	r2, #5
 8004816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	887a      	ldrh	r2, [r7, #2]
 800482a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	887a      	ldrh	r2, [r7, #2]
 8004842:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d007      	beq.n	800486e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800486c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004876:	d17c      	bne.n	8004972 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_SPI_TransmitReceive+0x10a>
 8004880:	8b7b      	ldrh	r3, [r7, #26]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d16a      	bne.n	800495c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	881a      	ldrh	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	1c9a      	adds	r2, r3, #2
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048aa:	e057      	b.n	800495c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d11b      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x176>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d016      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x176>
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d113      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	881a      	ldrh	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	1c9a      	adds	r2, r3, #2
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d119      	bne.n	8004934 <HAL_SPI_TransmitReceive+0x1b8>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d014      	beq.n	8004934 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	b292      	uxth	r2, r2
 8004916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	1c9a      	adds	r2, r3, #2
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004930:	2301      	movs	r3, #1
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004934:	f7fd fc0a 	bl	800214c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004940:	429a      	cmp	r2, r3
 8004942:	d80b      	bhi.n	800495c <HAL_SPI_TransmitReceive+0x1e0>
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d007      	beq.n	800495c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800495a:	e0b5      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1a2      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x130>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d19d      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x130>
 8004970:	e080      	b.n	8004a74 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_SPI_TransmitReceive+0x204>
 800497a:	8b7b      	ldrh	r3, [r7, #26]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d16f      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a6:	e05b      	b.n	8004a60 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d11c      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x274>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d017      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x274>
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d114      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d119      	bne.n	8004a32 <HAL_SPI_TransmitReceive+0x2b6>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d014      	beq.n	8004a32 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a32:	f7fd fb8b 	bl	800214c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d803      	bhi.n	8004a4a <HAL_SPI_TransmitReceive+0x2ce>
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d102      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x2d4>
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d107      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a5e:	e033      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d19e      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x22c>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d199      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f91d 	bl	8004cb8 <SPI_EndRxTxTransaction>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a90:	e01a      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004abe:	e003      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3730      	adds	r7, #48	; 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004aec:	f7fd fb2e 	bl	800214c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	4413      	add	r3, r2
 8004afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004afc:	f7fd fb26 	bl	800214c <HAL_GetTick>
 8004b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b02:	4b39      	ldr	r3, [pc, #228]	; (8004be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	015b      	lsls	r3, r3, #5
 8004b08:	0d1b      	lsrs	r3, r3, #20
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b12:	e054      	b.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d050      	beq.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b1c:	f7fd fb16 	bl	800214c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d902      	bls.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d13d      	bne.n	8004bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4a:	d111      	bne.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	d004      	beq.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5e:	d107      	bne.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b78:	d10f      	bne.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e017      	b.n	8004bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d19b      	bne.n	8004b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000000 	.word	0x20000000

08004bec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c00:	d111      	bne.n	8004c26 <SPI_EndRxTransaction+0x3a>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0a:	d004      	beq.n	8004c16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c14:	d107      	bne.n	8004c26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2e:	d12a      	bne.n	8004c86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d012      	beq.n	8004c60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff ff49 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02d      	beq.n	8004cac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e026      	b.n	8004cae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2200      	movs	r2, #0
 8004c68:	2101      	movs	r1, #1
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff ff36 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01a      	beq.n	8004cac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e013      	b.n	8004cae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2101      	movs	r1, #1
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff ff23 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e000      	b.n	8004cae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	2102      	movs	r1, #2
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff ff04 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e032      	b.n	8004d50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cea:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <SPI_EndRxTxTransaction+0xa0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <SPI_EndRxTxTransaction+0xa4>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	0d5b      	lsrs	r3, r3, #21
 8004cf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d08:	d112      	bne.n	8004d30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff fee1 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d016      	beq.n	8004d4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e00f      	b.n	8004d50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d46:	2b80      	cmp	r3, #128	; 0x80
 8004d48:	d0f2      	beq.n	8004d30 <SPI_EndRxTxTransaction+0x78>
 8004d4a:	e000      	b.n	8004d4e <SPI_EndRxTxTransaction+0x96>
        break;
 8004d4c:	bf00      	nop
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	165e9f81 	.word	0x165e9f81

08004d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e041      	b.n	8004df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc ffa8 	bl	8001cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f000 fa10 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e041      	b.n	8004e94 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f839 	bl	8004e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	f000 f9c1 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e0ae      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	f200 809f 	bhi.w	800501c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	0800501d 	.word	0x0800501d
 8004eec:	0800501d 	.word	0x0800501d
 8004ef0:	0800501d 	.word	0x0800501d
 8004ef4:	08004f59 	.word	0x08004f59
 8004ef8:	0800501d 	.word	0x0800501d
 8004efc:	0800501d 	.word	0x0800501d
 8004f00:	0800501d 	.word	0x0800501d
 8004f04:	08004f9b 	.word	0x08004f9b
 8004f08:	0800501d 	.word	0x0800501d
 8004f0c:	0800501d 	.word	0x0800501d
 8004f10:	0800501d 	.word	0x0800501d
 8004f14:	08004fdb 	.word	0x08004fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f9fc 	bl	800531c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0204 	bic.w	r2, r2, #4
 8004f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	619a      	str	r2, [r3, #24]
      break;
 8004f56:	e064      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fa4c 	bl	80053fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	619a      	str	r2, [r3, #24]
      break;
 8004f98:	e043      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 faa1 	bl	80054e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0204 	bic.w	r2, r2, #4
 8004fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
      break;
 8004fd8:	e023      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 faf5 	bl	80055d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69d9      	ldr	r1, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	021a      	lsls	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	61da      	str	r2, [r3, #28]
      break;
 800501a:	e002      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
      break;
 8005020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_TIM_ConfigClockSource+0x1c>
 800504c:	2302      	movs	r3, #2
 800504e:	e0b4      	b.n	80051ba <HAL_TIM_ConfigClockSource+0x186>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800506e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005088:	d03e      	beq.n	8005108 <HAL_TIM_ConfigClockSource+0xd4>
 800508a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508e:	f200 8087 	bhi.w	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005096:	f000 8086 	beq.w	80051a6 <HAL_TIM_ConfigClockSource+0x172>
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509e:	d87f      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b70      	cmp	r3, #112	; 0x70
 80050a2:	d01a      	beq.n	80050da <HAL_TIM_ConfigClockSource+0xa6>
 80050a4:	2b70      	cmp	r3, #112	; 0x70
 80050a6:	d87b      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b60      	cmp	r3, #96	; 0x60
 80050aa:	d050      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x11a>
 80050ac:	2b60      	cmp	r3, #96	; 0x60
 80050ae:	d877      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050b0:	2b50      	cmp	r3, #80	; 0x50
 80050b2:	d03c      	beq.n	800512e <HAL_TIM_ConfigClockSource+0xfa>
 80050b4:	2b50      	cmp	r3, #80	; 0x50
 80050b6:	d873      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	d058      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x13a>
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d86f      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c0:	2b30      	cmp	r3, #48	; 0x30
 80050c2:	d064      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x15a>
 80050c4:	2b30      	cmp	r3, #48	; 0x30
 80050c6:	d86b      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d060      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x15a>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d867      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d05c      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x15a>
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d05a      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x15a>
 80050d8:	e062      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ea:	f000 fb41 	bl	8005770 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	609a      	str	r2, [r3, #8]
      break;
 8005106:	e04f      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005118:	f000 fb2a 	bl	8005770 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800512a:	609a      	str	r2, [r3, #8]
      break;
 800512c:	e03c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fa9e 	bl	800567c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2150      	movs	r1, #80	; 0x50
 8005146:	4618      	mov	r0, r3
 8005148:	f000 faf7 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 800514c:	e02c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800515a:	461a      	mov	r2, r3
 800515c:	f000 fabd 	bl	80056da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2160      	movs	r1, #96	; 0x60
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fae7 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 800516c:	e01c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	461a      	mov	r2, r3
 800517c:	f000 fa7e 	bl	800567c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2140      	movs	r1, #64	; 0x40
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fad7 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 800518c:	e00c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 face 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 800519e:	e003      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
      break;
 80051a4:	e000      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a46      	ldr	r2, [pc, #280]	; (80052f0 <TIM_Base_SetConfig+0x12c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d00f      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a43      	ldr	r2, [pc, #268]	; (80052f4 <TIM_Base_SetConfig+0x130>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a42      	ldr	r2, [pc, #264]	; (80052f8 <TIM_Base_SetConfig+0x134>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d007      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a41      	ldr	r2, [pc, #260]	; (80052fc <TIM_Base_SetConfig+0x138>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a40      	ldr	r2, [pc, #256]	; (8005300 <TIM_Base_SetConfig+0x13c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d108      	bne.n	8005216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <TIM_Base_SetConfig+0x12c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02b      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005224:	d027      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a32      	ldr	r2, [pc, #200]	; (80052f4 <TIM_Base_SetConfig+0x130>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d023      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a31      	ldr	r2, [pc, #196]	; (80052f8 <TIM_Base_SetConfig+0x134>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01f      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a30      	ldr	r2, [pc, #192]	; (80052fc <TIM_Base_SetConfig+0x138>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01b      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2f      	ldr	r2, [pc, #188]	; (8005300 <TIM_Base_SetConfig+0x13c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d017      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2e      	ldr	r2, [pc, #184]	; (8005304 <TIM_Base_SetConfig+0x140>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2d      	ldr	r2, [pc, #180]	; (8005308 <TIM_Base_SetConfig+0x144>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00f      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2c      	ldr	r2, [pc, #176]	; (800530c <TIM_Base_SetConfig+0x148>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2b      	ldr	r2, [pc, #172]	; (8005310 <TIM_Base_SetConfig+0x14c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <TIM_Base_SetConfig+0x150>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a29      	ldr	r2, [pc, #164]	; (8005318 <TIM_Base_SetConfig+0x154>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d108      	bne.n	8005288 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <TIM_Base_SetConfig+0x12c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0xf8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a12      	ldr	r2, [pc, #72]	; (8005300 <TIM_Base_SetConfig+0x13c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d103      	bne.n	80052c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d105      	bne.n	80052e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f023 0201 	bic.w	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	611a      	str	r2, [r3, #16]
  }
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40010400 	.word	0x40010400
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800
 8005310:	40001800 	.word	0x40001800
 8005314:	40001c00 	.word	0x40001c00
 8005318:	40002000 	.word	0x40002000

0800531c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f023 0201 	bic.w	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f023 0302 	bic.w	r3, r3, #2
 8005364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a20      	ldr	r2, [pc, #128]	; (80053f4 <TIM_OC1_SetConfig+0xd8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC1_SetConfig+0x64>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a1f      	ldr	r2, [pc, #124]	; (80053f8 <TIM_OC1_SetConfig+0xdc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10c      	bne.n	800539a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0308 	bic.w	r3, r3, #8
 8005386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a15      	ldr	r2, [pc, #84]	; (80053f4 <TIM_OC1_SetConfig+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_OC1_SetConfig+0x8e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a14      	ldr	r2, [pc, #80]	; (80053f8 <TIM_OC1_SetConfig+0xdc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d111      	bne.n	80053ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40010400 	.word	0x40010400

080053fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f023 0210 	bic.w	r2, r3, #16
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0320 	bic.w	r3, r3, #32
 8005446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a22      	ldr	r2, [pc, #136]	; (80054e0 <TIM_OC2_SetConfig+0xe4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC2_SetConfig+0x68>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <TIM_OC2_SetConfig+0xe8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10d      	bne.n	8005480 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <TIM_OC2_SetConfig+0xe4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC2_SetConfig+0x94>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <TIM_OC2_SetConfig+0xe8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d113      	bne.n	80054b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400

080054e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a21      	ldr	r2, [pc, #132]	; (80055c8 <TIM_OC3_SetConfig+0xe0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_OC3_SetConfig+0x66>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a20      	ldr	r2, [pc, #128]	; (80055cc <TIM_OC3_SetConfig+0xe4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d10d      	bne.n	800556a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <TIM_OC3_SetConfig+0xe0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_OC3_SetConfig+0x92>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a15      	ldr	r2, [pc, #84]	; (80055cc <TIM_OC3_SetConfig+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d113      	bne.n	80055a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40010400 	.word	0x40010400

080055d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a12      	ldr	r2, [pc, #72]	; (8005674 <TIM_OC4_SetConfig+0xa4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC4_SetConfig+0x68>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a11      	ldr	r2, [pc, #68]	; (8005678 <TIM_OC4_SetConfig+0xa8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d109      	bne.n	800564c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	019b      	lsls	r3, r3, #6
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000
 8005678:	40010400 	.word	0x40010400

0800567c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f023 0201 	bic.w	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f023 030a 	bic.w	r3, r3, #10
 80056b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0210 	bic.w	r2, r3, #16
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	031b      	lsls	r3, r3, #12
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	f043 0307 	orr.w	r3, r3, #7
 800575c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	609a      	str	r2, [r3, #8]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	021a      	lsls	r2, r3, #8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	431a      	orrs	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e05a      	b.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a21      	ldr	r2, [pc, #132]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005814:	d01d      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a18      	ldr	r2, [pc, #96]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10c      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4313      	orrs	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40010400 	.word	0x40010400
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40001800 	.word	0x40001800

080058a8 <__cvt>:
 80058a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	ec55 4b10 	vmov	r4, r5, d0
 80058b0:	2d00      	cmp	r5, #0
 80058b2:	460e      	mov	r6, r1
 80058b4:	4619      	mov	r1, r3
 80058b6:	462b      	mov	r3, r5
 80058b8:	bfbb      	ittet	lt
 80058ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058be:	461d      	movlt	r5, r3
 80058c0:	2300      	movge	r3, #0
 80058c2:	232d      	movlt	r3, #45	; 0x2d
 80058c4:	700b      	strb	r3, [r1, #0]
 80058c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058cc:	4691      	mov	r9, r2
 80058ce:	f023 0820 	bic.w	r8, r3, #32
 80058d2:	bfbc      	itt	lt
 80058d4:	4622      	movlt	r2, r4
 80058d6:	4614      	movlt	r4, r2
 80058d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058dc:	d005      	beq.n	80058ea <__cvt+0x42>
 80058de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058e2:	d100      	bne.n	80058e6 <__cvt+0x3e>
 80058e4:	3601      	adds	r6, #1
 80058e6:	2102      	movs	r1, #2
 80058e8:	e000      	b.n	80058ec <__cvt+0x44>
 80058ea:	2103      	movs	r1, #3
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	ab02      	add	r3, sp, #8
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	ec45 4b10 	vmov	d0, r4, r5
 80058f8:	4653      	mov	r3, sl
 80058fa:	4632      	mov	r2, r6
 80058fc:	f000 fe48 	bl	8006590 <_dtoa_r>
 8005900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005904:	4607      	mov	r7, r0
 8005906:	d102      	bne.n	800590e <__cvt+0x66>
 8005908:	f019 0f01 	tst.w	r9, #1
 800590c:	d022      	beq.n	8005954 <__cvt+0xac>
 800590e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005912:	eb07 0906 	add.w	r9, r7, r6
 8005916:	d110      	bne.n	800593a <__cvt+0x92>
 8005918:	783b      	ldrb	r3, [r7, #0]
 800591a:	2b30      	cmp	r3, #48	; 0x30
 800591c:	d10a      	bne.n	8005934 <__cvt+0x8c>
 800591e:	2200      	movs	r2, #0
 8005920:	2300      	movs	r3, #0
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fb f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800592a:	b918      	cbnz	r0, 8005934 <__cvt+0x8c>
 800592c:	f1c6 0601 	rsb	r6, r6, #1
 8005930:	f8ca 6000 	str.w	r6, [sl]
 8005934:	f8da 3000 	ldr.w	r3, [sl]
 8005938:	4499      	add	r9, r3
 800593a:	2200      	movs	r2, #0
 800593c:	2300      	movs	r3, #0
 800593e:	4620      	mov	r0, r4
 8005940:	4629      	mov	r1, r5
 8005942:	f7fb f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 8005946:	b108      	cbz	r0, 800594c <__cvt+0xa4>
 8005948:	f8cd 900c 	str.w	r9, [sp, #12]
 800594c:	2230      	movs	r2, #48	; 0x30
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	454b      	cmp	r3, r9
 8005952:	d307      	bcc.n	8005964 <__cvt+0xbc>
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005958:	1bdb      	subs	r3, r3, r7
 800595a:	4638      	mov	r0, r7
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	b004      	add	sp, #16
 8005960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	9103      	str	r1, [sp, #12]
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e7f0      	b.n	800594e <__cvt+0xa6>

0800596c <__exponent>:
 800596c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800596e:	4603      	mov	r3, r0
 8005970:	2900      	cmp	r1, #0
 8005972:	bfb8      	it	lt
 8005974:	4249      	neglt	r1, r1
 8005976:	f803 2b02 	strb.w	r2, [r3], #2
 800597a:	bfb4      	ite	lt
 800597c:	222d      	movlt	r2, #45	; 0x2d
 800597e:	222b      	movge	r2, #43	; 0x2b
 8005980:	2909      	cmp	r1, #9
 8005982:	7042      	strb	r2, [r0, #1]
 8005984:	dd2a      	ble.n	80059dc <__exponent+0x70>
 8005986:	f10d 0207 	add.w	r2, sp, #7
 800598a:	4617      	mov	r7, r2
 800598c:	260a      	movs	r6, #10
 800598e:	4694      	mov	ip, r2
 8005990:	fb91 f5f6 	sdiv	r5, r1, r6
 8005994:	fb06 1415 	mls	r4, r6, r5, r1
 8005998:	3430      	adds	r4, #48	; 0x30
 800599a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800599e:	460c      	mov	r4, r1
 80059a0:	2c63      	cmp	r4, #99	; 0x63
 80059a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80059a6:	4629      	mov	r1, r5
 80059a8:	dcf1      	bgt.n	800598e <__exponent+0x22>
 80059aa:	3130      	adds	r1, #48	; 0x30
 80059ac:	f1ac 0402 	sub.w	r4, ip, #2
 80059b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059b4:	1c41      	adds	r1, r0, #1
 80059b6:	4622      	mov	r2, r4
 80059b8:	42ba      	cmp	r2, r7
 80059ba:	d30a      	bcc.n	80059d2 <__exponent+0x66>
 80059bc:	f10d 0209 	add.w	r2, sp, #9
 80059c0:	eba2 020c 	sub.w	r2, r2, ip
 80059c4:	42bc      	cmp	r4, r7
 80059c6:	bf88      	it	hi
 80059c8:	2200      	movhi	r2, #0
 80059ca:	4413      	add	r3, r2
 80059cc:	1a18      	subs	r0, r3, r0
 80059ce:	b003      	add	sp, #12
 80059d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80059d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80059da:	e7ed      	b.n	80059b8 <__exponent+0x4c>
 80059dc:	2330      	movs	r3, #48	; 0x30
 80059de:	3130      	adds	r1, #48	; 0x30
 80059e0:	7083      	strb	r3, [r0, #2]
 80059e2:	70c1      	strb	r1, [r0, #3]
 80059e4:	1d03      	adds	r3, r0, #4
 80059e6:	e7f1      	b.n	80059cc <__exponent+0x60>

080059e8 <_printf_float>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ed2d 8b02 	vpush	{d8}
 80059f0:	b08d      	sub	sp, #52	; 0x34
 80059f2:	460c      	mov	r4, r1
 80059f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059f8:	4616      	mov	r6, r2
 80059fa:	461f      	mov	r7, r3
 80059fc:	4605      	mov	r5, r0
 80059fe:	f000 fcc7 	bl	8006390 <_localeconv_r>
 8005a02:	f8d0 a000 	ldr.w	sl, [r0]
 8005a06:	4650      	mov	r0, sl
 8005a08:	f7fa fc52 	bl	80002b0 <strlen>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	f8d8 3000 	ldr.w	r3, [r8]
 8005a18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	f023 0307 	bic.w	r3, r3, #7
 8005a22:	f103 0208 	add.w	r2, r3, #8
 8005a26:	f8c8 2000 	str.w	r2, [r8]
 8005a2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a38:	ee08 0a10 	vmov	s16, r0
 8005a3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a44:	4b9e      	ldr	r3, [pc, #632]	; (8005cc0 <_printf_float+0x2d8>)
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4a:	f7fb f88f 	bl	8000b6c <__aeabi_dcmpun>
 8005a4e:	bb88      	cbnz	r0, 8005ab4 <_printf_float+0xcc>
 8005a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a54:	4b9a      	ldr	r3, [pc, #616]	; (8005cc0 <_printf_float+0x2d8>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	f7fb f869 	bl	8000b30 <__aeabi_dcmple>
 8005a5e:	bb48      	cbnz	r0, 8005ab4 <_printf_float+0xcc>
 8005a60:	2200      	movs	r2, #0
 8005a62:	2300      	movs	r3, #0
 8005a64:	4640      	mov	r0, r8
 8005a66:	4649      	mov	r1, r9
 8005a68:	f7fb f858 	bl	8000b1c <__aeabi_dcmplt>
 8005a6c:	b110      	cbz	r0, 8005a74 <_printf_float+0x8c>
 8005a6e:	232d      	movs	r3, #45	; 0x2d
 8005a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a74:	4a93      	ldr	r2, [pc, #588]	; (8005cc4 <_printf_float+0x2dc>)
 8005a76:	4b94      	ldr	r3, [pc, #592]	; (8005cc8 <_printf_float+0x2e0>)
 8005a78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a7c:	bf94      	ite	ls
 8005a7e:	4690      	movls	r8, r2
 8005a80:	4698      	movhi	r8, r3
 8005a82:	2303      	movs	r3, #3
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	9b05      	ldr	r3, [sp, #20]
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	f04f 0900 	mov.w	r9, #0
 8005a92:	9700      	str	r7, [sp, #0]
 8005a94:	4633      	mov	r3, r6
 8005a96:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 f9da 	bl	8005e54 <_printf_common>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f040 8090 	bne.w	8005bc6 <_printf_float+0x1de>
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aaa:	b00d      	add	sp, #52	; 0x34
 8005aac:	ecbd 8b02 	vpop	{d8}
 8005ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	4640      	mov	r0, r8
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fb f856 	bl	8000b6c <__aeabi_dcmpun>
 8005ac0:	b140      	cbz	r0, 8005ad4 <_printf_float+0xec>
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfbc      	itt	lt
 8005ac8:	232d      	movlt	r3, #45	; 0x2d
 8005aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ace:	4a7f      	ldr	r2, [pc, #508]	; (8005ccc <_printf_float+0x2e4>)
 8005ad0:	4b7f      	ldr	r3, [pc, #508]	; (8005cd0 <_printf_float+0x2e8>)
 8005ad2:	e7d1      	b.n	8005a78 <_printf_float+0x90>
 8005ad4:	6863      	ldr	r3, [r4, #4]
 8005ad6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ada:	9206      	str	r2, [sp, #24]
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	d13f      	bne.n	8005b60 <_printf_float+0x178>
 8005ae0:	2306      	movs	r3, #6
 8005ae2:	6063      	str	r3, [r4, #4]
 8005ae4:	9b05      	ldr	r3, [sp, #20]
 8005ae6:	6861      	ldr	r1, [r4, #4]
 8005ae8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005aec:	2300      	movs	r3, #0
 8005aee:	9303      	str	r3, [sp, #12]
 8005af0:	ab0a      	add	r3, sp, #40	; 0x28
 8005af2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005af6:	ab09      	add	r3, sp, #36	; 0x24
 8005af8:	ec49 8b10 	vmov	d0, r8, r9
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	6022      	str	r2, [r4, #0]
 8005b00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b04:	4628      	mov	r0, r5
 8005b06:	f7ff fecf 	bl	80058a8 <__cvt>
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b0e:	2b47      	cmp	r3, #71	; 0x47
 8005b10:	4680      	mov	r8, r0
 8005b12:	d108      	bne.n	8005b26 <_printf_float+0x13e>
 8005b14:	1cc8      	adds	r0, r1, #3
 8005b16:	db02      	blt.n	8005b1e <_printf_float+0x136>
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	4299      	cmp	r1, r3
 8005b1c:	dd41      	ble.n	8005ba2 <_printf_float+0x1ba>
 8005b1e:	f1ab 0302 	sub.w	r3, fp, #2
 8005b22:	fa5f fb83 	uxtb.w	fp, r3
 8005b26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b2a:	d820      	bhi.n	8005b6e <_printf_float+0x186>
 8005b2c:	3901      	subs	r1, #1
 8005b2e:	465a      	mov	r2, fp
 8005b30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b34:	9109      	str	r1, [sp, #36]	; 0x24
 8005b36:	f7ff ff19 	bl	800596c <__exponent>
 8005b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b3c:	1813      	adds	r3, r2, r0
 8005b3e:	2a01      	cmp	r2, #1
 8005b40:	4681      	mov	r9, r0
 8005b42:	6123      	str	r3, [r4, #16]
 8005b44:	dc02      	bgt.n	8005b4c <_printf_float+0x164>
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	07d2      	lsls	r2, r2, #31
 8005b4a:	d501      	bpl.n	8005b50 <_printf_float+0x168>
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	6123      	str	r3, [r4, #16]
 8005b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d09c      	beq.n	8005a92 <_printf_float+0xaa>
 8005b58:	232d      	movs	r3, #45	; 0x2d
 8005b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b5e:	e798      	b.n	8005a92 <_printf_float+0xaa>
 8005b60:	9a06      	ldr	r2, [sp, #24]
 8005b62:	2a47      	cmp	r2, #71	; 0x47
 8005b64:	d1be      	bne.n	8005ae4 <_printf_float+0xfc>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1bc      	bne.n	8005ae4 <_printf_float+0xfc>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e7b9      	b.n	8005ae2 <_printf_float+0xfa>
 8005b6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b72:	d118      	bne.n	8005ba6 <_printf_float+0x1be>
 8005b74:	2900      	cmp	r1, #0
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	dd0b      	ble.n	8005b92 <_printf_float+0x1aa>
 8005b7a:	6121      	str	r1, [r4, #16]
 8005b7c:	b913      	cbnz	r3, 8005b84 <_printf_float+0x19c>
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	07d0      	lsls	r0, r2, #31
 8005b82:	d502      	bpl.n	8005b8a <_printf_float+0x1a2>
 8005b84:	3301      	adds	r3, #1
 8005b86:	440b      	add	r3, r1
 8005b88:	6123      	str	r3, [r4, #16]
 8005b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b8c:	f04f 0900 	mov.w	r9, #0
 8005b90:	e7de      	b.n	8005b50 <_printf_float+0x168>
 8005b92:	b913      	cbnz	r3, 8005b9a <_printf_float+0x1b2>
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	07d2      	lsls	r2, r2, #31
 8005b98:	d501      	bpl.n	8005b9e <_printf_float+0x1b6>
 8005b9a:	3302      	adds	r3, #2
 8005b9c:	e7f4      	b.n	8005b88 <_printf_float+0x1a0>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e7f2      	b.n	8005b88 <_printf_float+0x1a0>
 8005ba2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	db05      	blt.n	8005bb8 <_printf_float+0x1d0>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	6121      	str	r1, [r4, #16]
 8005bb0:	07d8      	lsls	r0, r3, #31
 8005bb2:	d5ea      	bpl.n	8005b8a <_printf_float+0x1a2>
 8005bb4:	1c4b      	adds	r3, r1, #1
 8005bb6:	e7e7      	b.n	8005b88 <_printf_float+0x1a0>
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	bfd4      	ite	le
 8005bbc:	f1c1 0202 	rsble	r2, r1, #2
 8005bc0:	2201      	movgt	r2, #1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	e7e0      	b.n	8005b88 <_printf_float+0x1a0>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	055a      	lsls	r2, r3, #21
 8005bca:	d407      	bmi.n	8005bdc <_printf_float+0x1f4>
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	4642      	mov	r2, r8
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d12c      	bne.n	8005c34 <_printf_float+0x24c>
 8005bda:	e764      	b.n	8005aa6 <_printf_float+0xbe>
 8005bdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005be0:	f240 80e0 	bls.w	8005da4 <_printf_float+0x3bc>
 8005be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005be8:	2200      	movs	r2, #0
 8005bea:	2300      	movs	r3, #0
 8005bec:	f7fa ff8c 	bl	8000b08 <__aeabi_dcmpeq>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d034      	beq.n	8005c5e <_printf_float+0x276>
 8005bf4:	4a37      	ldr	r2, [pc, #220]	; (8005cd4 <_printf_float+0x2ec>)
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f af51 	beq.w	8005aa6 <_printf_float+0xbe>
 8005c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	db02      	blt.n	8005c12 <_printf_float+0x22a>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	07d8      	lsls	r0, r3, #31
 8005c10:	d510      	bpl.n	8005c34 <_printf_float+0x24c>
 8005c12:	ee18 3a10 	vmov	r3, s16
 8005c16:	4652      	mov	r2, sl
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f43f af41 	beq.w	8005aa6 <_printf_float+0xbe>
 8005c24:	f04f 0800 	mov.w	r8, #0
 8005c28:	f104 091a 	add.w	r9, r4, #26
 8005c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	4543      	cmp	r3, r8
 8005c32:	dc09      	bgt.n	8005c48 <_printf_float+0x260>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	079b      	lsls	r3, r3, #30
 8005c38:	f100 8107 	bmi.w	8005e4a <_printf_float+0x462>
 8005c3c:	68e0      	ldr	r0, [r4, #12]
 8005c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c40:	4298      	cmp	r0, r3
 8005c42:	bfb8      	it	lt
 8005c44:	4618      	movlt	r0, r3
 8005c46:	e730      	b.n	8005aaa <_printf_float+0xc2>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	464a      	mov	r2, r9
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f af27 	beq.w	8005aa6 <_printf_float+0xbe>
 8005c58:	f108 0801 	add.w	r8, r8, #1
 8005c5c:	e7e6      	b.n	8005c2c <_printf_float+0x244>
 8005c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	dc39      	bgt.n	8005cd8 <_printf_float+0x2f0>
 8005c64:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <_printf_float+0x2ec>)
 8005c66:	2301      	movs	r3, #1
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	f43f af19 	beq.w	8005aa6 <_printf_float+0xbe>
 8005c74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d102      	bne.n	8005c82 <_printf_float+0x29a>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	07d9      	lsls	r1, r3, #31
 8005c80:	d5d8      	bpl.n	8005c34 <_printf_float+0x24c>
 8005c82:	ee18 3a10 	vmov	r3, s16
 8005c86:	4652      	mov	r2, sl
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f af09 	beq.w	8005aa6 <_printf_float+0xbe>
 8005c94:	f04f 0900 	mov.w	r9, #0
 8005c98:	f104 0a1a 	add.w	sl, r4, #26
 8005c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9e:	425b      	negs	r3, r3
 8005ca0:	454b      	cmp	r3, r9
 8005ca2:	dc01      	bgt.n	8005ca8 <_printf_float+0x2c0>
 8005ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca6:	e792      	b.n	8005bce <_printf_float+0x1e6>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4652      	mov	r2, sl
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f aef7 	beq.w	8005aa6 <_printf_float+0xbe>
 8005cb8:	f109 0901 	add.w	r9, r9, #1
 8005cbc:	e7ee      	b.n	8005c9c <_printf_float+0x2b4>
 8005cbe:	bf00      	nop
 8005cc0:	7fefffff 	.word	0x7fefffff
 8005cc4:	08008948 	.word	0x08008948
 8005cc8:	0800894c 	.word	0x0800894c
 8005ccc:	08008950 	.word	0x08008950
 8005cd0:	08008954 	.word	0x08008954
 8005cd4:	08008958 	.word	0x08008958
 8005cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	bfa8      	it	ge
 8005ce0:	461a      	movge	r2, r3
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	4691      	mov	r9, r2
 8005ce6:	dc37      	bgt.n	8005d58 <_printf_float+0x370>
 8005ce8:	f04f 0b00 	mov.w	fp, #0
 8005cec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cf0:	f104 021a 	add.w	r2, r4, #26
 8005cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cf6:	9305      	str	r3, [sp, #20]
 8005cf8:	eba3 0309 	sub.w	r3, r3, r9
 8005cfc:	455b      	cmp	r3, fp
 8005cfe:	dc33      	bgt.n	8005d68 <_printf_float+0x380>
 8005d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d04:	429a      	cmp	r2, r3
 8005d06:	db3b      	blt.n	8005d80 <_printf_float+0x398>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	07da      	lsls	r2, r3, #31
 8005d0c:	d438      	bmi.n	8005d80 <_printf_float+0x398>
 8005d0e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d12:	eba2 0903 	sub.w	r9, r2, r3
 8005d16:	9b05      	ldr	r3, [sp, #20]
 8005d18:	1ad2      	subs	r2, r2, r3
 8005d1a:	4591      	cmp	r9, r2
 8005d1c:	bfa8      	it	ge
 8005d1e:	4691      	movge	r9, r2
 8005d20:	f1b9 0f00 	cmp.w	r9, #0
 8005d24:	dc35      	bgt.n	8005d92 <_printf_float+0x3aa>
 8005d26:	f04f 0800 	mov.w	r8, #0
 8005d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d2e:	f104 0a1a 	add.w	sl, r4, #26
 8005d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d36:	1a9b      	subs	r3, r3, r2
 8005d38:	eba3 0309 	sub.w	r3, r3, r9
 8005d3c:	4543      	cmp	r3, r8
 8005d3e:	f77f af79 	ble.w	8005c34 <_printf_float+0x24c>
 8005d42:	2301      	movs	r3, #1
 8005d44:	4652      	mov	r2, sl
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f aeaa 	beq.w	8005aa6 <_printf_float+0xbe>
 8005d52:	f108 0801 	add.w	r8, r8, #1
 8005d56:	e7ec      	b.n	8005d32 <_printf_float+0x34a>
 8005d58:	4613      	mov	r3, r2
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	4628      	mov	r0, r5
 8005d60:	47b8      	blx	r7
 8005d62:	3001      	adds	r0, #1
 8005d64:	d1c0      	bne.n	8005ce8 <_printf_float+0x300>
 8005d66:	e69e      	b.n	8005aa6 <_printf_float+0xbe>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	9205      	str	r2, [sp, #20]
 8005d70:	47b8      	blx	r7
 8005d72:	3001      	adds	r0, #1
 8005d74:	f43f ae97 	beq.w	8005aa6 <_printf_float+0xbe>
 8005d78:	9a05      	ldr	r2, [sp, #20]
 8005d7a:	f10b 0b01 	add.w	fp, fp, #1
 8005d7e:	e7b9      	b.n	8005cf4 <_printf_float+0x30c>
 8005d80:	ee18 3a10 	vmov	r3, s16
 8005d84:	4652      	mov	r2, sl
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d1be      	bne.n	8005d0e <_printf_float+0x326>
 8005d90:	e689      	b.n	8005aa6 <_printf_float+0xbe>
 8005d92:	9a05      	ldr	r2, [sp, #20]
 8005d94:	464b      	mov	r3, r9
 8005d96:	4442      	add	r2, r8
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	d1c1      	bne.n	8005d26 <_printf_float+0x33e>
 8005da2:	e680      	b.n	8005aa6 <_printf_float+0xbe>
 8005da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005da6:	2a01      	cmp	r2, #1
 8005da8:	dc01      	bgt.n	8005dae <_printf_float+0x3c6>
 8005daa:	07db      	lsls	r3, r3, #31
 8005dac:	d53a      	bpl.n	8005e24 <_printf_float+0x43c>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4642      	mov	r2, r8
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f ae74 	beq.w	8005aa6 <_printf_float+0xbe>
 8005dbe:	ee18 3a10 	vmov	r3, s16
 8005dc2:	4652      	mov	r2, sl
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f ae6b 	beq.w	8005aa6 <_printf_float+0xbe>
 8005dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005ddc:	f7fa fe94 	bl	8000b08 <__aeabi_dcmpeq>
 8005de0:	b9d8      	cbnz	r0, 8005e1a <_printf_float+0x432>
 8005de2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005de6:	f108 0201 	add.w	r2, r8, #1
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	d10e      	bne.n	8005e12 <_printf_float+0x42a>
 8005df4:	e657      	b.n	8005aa6 <_printf_float+0xbe>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4652      	mov	r2, sl
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f ae50 	beq.w	8005aa6 <_printf_float+0xbe>
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4543      	cmp	r3, r8
 8005e10:	dcf1      	bgt.n	8005df6 <_printf_float+0x40e>
 8005e12:	464b      	mov	r3, r9
 8005e14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e18:	e6da      	b.n	8005bd0 <_printf_float+0x1e8>
 8005e1a:	f04f 0800 	mov.w	r8, #0
 8005e1e:	f104 0a1a 	add.w	sl, r4, #26
 8005e22:	e7f2      	b.n	8005e0a <_printf_float+0x422>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4642      	mov	r2, r8
 8005e28:	e7df      	b.n	8005dea <_printf_float+0x402>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	464a      	mov	r2, r9
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	f43f ae36 	beq.w	8005aa6 <_printf_float+0xbe>
 8005e3a:	f108 0801 	add.w	r8, r8, #1
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e42:	1a5b      	subs	r3, r3, r1
 8005e44:	4543      	cmp	r3, r8
 8005e46:	dcf0      	bgt.n	8005e2a <_printf_float+0x442>
 8005e48:	e6f8      	b.n	8005c3c <_printf_float+0x254>
 8005e4a:	f04f 0800 	mov.w	r8, #0
 8005e4e:	f104 0919 	add.w	r9, r4, #25
 8005e52:	e7f4      	b.n	8005e3e <_printf_float+0x456>

08005e54 <_printf_common>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	4616      	mov	r6, r2
 8005e5a:	4699      	mov	r9, r3
 8005e5c:	688a      	ldr	r2, [r1, #8]
 8005e5e:	690b      	ldr	r3, [r1, #16]
 8005e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e64:	4293      	cmp	r3, r2
 8005e66:	bfb8      	it	lt
 8005e68:	4613      	movlt	r3, r2
 8005e6a:	6033      	str	r3, [r6, #0]
 8005e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e70:	4607      	mov	r7, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	b10a      	cbz	r2, 8005e7a <_printf_common+0x26>
 8005e76:	3301      	adds	r3, #1
 8005e78:	6033      	str	r3, [r6, #0]
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	0699      	lsls	r1, r3, #26
 8005e7e:	bf42      	ittt	mi
 8005e80:	6833      	ldrmi	r3, [r6, #0]
 8005e82:	3302      	addmi	r3, #2
 8005e84:	6033      	strmi	r3, [r6, #0]
 8005e86:	6825      	ldr	r5, [r4, #0]
 8005e88:	f015 0506 	ands.w	r5, r5, #6
 8005e8c:	d106      	bne.n	8005e9c <_printf_common+0x48>
 8005e8e:	f104 0a19 	add.w	sl, r4, #25
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	6832      	ldr	r2, [r6, #0]
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dc26      	bgt.n	8005eea <_printf_common+0x96>
 8005e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ea0:	1e13      	subs	r3, r2, #0
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	bf18      	it	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	0692      	lsls	r2, r2, #26
 8005eaa:	d42b      	bmi.n	8005f04 <_printf_common+0xb0>
 8005eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c0      	blx	r8
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d01e      	beq.n	8005ef8 <_printf_common+0xa4>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	6922      	ldr	r2, [r4, #16]
 8005ebe:	f003 0306 	and.w	r3, r3, #6
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	bf02      	ittt	eq
 8005ec6:	68e5      	ldreq	r5, [r4, #12]
 8005ec8:	6833      	ldreq	r3, [r6, #0]
 8005eca:	1aed      	subeq	r5, r5, r3
 8005ecc:	68a3      	ldr	r3, [r4, #8]
 8005ece:	bf0c      	ite	eq
 8005ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed4:	2500      	movne	r5, #0
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	bfc4      	itt	gt
 8005eda:	1a9b      	subgt	r3, r3, r2
 8005edc:	18ed      	addgt	r5, r5, r3
 8005ede:	2600      	movs	r6, #0
 8005ee0:	341a      	adds	r4, #26
 8005ee2:	42b5      	cmp	r5, r6
 8005ee4:	d11a      	bne.n	8005f1c <_printf_common+0xc8>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e008      	b.n	8005efc <_printf_common+0xa8>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4652      	mov	r2, sl
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	47c0      	blx	r8
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d103      	bne.n	8005f00 <_printf_common+0xac>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	3501      	adds	r5, #1
 8005f02:	e7c6      	b.n	8005e92 <_printf_common+0x3e>
 8005f04:	18e1      	adds	r1, r4, r3
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	2030      	movs	r0, #48	; 0x30
 8005f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f0e:	4422      	add	r2, r4
 8005f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f18:	3302      	adds	r3, #2
 8005f1a:	e7c7      	b.n	8005eac <_printf_common+0x58>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4649      	mov	r1, r9
 8005f22:	4638      	mov	r0, r7
 8005f24:	47c0      	blx	r8
 8005f26:	3001      	adds	r0, #1
 8005f28:	d0e6      	beq.n	8005ef8 <_printf_common+0xa4>
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7d9      	b.n	8005ee2 <_printf_common+0x8e>
	...

08005f30 <_printf_i>:
 8005f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	7e0f      	ldrb	r7, [r1, #24]
 8005f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f38:	2f78      	cmp	r7, #120	; 0x78
 8005f3a:	4691      	mov	r9, r2
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	469a      	mov	sl, r3
 8005f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f46:	d807      	bhi.n	8005f58 <_printf_i+0x28>
 8005f48:	2f62      	cmp	r7, #98	; 0x62
 8005f4a:	d80a      	bhi.n	8005f62 <_printf_i+0x32>
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	f000 80d4 	beq.w	80060fa <_printf_i+0x1ca>
 8005f52:	2f58      	cmp	r7, #88	; 0x58
 8005f54:	f000 80c0 	beq.w	80060d8 <_printf_i+0x1a8>
 8005f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f60:	e03a      	b.n	8005fd8 <_printf_i+0xa8>
 8005f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f66:	2b15      	cmp	r3, #21
 8005f68:	d8f6      	bhi.n	8005f58 <_printf_i+0x28>
 8005f6a:	a101      	add	r1, pc, #4	; (adr r1, 8005f70 <_printf_i+0x40>)
 8005f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f70:	08005fc9 	.word	0x08005fc9
 8005f74:	08005fdd 	.word	0x08005fdd
 8005f78:	08005f59 	.word	0x08005f59
 8005f7c:	08005f59 	.word	0x08005f59
 8005f80:	08005f59 	.word	0x08005f59
 8005f84:	08005f59 	.word	0x08005f59
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005f59 	.word	0x08005f59
 8005f90:	08005f59 	.word	0x08005f59
 8005f94:	08005f59 	.word	0x08005f59
 8005f98:	08005f59 	.word	0x08005f59
 8005f9c:	080060e1 	.word	0x080060e1
 8005fa0:	08006009 	.word	0x08006009
 8005fa4:	0800609b 	.word	0x0800609b
 8005fa8:	08005f59 	.word	0x08005f59
 8005fac:	08005f59 	.word	0x08005f59
 8005fb0:	08006103 	.word	0x08006103
 8005fb4:	08005f59 	.word	0x08005f59
 8005fb8:	08006009 	.word	0x08006009
 8005fbc:	08005f59 	.word	0x08005f59
 8005fc0:	08005f59 	.word	0x08005f59
 8005fc4:	080060a3 	.word	0x080060a3
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	602a      	str	r2, [r5, #0]
 8005fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e09f      	b.n	800611c <_printf_i+0x1ec>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	0607      	lsls	r7, r0, #24
 8005fe2:	f103 0104 	add.w	r1, r3, #4
 8005fe6:	6029      	str	r1, [r5, #0]
 8005fe8:	d501      	bpl.n	8005fee <_printf_i+0xbe>
 8005fea:	681e      	ldr	r6, [r3, #0]
 8005fec:	e003      	b.n	8005ff6 <_printf_i+0xc6>
 8005fee:	0646      	lsls	r6, r0, #25
 8005ff0:	d5fb      	bpl.n	8005fea <_printf_i+0xba>
 8005ff2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ff6:	2e00      	cmp	r6, #0
 8005ff8:	da03      	bge.n	8006002 <_printf_i+0xd2>
 8005ffa:	232d      	movs	r3, #45	; 0x2d
 8005ffc:	4276      	negs	r6, r6
 8005ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006002:	485a      	ldr	r0, [pc, #360]	; (800616c <_printf_i+0x23c>)
 8006004:	230a      	movs	r3, #10
 8006006:	e012      	b.n	800602e <_printf_i+0xfe>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	6820      	ldr	r0, [r4, #0]
 800600c:	1d19      	adds	r1, r3, #4
 800600e:	6029      	str	r1, [r5, #0]
 8006010:	0605      	lsls	r5, r0, #24
 8006012:	d501      	bpl.n	8006018 <_printf_i+0xe8>
 8006014:	681e      	ldr	r6, [r3, #0]
 8006016:	e002      	b.n	800601e <_printf_i+0xee>
 8006018:	0641      	lsls	r1, r0, #25
 800601a:	d5fb      	bpl.n	8006014 <_printf_i+0xe4>
 800601c:	881e      	ldrh	r6, [r3, #0]
 800601e:	4853      	ldr	r0, [pc, #332]	; (800616c <_printf_i+0x23c>)
 8006020:	2f6f      	cmp	r7, #111	; 0x6f
 8006022:	bf0c      	ite	eq
 8006024:	2308      	moveq	r3, #8
 8006026:	230a      	movne	r3, #10
 8006028:	2100      	movs	r1, #0
 800602a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800602e:	6865      	ldr	r5, [r4, #4]
 8006030:	60a5      	str	r5, [r4, #8]
 8006032:	2d00      	cmp	r5, #0
 8006034:	bfa2      	ittt	ge
 8006036:	6821      	ldrge	r1, [r4, #0]
 8006038:	f021 0104 	bicge.w	r1, r1, #4
 800603c:	6021      	strge	r1, [r4, #0]
 800603e:	b90e      	cbnz	r6, 8006044 <_printf_i+0x114>
 8006040:	2d00      	cmp	r5, #0
 8006042:	d04b      	beq.n	80060dc <_printf_i+0x1ac>
 8006044:	4615      	mov	r5, r2
 8006046:	fbb6 f1f3 	udiv	r1, r6, r3
 800604a:	fb03 6711 	mls	r7, r3, r1, r6
 800604e:	5dc7      	ldrb	r7, [r0, r7]
 8006050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006054:	4637      	mov	r7, r6
 8006056:	42bb      	cmp	r3, r7
 8006058:	460e      	mov	r6, r1
 800605a:	d9f4      	bls.n	8006046 <_printf_i+0x116>
 800605c:	2b08      	cmp	r3, #8
 800605e:	d10b      	bne.n	8006078 <_printf_i+0x148>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	07de      	lsls	r6, r3, #31
 8006064:	d508      	bpl.n	8006078 <_printf_i+0x148>
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	6861      	ldr	r1, [r4, #4]
 800606a:	4299      	cmp	r1, r3
 800606c:	bfde      	ittt	le
 800606e:	2330      	movle	r3, #48	; 0x30
 8006070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006078:	1b52      	subs	r2, r2, r5
 800607a:	6122      	str	r2, [r4, #16]
 800607c:	f8cd a000 	str.w	sl, [sp]
 8006080:	464b      	mov	r3, r9
 8006082:	aa03      	add	r2, sp, #12
 8006084:	4621      	mov	r1, r4
 8006086:	4640      	mov	r0, r8
 8006088:	f7ff fee4 	bl	8005e54 <_printf_common>
 800608c:	3001      	adds	r0, #1
 800608e:	d14a      	bne.n	8006126 <_printf_i+0x1f6>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	b004      	add	sp, #16
 8006096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	f043 0320 	orr.w	r3, r3, #32
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	4833      	ldr	r0, [pc, #204]	; (8006170 <_printf_i+0x240>)
 80060a4:	2778      	movs	r7, #120	; 0x78
 80060a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	6829      	ldr	r1, [r5, #0]
 80060ae:	061f      	lsls	r7, r3, #24
 80060b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80060b4:	d402      	bmi.n	80060bc <_printf_i+0x18c>
 80060b6:	065f      	lsls	r7, r3, #25
 80060b8:	bf48      	it	mi
 80060ba:	b2b6      	uxthmi	r6, r6
 80060bc:	07df      	lsls	r7, r3, #31
 80060be:	bf48      	it	mi
 80060c0:	f043 0320 	orrmi.w	r3, r3, #32
 80060c4:	6029      	str	r1, [r5, #0]
 80060c6:	bf48      	it	mi
 80060c8:	6023      	strmi	r3, [r4, #0]
 80060ca:	b91e      	cbnz	r6, 80060d4 <_printf_i+0x1a4>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	f023 0320 	bic.w	r3, r3, #32
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	2310      	movs	r3, #16
 80060d6:	e7a7      	b.n	8006028 <_printf_i+0xf8>
 80060d8:	4824      	ldr	r0, [pc, #144]	; (800616c <_printf_i+0x23c>)
 80060da:	e7e4      	b.n	80060a6 <_printf_i+0x176>
 80060dc:	4615      	mov	r5, r2
 80060de:	e7bd      	b.n	800605c <_printf_i+0x12c>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	6826      	ldr	r6, [r4, #0]
 80060e4:	6961      	ldr	r1, [r4, #20]
 80060e6:	1d18      	adds	r0, r3, #4
 80060e8:	6028      	str	r0, [r5, #0]
 80060ea:	0635      	lsls	r5, r6, #24
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	d501      	bpl.n	80060f4 <_printf_i+0x1c4>
 80060f0:	6019      	str	r1, [r3, #0]
 80060f2:	e002      	b.n	80060fa <_printf_i+0x1ca>
 80060f4:	0670      	lsls	r0, r6, #25
 80060f6:	d5fb      	bpl.n	80060f0 <_printf_i+0x1c0>
 80060f8:	8019      	strh	r1, [r3, #0]
 80060fa:	2300      	movs	r3, #0
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	4615      	mov	r5, r2
 8006100:	e7bc      	b.n	800607c <_printf_i+0x14c>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	1d1a      	adds	r2, r3, #4
 8006106:	602a      	str	r2, [r5, #0]
 8006108:	681d      	ldr	r5, [r3, #0]
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	2100      	movs	r1, #0
 800610e:	4628      	mov	r0, r5
 8006110:	f7fa f87e 	bl	8000210 <memchr>
 8006114:	b108      	cbz	r0, 800611a <_printf_i+0x1ea>
 8006116:	1b40      	subs	r0, r0, r5
 8006118:	6060      	str	r0, [r4, #4]
 800611a:	6863      	ldr	r3, [r4, #4]
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	2300      	movs	r3, #0
 8006120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006124:	e7aa      	b.n	800607c <_printf_i+0x14c>
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	462a      	mov	r2, r5
 800612a:	4649      	mov	r1, r9
 800612c:	4640      	mov	r0, r8
 800612e:	47d0      	blx	sl
 8006130:	3001      	adds	r0, #1
 8006132:	d0ad      	beq.n	8006090 <_printf_i+0x160>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	079b      	lsls	r3, r3, #30
 8006138:	d413      	bmi.n	8006162 <_printf_i+0x232>
 800613a:	68e0      	ldr	r0, [r4, #12]
 800613c:	9b03      	ldr	r3, [sp, #12]
 800613e:	4298      	cmp	r0, r3
 8006140:	bfb8      	it	lt
 8006142:	4618      	movlt	r0, r3
 8006144:	e7a6      	b.n	8006094 <_printf_i+0x164>
 8006146:	2301      	movs	r3, #1
 8006148:	4632      	mov	r2, r6
 800614a:	4649      	mov	r1, r9
 800614c:	4640      	mov	r0, r8
 800614e:	47d0      	blx	sl
 8006150:	3001      	adds	r0, #1
 8006152:	d09d      	beq.n	8006090 <_printf_i+0x160>
 8006154:	3501      	adds	r5, #1
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	9903      	ldr	r1, [sp, #12]
 800615a:	1a5b      	subs	r3, r3, r1
 800615c:	42ab      	cmp	r3, r5
 800615e:	dcf2      	bgt.n	8006146 <_printf_i+0x216>
 8006160:	e7eb      	b.n	800613a <_printf_i+0x20a>
 8006162:	2500      	movs	r5, #0
 8006164:	f104 0619 	add.w	r6, r4, #25
 8006168:	e7f5      	b.n	8006156 <_printf_i+0x226>
 800616a:	bf00      	nop
 800616c:	0800895a 	.word	0x0800895a
 8006170:	0800896b 	.word	0x0800896b

08006174 <std>:
 8006174:	2300      	movs	r3, #0
 8006176:	b510      	push	{r4, lr}
 8006178:	4604      	mov	r4, r0
 800617a:	e9c0 3300 	strd	r3, r3, [r0]
 800617e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006182:	6083      	str	r3, [r0, #8]
 8006184:	8181      	strh	r1, [r0, #12]
 8006186:	6643      	str	r3, [r0, #100]	; 0x64
 8006188:	81c2      	strh	r2, [r0, #14]
 800618a:	6183      	str	r3, [r0, #24]
 800618c:	4619      	mov	r1, r3
 800618e:	2208      	movs	r2, #8
 8006190:	305c      	adds	r0, #92	; 0x5c
 8006192:	f000 f8f4 	bl	800637e <memset>
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <std+0x58>)
 8006198:	6263      	str	r3, [r4, #36]	; 0x24
 800619a:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <std+0x5c>)
 800619c:	62a3      	str	r3, [r4, #40]	; 0x28
 800619e:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <std+0x60>)
 80061a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061a2:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <std+0x64>)
 80061a4:	6323      	str	r3, [r4, #48]	; 0x30
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <std+0x68>)
 80061a8:	6224      	str	r4, [r4, #32]
 80061aa:	429c      	cmp	r4, r3
 80061ac:	d006      	beq.n	80061bc <std+0x48>
 80061ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80061b2:	4294      	cmp	r4, r2
 80061b4:	d002      	beq.n	80061bc <std+0x48>
 80061b6:	33d0      	adds	r3, #208	; 0xd0
 80061b8:	429c      	cmp	r4, r3
 80061ba:	d105      	bne.n	80061c8 <std+0x54>
 80061bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c4:	f000 b958 	b.w	8006478 <__retarget_lock_init_recursive>
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	bf00      	nop
 80061cc:	080062f9 	.word	0x080062f9
 80061d0:	0800631b 	.word	0x0800631b
 80061d4:	08006353 	.word	0x08006353
 80061d8:	08006377 	.word	0x08006377
 80061dc:	200003ec 	.word	0x200003ec

080061e0 <stdio_exit_handler>:
 80061e0:	4a02      	ldr	r2, [pc, #8]	; (80061ec <stdio_exit_handler+0xc>)
 80061e2:	4903      	ldr	r1, [pc, #12]	; (80061f0 <stdio_exit_handler+0x10>)
 80061e4:	4803      	ldr	r0, [pc, #12]	; (80061f4 <stdio_exit_handler+0x14>)
 80061e6:	f000 b869 	b.w	80062bc <_fwalk_sglue>
 80061ea:	bf00      	nop
 80061ec:	2000000c 	.word	0x2000000c
 80061f0:	08007b79 	.word	0x08007b79
 80061f4:	20000018 	.word	0x20000018

080061f8 <cleanup_stdio>:
 80061f8:	6841      	ldr	r1, [r0, #4]
 80061fa:	4b0c      	ldr	r3, [pc, #48]	; (800622c <cleanup_stdio+0x34>)
 80061fc:	4299      	cmp	r1, r3
 80061fe:	b510      	push	{r4, lr}
 8006200:	4604      	mov	r4, r0
 8006202:	d001      	beq.n	8006208 <cleanup_stdio+0x10>
 8006204:	f001 fcb8 	bl	8007b78 <_fflush_r>
 8006208:	68a1      	ldr	r1, [r4, #8]
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <cleanup_stdio+0x38>)
 800620c:	4299      	cmp	r1, r3
 800620e:	d002      	beq.n	8006216 <cleanup_stdio+0x1e>
 8006210:	4620      	mov	r0, r4
 8006212:	f001 fcb1 	bl	8007b78 <_fflush_r>
 8006216:	68e1      	ldr	r1, [r4, #12]
 8006218:	4b06      	ldr	r3, [pc, #24]	; (8006234 <cleanup_stdio+0x3c>)
 800621a:	4299      	cmp	r1, r3
 800621c:	d004      	beq.n	8006228 <cleanup_stdio+0x30>
 800621e:	4620      	mov	r0, r4
 8006220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006224:	f001 bca8 	b.w	8007b78 <_fflush_r>
 8006228:	bd10      	pop	{r4, pc}
 800622a:	bf00      	nop
 800622c:	200003ec 	.word	0x200003ec
 8006230:	20000454 	.word	0x20000454
 8006234:	200004bc 	.word	0x200004bc

08006238 <global_stdio_init.part.0>:
 8006238:	b510      	push	{r4, lr}
 800623a:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <global_stdio_init.part.0+0x30>)
 800623c:	4c0b      	ldr	r4, [pc, #44]	; (800626c <global_stdio_init.part.0+0x34>)
 800623e:	4a0c      	ldr	r2, [pc, #48]	; (8006270 <global_stdio_init.part.0+0x38>)
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	4620      	mov	r0, r4
 8006244:	2200      	movs	r2, #0
 8006246:	2104      	movs	r1, #4
 8006248:	f7ff ff94 	bl	8006174 <std>
 800624c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006250:	2201      	movs	r2, #1
 8006252:	2109      	movs	r1, #9
 8006254:	f7ff ff8e 	bl	8006174 <std>
 8006258:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800625c:	2202      	movs	r2, #2
 800625e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006262:	2112      	movs	r1, #18
 8006264:	f7ff bf86 	b.w	8006174 <std>
 8006268:	20000524 	.word	0x20000524
 800626c:	200003ec 	.word	0x200003ec
 8006270:	080061e1 	.word	0x080061e1

08006274 <__sfp_lock_acquire>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__sfp_lock_acquire+0x8>)
 8006276:	f000 b900 	b.w	800647a <__retarget_lock_acquire_recursive>
 800627a:	bf00      	nop
 800627c:	2000052d 	.word	0x2000052d

08006280 <__sfp_lock_release>:
 8006280:	4801      	ldr	r0, [pc, #4]	; (8006288 <__sfp_lock_release+0x8>)
 8006282:	f000 b8fb 	b.w	800647c <__retarget_lock_release_recursive>
 8006286:	bf00      	nop
 8006288:	2000052d 	.word	0x2000052d

0800628c <__sinit>:
 800628c:	b510      	push	{r4, lr}
 800628e:	4604      	mov	r4, r0
 8006290:	f7ff fff0 	bl	8006274 <__sfp_lock_acquire>
 8006294:	6a23      	ldr	r3, [r4, #32]
 8006296:	b11b      	cbz	r3, 80062a0 <__sinit+0x14>
 8006298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800629c:	f7ff bff0 	b.w	8006280 <__sfp_lock_release>
 80062a0:	4b04      	ldr	r3, [pc, #16]	; (80062b4 <__sinit+0x28>)
 80062a2:	6223      	str	r3, [r4, #32]
 80062a4:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <__sinit+0x2c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f5      	bne.n	8006298 <__sinit+0xc>
 80062ac:	f7ff ffc4 	bl	8006238 <global_stdio_init.part.0>
 80062b0:	e7f2      	b.n	8006298 <__sinit+0xc>
 80062b2:	bf00      	nop
 80062b4:	080061f9 	.word	0x080061f9
 80062b8:	20000524 	.word	0x20000524

080062bc <_fwalk_sglue>:
 80062bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c0:	4607      	mov	r7, r0
 80062c2:	4688      	mov	r8, r1
 80062c4:	4614      	mov	r4, r2
 80062c6:	2600      	movs	r6, #0
 80062c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062cc:	f1b9 0901 	subs.w	r9, r9, #1
 80062d0:	d505      	bpl.n	80062de <_fwalk_sglue+0x22>
 80062d2:	6824      	ldr	r4, [r4, #0]
 80062d4:	2c00      	cmp	r4, #0
 80062d6:	d1f7      	bne.n	80062c8 <_fwalk_sglue+0xc>
 80062d8:	4630      	mov	r0, r6
 80062da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062de:	89ab      	ldrh	r3, [r5, #12]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d907      	bls.n	80062f4 <_fwalk_sglue+0x38>
 80062e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062e8:	3301      	adds	r3, #1
 80062ea:	d003      	beq.n	80062f4 <_fwalk_sglue+0x38>
 80062ec:	4629      	mov	r1, r5
 80062ee:	4638      	mov	r0, r7
 80062f0:	47c0      	blx	r8
 80062f2:	4306      	orrs	r6, r0
 80062f4:	3568      	adds	r5, #104	; 0x68
 80062f6:	e7e9      	b.n	80062cc <_fwalk_sglue+0x10>

080062f8 <__sread>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006300:	f000 f86c 	bl	80063dc <_read_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	bfab      	itete	ge
 8006308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800630a:	89a3      	ldrhlt	r3, [r4, #12]
 800630c:	181b      	addge	r3, r3, r0
 800630e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006312:	bfac      	ite	ge
 8006314:	6563      	strge	r3, [r4, #84]	; 0x54
 8006316:	81a3      	strhlt	r3, [r4, #12]
 8006318:	bd10      	pop	{r4, pc}

0800631a <__swrite>:
 800631a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631e:	461f      	mov	r7, r3
 8006320:	898b      	ldrh	r3, [r1, #12]
 8006322:	05db      	lsls	r3, r3, #23
 8006324:	4605      	mov	r5, r0
 8006326:	460c      	mov	r4, r1
 8006328:	4616      	mov	r6, r2
 800632a:	d505      	bpl.n	8006338 <__swrite+0x1e>
 800632c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006330:	2302      	movs	r3, #2
 8006332:	2200      	movs	r2, #0
 8006334:	f000 f840 	bl	80063b8 <_lseek_r>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800633e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006342:	81a3      	strh	r3, [r4, #12]
 8006344:	4632      	mov	r2, r6
 8006346:	463b      	mov	r3, r7
 8006348:	4628      	mov	r0, r5
 800634a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800634e:	f000 b857 	b.w	8006400 <_write_r>

08006352 <__sseek>:
 8006352:	b510      	push	{r4, lr}
 8006354:	460c      	mov	r4, r1
 8006356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635a:	f000 f82d 	bl	80063b8 <_lseek_r>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	bf15      	itete	ne
 8006364:	6560      	strne	r0, [r4, #84]	; 0x54
 8006366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800636a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800636e:	81a3      	strheq	r3, [r4, #12]
 8006370:	bf18      	it	ne
 8006372:	81a3      	strhne	r3, [r4, #12]
 8006374:	bd10      	pop	{r4, pc}

08006376 <__sclose>:
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 b80d 	b.w	8006398 <_close_r>

0800637e <memset>:
 800637e:	4402      	add	r2, r0
 8006380:	4603      	mov	r3, r0
 8006382:	4293      	cmp	r3, r2
 8006384:	d100      	bne.n	8006388 <memset+0xa>
 8006386:	4770      	bx	lr
 8006388:	f803 1b01 	strb.w	r1, [r3], #1
 800638c:	e7f9      	b.n	8006382 <memset+0x4>
	...

08006390 <_localeconv_r>:
 8006390:	4800      	ldr	r0, [pc, #0]	; (8006394 <_localeconv_r+0x4>)
 8006392:	4770      	bx	lr
 8006394:	20000158 	.word	0x20000158

08006398 <_close_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d06      	ldr	r5, [pc, #24]	; (80063b4 <_close_r+0x1c>)
 800639c:	2300      	movs	r3, #0
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	f7fb fdc5 	bl	8001f32 <_close>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_close_r+0x1a>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_close_r+0x1a>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20000528 	.word	0x20000528

080063b8 <_lseek_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	; (80063d8 <_lseek_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fb fdda 	bl	8001f80 <_lseek>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_lseek_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_lseek_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	20000528 	.word	0x20000528

080063dc <_read_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	; (80063fc <_read_r+0x20>)
 80063e0:	4604      	mov	r4, r0
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7fb fd68 	bl	8001ec0 <_read>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_read_r+0x1e>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_read_r+0x1e>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	20000528 	.word	0x20000528

08006400 <_write_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d07      	ldr	r5, [pc, #28]	; (8006420 <_write_r+0x20>)
 8006404:	4604      	mov	r4, r0
 8006406:	4608      	mov	r0, r1
 8006408:	4611      	mov	r1, r2
 800640a:	2200      	movs	r2, #0
 800640c:	602a      	str	r2, [r5, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7fb fd73 	bl	8001efa <_write>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_write_r+0x1e>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_write_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	20000528 	.word	0x20000528

08006424 <__errno>:
 8006424:	4b01      	ldr	r3, [pc, #4]	; (800642c <__errno+0x8>)
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000064 	.word	0x20000064

08006430 <__libc_init_array>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4d0d      	ldr	r5, [pc, #52]	; (8006468 <__libc_init_array+0x38>)
 8006434:	4c0d      	ldr	r4, [pc, #52]	; (800646c <__libc_init_array+0x3c>)
 8006436:	1b64      	subs	r4, r4, r5
 8006438:	10a4      	asrs	r4, r4, #2
 800643a:	2600      	movs	r6, #0
 800643c:	42a6      	cmp	r6, r4
 800643e:	d109      	bne.n	8006454 <__libc_init_array+0x24>
 8006440:	4d0b      	ldr	r5, [pc, #44]	; (8006470 <__libc_init_array+0x40>)
 8006442:	4c0c      	ldr	r4, [pc, #48]	; (8006474 <__libc_init_array+0x44>)
 8006444:	f002 fa66 	bl	8008914 <_init>
 8006448:	1b64      	subs	r4, r4, r5
 800644a:	10a4      	asrs	r4, r4, #2
 800644c:	2600      	movs	r6, #0
 800644e:	42a6      	cmp	r6, r4
 8006450:	d105      	bne.n	800645e <__libc_init_array+0x2e>
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	f855 3b04 	ldr.w	r3, [r5], #4
 8006458:	4798      	blx	r3
 800645a:	3601      	adds	r6, #1
 800645c:	e7ee      	b.n	800643c <__libc_init_array+0xc>
 800645e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006462:	4798      	blx	r3
 8006464:	3601      	adds	r6, #1
 8006466:	e7f2      	b.n	800644e <__libc_init_array+0x1e>
 8006468:	08008d38 	.word	0x08008d38
 800646c:	08008d38 	.word	0x08008d38
 8006470:	08008d38 	.word	0x08008d38
 8006474:	08008d3c 	.word	0x08008d3c

08006478 <__retarget_lock_init_recursive>:
 8006478:	4770      	bx	lr

0800647a <__retarget_lock_acquire_recursive>:
 800647a:	4770      	bx	lr

0800647c <__retarget_lock_release_recursive>:
 800647c:	4770      	bx	lr

0800647e <quorem>:
 800647e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006482:	6903      	ldr	r3, [r0, #16]
 8006484:	690c      	ldr	r4, [r1, #16]
 8006486:	42a3      	cmp	r3, r4
 8006488:	4607      	mov	r7, r0
 800648a:	db7e      	blt.n	800658a <quorem+0x10c>
 800648c:	3c01      	subs	r4, #1
 800648e:	f101 0814 	add.w	r8, r1, #20
 8006492:	f100 0514 	add.w	r5, r0, #20
 8006496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a4:	3301      	adds	r3, #1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b4:	d331      	bcc.n	800651a <quorem+0x9c>
 80064b6:	f04f 0e00 	mov.w	lr, #0
 80064ba:	4640      	mov	r0, r8
 80064bc:	46ac      	mov	ip, r5
 80064be:	46f2      	mov	sl, lr
 80064c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c4:	b293      	uxth	r3, r2
 80064c6:	fb06 e303 	mla	r3, r6, r3, lr
 80064ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ce:	0c1a      	lsrs	r2, r3, #16
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ebaa 0303 	sub.w	r3, sl, r3
 80064d6:	f8dc a000 	ldr.w	sl, [ip]
 80064da:	fa13 f38a 	uxtah	r3, r3, sl
 80064de:	fb06 220e 	mla	r2, r6, lr, r2
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ea:	b292      	uxth	r2, r2
 80064ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80064f8:	4581      	cmp	r9, r0
 80064fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006506:	d2db      	bcs.n	80064c0 <quorem+0x42>
 8006508:	f855 300b 	ldr.w	r3, [r5, fp]
 800650c:	b92b      	cbnz	r3, 800651a <quorem+0x9c>
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	3b04      	subs	r3, #4
 8006512:	429d      	cmp	r5, r3
 8006514:	461a      	mov	r2, r3
 8006516:	d32c      	bcc.n	8006572 <quorem+0xf4>
 8006518:	613c      	str	r4, [r7, #16]
 800651a:	4638      	mov	r0, r7
 800651c:	f001 f9a6 	bl	800786c <__mcmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	db22      	blt.n	800656a <quorem+0xec>
 8006524:	3601      	adds	r6, #1
 8006526:	4629      	mov	r1, r5
 8006528:	2000      	movs	r0, #0
 800652a:	f858 2b04 	ldr.w	r2, [r8], #4
 800652e:	f8d1 c000 	ldr.w	ip, [r1]
 8006532:	b293      	uxth	r3, r2
 8006534:	1ac3      	subs	r3, r0, r3
 8006536:	0c12      	lsrs	r2, r2, #16
 8006538:	fa13 f38c 	uxtah	r3, r3, ip
 800653c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654a:	45c1      	cmp	r9, r8
 800654c:	f841 3b04 	str.w	r3, [r1], #4
 8006550:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006554:	d2e9      	bcs.n	800652a <quorem+0xac>
 8006556:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800655e:	b922      	cbnz	r2, 800656a <quorem+0xec>
 8006560:	3b04      	subs	r3, #4
 8006562:	429d      	cmp	r5, r3
 8006564:	461a      	mov	r2, r3
 8006566:	d30a      	bcc.n	800657e <quorem+0x100>
 8006568:	613c      	str	r4, [r7, #16]
 800656a:	4630      	mov	r0, r6
 800656c:	b003      	add	sp, #12
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	3b04      	subs	r3, #4
 8006576:	2a00      	cmp	r2, #0
 8006578:	d1ce      	bne.n	8006518 <quorem+0x9a>
 800657a:	3c01      	subs	r4, #1
 800657c:	e7c9      	b.n	8006512 <quorem+0x94>
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	3b04      	subs	r3, #4
 8006582:	2a00      	cmp	r2, #0
 8006584:	d1f0      	bne.n	8006568 <quorem+0xea>
 8006586:	3c01      	subs	r4, #1
 8006588:	e7eb      	b.n	8006562 <quorem+0xe4>
 800658a:	2000      	movs	r0, #0
 800658c:	e7ee      	b.n	800656c <quorem+0xee>
	...

08006590 <_dtoa_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b04 	vpush	{d8-d9}
 8006598:	69c5      	ldr	r5, [r0, #28]
 800659a:	b093      	sub	sp, #76	; 0x4c
 800659c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80065a0:	ec57 6b10 	vmov	r6, r7, d0
 80065a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065a8:	9107      	str	r1, [sp, #28]
 80065aa:	4604      	mov	r4, r0
 80065ac:	920a      	str	r2, [sp, #40]	; 0x28
 80065ae:	930d      	str	r3, [sp, #52]	; 0x34
 80065b0:	b975      	cbnz	r5, 80065d0 <_dtoa_r+0x40>
 80065b2:	2010      	movs	r0, #16
 80065b4:	f000 fe2a 	bl	800720c <malloc>
 80065b8:	4602      	mov	r2, r0
 80065ba:	61e0      	str	r0, [r4, #28]
 80065bc:	b920      	cbnz	r0, 80065c8 <_dtoa_r+0x38>
 80065be:	4bae      	ldr	r3, [pc, #696]	; (8006878 <_dtoa_r+0x2e8>)
 80065c0:	21ef      	movs	r1, #239	; 0xef
 80065c2:	48ae      	ldr	r0, [pc, #696]	; (800687c <_dtoa_r+0x2ec>)
 80065c4:	f001 fb1e 	bl	8007c04 <__assert_func>
 80065c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065cc:	6005      	str	r5, [r0, #0]
 80065ce:	60c5      	str	r5, [r0, #12]
 80065d0:	69e3      	ldr	r3, [r4, #28]
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	b151      	cbz	r1, 80065ec <_dtoa_r+0x5c>
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	604a      	str	r2, [r1, #4]
 80065da:	2301      	movs	r3, #1
 80065dc:	4093      	lsls	r3, r2
 80065de:	608b      	str	r3, [r1, #8]
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 ff07 	bl	80073f4 <_Bfree>
 80065e6:	69e3      	ldr	r3, [r4, #28]
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	1e3b      	subs	r3, r7, #0
 80065ee:	bfbb      	ittet	lt
 80065f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	9303      	strlt	r3, [sp, #12]
 80065f6:	2300      	movge	r3, #0
 80065f8:	2201      	movlt	r2, #1
 80065fa:	bfac      	ite	ge
 80065fc:	f8c8 3000 	strge.w	r3, [r8]
 8006600:	f8c8 2000 	strlt.w	r2, [r8]
 8006604:	4b9e      	ldr	r3, [pc, #632]	; (8006880 <_dtoa_r+0x2f0>)
 8006606:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800660a:	ea33 0308 	bics.w	r3, r3, r8
 800660e:	d11b      	bne.n	8006648 <_dtoa_r+0xb8>
 8006610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006612:	f242 730f 	movw	r3, #9999	; 0x270f
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800661c:	4333      	orrs	r3, r6
 800661e:	f000 8593 	beq.w	8007148 <_dtoa_r+0xbb8>
 8006622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006624:	b963      	cbnz	r3, 8006640 <_dtoa_r+0xb0>
 8006626:	4b97      	ldr	r3, [pc, #604]	; (8006884 <_dtoa_r+0x2f4>)
 8006628:	e027      	b.n	800667a <_dtoa_r+0xea>
 800662a:	4b97      	ldr	r3, [pc, #604]	; (8006888 <_dtoa_r+0x2f8>)
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	9800      	ldr	r0, [sp, #0]
 8006636:	b013      	add	sp, #76	; 0x4c
 8006638:	ecbd 8b04 	vpop	{d8-d9}
 800663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006640:	4b90      	ldr	r3, [pc, #576]	; (8006884 <_dtoa_r+0x2f4>)
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	3303      	adds	r3, #3
 8006646:	e7f3      	b.n	8006630 <_dtoa_r+0xa0>
 8006648:	ed9d 7b02 	vldr	d7, [sp, #8]
 800664c:	2200      	movs	r2, #0
 800664e:	ec51 0b17 	vmov	r0, r1, d7
 8006652:	eeb0 8a47 	vmov.f32	s16, s14
 8006656:	eef0 8a67 	vmov.f32	s17, s15
 800665a:	2300      	movs	r3, #0
 800665c:	f7fa fa54 	bl	8000b08 <__aeabi_dcmpeq>
 8006660:	4681      	mov	r9, r0
 8006662:	b160      	cbz	r0, 800667e <_dtoa_r+0xee>
 8006664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006666:	2301      	movs	r3, #1
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8568 	beq.w	8007142 <_dtoa_r+0xbb2>
 8006672:	4b86      	ldr	r3, [pc, #536]	; (800688c <_dtoa_r+0x2fc>)
 8006674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	3b01      	subs	r3, #1
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	e7da      	b.n	8006634 <_dtoa_r+0xa4>
 800667e:	aa10      	add	r2, sp, #64	; 0x40
 8006680:	a911      	add	r1, sp, #68	; 0x44
 8006682:	4620      	mov	r0, r4
 8006684:	eeb0 0a48 	vmov.f32	s0, s16
 8006688:	eef0 0a68 	vmov.f32	s1, s17
 800668c:	f001 f994 	bl	80079b8 <__d2b>
 8006690:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006694:	4682      	mov	sl, r0
 8006696:	2d00      	cmp	r5, #0
 8006698:	d07f      	beq.n	800679a <_dtoa_r+0x20a>
 800669a:	ee18 3a90 	vmov	r3, s17
 800669e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066a6:	ec51 0b18 	vmov	r0, r1, d8
 80066aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80066b6:	4619      	mov	r1, r3
 80066b8:	2200      	movs	r2, #0
 80066ba:	4b75      	ldr	r3, [pc, #468]	; (8006890 <_dtoa_r+0x300>)
 80066bc:	f7f9 fe04 	bl	80002c8 <__aeabi_dsub>
 80066c0:	a367      	add	r3, pc, #412	; (adr r3, 8006860 <_dtoa_r+0x2d0>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 ffb7 	bl	8000638 <__aeabi_dmul>
 80066ca:	a367      	add	r3, pc, #412	; (adr r3, 8006868 <_dtoa_r+0x2d8>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f7f9 fdfc 	bl	80002cc <__adddf3>
 80066d4:	4606      	mov	r6, r0
 80066d6:	4628      	mov	r0, r5
 80066d8:	460f      	mov	r7, r1
 80066da:	f7f9 ff43 	bl	8000564 <__aeabi_i2d>
 80066de:	a364      	add	r3, pc, #400	; (adr r3, 8006870 <_dtoa_r+0x2e0>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f7f9 ffa8 	bl	8000638 <__aeabi_dmul>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7f9 fdec 	bl	80002cc <__adddf3>
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	f7fa fa4e 	bl	8000b98 <__aeabi_d2iz>
 80066fc:	2200      	movs	r2, #0
 80066fe:	4683      	mov	fp, r0
 8006700:	2300      	movs	r3, #0
 8006702:	4630      	mov	r0, r6
 8006704:	4639      	mov	r1, r7
 8006706:	f7fa fa09 	bl	8000b1c <__aeabi_dcmplt>
 800670a:	b148      	cbz	r0, 8006720 <_dtoa_r+0x190>
 800670c:	4658      	mov	r0, fp
 800670e:	f7f9 ff29 	bl	8000564 <__aeabi_i2d>
 8006712:	4632      	mov	r2, r6
 8006714:	463b      	mov	r3, r7
 8006716:	f7fa f9f7 	bl	8000b08 <__aeabi_dcmpeq>
 800671a:	b908      	cbnz	r0, 8006720 <_dtoa_r+0x190>
 800671c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006720:	f1bb 0f16 	cmp.w	fp, #22
 8006724:	d857      	bhi.n	80067d6 <_dtoa_r+0x246>
 8006726:	4b5b      	ldr	r3, [pc, #364]	; (8006894 <_dtoa_r+0x304>)
 8006728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	ec51 0b18 	vmov	r0, r1, d8
 8006734:	f7fa f9f2 	bl	8000b1c <__aeabi_dcmplt>
 8006738:	2800      	cmp	r0, #0
 800673a:	d04e      	beq.n	80067da <_dtoa_r+0x24a>
 800673c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006740:	2300      	movs	r3, #0
 8006742:	930c      	str	r3, [sp, #48]	; 0x30
 8006744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006746:	1b5b      	subs	r3, r3, r5
 8006748:	1e5a      	subs	r2, r3, #1
 800674a:	bf45      	ittet	mi
 800674c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006750:	9305      	strmi	r3, [sp, #20]
 8006752:	2300      	movpl	r3, #0
 8006754:	2300      	movmi	r3, #0
 8006756:	9206      	str	r2, [sp, #24]
 8006758:	bf54      	ite	pl
 800675a:	9305      	strpl	r3, [sp, #20]
 800675c:	9306      	strmi	r3, [sp, #24]
 800675e:	f1bb 0f00 	cmp.w	fp, #0
 8006762:	db3c      	blt.n	80067de <_dtoa_r+0x24e>
 8006764:	9b06      	ldr	r3, [sp, #24]
 8006766:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800676a:	445b      	add	r3, fp
 800676c:	9306      	str	r3, [sp, #24]
 800676e:	2300      	movs	r3, #0
 8006770:	9308      	str	r3, [sp, #32]
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	2b09      	cmp	r3, #9
 8006776:	d868      	bhi.n	800684a <_dtoa_r+0x2ba>
 8006778:	2b05      	cmp	r3, #5
 800677a:	bfc4      	itt	gt
 800677c:	3b04      	subgt	r3, #4
 800677e:	9307      	strgt	r3, [sp, #28]
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	f1a3 0302 	sub.w	r3, r3, #2
 8006786:	bfcc      	ite	gt
 8006788:	2500      	movgt	r5, #0
 800678a:	2501      	movle	r5, #1
 800678c:	2b03      	cmp	r3, #3
 800678e:	f200 8085 	bhi.w	800689c <_dtoa_r+0x30c>
 8006792:	e8df f003 	tbb	[pc, r3]
 8006796:	3b2e      	.short	0x3b2e
 8006798:	5839      	.short	0x5839
 800679a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800679e:	441d      	add	r5, r3
 80067a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	bfc1      	itttt	gt
 80067a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80067b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80067b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80067b8:	bfd6      	itet	le
 80067ba:	f1c3 0320 	rsble	r3, r3, #32
 80067be:	ea48 0003 	orrgt.w	r0, r8, r3
 80067c2:	fa06 f003 	lslle.w	r0, r6, r3
 80067c6:	f7f9 febd 	bl	8000544 <__aeabi_ui2d>
 80067ca:	2201      	movs	r2, #1
 80067cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80067d0:	3d01      	subs	r5, #1
 80067d2:	920e      	str	r2, [sp, #56]	; 0x38
 80067d4:	e76f      	b.n	80066b6 <_dtoa_r+0x126>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e7b3      	b.n	8006742 <_dtoa_r+0x1b2>
 80067da:	900c      	str	r0, [sp, #48]	; 0x30
 80067dc:	e7b2      	b.n	8006744 <_dtoa_r+0x1b4>
 80067de:	9b05      	ldr	r3, [sp, #20]
 80067e0:	eba3 030b 	sub.w	r3, r3, fp
 80067e4:	9305      	str	r3, [sp, #20]
 80067e6:	f1cb 0300 	rsb	r3, fp, #0
 80067ea:	9308      	str	r3, [sp, #32]
 80067ec:	2300      	movs	r3, #0
 80067ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f0:	e7bf      	b.n	8006772 <_dtoa_r+0x1e2>
 80067f2:	2300      	movs	r3, #0
 80067f4:	9309      	str	r3, [sp, #36]	; 0x24
 80067f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	dc52      	bgt.n	80068a2 <_dtoa_r+0x312>
 80067fc:	2301      	movs	r3, #1
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	461a      	mov	r2, r3
 8006804:	920a      	str	r2, [sp, #40]	; 0x28
 8006806:	e00b      	b.n	8006820 <_dtoa_r+0x290>
 8006808:	2301      	movs	r3, #1
 800680a:	e7f3      	b.n	80067f4 <_dtoa_r+0x264>
 800680c:	2300      	movs	r3, #0
 800680e:	9309      	str	r3, [sp, #36]	; 0x24
 8006810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006812:	445b      	add	r3, fp
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	3301      	adds	r3, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	bfb8      	it	lt
 800681e:	2301      	movlt	r3, #1
 8006820:	69e0      	ldr	r0, [r4, #28]
 8006822:	2100      	movs	r1, #0
 8006824:	2204      	movs	r2, #4
 8006826:	f102 0614 	add.w	r6, r2, #20
 800682a:	429e      	cmp	r6, r3
 800682c:	d93d      	bls.n	80068aa <_dtoa_r+0x31a>
 800682e:	6041      	str	r1, [r0, #4]
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fd9f 	bl	8007374 <_Balloc>
 8006836:	9000      	str	r0, [sp, #0]
 8006838:	2800      	cmp	r0, #0
 800683a:	d139      	bne.n	80068b0 <_dtoa_r+0x320>
 800683c:	4b16      	ldr	r3, [pc, #88]	; (8006898 <_dtoa_r+0x308>)
 800683e:	4602      	mov	r2, r0
 8006840:	f240 11af 	movw	r1, #431	; 0x1af
 8006844:	e6bd      	b.n	80065c2 <_dtoa_r+0x32>
 8006846:	2301      	movs	r3, #1
 8006848:	e7e1      	b.n	800680e <_dtoa_r+0x27e>
 800684a:	2501      	movs	r5, #1
 800684c:	2300      	movs	r3, #0
 800684e:	9307      	str	r3, [sp, #28]
 8006850:	9509      	str	r5, [sp, #36]	; 0x24
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	2200      	movs	r2, #0
 800685c:	2312      	movs	r3, #18
 800685e:	e7d1      	b.n	8006804 <_dtoa_r+0x274>
 8006860:	636f4361 	.word	0x636f4361
 8006864:	3fd287a7 	.word	0x3fd287a7
 8006868:	8b60c8b3 	.word	0x8b60c8b3
 800686c:	3fc68a28 	.word	0x3fc68a28
 8006870:	509f79fb 	.word	0x509f79fb
 8006874:	3fd34413 	.word	0x3fd34413
 8006878:	08008989 	.word	0x08008989
 800687c:	080089a0 	.word	0x080089a0
 8006880:	7ff00000 	.word	0x7ff00000
 8006884:	08008985 	.word	0x08008985
 8006888:	0800897c 	.word	0x0800897c
 800688c:	08008959 	.word	0x08008959
 8006890:	3ff80000 	.word	0x3ff80000
 8006894:	08008a90 	.word	0x08008a90
 8006898:	080089f8 	.word	0x080089f8
 800689c:	2301      	movs	r3, #1
 800689e:	9309      	str	r3, [sp, #36]	; 0x24
 80068a0:	e7d7      	b.n	8006852 <_dtoa_r+0x2c2>
 80068a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	e7ba      	b.n	8006820 <_dtoa_r+0x290>
 80068aa:	3101      	adds	r1, #1
 80068ac:	0052      	lsls	r2, r2, #1
 80068ae:	e7ba      	b.n	8006826 <_dtoa_r+0x296>
 80068b0:	69e3      	ldr	r3, [r4, #28]
 80068b2:	9a00      	ldr	r2, [sp, #0]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	9b04      	ldr	r3, [sp, #16]
 80068b8:	2b0e      	cmp	r3, #14
 80068ba:	f200 80a8 	bhi.w	8006a0e <_dtoa_r+0x47e>
 80068be:	2d00      	cmp	r5, #0
 80068c0:	f000 80a5 	beq.w	8006a0e <_dtoa_r+0x47e>
 80068c4:	f1bb 0f00 	cmp.w	fp, #0
 80068c8:	dd38      	ble.n	800693c <_dtoa_r+0x3ac>
 80068ca:	4bc0      	ldr	r3, [pc, #768]	; (8006bcc <_dtoa_r+0x63c>)
 80068cc:	f00b 020f 	and.w	r2, fp, #15
 80068d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80068dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80068e0:	d019      	beq.n	8006916 <_dtoa_r+0x386>
 80068e2:	4bbb      	ldr	r3, [pc, #748]	; (8006bd0 <_dtoa_r+0x640>)
 80068e4:	ec51 0b18 	vmov	r0, r1, d8
 80068e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068ec:	f7f9 ffce 	bl	800088c <__aeabi_ddiv>
 80068f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f4:	f008 080f 	and.w	r8, r8, #15
 80068f8:	2503      	movs	r5, #3
 80068fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006bd0 <_dtoa_r+0x640>
 80068fe:	f1b8 0f00 	cmp.w	r8, #0
 8006902:	d10a      	bne.n	800691a <_dtoa_r+0x38a>
 8006904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006908:	4632      	mov	r2, r6
 800690a:	463b      	mov	r3, r7
 800690c:	f7f9 ffbe 	bl	800088c <__aeabi_ddiv>
 8006910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006914:	e02b      	b.n	800696e <_dtoa_r+0x3de>
 8006916:	2502      	movs	r5, #2
 8006918:	e7ef      	b.n	80068fa <_dtoa_r+0x36a>
 800691a:	f018 0f01 	tst.w	r8, #1
 800691e:	d008      	beq.n	8006932 <_dtoa_r+0x3a2>
 8006920:	4630      	mov	r0, r6
 8006922:	4639      	mov	r1, r7
 8006924:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006928:	f7f9 fe86 	bl	8000638 <__aeabi_dmul>
 800692c:	3501      	adds	r5, #1
 800692e:	4606      	mov	r6, r0
 8006930:	460f      	mov	r7, r1
 8006932:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006936:	f109 0908 	add.w	r9, r9, #8
 800693a:	e7e0      	b.n	80068fe <_dtoa_r+0x36e>
 800693c:	f000 809f 	beq.w	8006a7e <_dtoa_r+0x4ee>
 8006940:	f1cb 0600 	rsb	r6, fp, #0
 8006944:	4ba1      	ldr	r3, [pc, #644]	; (8006bcc <_dtoa_r+0x63c>)
 8006946:	4fa2      	ldr	r7, [pc, #648]	; (8006bd0 <_dtoa_r+0x640>)
 8006948:	f006 020f 	and.w	r2, r6, #15
 800694c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	ec51 0b18 	vmov	r0, r1, d8
 8006958:	f7f9 fe6e 	bl	8000638 <__aeabi_dmul>
 800695c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006960:	1136      	asrs	r6, r6, #4
 8006962:	2300      	movs	r3, #0
 8006964:	2502      	movs	r5, #2
 8006966:	2e00      	cmp	r6, #0
 8006968:	d17e      	bne.n	8006a68 <_dtoa_r+0x4d8>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1d0      	bne.n	8006910 <_dtoa_r+0x380>
 800696e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006970:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8084 	beq.w	8006a82 <_dtoa_r+0x4f2>
 800697a:	4b96      	ldr	r3, [pc, #600]	; (8006bd4 <_dtoa_r+0x644>)
 800697c:	2200      	movs	r2, #0
 800697e:	4640      	mov	r0, r8
 8006980:	4649      	mov	r1, r9
 8006982:	f7fa f8cb 	bl	8000b1c <__aeabi_dcmplt>
 8006986:	2800      	cmp	r0, #0
 8006988:	d07b      	beq.n	8006a82 <_dtoa_r+0x4f2>
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d078      	beq.n	8006a82 <_dtoa_r+0x4f2>
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	dd39      	ble.n	8006a0a <_dtoa_r+0x47a>
 8006996:	4b90      	ldr	r3, [pc, #576]	; (8006bd8 <_dtoa_r+0x648>)
 8006998:	2200      	movs	r2, #0
 800699a:	4640      	mov	r0, r8
 800699c:	4649      	mov	r1, r9
 800699e:	f7f9 fe4b 	bl	8000638 <__aeabi_dmul>
 80069a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a6:	9e01      	ldr	r6, [sp, #4]
 80069a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80069ac:	3501      	adds	r5, #1
 80069ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7f9 fdd6 	bl	8000564 <__aeabi_i2d>
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	f7f9 fe3c 	bl	8000638 <__aeabi_dmul>
 80069c0:	4b86      	ldr	r3, [pc, #536]	; (8006bdc <_dtoa_r+0x64c>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f7f9 fc82 	bl	80002cc <__adddf3>
 80069c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80069cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d0:	9303      	str	r3, [sp, #12]
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	d158      	bne.n	8006a88 <_dtoa_r+0x4f8>
 80069d6:	4b82      	ldr	r3, [pc, #520]	; (8006be0 <_dtoa_r+0x650>)
 80069d8:	2200      	movs	r2, #0
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 fc73 	bl	80002c8 <__aeabi_dsub>
 80069e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069e6:	4680      	mov	r8, r0
 80069e8:	4689      	mov	r9, r1
 80069ea:	f7fa f8b5 	bl	8000b58 <__aeabi_dcmpgt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f040 8296 	bne.w	8006f20 <_dtoa_r+0x990>
 80069f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069f8:	4640      	mov	r0, r8
 80069fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069fe:	4649      	mov	r1, r9
 8006a00:	f7fa f88c 	bl	8000b1c <__aeabi_dcmplt>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f040 8289 	bne.w	8006f1c <_dtoa_r+0x98c>
 8006a0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f2c0 814e 	blt.w	8006cb2 <_dtoa_r+0x722>
 8006a16:	f1bb 0f0e 	cmp.w	fp, #14
 8006a1a:	f300 814a 	bgt.w	8006cb2 <_dtoa_r+0x722>
 8006a1e:	4b6b      	ldr	r3, [pc, #428]	; (8006bcc <_dtoa_r+0x63c>)
 8006a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f280 80dc 	bge.w	8006be8 <_dtoa_r+0x658>
 8006a30:	9b04      	ldr	r3, [sp, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f300 80d8 	bgt.w	8006be8 <_dtoa_r+0x658>
 8006a38:	f040 826f 	bne.w	8006f1a <_dtoa_r+0x98a>
 8006a3c:	4b68      	ldr	r3, [pc, #416]	; (8006be0 <_dtoa_r+0x650>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7f9 fdf8 	bl	8000638 <__aeabi_dmul>
 8006a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a4c:	f7fa f87a 	bl	8000b44 <__aeabi_dcmpge>
 8006a50:	9e04      	ldr	r6, [sp, #16]
 8006a52:	4637      	mov	r7, r6
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f040 8245 	bne.w	8006ee4 <_dtoa_r+0x954>
 8006a5a:	9d00      	ldr	r5, [sp, #0]
 8006a5c:	2331      	movs	r3, #49	; 0x31
 8006a5e:	f805 3b01 	strb.w	r3, [r5], #1
 8006a62:	f10b 0b01 	add.w	fp, fp, #1
 8006a66:	e241      	b.n	8006eec <_dtoa_r+0x95c>
 8006a68:	07f2      	lsls	r2, r6, #31
 8006a6a:	d505      	bpl.n	8006a78 <_dtoa_r+0x4e8>
 8006a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a70:	f7f9 fde2 	bl	8000638 <__aeabi_dmul>
 8006a74:	3501      	adds	r5, #1
 8006a76:	2301      	movs	r3, #1
 8006a78:	1076      	asrs	r6, r6, #1
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	e773      	b.n	8006966 <_dtoa_r+0x3d6>
 8006a7e:	2502      	movs	r5, #2
 8006a80:	e775      	b.n	800696e <_dtoa_r+0x3de>
 8006a82:	9e04      	ldr	r6, [sp, #16]
 8006a84:	465f      	mov	r7, fp
 8006a86:	e792      	b.n	80069ae <_dtoa_r+0x41e>
 8006a88:	9900      	ldr	r1, [sp, #0]
 8006a8a:	4b50      	ldr	r3, [pc, #320]	; (8006bcc <_dtoa_r+0x63c>)
 8006a8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a90:	4431      	add	r1, r6
 8006a92:	9102      	str	r1, [sp, #8]
 8006a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a96:	eeb0 9a47 	vmov.f32	s18, s14
 8006a9a:	eef0 9a67 	vmov.f32	s19, s15
 8006a9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006aa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aa6:	2900      	cmp	r1, #0
 8006aa8:	d044      	beq.n	8006b34 <_dtoa_r+0x5a4>
 8006aaa:	494e      	ldr	r1, [pc, #312]	; (8006be4 <_dtoa_r+0x654>)
 8006aac:	2000      	movs	r0, #0
 8006aae:	f7f9 feed 	bl	800088c <__aeabi_ddiv>
 8006ab2:	ec53 2b19 	vmov	r2, r3, d9
 8006ab6:	f7f9 fc07 	bl	80002c8 <__aeabi_dsub>
 8006aba:	9d00      	ldr	r5, [sp, #0]
 8006abc:	ec41 0b19 	vmov	d9, r0, r1
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f7fa f868 	bl	8000b98 <__aeabi_d2iz>
 8006ac8:	4606      	mov	r6, r0
 8006aca:	f7f9 fd4b 	bl	8000564 <__aeabi_i2d>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7f9 fbf7 	bl	80002c8 <__aeabi_dsub>
 8006ada:	3630      	adds	r6, #48	; 0x30
 8006adc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ae0:	ec53 2b19 	vmov	r2, r3, d9
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	4689      	mov	r9, r1
 8006ae8:	f7fa f818 	bl	8000b1c <__aeabi_dcmplt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d164      	bne.n	8006bba <_dtoa_r+0x62a>
 8006af0:	4642      	mov	r2, r8
 8006af2:	464b      	mov	r3, r9
 8006af4:	4937      	ldr	r1, [pc, #220]	; (8006bd4 <_dtoa_r+0x644>)
 8006af6:	2000      	movs	r0, #0
 8006af8:	f7f9 fbe6 	bl	80002c8 <__aeabi_dsub>
 8006afc:	ec53 2b19 	vmov	r2, r3, d9
 8006b00:	f7fa f80c 	bl	8000b1c <__aeabi_dcmplt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f040 80b6 	bne.w	8006c76 <_dtoa_r+0x6e6>
 8006b0a:	9b02      	ldr	r3, [sp, #8]
 8006b0c:	429d      	cmp	r5, r3
 8006b0e:	f43f af7c 	beq.w	8006a0a <_dtoa_r+0x47a>
 8006b12:	4b31      	ldr	r3, [pc, #196]	; (8006bd8 <_dtoa_r+0x648>)
 8006b14:	ec51 0b19 	vmov	r0, r1, d9
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f7f9 fd8d 	bl	8000638 <__aeabi_dmul>
 8006b1e:	4b2e      	ldr	r3, [pc, #184]	; (8006bd8 <_dtoa_r+0x648>)
 8006b20:	ec41 0b19 	vmov	d9, r0, r1
 8006b24:	2200      	movs	r2, #0
 8006b26:	4640      	mov	r0, r8
 8006b28:	4649      	mov	r1, r9
 8006b2a:	f7f9 fd85 	bl	8000638 <__aeabi_dmul>
 8006b2e:	4680      	mov	r8, r0
 8006b30:	4689      	mov	r9, r1
 8006b32:	e7c5      	b.n	8006ac0 <_dtoa_r+0x530>
 8006b34:	ec51 0b17 	vmov	r0, r1, d7
 8006b38:	f7f9 fd7e 	bl	8000638 <__aeabi_dmul>
 8006b3c:	9b02      	ldr	r3, [sp, #8]
 8006b3e:	9d00      	ldr	r5, [sp, #0]
 8006b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b42:	ec41 0b19 	vmov	d9, r0, r1
 8006b46:	4649      	mov	r1, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	f7fa f825 	bl	8000b98 <__aeabi_d2iz>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	f7f9 fd08 	bl	8000564 <__aeabi_i2d>
 8006b54:	3630      	adds	r6, #48	; 0x30
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fbb3 	bl	80002c8 <__aeabi_dsub>
 8006b62:	f805 6b01 	strb.w	r6, [r5], #1
 8006b66:	9b02      	ldr	r3, [sp, #8]
 8006b68:	429d      	cmp	r5, r3
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	4689      	mov	r9, r1
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	d124      	bne.n	8006bbe <_dtoa_r+0x62e>
 8006b74:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <_dtoa_r+0x654>)
 8006b76:	ec51 0b19 	vmov	r0, r1, d9
 8006b7a:	f7f9 fba7 	bl	80002cc <__adddf3>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 ffe7 	bl	8000b58 <__aeabi_dcmpgt>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d173      	bne.n	8006c76 <_dtoa_r+0x6e6>
 8006b8e:	ec53 2b19 	vmov	r2, r3, d9
 8006b92:	4914      	ldr	r1, [pc, #80]	; (8006be4 <_dtoa_r+0x654>)
 8006b94:	2000      	movs	r0, #0
 8006b96:	f7f9 fb97 	bl	80002c8 <__aeabi_dsub>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7f9 ffbb 	bl	8000b1c <__aeabi_dcmplt>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f af2f 	beq.w	8006a0a <_dtoa_r+0x47a>
 8006bac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006bae:	1e6b      	subs	r3, r5, #1
 8006bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bb6:	2b30      	cmp	r3, #48	; 0x30
 8006bb8:	d0f8      	beq.n	8006bac <_dtoa_r+0x61c>
 8006bba:	46bb      	mov	fp, r7
 8006bbc:	e04a      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <_dtoa_r+0x648>)
 8006bc0:	f7f9 fd3a 	bl	8000638 <__aeabi_dmul>
 8006bc4:	4680      	mov	r8, r0
 8006bc6:	4689      	mov	r9, r1
 8006bc8:	e7bd      	b.n	8006b46 <_dtoa_r+0x5b6>
 8006bca:	bf00      	nop
 8006bcc:	08008a90 	.word	0x08008a90
 8006bd0:	08008a68 	.word	0x08008a68
 8006bd4:	3ff00000 	.word	0x3ff00000
 8006bd8:	40240000 	.word	0x40240000
 8006bdc:	401c0000 	.word	0x401c0000
 8006be0:	40140000 	.word	0x40140000
 8006be4:	3fe00000 	.word	0x3fe00000
 8006be8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bec:	9d00      	ldr	r5, [sp, #0]
 8006bee:	4642      	mov	r2, r8
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	f7f9 fe49 	bl	800088c <__aeabi_ddiv>
 8006bfa:	f7f9 ffcd 	bl	8000b98 <__aeabi_d2iz>
 8006bfe:	9001      	str	r0, [sp, #4]
 8006c00:	f7f9 fcb0 	bl	8000564 <__aeabi_i2d>
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	f7f9 fd16 	bl	8000638 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 fb58 	bl	80002c8 <__aeabi_dsub>
 8006c18:	9e01      	ldr	r6, [sp, #4]
 8006c1a:	9f04      	ldr	r7, [sp, #16]
 8006c1c:	3630      	adds	r6, #48	; 0x30
 8006c1e:	f805 6b01 	strb.w	r6, [r5], #1
 8006c22:	9e00      	ldr	r6, [sp, #0]
 8006c24:	1bae      	subs	r6, r5, r6
 8006c26:	42b7      	cmp	r7, r6
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	d134      	bne.n	8006c98 <_dtoa_r+0x708>
 8006c2e:	f7f9 fb4d 	bl	80002cc <__adddf3>
 8006c32:	4642      	mov	r2, r8
 8006c34:	464b      	mov	r3, r9
 8006c36:	4606      	mov	r6, r0
 8006c38:	460f      	mov	r7, r1
 8006c3a:	f7f9 ff8d 	bl	8000b58 <__aeabi_dcmpgt>
 8006c3e:	b9c8      	cbnz	r0, 8006c74 <_dtoa_r+0x6e4>
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	4630      	mov	r0, r6
 8006c46:	4639      	mov	r1, r7
 8006c48:	f7f9 ff5e 	bl	8000b08 <__aeabi_dcmpeq>
 8006c4c:	b110      	cbz	r0, 8006c54 <_dtoa_r+0x6c4>
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	07db      	lsls	r3, r3, #31
 8006c52:	d40f      	bmi.n	8006c74 <_dtoa_r+0x6e4>
 8006c54:	4651      	mov	r1, sl
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fbcc 	bl	80073f4 <_Bfree>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c60:	702b      	strb	r3, [r5, #0]
 8006c62:	f10b 0301 	add.w	r3, fp, #1
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f43f ace2 	beq.w	8006634 <_dtoa_r+0xa4>
 8006c70:	601d      	str	r5, [r3, #0]
 8006c72:	e4df      	b.n	8006634 <_dtoa_r+0xa4>
 8006c74:	465f      	mov	r7, fp
 8006c76:	462b      	mov	r3, r5
 8006c78:	461d      	mov	r5, r3
 8006c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c7e:	2a39      	cmp	r2, #57	; 0x39
 8006c80:	d106      	bne.n	8006c90 <_dtoa_r+0x700>
 8006c82:	9a00      	ldr	r2, [sp, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1f7      	bne.n	8006c78 <_dtoa_r+0x6e8>
 8006c88:	9900      	ldr	r1, [sp, #0]
 8006c8a:	2230      	movs	r2, #48	; 0x30
 8006c8c:	3701      	adds	r7, #1
 8006c8e:	700a      	strb	r2, [r1, #0]
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	3201      	adds	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e790      	b.n	8006bba <_dtoa_r+0x62a>
 8006c98:	4ba3      	ldr	r3, [pc, #652]	; (8006f28 <_dtoa_r+0x998>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f7f9 fccc 	bl	8000638 <__aeabi_dmul>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	f7f9 ff2e 	bl	8000b08 <__aeabi_dcmpeq>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d09e      	beq.n	8006bee <_dtoa_r+0x65e>
 8006cb0:	e7d0      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	f000 80ca 	beq.w	8006e4e <_dtoa_r+0x8be>
 8006cba:	9a07      	ldr	r2, [sp, #28]
 8006cbc:	2a01      	cmp	r2, #1
 8006cbe:	f300 80ad 	bgt.w	8006e1c <_dtoa_r+0x88c>
 8006cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	f000 80a5 	beq.w	8006e14 <_dtoa_r+0x884>
 8006cca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cce:	9e08      	ldr	r6, [sp, #32]
 8006cd0:	9d05      	ldr	r5, [sp, #20]
 8006cd2:	9a05      	ldr	r2, [sp, #20]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	9205      	str	r2, [sp, #20]
 8006cd8:	9a06      	ldr	r2, [sp, #24]
 8006cda:	2101      	movs	r1, #1
 8006cdc:	441a      	add	r2, r3
 8006cde:	4620      	mov	r0, r4
 8006ce0:	9206      	str	r2, [sp, #24]
 8006ce2:	f000 fc3d 	bl	8007560 <__i2b>
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	b165      	cbz	r5, 8006d04 <_dtoa_r+0x774>
 8006cea:	9b06      	ldr	r3, [sp, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd09      	ble.n	8006d04 <_dtoa_r+0x774>
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	9a05      	ldr	r2, [sp, #20]
 8006cf4:	bfa8      	it	ge
 8006cf6:	462b      	movge	r3, r5
 8006cf8:	1ad2      	subs	r2, r2, r3
 8006cfa:	9205      	str	r2, [sp, #20]
 8006cfc:	9a06      	ldr	r2, [sp, #24]
 8006cfe:	1aed      	subs	r5, r5, r3
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	9306      	str	r3, [sp, #24]
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	b1f3      	cbz	r3, 8006d46 <_dtoa_r+0x7b6>
 8006d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80a3 	beq.w	8006e56 <_dtoa_r+0x8c6>
 8006d10:	2e00      	cmp	r6, #0
 8006d12:	dd10      	ble.n	8006d36 <_dtoa_r+0x7a6>
 8006d14:	4639      	mov	r1, r7
 8006d16:	4632      	mov	r2, r6
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fce1 	bl	80076e0 <__pow5mult>
 8006d1e:	4652      	mov	r2, sl
 8006d20:	4601      	mov	r1, r0
 8006d22:	4607      	mov	r7, r0
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fc31 	bl	800758c <__multiply>
 8006d2a:	4651      	mov	r1, sl
 8006d2c:	4680      	mov	r8, r0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 fb60 	bl	80073f4 <_Bfree>
 8006d34:	46c2      	mov	sl, r8
 8006d36:	9b08      	ldr	r3, [sp, #32]
 8006d38:	1b9a      	subs	r2, r3, r6
 8006d3a:	d004      	beq.n	8006d46 <_dtoa_r+0x7b6>
 8006d3c:	4651      	mov	r1, sl
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 fcce 	bl	80076e0 <__pow5mult>
 8006d44:	4682      	mov	sl, r0
 8006d46:	2101      	movs	r1, #1
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fc09 	bl	8007560 <__i2b>
 8006d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	4606      	mov	r6, r0
 8006d54:	f340 8081 	ble.w	8006e5a <_dtoa_r+0x8ca>
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fcbf 	bl	80076e0 <__pow5mult>
 8006d62:	9b07      	ldr	r3, [sp, #28]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	4606      	mov	r6, r0
 8006d68:	dd7a      	ble.n	8006e60 <_dtoa_r+0x8d0>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	6933      	ldr	r3, [r6, #16]
 8006d70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d74:	6918      	ldr	r0, [r3, #16]
 8006d76:	f000 fba5 	bl	80074c4 <__hi0bits>
 8006d7a:	f1c0 0020 	rsb	r0, r0, #32
 8006d7e:	9b06      	ldr	r3, [sp, #24]
 8006d80:	4418      	add	r0, r3
 8006d82:	f010 001f 	ands.w	r0, r0, #31
 8006d86:	f000 8094 	beq.w	8006eb2 <_dtoa_r+0x922>
 8006d8a:	f1c0 0320 	rsb	r3, r0, #32
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	f340 8085 	ble.w	8006e9e <_dtoa_r+0x90e>
 8006d94:	9b05      	ldr	r3, [sp, #20]
 8006d96:	f1c0 001c 	rsb	r0, r0, #28
 8006d9a:	4403      	add	r3, r0
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	9b06      	ldr	r3, [sp, #24]
 8006da0:	4403      	add	r3, r0
 8006da2:	4405      	add	r5, r0
 8006da4:	9306      	str	r3, [sp, #24]
 8006da6:	9b05      	ldr	r3, [sp, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dd05      	ble.n	8006db8 <_dtoa_r+0x828>
 8006dac:	4651      	mov	r1, sl
 8006dae:	461a      	mov	r2, r3
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fcef 	bl	8007794 <__lshift>
 8006db6:	4682      	mov	sl, r0
 8006db8:	9b06      	ldr	r3, [sp, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	dd05      	ble.n	8006dca <_dtoa_r+0x83a>
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fce6 	bl	8007794 <__lshift>
 8006dc8:	4606      	mov	r6, r0
 8006dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d072      	beq.n	8006eb6 <_dtoa_r+0x926>
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	f000 fd4a 	bl	800786c <__mcmp>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	da6c      	bge.n	8006eb6 <_dtoa_r+0x926>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4651      	mov	r1, sl
 8006de0:	220a      	movs	r2, #10
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fb28 	bl	8007438 <__multadd>
 8006de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dee:	4682      	mov	sl, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 81b0 	beq.w	8007156 <_dtoa_r+0xbc6>
 8006df6:	2300      	movs	r3, #0
 8006df8:	4639      	mov	r1, r7
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fb1b 	bl	8007438 <__multadd>
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	4607      	mov	r7, r0
 8006e08:	f300 8096 	bgt.w	8006f38 <_dtoa_r+0x9a8>
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	dc59      	bgt.n	8006ec6 <_dtoa_r+0x936>
 8006e12:	e091      	b.n	8006f38 <_dtoa_r+0x9a8>
 8006e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e1a:	e758      	b.n	8006cce <_dtoa_r+0x73e>
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	1e5e      	subs	r6, r3, #1
 8006e20:	9b08      	ldr	r3, [sp, #32]
 8006e22:	42b3      	cmp	r3, r6
 8006e24:	bfbf      	itttt	lt
 8006e26:	9b08      	ldrlt	r3, [sp, #32]
 8006e28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006e2a:	9608      	strlt	r6, [sp, #32]
 8006e2c:	1af3      	sublt	r3, r6, r3
 8006e2e:	bfb4      	ite	lt
 8006e30:	18d2      	addlt	r2, r2, r3
 8006e32:	1b9e      	subge	r6, r3, r6
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	bfbc      	itt	lt
 8006e38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006e3a:	2600      	movlt	r6, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfb7      	itett	lt
 8006e40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006e44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006e48:	1a9d      	sublt	r5, r3, r2
 8006e4a:	2300      	movlt	r3, #0
 8006e4c:	e741      	b.n	8006cd2 <_dtoa_r+0x742>
 8006e4e:	9e08      	ldr	r6, [sp, #32]
 8006e50:	9d05      	ldr	r5, [sp, #20]
 8006e52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e54:	e748      	b.n	8006ce8 <_dtoa_r+0x758>
 8006e56:	9a08      	ldr	r2, [sp, #32]
 8006e58:	e770      	b.n	8006d3c <_dtoa_r+0x7ac>
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	dc19      	bgt.n	8006e94 <_dtoa_r+0x904>
 8006e60:	9b02      	ldr	r3, [sp, #8]
 8006e62:	b9bb      	cbnz	r3, 8006e94 <_dtoa_r+0x904>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e6a:	b99b      	cbnz	r3, 8006e94 <_dtoa_r+0x904>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e72:	0d1b      	lsrs	r3, r3, #20
 8006e74:	051b      	lsls	r3, r3, #20
 8006e76:	b183      	cbz	r3, 8006e9a <_dtoa_r+0x90a>
 8006e78:	9b05      	ldr	r3, [sp, #20]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	9305      	str	r3, [sp, #20]
 8006e7e:	9b06      	ldr	r3, [sp, #24]
 8006e80:	3301      	adds	r3, #1
 8006e82:	9306      	str	r3, [sp, #24]
 8006e84:	f04f 0801 	mov.w	r8, #1
 8006e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f47f af6f 	bne.w	8006d6e <_dtoa_r+0x7de>
 8006e90:	2001      	movs	r0, #1
 8006e92:	e774      	b.n	8006d7e <_dtoa_r+0x7ee>
 8006e94:	f04f 0800 	mov.w	r8, #0
 8006e98:	e7f6      	b.n	8006e88 <_dtoa_r+0x8f8>
 8006e9a:	4698      	mov	r8, r3
 8006e9c:	e7f4      	b.n	8006e88 <_dtoa_r+0x8f8>
 8006e9e:	d082      	beq.n	8006da6 <_dtoa_r+0x816>
 8006ea0:	9a05      	ldr	r2, [sp, #20]
 8006ea2:	331c      	adds	r3, #28
 8006ea4:	441a      	add	r2, r3
 8006ea6:	9205      	str	r2, [sp, #20]
 8006ea8:	9a06      	ldr	r2, [sp, #24]
 8006eaa:	441a      	add	r2, r3
 8006eac:	441d      	add	r5, r3
 8006eae:	9206      	str	r2, [sp, #24]
 8006eb0:	e779      	b.n	8006da6 <_dtoa_r+0x816>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	e7f4      	b.n	8006ea0 <_dtoa_r+0x910>
 8006eb6:	9b04      	ldr	r3, [sp, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc37      	bgt.n	8006f2c <_dtoa_r+0x99c>
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	dd34      	ble.n	8006f2c <_dtoa_r+0x99c>
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	b963      	cbnz	r3, 8006ee4 <_dtoa_r+0x954>
 8006eca:	4631      	mov	r1, r6
 8006ecc:	2205      	movs	r2, #5
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fab2 	bl	8007438 <__multadd>
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	4650      	mov	r0, sl
 8006eda:	f000 fcc7 	bl	800786c <__mcmp>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f73f adbb 	bgt.w	8006a5a <_dtoa_r+0x4ca>
 8006ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee6:	9d00      	ldr	r5, [sp, #0]
 8006ee8:	ea6f 0b03 	mvn.w	fp, r3
 8006eec:	f04f 0800 	mov.w	r8, #0
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fa7e 	bl	80073f4 <_Bfree>
 8006ef8:	2f00      	cmp	r7, #0
 8006efa:	f43f aeab 	beq.w	8006c54 <_dtoa_r+0x6c4>
 8006efe:	f1b8 0f00 	cmp.w	r8, #0
 8006f02:	d005      	beq.n	8006f10 <_dtoa_r+0x980>
 8006f04:	45b8      	cmp	r8, r7
 8006f06:	d003      	beq.n	8006f10 <_dtoa_r+0x980>
 8006f08:	4641      	mov	r1, r8
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 fa72 	bl	80073f4 <_Bfree>
 8006f10:	4639      	mov	r1, r7
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 fa6e 	bl	80073f4 <_Bfree>
 8006f18:	e69c      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006f1a:	2600      	movs	r6, #0
 8006f1c:	4637      	mov	r7, r6
 8006f1e:	e7e1      	b.n	8006ee4 <_dtoa_r+0x954>
 8006f20:	46bb      	mov	fp, r7
 8006f22:	4637      	mov	r7, r6
 8006f24:	e599      	b.n	8006a5a <_dtoa_r+0x4ca>
 8006f26:	bf00      	nop
 8006f28:	40240000 	.word	0x40240000
 8006f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80c8 	beq.w	80070c4 <_dtoa_r+0xb34>
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	2d00      	cmp	r5, #0
 8006f3a:	dd05      	ble.n	8006f48 <_dtoa_r+0x9b8>
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	462a      	mov	r2, r5
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 fc27 	bl	8007794 <__lshift>
 8006f46:	4607      	mov	r7, r0
 8006f48:	f1b8 0f00 	cmp.w	r8, #0
 8006f4c:	d05b      	beq.n	8007006 <_dtoa_r+0xa76>
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fa0f 	bl	8007374 <_Balloc>
 8006f56:	4605      	mov	r5, r0
 8006f58:	b928      	cbnz	r0, 8006f66 <_dtoa_r+0x9d6>
 8006f5a:	4b83      	ldr	r3, [pc, #524]	; (8007168 <_dtoa_r+0xbd8>)
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f62:	f7ff bb2e 	b.w	80065c2 <_dtoa_r+0x32>
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	3202      	adds	r2, #2
 8006f6a:	0092      	lsls	r2, r2, #2
 8006f6c:	f107 010c 	add.w	r1, r7, #12
 8006f70:	300c      	adds	r0, #12
 8006f72:	f000 fe39 	bl	8007be8 <memcpy>
 8006f76:	2201      	movs	r2, #1
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fc0a 	bl	8007794 <__lshift>
 8006f80:	9b00      	ldr	r3, [sp, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	9308      	str	r3, [sp, #32]
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	46b8      	mov	r8, r7
 8006f96:	9306      	str	r3, [sp, #24]
 8006f98:	4607      	mov	r7, r0
 8006f9a:	9b04      	ldr	r3, [sp, #16]
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	f7ff fa6b 	bl	800647e <quorem>
 8006fa8:	4641      	mov	r1, r8
 8006faa:	9002      	str	r0, [sp, #8]
 8006fac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	f000 fc5b 	bl	800786c <__mcmp>
 8006fb6:	463a      	mov	r2, r7
 8006fb8:	9005      	str	r0, [sp, #20]
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fc71 	bl	80078a4 <__mdiff>
 8006fc2:	68c2      	ldr	r2, [r0, #12]
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	bb02      	cbnz	r2, 800700a <_dtoa_r+0xa7a>
 8006fc8:	4601      	mov	r1, r0
 8006fca:	4650      	mov	r0, sl
 8006fcc:	f000 fc4e 	bl	800786c <__mcmp>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fd8:	f000 fa0c 	bl	80073f4 <_Bfree>
 8006fdc:	9b07      	ldr	r3, [sp, #28]
 8006fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe0:	9d04      	ldr	r5, [sp, #16]
 8006fe2:	ea43 0102 	orr.w	r1, r3, r2
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	4319      	orrs	r1, r3
 8006fea:	d110      	bne.n	800700e <_dtoa_r+0xa7e>
 8006fec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ff0:	d029      	beq.n	8007046 <_dtoa_r+0xab6>
 8006ff2:	9b05      	ldr	r3, [sp, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd02      	ble.n	8006ffe <_dtoa_r+0xa6e>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	f883 9000 	strb.w	r9, [r3]
 8007004:	e774      	b.n	8006ef0 <_dtoa_r+0x960>
 8007006:	4638      	mov	r0, r7
 8007008:	e7ba      	b.n	8006f80 <_dtoa_r+0x9f0>
 800700a:	2201      	movs	r2, #1
 800700c:	e7e1      	b.n	8006fd2 <_dtoa_r+0xa42>
 800700e:	9b05      	ldr	r3, [sp, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	db04      	blt.n	800701e <_dtoa_r+0xa8e>
 8007014:	9907      	ldr	r1, [sp, #28]
 8007016:	430b      	orrs	r3, r1
 8007018:	9906      	ldr	r1, [sp, #24]
 800701a:	430b      	orrs	r3, r1
 800701c:	d120      	bne.n	8007060 <_dtoa_r+0xad0>
 800701e:	2a00      	cmp	r2, #0
 8007020:	dded      	ble.n	8006ffe <_dtoa_r+0xa6e>
 8007022:	4651      	mov	r1, sl
 8007024:	2201      	movs	r2, #1
 8007026:	4620      	mov	r0, r4
 8007028:	f000 fbb4 	bl	8007794 <__lshift>
 800702c:	4631      	mov	r1, r6
 800702e:	4682      	mov	sl, r0
 8007030:	f000 fc1c 	bl	800786c <__mcmp>
 8007034:	2800      	cmp	r0, #0
 8007036:	dc03      	bgt.n	8007040 <_dtoa_r+0xab0>
 8007038:	d1e1      	bne.n	8006ffe <_dtoa_r+0xa6e>
 800703a:	f019 0f01 	tst.w	r9, #1
 800703e:	d0de      	beq.n	8006ffe <_dtoa_r+0xa6e>
 8007040:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007044:	d1d8      	bne.n	8006ff8 <_dtoa_r+0xa68>
 8007046:	9a01      	ldr	r2, [sp, #4]
 8007048:	2339      	movs	r3, #57	; 0x39
 800704a:	7013      	strb	r3, [r2, #0]
 800704c:	462b      	mov	r3, r5
 800704e:	461d      	mov	r5, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007056:	2a39      	cmp	r2, #57	; 0x39
 8007058:	d06c      	beq.n	8007134 <_dtoa_r+0xba4>
 800705a:	3201      	adds	r2, #1
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e747      	b.n	8006ef0 <_dtoa_r+0x960>
 8007060:	2a00      	cmp	r2, #0
 8007062:	dd07      	ble.n	8007074 <_dtoa_r+0xae4>
 8007064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007068:	d0ed      	beq.n	8007046 <_dtoa_r+0xab6>
 800706a:	9a01      	ldr	r2, [sp, #4]
 800706c:	f109 0301 	add.w	r3, r9, #1
 8007070:	7013      	strb	r3, [r2, #0]
 8007072:	e73d      	b.n	8006ef0 <_dtoa_r+0x960>
 8007074:	9b04      	ldr	r3, [sp, #16]
 8007076:	9a08      	ldr	r2, [sp, #32]
 8007078:	f803 9c01 	strb.w	r9, [r3, #-1]
 800707c:	4293      	cmp	r3, r2
 800707e:	d043      	beq.n	8007108 <_dtoa_r+0xb78>
 8007080:	4651      	mov	r1, sl
 8007082:	2300      	movs	r3, #0
 8007084:	220a      	movs	r2, #10
 8007086:	4620      	mov	r0, r4
 8007088:	f000 f9d6 	bl	8007438 <__multadd>
 800708c:	45b8      	cmp	r8, r7
 800708e:	4682      	mov	sl, r0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	f04f 020a 	mov.w	r2, #10
 8007098:	4641      	mov	r1, r8
 800709a:	4620      	mov	r0, r4
 800709c:	d107      	bne.n	80070ae <_dtoa_r+0xb1e>
 800709e:	f000 f9cb 	bl	8007438 <__multadd>
 80070a2:	4680      	mov	r8, r0
 80070a4:	4607      	mov	r7, r0
 80070a6:	9b04      	ldr	r3, [sp, #16]
 80070a8:	3301      	adds	r3, #1
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	e775      	b.n	8006f9a <_dtoa_r+0xa0a>
 80070ae:	f000 f9c3 	bl	8007438 <__multadd>
 80070b2:	4639      	mov	r1, r7
 80070b4:	4680      	mov	r8, r0
 80070b6:	2300      	movs	r3, #0
 80070b8:	220a      	movs	r2, #10
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 f9bc 	bl	8007438 <__multadd>
 80070c0:	4607      	mov	r7, r0
 80070c2:	e7f0      	b.n	80070a6 <_dtoa_r+0xb16>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	9d00      	ldr	r5, [sp, #0]
 80070ca:	4631      	mov	r1, r6
 80070cc:	4650      	mov	r0, sl
 80070ce:	f7ff f9d6 	bl	800647e <quorem>
 80070d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	f805 9b01 	strb.w	r9, [r5], #1
 80070dc:	1aea      	subs	r2, r5, r3
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	dd07      	ble.n	80070f4 <_dtoa_r+0xb64>
 80070e4:	4651      	mov	r1, sl
 80070e6:	2300      	movs	r3, #0
 80070e8:	220a      	movs	r2, #10
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 f9a4 	bl	8007438 <__multadd>
 80070f0:	4682      	mov	sl, r0
 80070f2:	e7ea      	b.n	80070ca <_dtoa_r+0xb3a>
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfc8      	it	gt
 80070fa:	461d      	movgt	r5, r3
 80070fc:	9b00      	ldr	r3, [sp, #0]
 80070fe:	bfd8      	it	le
 8007100:	2501      	movle	r5, #1
 8007102:	441d      	add	r5, r3
 8007104:	f04f 0800 	mov.w	r8, #0
 8007108:	4651      	mov	r1, sl
 800710a:	2201      	movs	r2, #1
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fb41 	bl	8007794 <__lshift>
 8007112:	4631      	mov	r1, r6
 8007114:	4682      	mov	sl, r0
 8007116:	f000 fba9 	bl	800786c <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	dc96      	bgt.n	800704c <_dtoa_r+0xabc>
 800711e:	d102      	bne.n	8007126 <_dtoa_r+0xb96>
 8007120:	f019 0f01 	tst.w	r9, #1
 8007124:	d192      	bne.n	800704c <_dtoa_r+0xabc>
 8007126:	462b      	mov	r3, r5
 8007128:	461d      	mov	r5, r3
 800712a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800712e:	2a30      	cmp	r2, #48	; 0x30
 8007130:	d0fa      	beq.n	8007128 <_dtoa_r+0xb98>
 8007132:	e6dd      	b.n	8006ef0 <_dtoa_r+0x960>
 8007134:	9a00      	ldr	r2, [sp, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d189      	bne.n	800704e <_dtoa_r+0xabe>
 800713a:	f10b 0b01 	add.w	fp, fp, #1
 800713e:	2331      	movs	r3, #49	; 0x31
 8007140:	e796      	b.n	8007070 <_dtoa_r+0xae0>
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <_dtoa_r+0xbdc>)
 8007144:	f7ff ba99 	b.w	800667a <_dtoa_r+0xea>
 8007148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800714a:	2b00      	cmp	r3, #0
 800714c:	f47f aa6d 	bne.w	800662a <_dtoa_r+0x9a>
 8007150:	4b07      	ldr	r3, [pc, #28]	; (8007170 <_dtoa_r+0xbe0>)
 8007152:	f7ff ba92 	b.w	800667a <_dtoa_r+0xea>
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	dcb5      	bgt.n	80070c8 <_dtoa_r+0xb38>
 800715c:	9b07      	ldr	r3, [sp, #28]
 800715e:	2b02      	cmp	r3, #2
 8007160:	f73f aeb1 	bgt.w	8006ec6 <_dtoa_r+0x936>
 8007164:	e7b0      	b.n	80070c8 <_dtoa_r+0xb38>
 8007166:	bf00      	nop
 8007168:	080089f8 	.word	0x080089f8
 800716c:	08008958 	.word	0x08008958
 8007170:	0800897c 	.word	0x0800897c

08007174 <_free_r>:
 8007174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007176:	2900      	cmp	r1, #0
 8007178:	d044      	beq.n	8007204 <_free_r+0x90>
 800717a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800717e:	9001      	str	r0, [sp, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f1a1 0404 	sub.w	r4, r1, #4
 8007186:	bfb8      	it	lt
 8007188:	18e4      	addlt	r4, r4, r3
 800718a:	f000 f8e7 	bl	800735c <__malloc_lock>
 800718e:	4a1e      	ldr	r2, [pc, #120]	; (8007208 <_free_r+0x94>)
 8007190:	9801      	ldr	r0, [sp, #4]
 8007192:	6813      	ldr	r3, [r2, #0]
 8007194:	b933      	cbnz	r3, 80071a4 <_free_r+0x30>
 8007196:	6063      	str	r3, [r4, #4]
 8007198:	6014      	str	r4, [r2, #0]
 800719a:	b003      	add	sp, #12
 800719c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071a0:	f000 b8e2 	b.w	8007368 <__malloc_unlock>
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	d908      	bls.n	80071ba <_free_r+0x46>
 80071a8:	6825      	ldr	r5, [r4, #0]
 80071aa:	1961      	adds	r1, r4, r5
 80071ac:	428b      	cmp	r3, r1
 80071ae:	bf01      	itttt	eq
 80071b0:	6819      	ldreq	r1, [r3, #0]
 80071b2:	685b      	ldreq	r3, [r3, #4]
 80071b4:	1949      	addeq	r1, r1, r5
 80071b6:	6021      	streq	r1, [r4, #0]
 80071b8:	e7ed      	b.n	8007196 <_free_r+0x22>
 80071ba:	461a      	mov	r2, r3
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	b10b      	cbz	r3, 80071c4 <_free_r+0x50>
 80071c0:	42a3      	cmp	r3, r4
 80071c2:	d9fa      	bls.n	80071ba <_free_r+0x46>
 80071c4:	6811      	ldr	r1, [r2, #0]
 80071c6:	1855      	adds	r5, r2, r1
 80071c8:	42a5      	cmp	r5, r4
 80071ca:	d10b      	bne.n	80071e4 <_free_r+0x70>
 80071cc:	6824      	ldr	r4, [r4, #0]
 80071ce:	4421      	add	r1, r4
 80071d0:	1854      	adds	r4, r2, r1
 80071d2:	42a3      	cmp	r3, r4
 80071d4:	6011      	str	r1, [r2, #0]
 80071d6:	d1e0      	bne.n	800719a <_free_r+0x26>
 80071d8:	681c      	ldr	r4, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	6053      	str	r3, [r2, #4]
 80071de:	440c      	add	r4, r1
 80071e0:	6014      	str	r4, [r2, #0]
 80071e2:	e7da      	b.n	800719a <_free_r+0x26>
 80071e4:	d902      	bls.n	80071ec <_free_r+0x78>
 80071e6:	230c      	movs	r3, #12
 80071e8:	6003      	str	r3, [r0, #0]
 80071ea:	e7d6      	b.n	800719a <_free_r+0x26>
 80071ec:	6825      	ldr	r5, [r4, #0]
 80071ee:	1961      	adds	r1, r4, r5
 80071f0:	428b      	cmp	r3, r1
 80071f2:	bf04      	itt	eq
 80071f4:	6819      	ldreq	r1, [r3, #0]
 80071f6:	685b      	ldreq	r3, [r3, #4]
 80071f8:	6063      	str	r3, [r4, #4]
 80071fa:	bf04      	itt	eq
 80071fc:	1949      	addeq	r1, r1, r5
 80071fe:	6021      	streq	r1, [r4, #0]
 8007200:	6054      	str	r4, [r2, #4]
 8007202:	e7ca      	b.n	800719a <_free_r+0x26>
 8007204:	b003      	add	sp, #12
 8007206:	bd30      	pop	{r4, r5, pc}
 8007208:	20000530 	.word	0x20000530

0800720c <malloc>:
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <malloc+0xc>)
 800720e:	4601      	mov	r1, r0
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	f000 b823 	b.w	800725c <_malloc_r>
 8007216:	bf00      	nop
 8007218:	20000064 	.word	0x20000064

0800721c <sbrk_aligned>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4e0e      	ldr	r6, [pc, #56]	; (8007258 <sbrk_aligned+0x3c>)
 8007220:	460c      	mov	r4, r1
 8007222:	6831      	ldr	r1, [r6, #0]
 8007224:	4605      	mov	r5, r0
 8007226:	b911      	cbnz	r1, 800722e <sbrk_aligned+0x12>
 8007228:	f000 fcce 	bl	8007bc8 <_sbrk_r>
 800722c:	6030      	str	r0, [r6, #0]
 800722e:	4621      	mov	r1, r4
 8007230:	4628      	mov	r0, r5
 8007232:	f000 fcc9 	bl	8007bc8 <_sbrk_r>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	d00a      	beq.n	8007250 <sbrk_aligned+0x34>
 800723a:	1cc4      	adds	r4, r0, #3
 800723c:	f024 0403 	bic.w	r4, r4, #3
 8007240:	42a0      	cmp	r0, r4
 8007242:	d007      	beq.n	8007254 <sbrk_aligned+0x38>
 8007244:	1a21      	subs	r1, r4, r0
 8007246:	4628      	mov	r0, r5
 8007248:	f000 fcbe 	bl	8007bc8 <_sbrk_r>
 800724c:	3001      	adds	r0, #1
 800724e:	d101      	bne.n	8007254 <sbrk_aligned+0x38>
 8007250:	f04f 34ff 	mov.w	r4, #4294967295
 8007254:	4620      	mov	r0, r4
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	20000534 	.word	0x20000534

0800725c <_malloc_r>:
 800725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007260:	1ccd      	adds	r5, r1, #3
 8007262:	f025 0503 	bic.w	r5, r5, #3
 8007266:	3508      	adds	r5, #8
 8007268:	2d0c      	cmp	r5, #12
 800726a:	bf38      	it	cc
 800726c:	250c      	movcc	r5, #12
 800726e:	2d00      	cmp	r5, #0
 8007270:	4607      	mov	r7, r0
 8007272:	db01      	blt.n	8007278 <_malloc_r+0x1c>
 8007274:	42a9      	cmp	r1, r5
 8007276:	d905      	bls.n	8007284 <_malloc_r+0x28>
 8007278:	230c      	movs	r3, #12
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	2600      	movs	r6, #0
 800727e:	4630      	mov	r0, r6
 8007280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007284:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007358 <_malloc_r+0xfc>
 8007288:	f000 f868 	bl	800735c <__malloc_lock>
 800728c:	f8d8 3000 	ldr.w	r3, [r8]
 8007290:	461c      	mov	r4, r3
 8007292:	bb5c      	cbnz	r4, 80072ec <_malloc_r+0x90>
 8007294:	4629      	mov	r1, r5
 8007296:	4638      	mov	r0, r7
 8007298:	f7ff ffc0 	bl	800721c <sbrk_aligned>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	4604      	mov	r4, r0
 80072a0:	d155      	bne.n	800734e <_malloc_r+0xf2>
 80072a2:	f8d8 4000 	ldr.w	r4, [r8]
 80072a6:	4626      	mov	r6, r4
 80072a8:	2e00      	cmp	r6, #0
 80072aa:	d145      	bne.n	8007338 <_malloc_r+0xdc>
 80072ac:	2c00      	cmp	r4, #0
 80072ae:	d048      	beq.n	8007342 <_malloc_r+0xe6>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	4631      	mov	r1, r6
 80072b4:	4638      	mov	r0, r7
 80072b6:	eb04 0903 	add.w	r9, r4, r3
 80072ba:	f000 fc85 	bl	8007bc8 <_sbrk_r>
 80072be:	4581      	cmp	r9, r0
 80072c0:	d13f      	bne.n	8007342 <_malloc_r+0xe6>
 80072c2:	6821      	ldr	r1, [r4, #0]
 80072c4:	1a6d      	subs	r5, r5, r1
 80072c6:	4629      	mov	r1, r5
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ffa7 	bl	800721c <sbrk_aligned>
 80072ce:	3001      	adds	r0, #1
 80072d0:	d037      	beq.n	8007342 <_malloc_r+0xe6>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	442b      	add	r3, r5
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	f8d8 3000 	ldr.w	r3, [r8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d038      	beq.n	8007352 <_malloc_r+0xf6>
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	42a2      	cmp	r2, r4
 80072e4:	d12b      	bne.n	800733e <_malloc_r+0xe2>
 80072e6:	2200      	movs	r2, #0
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	e00f      	b.n	800730c <_malloc_r+0xb0>
 80072ec:	6822      	ldr	r2, [r4, #0]
 80072ee:	1b52      	subs	r2, r2, r5
 80072f0:	d41f      	bmi.n	8007332 <_malloc_r+0xd6>
 80072f2:	2a0b      	cmp	r2, #11
 80072f4:	d917      	bls.n	8007326 <_malloc_r+0xca>
 80072f6:	1961      	adds	r1, r4, r5
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	6025      	str	r5, [r4, #0]
 80072fc:	bf18      	it	ne
 80072fe:	6059      	strne	r1, [r3, #4]
 8007300:	6863      	ldr	r3, [r4, #4]
 8007302:	bf08      	it	eq
 8007304:	f8c8 1000 	streq.w	r1, [r8]
 8007308:	5162      	str	r2, [r4, r5]
 800730a:	604b      	str	r3, [r1, #4]
 800730c:	4638      	mov	r0, r7
 800730e:	f104 060b 	add.w	r6, r4, #11
 8007312:	f000 f829 	bl	8007368 <__malloc_unlock>
 8007316:	f026 0607 	bic.w	r6, r6, #7
 800731a:	1d23      	adds	r3, r4, #4
 800731c:	1af2      	subs	r2, r6, r3
 800731e:	d0ae      	beq.n	800727e <_malloc_r+0x22>
 8007320:	1b9b      	subs	r3, r3, r6
 8007322:	50a3      	str	r3, [r4, r2]
 8007324:	e7ab      	b.n	800727e <_malloc_r+0x22>
 8007326:	42a3      	cmp	r3, r4
 8007328:	6862      	ldr	r2, [r4, #4]
 800732a:	d1dd      	bne.n	80072e8 <_malloc_r+0x8c>
 800732c:	f8c8 2000 	str.w	r2, [r8]
 8007330:	e7ec      	b.n	800730c <_malloc_r+0xb0>
 8007332:	4623      	mov	r3, r4
 8007334:	6864      	ldr	r4, [r4, #4]
 8007336:	e7ac      	b.n	8007292 <_malloc_r+0x36>
 8007338:	4634      	mov	r4, r6
 800733a:	6876      	ldr	r6, [r6, #4]
 800733c:	e7b4      	b.n	80072a8 <_malloc_r+0x4c>
 800733e:	4613      	mov	r3, r2
 8007340:	e7cc      	b.n	80072dc <_malloc_r+0x80>
 8007342:	230c      	movs	r3, #12
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	4638      	mov	r0, r7
 8007348:	f000 f80e 	bl	8007368 <__malloc_unlock>
 800734c:	e797      	b.n	800727e <_malloc_r+0x22>
 800734e:	6025      	str	r5, [r4, #0]
 8007350:	e7dc      	b.n	800730c <_malloc_r+0xb0>
 8007352:	605b      	str	r3, [r3, #4]
 8007354:	deff      	udf	#255	; 0xff
 8007356:	bf00      	nop
 8007358:	20000530 	.word	0x20000530

0800735c <__malloc_lock>:
 800735c:	4801      	ldr	r0, [pc, #4]	; (8007364 <__malloc_lock+0x8>)
 800735e:	f7ff b88c 	b.w	800647a <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	2000052c 	.word	0x2000052c

08007368 <__malloc_unlock>:
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <__malloc_unlock+0x8>)
 800736a:	f7ff b887 	b.w	800647c <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	2000052c 	.word	0x2000052c

08007374 <_Balloc>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	69c6      	ldr	r6, [r0, #28]
 8007378:	4604      	mov	r4, r0
 800737a:	460d      	mov	r5, r1
 800737c:	b976      	cbnz	r6, 800739c <_Balloc+0x28>
 800737e:	2010      	movs	r0, #16
 8007380:	f7ff ff44 	bl	800720c <malloc>
 8007384:	4602      	mov	r2, r0
 8007386:	61e0      	str	r0, [r4, #28]
 8007388:	b920      	cbnz	r0, 8007394 <_Balloc+0x20>
 800738a:	4b18      	ldr	r3, [pc, #96]	; (80073ec <_Balloc+0x78>)
 800738c:	4818      	ldr	r0, [pc, #96]	; (80073f0 <_Balloc+0x7c>)
 800738e:	216b      	movs	r1, #107	; 0x6b
 8007390:	f000 fc38 	bl	8007c04 <__assert_func>
 8007394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007398:	6006      	str	r6, [r0, #0]
 800739a:	60c6      	str	r6, [r0, #12]
 800739c:	69e6      	ldr	r6, [r4, #28]
 800739e:	68f3      	ldr	r3, [r6, #12]
 80073a0:	b183      	cbz	r3, 80073c4 <_Balloc+0x50>
 80073a2:	69e3      	ldr	r3, [r4, #28]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073aa:	b9b8      	cbnz	r0, 80073dc <_Balloc+0x68>
 80073ac:	2101      	movs	r1, #1
 80073ae:	fa01 f605 	lsl.w	r6, r1, r5
 80073b2:	1d72      	adds	r2, r6, #5
 80073b4:	0092      	lsls	r2, r2, #2
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 fc42 	bl	8007c40 <_calloc_r>
 80073bc:	b160      	cbz	r0, 80073d8 <_Balloc+0x64>
 80073be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073c2:	e00e      	b.n	80073e2 <_Balloc+0x6e>
 80073c4:	2221      	movs	r2, #33	; 0x21
 80073c6:	2104      	movs	r1, #4
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fc39 	bl	8007c40 <_calloc_r>
 80073ce:	69e3      	ldr	r3, [r4, #28]
 80073d0:	60f0      	str	r0, [r6, #12]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e4      	bne.n	80073a2 <_Balloc+0x2e>
 80073d8:	2000      	movs	r0, #0
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	6802      	ldr	r2, [r0, #0]
 80073de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073e2:	2300      	movs	r3, #0
 80073e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073e8:	e7f7      	b.n	80073da <_Balloc+0x66>
 80073ea:	bf00      	nop
 80073ec:	08008989 	.word	0x08008989
 80073f0:	08008a09 	.word	0x08008a09

080073f4 <_Bfree>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	69c6      	ldr	r6, [r0, #28]
 80073f8:	4605      	mov	r5, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	b976      	cbnz	r6, 800741c <_Bfree+0x28>
 80073fe:	2010      	movs	r0, #16
 8007400:	f7ff ff04 	bl	800720c <malloc>
 8007404:	4602      	mov	r2, r0
 8007406:	61e8      	str	r0, [r5, #28]
 8007408:	b920      	cbnz	r0, 8007414 <_Bfree+0x20>
 800740a:	4b09      	ldr	r3, [pc, #36]	; (8007430 <_Bfree+0x3c>)
 800740c:	4809      	ldr	r0, [pc, #36]	; (8007434 <_Bfree+0x40>)
 800740e:	218f      	movs	r1, #143	; 0x8f
 8007410:	f000 fbf8 	bl	8007c04 <__assert_func>
 8007414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007418:	6006      	str	r6, [r0, #0]
 800741a:	60c6      	str	r6, [r0, #12]
 800741c:	b13c      	cbz	r4, 800742e <_Bfree+0x3a>
 800741e:	69eb      	ldr	r3, [r5, #28]
 8007420:	6862      	ldr	r2, [r4, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007428:	6021      	str	r1, [r4, #0]
 800742a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	08008989 	.word	0x08008989
 8007434:	08008a09 	.word	0x08008a09

08007438 <__multadd>:
 8007438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743c:	690d      	ldr	r5, [r1, #16]
 800743e:	4607      	mov	r7, r0
 8007440:	460c      	mov	r4, r1
 8007442:	461e      	mov	r6, r3
 8007444:	f101 0c14 	add.w	ip, r1, #20
 8007448:	2000      	movs	r0, #0
 800744a:	f8dc 3000 	ldr.w	r3, [ip]
 800744e:	b299      	uxth	r1, r3
 8007450:	fb02 6101 	mla	r1, r2, r1, r6
 8007454:	0c1e      	lsrs	r6, r3, #16
 8007456:	0c0b      	lsrs	r3, r1, #16
 8007458:	fb02 3306 	mla	r3, r2, r6, r3
 800745c:	b289      	uxth	r1, r1
 800745e:	3001      	adds	r0, #1
 8007460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007464:	4285      	cmp	r5, r0
 8007466:	f84c 1b04 	str.w	r1, [ip], #4
 800746a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800746e:	dcec      	bgt.n	800744a <__multadd+0x12>
 8007470:	b30e      	cbz	r6, 80074b6 <__multadd+0x7e>
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	42ab      	cmp	r3, r5
 8007476:	dc19      	bgt.n	80074ac <__multadd+0x74>
 8007478:	6861      	ldr	r1, [r4, #4]
 800747a:	4638      	mov	r0, r7
 800747c:	3101      	adds	r1, #1
 800747e:	f7ff ff79 	bl	8007374 <_Balloc>
 8007482:	4680      	mov	r8, r0
 8007484:	b928      	cbnz	r0, 8007492 <__multadd+0x5a>
 8007486:	4602      	mov	r2, r0
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <__multadd+0x84>)
 800748a:	480d      	ldr	r0, [pc, #52]	; (80074c0 <__multadd+0x88>)
 800748c:	21ba      	movs	r1, #186	; 0xba
 800748e:	f000 fbb9 	bl	8007c04 <__assert_func>
 8007492:	6922      	ldr	r2, [r4, #16]
 8007494:	3202      	adds	r2, #2
 8007496:	f104 010c 	add.w	r1, r4, #12
 800749a:	0092      	lsls	r2, r2, #2
 800749c:	300c      	adds	r0, #12
 800749e:	f000 fba3 	bl	8007be8 <memcpy>
 80074a2:	4621      	mov	r1, r4
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff ffa5 	bl	80073f4 <_Bfree>
 80074aa:	4644      	mov	r4, r8
 80074ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074b0:	3501      	adds	r5, #1
 80074b2:	615e      	str	r6, [r3, #20]
 80074b4:	6125      	str	r5, [r4, #16]
 80074b6:	4620      	mov	r0, r4
 80074b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074bc:	080089f8 	.word	0x080089f8
 80074c0:	08008a09 	.word	0x08008a09

080074c4 <__hi0bits>:
 80074c4:	0c03      	lsrs	r3, r0, #16
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	b9d3      	cbnz	r3, 8007500 <__hi0bits+0x3c>
 80074ca:	0400      	lsls	r0, r0, #16
 80074cc:	2310      	movs	r3, #16
 80074ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074d2:	bf04      	itt	eq
 80074d4:	0200      	lsleq	r0, r0, #8
 80074d6:	3308      	addeq	r3, #8
 80074d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074dc:	bf04      	itt	eq
 80074de:	0100      	lsleq	r0, r0, #4
 80074e0:	3304      	addeq	r3, #4
 80074e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074e6:	bf04      	itt	eq
 80074e8:	0080      	lsleq	r0, r0, #2
 80074ea:	3302      	addeq	r3, #2
 80074ec:	2800      	cmp	r0, #0
 80074ee:	db05      	blt.n	80074fc <__hi0bits+0x38>
 80074f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074f4:	f103 0301 	add.w	r3, r3, #1
 80074f8:	bf08      	it	eq
 80074fa:	2320      	moveq	r3, #32
 80074fc:	4618      	mov	r0, r3
 80074fe:	4770      	bx	lr
 8007500:	2300      	movs	r3, #0
 8007502:	e7e4      	b.n	80074ce <__hi0bits+0xa>

08007504 <__lo0bits>:
 8007504:	6803      	ldr	r3, [r0, #0]
 8007506:	f013 0207 	ands.w	r2, r3, #7
 800750a:	d00c      	beq.n	8007526 <__lo0bits+0x22>
 800750c:	07d9      	lsls	r1, r3, #31
 800750e:	d422      	bmi.n	8007556 <__lo0bits+0x52>
 8007510:	079a      	lsls	r2, r3, #30
 8007512:	bf49      	itett	mi
 8007514:	085b      	lsrmi	r3, r3, #1
 8007516:	089b      	lsrpl	r3, r3, #2
 8007518:	6003      	strmi	r3, [r0, #0]
 800751a:	2201      	movmi	r2, #1
 800751c:	bf5c      	itt	pl
 800751e:	6003      	strpl	r3, [r0, #0]
 8007520:	2202      	movpl	r2, #2
 8007522:	4610      	mov	r0, r2
 8007524:	4770      	bx	lr
 8007526:	b299      	uxth	r1, r3
 8007528:	b909      	cbnz	r1, 800752e <__lo0bits+0x2a>
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	2210      	movs	r2, #16
 800752e:	b2d9      	uxtb	r1, r3
 8007530:	b909      	cbnz	r1, 8007536 <__lo0bits+0x32>
 8007532:	3208      	adds	r2, #8
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	0719      	lsls	r1, r3, #28
 8007538:	bf04      	itt	eq
 800753a:	091b      	lsreq	r3, r3, #4
 800753c:	3204      	addeq	r2, #4
 800753e:	0799      	lsls	r1, r3, #30
 8007540:	bf04      	itt	eq
 8007542:	089b      	lsreq	r3, r3, #2
 8007544:	3202      	addeq	r2, #2
 8007546:	07d9      	lsls	r1, r3, #31
 8007548:	d403      	bmi.n	8007552 <__lo0bits+0x4e>
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	f102 0201 	add.w	r2, r2, #1
 8007550:	d003      	beq.n	800755a <__lo0bits+0x56>
 8007552:	6003      	str	r3, [r0, #0]
 8007554:	e7e5      	b.n	8007522 <__lo0bits+0x1e>
 8007556:	2200      	movs	r2, #0
 8007558:	e7e3      	b.n	8007522 <__lo0bits+0x1e>
 800755a:	2220      	movs	r2, #32
 800755c:	e7e1      	b.n	8007522 <__lo0bits+0x1e>
	...

08007560 <__i2b>:
 8007560:	b510      	push	{r4, lr}
 8007562:	460c      	mov	r4, r1
 8007564:	2101      	movs	r1, #1
 8007566:	f7ff ff05 	bl	8007374 <_Balloc>
 800756a:	4602      	mov	r2, r0
 800756c:	b928      	cbnz	r0, 800757a <__i2b+0x1a>
 800756e:	4b05      	ldr	r3, [pc, #20]	; (8007584 <__i2b+0x24>)
 8007570:	4805      	ldr	r0, [pc, #20]	; (8007588 <__i2b+0x28>)
 8007572:	f240 1145 	movw	r1, #325	; 0x145
 8007576:	f000 fb45 	bl	8007c04 <__assert_func>
 800757a:	2301      	movs	r3, #1
 800757c:	6144      	str	r4, [r0, #20]
 800757e:	6103      	str	r3, [r0, #16]
 8007580:	bd10      	pop	{r4, pc}
 8007582:	bf00      	nop
 8007584:	080089f8 	.word	0x080089f8
 8007588:	08008a09 	.word	0x08008a09

0800758c <__multiply>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	4691      	mov	r9, r2
 8007592:	690a      	ldr	r2, [r1, #16]
 8007594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007598:	429a      	cmp	r2, r3
 800759a:	bfb8      	it	lt
 800759c:	460b      	movlt	r3, r1
 800759e:	460c      	mov	r4, r1
 80075a0:	bfbc      	itt	lt
 80075a2:	464c      	movlt	r4, r9
 80075a4:	4699      	movlt	r9, r3
 80075a6:	6927      	ldr	r7, [r4, #16]
 80075a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075ac:	68a3      	ldr	r3, [r4, #8]
 80075ae:	6861      	ldr	r1, [r4, #4]
 80075b0:	eb07 060a 	add.w	r6, r7, sl
 80075b4:	42b3      	cmp	r3, r6
 80075b6:	b085      	sub	sp, #20
 80075b8:	bfb8      	it	lt
 80075ba:	3101      	addlt	r1, #1
 80075bc:	f7ff feda 	bl	8007374 <_Balloc>
 80075c0:	b930      	cbnz	r0, 80075d0 <__multiply+0x44>
 80075c2:	4602      	mov	r2, r0
 80075c4:	4b44      	ldr	r3, [pc, #272]	; (80076d8 <__multiply+0x14c>)
 80075c6:	4845      	ldr	r0, [pc, #276]	; (80076dc <__multiply+0x150>)
 80075c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80075cc:	f000 fb1a 	bl	8007c04 <__assert_func>
 80075d0:	f100 0514 	add.w	r5, r0, #20
 80075d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075d8:	462b      	mov	r3, r5
 80075da:	2200      	movs	r2, #0
 80075dc:	4543      	cmp	r3, r8
 80075de:	d321      	bcc.n	8007624 <__multiply+0x98>
 80075e0:	f104 0314 	add.w	r3, r4, #20
 80075e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075e8:	f109 0314 	add.w	r3, r9, #20
 80075ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075f0:	9202      	str	r2, [sp, #8]
 80075f2:	1b3a      	subs	r2, r7, r4
 80075f4:	3a15      	subs	r2, #21
 80075f6:	f022 0203 	bic.w	r2, r2, #3
 80075fa:	3204      	adds	r2, #4
 80075fc:	f104 0115 	add.w	r1, r4, #21
 8007600:	428f      	cmp	r7, r1
 8007602:	bf38      	it	cc
 8007604:	2204      	movcc	r2, #4
 8007606:	9201      	str	r2, [sp, #4]
 8007608:	9a02      	ldr	r2, [sp, #8]
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	429a      	cmp	r2, r3
 800760e:	d80c      	bhi.n	800762a <__multiply+0x9e>
 8007610:	2e00      	cmp	r6, #0
 8007612:	dd03      	ble.n	800761c <__multiply+0x90>
 8007614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05b      	beq.n	80076d4 <__multiply+0x148>
 800761c:	6106      	str	r6, [r0, #16]
 800761e:	b005      	add	sp, #20
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	f843 2b04 	str.w	r2, [r3], #4
 8007628:	e7d8      	b.n	80075dc <__multiply+0x50>
 800762a:	f8b3 a000 	ldrh.w	sl, [r3]
 800762e:	f1ba 0f00 	cmp.w	sl, #0
 8007632:	d024      	beq.n	800767e <__multiply+0xf2>
 8007634:	f104 0e14 	add.w	lr, r4, #20
 8007638:	46a9      	mov	r9, r5
 800763a:	f04f 0c00 	mov.w	ip, #0
 800763e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007642:	f8d9 1000 	ldr.w	r1, [r9]
 8007646:	fa1f fb82 	uxth.w	fp, r2
 800764a:	b289      	uxth	r1, r1
 800764c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007654:	f8d9 2000 	ldr.w	r2, [r9]
 8007658:	4461      	add	r1, ip
 800765a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800765e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007666:	b289      	uxth	r1, r1
 8007668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800766c:	4577      	cmp	r7, lr
 800766e:	f849 1b04 	str.w	r1, [r9], #4
 8007672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007676:	d8e2      	bhi.n	800763e <__multiply+0xb2>
 8007678:	9a01      	ldr	r2, [sp, #4]
 800767a:	f845 c002 	str.w	ip, [r5, r2]
 800767e:	9a03      	ldr	r2, [sp, #12]
 8007680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007684:	3304      	adds	r3, #4
 8007686:	f1b9 0f00 	cmp.w	r9, #0
 800768a:	d021      	beq.n	80076d0 <__multiply+0x144>
 800768c:	6829      	ldr	r1, [r5, #0]
 800768e:	f104 0c14 	add.w	ip, r4, #20
 8007692:	46ae      	mov	lr, r5
 8007694:	f04f 0a00 	mov.w	sl, #0
 8007698:	f8bc b000 	ldrh.w	fp, [ip]
 800769c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80076a0:	fb09 220b 	mla	r2, r9, fp, r2
 80076a4:	4452      	add	r2, sl
 80076a6:	b289      	uxth	r1, r1
 80076a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076ac:	f84e 1b04 	str.w	r1, [lr], #4
 80076b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076b8:	f8be 1000 	ldrh.w	r1, [lr]
 80076bc:	fb09 110a 	mla	r1, r9, sl, r1
 80076c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80076c4:	4567      	cmp	r7, ip
 80076c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076ca:	d8e5      	bhi.n	8007698 <__multiply+0x10c>
 80076cc:	9a01      	ldr	r2, [sp, #4]
 80076ce:	50a9      	str	r1, [r5, r2]
 80076d0:	3504      	adds	r5, #4
 80076d2:	e799      	b.n	8007608 <__multiply+0x7c>
 80076d4:	3e01      	subs	r6, #1
 80076d6:	e79b      	b.n	8007610 <__multiply+0x84>
 80076d8:	080089f8 	.word	0x080089f8
 80076dc:	08008a09 	.word	0x08008a09

080076e0 <__pow5mult>:
 80076e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e4:	4615      	mov	r5, r2
 80076e6:	f012 0203 	ands.w	r2, r2, #3
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	d007      	beq.n	8007700 <__pow5mult+0x20>
 80076f0:	4c25      	ldr	r4, [pc, #148]	; (8007788 <__pow5mult+0xa8>)
 80076f2:	3a01      	subs	r2, #1
 80076f4:	2300      	movs	r3, #0
 80076f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076fa:	f7ff fe9d 	bl	8007438 <__multadd>
 80076fe:	4607      	mov	r7, r0
 8007700:	10ad      	asrs	r5, r5, #2
 8007702:	d03d      	beq.n	8007780 <__pow5mult+0xa0>
 8007704:	69f4      	ldr	r4, [r6, #28]
 8007706:	b97c      	cbnz	r4, 8007728 <__pow5mult+0x48>
 8007708:	2010      	movs	r0, #16
 800770a:	f7ff fd7f 	bl	800720c <malloc>
 800770e:	4602      	mov	r2, r0
 8007710:	61f0      	str	r0, [r6, #28]
 8007712:	b928      	cbnz	r0, 8007720 <__pow5mult+0x40>
 8007714:	4b1d      	ldr	r3, [pc, #116]	; (800778c <__pow5mult+0xac>)
 8007716:	481e      	ldr	r0, [pc, #120]	; (8007790 <__pow5mult+0xb0>)
 8007718:	f240 11b3 	movw	r1, #435	; 0x1b3
 800771c:	f000 fa72 	bl	8007c04 <__assert_func>
 8007720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007724:	6004      	str	r4, [r0, #0]
 8007726:	60c4      	str	r4, [r0, #12]
 8007728:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800772c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007730:	b94c      	cbnz	r4, 8007746 <__pow5mult+0x66>
 8007732:	f240 2171 	movw	r1, #625	; 0x271
 8007736:	4630      	mov	r0, r6
 8007738:	f7ff ff12 	bl	8007560 <__i2b>
 800773c:	2300      	movs	r3, #0
 800773e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007742:	4604      	mov	r4, r0
 8007744:	6003      	str	r3, [r0, #0]
 8007746:	f04f 0900 	mov.w	r9, #0
 800774a:	07eb      	lsls	r3, r5, #31
 800774c:	d50a      	bpl.n	8007764 <__pow5mult+0x84>
 800774e:	4639      	mov	r1, r7
 8007750:	4622      	mov	r2, r4
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ff1a 	bl	800758c <__multiply>
 8007758:	4639      	mov	r1, r7
 800775a:	4680      	mov	r8, r0
 800775c:	4630      	mov	r0, r6
 800775e:	f7ff fe49 	bl	80073f4 <_Bfree>
 8007762:	4647      	mov	r7, r8
 8007764:	106d      	asrs	r5, r5, #1
 8007766:	d00b      	beq.n	8007780 <__pow5mult+0xa0>
 8007768:	6820      	ldr	r0, [r4, #0]
 800776a:	b938      	cbnz	r0, 800777c <__pow5mult+0x9c>
 800776c:	4622      	mov	r2, r4
 800776e:	4621      	mov	r1, r4
 8007770:	4630      	mov	r0, r6
 8007772:	f7ff ff0b 	bl	800758c <__multiply>
 8007776:	6020      	str	r0, [r4, #0]
 8007778:	f8c0 9000 	str.w	r9, [r0]
 800777c:	4604      	mov	r4, r0
 800777e:	e7e4      	b.n	800774a <__pow5mult+0x6a>
 8007780:	4638      	mov	r0, r7
 8007782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007786:	bf00      	nop
 8007788:	08008b58 	.word	0x08008b58
 800778c:	08008989 	.word	0x08008989
 8007790:	08008a09 	.word	0x08008a09

08007794 <__lshift>:
 8007794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007798:	460c      	mov	r4, r1
 800779a:	6849      	ldr	r1, [r1, #4]
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	4607      	mov	r7, r0
 80077a6:	4691      	mov	r9, r2
 80077a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077ac:	f108 0601 	add.w	r6, r8, #1
 80077b0:	42b3      	cmp	r3, r6
 80077b2:	db0b      	blt.n	80077cc <__lshift+0x38>
 80077b4:	4638      	mov	r0, r7
 80077b6:	f7ff fddd 	bl	8007374 <_Balloc>
 80077ba:	4605      	mov	r5, r0
 80077bc:	b948      	cbnz	r0, 80077d2 <__lshift+0x3e>
 80077be:	4602      	mov	r2, r0
 80077c0:	4b28      	ldr	r3, [pc, #160]	; (8007864 <__lshift+0xd0>)
 80077c2:	4829      	ldr	r0, [pc, #164]	; (8007868 <__lshift+0xd4>)
 80077c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80077c8:	f000 fa1c 	bl	8007c04 <__assert_func>
 80077cc:	3101      	adds	r1, #1
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	e7ee      	b.n	80077b0 <__lshift+0x1c>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f100 0114 	add.w	r1, r0, #20
 80077d8:	f100 0210 	add.w	r2, r0, #16
 80077dc:	4618      	mov	r0, r3
 80077de:	4553      	cmp	r3, sl
 80077e0:	db33      	blt.n	800784a <__lshift+0xb6>
 80077e2:	6920      	ldr	r0, [r4, #16]
 80077e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077e8:	f104 0314 	add.w	r3, r4, #20
 80077ec:	f019 091f 	ands.w	r9, r9, #31
 80077f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077f8:	d02b      	beq.n	8007852 <__lshift+0xbe>
 80077fa:	f1c9 0e20 	rsb	lr, r9, #32
 80077fe:	468a      	mov	sl, r1
 8007800:	2200      	movs	r2, #0
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	fa00 f009 	lsl.w	r0, r0, r9
 8007808:	4310      	orrs	r0, r2
 800780a:	f84a 0b04 	str.w	r0, [sl], #4
 800780e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007812:	459c      	cmp	ip, r3
 8007814:	fa22 f20e 	lsr.w	r2, r2, lr
 8007818:	d8f3      	bhi.n	8007802 <__lshift+0x6e>
 800781a:	ebac 0304 	sub.w	r3, ip, r4
 800781e:	3b15      	subs	r3, #21
 8007820:	f023 0303 	bic.w	r3, r3, #3
 8007824:	3304      	adds	r3, #4
 8007826:	f104 0015 	add.w	r0, r4, #21
 800782a:	4584      	cmp	ip, r0
 800782c:	bf38      	it	cc
 800782e:	2304      	movcc	r3, #4
 8007830:	50ca      	str	r2, [r1, r3]
 8007832:	b10a      	cbz	r2, 8007838 <__lshift+0xa4>
 8007834:	f108 0602 	add.w	r6, r8, #2
 8007838:	3e01      	subs	r6, #1
 800783a:	4638      	mov	r0, r7
 800783c:	612e      	str	r6, [r5, #16]
 800783e:	4621      	mov	r1, r4
 8007840:	f7ff fdd8 	bl	80073f4 <_Bfree>
 8007844:	4628      	mov	r0, r5
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784a:	f842 0f04 	str.w	r0, [r2, #4]!
 800784e:	3301      	adds	r3, #1
 8007850:	e7c5      	b.n	80077de <__lshift+0x4a>
 8007852:	3904      	subs	r1, #4
 8007854:	f853 2b04 	ldr.w	r2, [r3], #4
 8007858:	f841 2f04 	str.w	r2, [r1, #4]!
 800785c:	459c      	cmp	ip, r3
 800785e:	d8f9      	bhi.n	8007854 <__lshift+0xc0>
 8007860:	e7ea      	b.n	8007838 <__lshift+0xa4>
 8007862:	bf00      	nop
 8007864:	080089f8 	.word	0x080089f8
 8007868:	08008a09 	.word	0x08008a09

0800786c <__mcmp>:
 800786c:	b530      	push	{r4, r5, lr}
 800786e:	6902      	ldr	r2, [r0, #16]
 8007870:	690c      	ldr	r4, [r1, #16]
 8007872:	1b12      	subs	r2, r2, r4
 8007874:	d10e      	bne.n	8007894 <__mcmp+0x28>
 8007876:	f100 0314 	add.w	r3, r0, #20
 800787a:	3114      	adds	r1, #20
 800787c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007880:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007884:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007888:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800788c:	42a5      	cmp	r5, r4
 800788e:	d003      	beq.n	8007898 <__mcmp+0x2c>
 8007890:	d305      	bcc.n	800789e <__mcmp+0x32>
 8007892:	2201      	movs	r2, #1
 8007894:	4610      	mov	r0, r2
 8007896:	bd30      	pop	{r4, r5, pc}
 8007898:	4283      	cmp	r3, r0
 800789a:	d3f3      	bcc.n	8007884 <__mcmp+0x18>
 800789c:	e7fa      	b.n	8007894 <__mcmp+0x28>
 800789e:	f04f 32ff 	mov.w	r2, #4294967295
 80078a2:	e7f7      	b.n	8007894 <__mcmp+0x28>

080078a4 <__mdiff>:
 80078a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	460c      	mov	r4, r1
 80078aa:	4606      	mov	r6, r0
 80078ac:	4611      	mov	r1, r2
 80078ae:	4620      	mov	r0, r4
 80078b0:	4690      	mov	r8, r2
 80078b2:	f7ff ffdb 	bl	800786c <__mcmp>
 80078b6:	1e05      	subs	r5, r0, #0
 80078b8:	d110      	bne.n	80078dc <__mdiff+0x38>
 80078ba:	4629      	mov	r1, r5
 80078bc:	4630      	mov	r0, r6
 80078be:	f7ff fd59 	bl	8007374 <_Balloc>
 80078c2:	b930      	cbnz	r0, 80078d2 <__mdiff+0x2e>
 80078c4:	4b3a      	ldr	r3, [pc, #232]	; (80079b0 <__mdiff+0x10c>)
 80078c6:	4602      	mov	r2, r0
 80078c8:	f240 2137 	movw	r1, #567	; 0x237
 80078cc:	4839      	ldr	r0, [pc, #228]	; (80079b4 <__mdiff+0x110>)
 80078ce:	f000 f999 	bl	8007c04 <__assert_func>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078dc:	bfa4      	itt	ge
 80078de:	4643      	movge	r3, r8
 80078e0:	46a0      	movge	r8, r4
 80078e2:	4630      	mov	r0, r6
 80078e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078e8:	bfa6      	itte	ge
 80078ea:	461c      	movge	r4, r3
 80078ec:	2500      	movge	r5, #0
 80078ee:	2501      	movlt	r5, #1
 80078f0:	f7ff fd40 	bl	8007374 <_Balloc>
 80078f4:	b920      	cbnz	r0, 8007900 <__mdiff+0x5c>
 80078f6:	4b2e      	ldr	r3, [pc, #184]	; (80079b0 <__mdiff+0x10c>)
 80078f8:	4602      	mov	r2, r0
 80078fa:	f240 2145 	movw	r1, #581	; 0x245
 80078fe:	e7e5      	b.n	80078cc <__mdiff+0x28>
 8007900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007904:	6926      	ldr	r6, [r4, #16]
 8007906:	60c5      	str	r5, [r0, #12]
 8007908:	f104 0914 	add.w	r9, r4, #20
 800790c:	f108 0514 	add.w	r5, r8, #20
 8007910:	f100 0e14 	add.w	lr, r0, #20
 8007914:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800791c:	f108 0210 	add.w	r2, r8, #16
 8007920:	46f2      	mov	sl, lr
 8007922:	2100      	movs	r1, #0
 8007924:	f859 3b04 	ldr.w	r3, [r9], #4
 8007928:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800792c:	fa11 f88b 	uxtah	r8, r1, fp
 8007930:	b299      	uxth	r1, r3
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	eba8 0801 	sub.w	r8, r8, r1
 8007938:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800793c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007940:	fa1f f888 	uxth.w	r8, r8
 8007944:	1419      	asrs	r1, r3, #16
 8007946:	454e      	cmp	r6, r9
 8007948:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800794c:	f84a 3b04 	str.w	r3, [sl], #4
 8007950:	d8e8      	bhi.n	8007924 <__mdiff+0x80>
 8007952:	1b33      	subs	r3, r6, r4
 8007954:	3b15      	subs	r3, #21
 8007956:	f023 0303 	bic.w	r3, r3, #3
 800795a:	3304      	adds	r3, #4
 800795c:	3415      	adds	r4, #21
 800795e:	42a6      	cmp	r6, r4
 8007960:	bf38      	it	cc
 8007962:	2304      	movcc	r3, #4
 8007964:	441d      	add	r5, r3
 8007966:	4473      	add	r3, lr
 8007968:	469e      	mov	lr, r3
 800796a:	462e      	mov	r6, r5
 800796c:	4566      	cmp	r6, ip
 800796e:	d30e      	bcc.n	800798e <__mdiff+0xea>
 8007970:	f10c 0203 	add.w	r2, ip, #3
 8007974:	1b52      	subs	r2, r2, r5
 8007976:	f022 0203 	bic.w	r2, r2, #3
 800797a:	3d03      	subs	r5, #3
 800797c:	45ac      	cmp	ip, r5
 800797e:	bf38      	it	cc
 8007980:	2200      	movcc	r2, #0
 8007982:	4413      	add	r3, r2
 8007984:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007988:	b17a      	cbz	r2, 80079aa <__mdiff+0x106>
 800798a:	6107      	str	r7, [r0, #16]
 800798c:	e7a4      	b.n	80078d8 <__mdiff+0x34>
 800798e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007992:	fa11 f288 	uxtah	r2, r1, r8
 8007996:	1414      	asrs	r4, r2, #16
 8007998:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800799c:	b292      	uxth	r2, r2
 800799e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079a2:	f84e 2b04 	str.w	r2, [lr], #4
 80079a6:	1421      	asrs	r1, r4, #16
 80079a8:	e7e0      	b.n	800796c <__mdiff+0xc8>
 80079aa:	3f01      	subs	r7, #1
 80079ac:	e7ea      	b.n	8007984 <__mdiff+0xe0>
 80079ae:	bf00      	nop
 80079b0:	080089f8 	.word	0x080089f8
 80079b4:	08008a09 	.word	0x08008a09

080079b8 <__d2b>:
 80079b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079bc:	460f      	mov	r7, r1
 80079be:	2101      	movs	r1, #1
 80079c0:	ec59 8b10 	vmov	r8, r9, d0
 80079c4:	4616      	mov	r6, r2
 80079c6:	f7ff fcd5 	bl	8007374 <_Balloc>
 80079ca:	4604      	mov	r4, r0
 80079cc:	b930      	cbnz	r0, 80079dc <__d2b+0x24>
 80079ce:	4602      	mov	r2, r0
 80079d0:	4b24      	ldr	r3, [pc, #144]	; (8007a64 <__d2b+0xac>)
 80079d2:	4825      	ldr	r0, [pc, #148]	; (8007a68 <__d2b+0xb0>)
 80079d4:	f240 310f 	movw	r1, #783	; 0x30f
 80079d8:	f000 f914 	bl	8007c04 <__assert_func>
 80079dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079e4:	bb2d      	cbnz	r5, 8007a32 <__d2b+0x7a>
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	f1b8 0300 	subs.w	r3, r8, #0
 80079ec:	d026      	beq.n	8007a3c <__d2b+0x84>
 80079ee:	4668      	mov	r0, sp
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	f7ff fd87 	bl	8007504 <__lo0bits>
 80079f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079fa:	b1e8      	cbz	r0, 8007a38 <__d2b+0x80>
 80079fc:	f1c0 0320 	rsb	r3, r0, #32
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	430b      	orrs	r3, r1
 8007a06:	40c2      	lsrs	r2, r0
 8007a08:	6163      	str	r3, [r4, #20]
 8007a0a:	9201      	str	r2, [sp, #4]
 8007a0c:	9b01      	ldr	r3, [sp, #4]
 8007a0e:	61a3      	str	r3, [r4, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf14      	ite	ne
 8007a14:	2202      	movne	r2, #2
 8007a16:	2201      	moveq	r2, #1
 8007a18:	6122      	str	r2, [r4, #16]
 8007a1a:	b1bd      	cbz	r5, 8007a4c <__d2b+0x94>
 8007a1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a20:	4405      	add	r5, r0
 8007a22:	603d      	str	r5, [r7, #0]
 8007a24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a28:	6030      	str	r0, [r6, #0]
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	b003      	add	sp, #12
 8007a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a36:	e7d6      	b.n	80079e6 <__d2b+0x2e>
 8007a38:	6161      	str	r1, [r4, #20]
 8007a3a:	e7e7      	b.n	8007a0c <__d2b+0x54>
 8007a3c:	a801      	add	r0, sp, #4
 8007a3e:	f7ff fd61 	bl	8007504 <__lo0bits>
 8007a42:	9b01      	ldr	r3, [sp, #4]
 8007a44:	6163      	str	r3, [r4, #20]
 8007a46:	3020      	adds	r0, #32
 8007a48:	2201      	movs	r2, #1
 8007a4a:	e7e5      	b.n	8007a18 <__d2b+0x60>
 8007a4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a54:	6038      	str	r0, [r7, #0]
 8007a56:	6918      	ldr	r0, [r3, #16]
 8007a58:	f7ff fd34 	bl	80074c4 <__hi0bits>
 8007a5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a60:	e7e2      	b.n	8007a28 <__d2b+0x70>
 8007a62:	bf00      	nop
 8007a64:	080089f8 	.word	0x080089f8
 8007a68:	08008a09 	.word	0x08008a09

08007a6c <__sflush_r>:
 8007a6c:	898a      	ldrh	r2, [r1, #12]
 8007a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a72:	4605      	mov	r5, r0
 8007a74:	0710      	lsls	r0, r2, #28
 8007a76:	460c      	mov	r4, r1
 8007a78:	d458      	bmi.n	8007b2c <__sflush_r+0xc0>
 8007a7a:	684b      	ldr	r3, [r1, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dc05      	bgt.n	8007a8c <__sflush_r+0x20>
 8007a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc02      	bgt.n	8007a8c <__sflush_r+0x20>
 8007a86:	2000      	movs	r0, #0
 8007a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d0f9      	beq.n	8007a86 <__sflush_r+0x1a>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a98:	682f      	ldr	r7, [r5, #0]
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	d032      	beq.n	8007b06 <__sflush_r+0x9a>
 8007aa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	075a      	lsls	r2, r3, #29
 8007aa6:	d505      	bpl.n	8007ab4 <__sflush_r+0x48>
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	1ac0      	subs	r0, r0, r3
 8007aac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aae:	b10b      	cbz	r3, 8007ab4 <__sflush_r+0x48>
 8007ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ab2:	1ac0      	subs	r0, r0, r3
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aba:	6a21      	ldr	r1, [r4, #32]
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b0      	blx	r6
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	d106      	bne.n	8007ad4 <__sflush_r+0x68>
 8007ac6:	6829      	ldr	r1, [r5, #0]
 8007ac8:	291d      	cmp	r1, #29
 8007aca:	d82b      	bhi.n	8007b24 <__sflush_r+0xb8>
 8007acc:	4a29      	ldr	r2, [pc, #164]	; (8007b74 <__sflush_r+0x108>)
 8007ace:	410a      	asrs	r2, r1
 8007ad0:	07d6      	lsls	r6, r2, #31
 8007ad2:	d427      	bmi.n	8007b24 <__sflush_r+0xb8>
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	6062      	str	r2, [r4, #4]
 8007ad8:	04d9      	lsls	r1, r3, #19
 8007ada:	6922      	ldr	r2, [r4, #16]
 8007adc:	6022      	str	r2, [r4, #0]
 8007ade:	d504      	bpl.n	8007aea <__sflush_r+0x7e>
 8007ae0:	1c42      	adds	r2, r0, #1
 8007ae2:	d101      	bne.n	8007ae8 <__sflush_r+0x7c>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b903      	cbnz	r3, 8007aea <__sflush_r+0x7e>
 8007ae8:	6560      	str	r0, [r4, #84]	; 0x54
 8007aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aec:	602f      	str	r7, [r5, #0]
 8007aee:	2900      	cmp	r1, #0
 8007af0:	d0c9      	beq.n	8007a86 <__sflush_r+0x1a>
 8007af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007af6:	4299      	cmp	r1, r3
 8007af8:	d002      	beq.n	8007b00 <__sflush_r+0x94>
 8007afa:	4628      	mov	r0, r5
 8007afc:	f7ff fb3a 	bl	8007174 <_free_r>
 8007b00:	2000      	movs	r0, #0
 8007b02:	6360      	str	r0, [r4, #52]	; 0x34
 8007b04:	e7c0      	b.n	8007a88 <__sflush_r+0x1c>
 8007b06:	2301      	movs	r3, #1
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b0      	blx	r6
 8007b0c:	1c41      	adds	r1, r0, #1
 8007b0e:	d1c8      	bne.n	8007aa2 <__sflush_r+0x36>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0c5      	beq.n	8007aa2 <__sflush_r+0x36>
 8007b16:	2b1d      	cmp	r3, #29
 8007b18:	d001      	beq.n	8007b1e <__sflush_r+0xb2>
 8007b1a:	2b16      	cmp	r3, #22
 8007b1c:	d101      	bne.n	8007b22 <__sflush_r+0xb6>
 8007b1e:	602f      	str	r7, [r5, #0]
 8007b20:	e7b1      	b.n	8007a86 <__sflush_r+0x1a>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	e7ad      	b.n	8007a88 <__sflush_r+0x1c>
 8007b2c:	690f      	ldr	r7, [r1, #16]
 8007b2e:	2f00      	cmp	r7, #0
 8007b30:	d0a9      	beq.n	8007a86 <__sflush_r+0x1a>
 8007b32:	0793      	lsls	r3, r2, #30
 8007b34:	680e      	ldr	r6, [r1, #0]
 8007b36:	bf08      	it	eq
 8007b38:	694b      	ldreq	r3, [r1, #20]
 8007b3a:	600f      	str	r7, [r1, #0]
 8007b3c:	bf18      	it	ne
 8007b3e:	2300      	movne	r3, #0
 8007b40:	eba6 0807 	sub.w	r8, r6, r7
 8007b44:	608b      	str	r3, [r1, #8]
 8007b46:	f1b8 0f00 	cmp.w	r8, #0
 8007b4a:	dd9c      	ble.n	8007a86 <__sflush_r+0x1a>
 8007b4c:	6a21      	ldr	r1, [r4, #32]
 8007b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b50:	4643      	mov	r3, r8
 8007b52:	463a      	mov	r2, r7
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b0      	blx	r6
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	dc06      	bgt.n	8007b6a <__sflush_r+0xfe>
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	e78e      	b.n	8007a88 <__sflush_r+0x1c>
 8007b6a:	4407      	add	r7, r0
 8007b6c:	eba8 0800 	sub.w	r8, r8, r0
 8007b70:	e7e9      	b.n	8007b46 <__sflush_r+0xda>
 8007b72:	bf00      	nop
 8007b74:	dfbffffe 	.word	0xdfbffffe

08007b78 <_fflush_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	690b      	ldr	r3, [r1, #16]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	b913      	cbnz	r3, 8007b88 <_fflush_r+0x10>
 8007b82:	2500      	movs	r5, #0
 8007b84:	4628      	mov	r0, r5
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	b118      	cbz	r0, 8007b92 <_fflush_r+0x1a>
 8007b8a:	6a03      	ldr	r3, [r0, #32]
 8007b8c:	b90b      	cbnz	r3, 8007b92 <_fflush_r+0x1a>
 8007b8e:	f7fe fb7d 	bl	800628c <__sinit>
 8007b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f3      	beq.n	8007b82 <_fflush_r+0xa>
 8007b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b9c:	07d0      	lsls	r0, r2, #31
 8007b9e:	d404      	bmi.n	8007baa <_fflush_r+0x32>
 8007ba0:	0599      	lsls	r1, r3, #22
 8007ba2:	d402      	bmi.n	8007baa <_fflush_r+0x32>
 8007ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba6:	f7fe fc68 	bl	800647a <__retarget_lock_acquire_recursive>
 8007baa:	4628      	mov	r0, r5
 8007bac:	4621      	mov	r1, r4
 8007bae:	f7ff ff5d 	bl	8007a6c <__sflush_r>
 8007bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bb4:	07da      	lsls	r2, r3, #31
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	d4e4      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	059b      	lsls	r3, r3, #22
 8007bbe:	d4e1      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc2:	f7fe fc5b 	bl	800647c <__retarget_lock_release_recursive>
 8007bc6:	e7dd      	b.n	8007b84 <_fflush_r+0xc>

08007bc8 <_sbrk_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d06      	ldr	r5, [pc, #24]	; (8007be4 <_sbrk_r+0x1c>)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7fa f9e2 	bl	8001f9c <_sbrk>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_sbrk_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_sbrk_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20000528 	.word	0x20000528

08007be8 <memcpy>:
 8007be8:	440a      	add	r2, r1
 8007bea:	4291      	cmp	r1, r2
 8007bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bf0:	d100      	bne.n	8007bf4 <memcpy+0xc>
 8007bf2:	4770      	bx	lr
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bfe:	4291      	cmp	r1, r2
 8007c00:	d1f9      	bne.n	8007bf6 <memcpy+0xe>
 8007c02:	bd10      	pop	{r4, pc}

08007c04 <__assert_func>:
 8007c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c06:	4614      	mov	r4, r2
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <__assert_func+0x2c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4605      	mov	r5, r0
 8007c10:	68d8      	ldr	r0, [r3, #12]
 8007c12:	b14c      	cbz	r4, 8007c28 <__assert_func+0x24>
 8007c14:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <__assert_func+0x30>)
 8007c16:	9100      	str	r1, [sp, #0]
 8007c18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c1c:	4906      	ldr	r1, [pc, #24]	; (8007c38 <__assert_func+0x34>)
 8007c1e:	462b      	mov	r3, r5
 8007c20:	f000 f844 	bl	8007cac <fiprintf>
 8007c24:	f000 f854 	bl	8007cd0 <abort>
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <__assert_func+0x38>)
 8007c2a:	461c      	mov	r4, r3
 8007c2c:	e7f3      	b.n	8007c16 <__assert_func+0x12>
 8007c2e:	bf00      	nop
 8007c30:	20000064 	.word	0x20000064
 8007c34:	08008b6e 	.word	0x08008b6e
 8007c38:	08008b7b 	.word	0x08008b7b
 8007c3c:	08008ba9 	.word	0x08008ba9

08007c40 <_calloc_r>:
 8007c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c42:	fba1 2402 	umull	r2, r4, r1, r2
 8007c46:	b94c      	cbnz	r4, 8007c5c <_calloc_r+0x1c>
 8007c48:	4611      	mov	r1, r2
 8007c4a:	9201      	str	r2, [sp, #4]
 8007c4c:	f7ff fb06 	bl	800725c <_malloc_r>
 8007c50:	9a01      	ldr	r2, [sp, #4]
 8007c52:	4605      	mov	r5, r0
 8007c54:	b930      	cbnz	r0, 8007c64 <_calloc_r+0x24>
 8007c56:	4628      	mov	r0, r5
 8007c58:	b003      	add	sp, #12
 8007c5a:	bd30      	pop	{r4, r5, pc}
 8007c5c:	220c      	movs	r2, #12
 8007c5e:	6002      	str	r2, [r0, #0]
 8007c60:	2500      	movs	r5, #0
 8007c62:	e7f8      	b.n	8007c56 <_calloc_r+0x16>
 8007c64:	4621      	mov	r1, r4
 8007c66:	f7fe fb8a 	bl	800637e <memset>
 8007c6a:	e7f4      	b.n	8007c56 <_calloc_r+0x16>

08007c6c <__ascii_mbtowc>:
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	b901      	cbnz	r1, 8007c72 <__ascii_mbtowc+0x6>
 8007c70:	a901      	add	r1, sp, #4
 8007c72:	b142      	cbz	r2, 8007c86 <__ascii_mbtowc+0x1a>
 8007c74:	b14b      	cbz	r3, 8007c8a <__ascii_mbtowc+0x1e>
 8007c76:	7813      	ldrb	r3, [r2, #0]
 8007c78:	600b      	str	r3, [r1, #0]
 8007c7a:	7812      	ldrb	r2, [r2, #0]
 8007c7c:	1e10      	subs	r0, r2, #0
 8007c7e:	bf18      	it	ne
 8007c80:	2001      	movne	r0, #1
 8007c82:	b002      	add	sp, #8
 8007c84:	4770      	bx	lr
 8007c86:	4610      	mov	r0, r2
 8007c88:	e7fb      	b.n	8007c82 <__ascii_mbtowc+0x16>
 8007c8a:	f06f 0001 	mvn.w	r0, #1
 8007c8e:	e7f8      	b.n	8007c82 <__ascii_mbtowc+0x16>

08007c90 <__ascii_wctomb>:
 8007c90:	b149      	cbz	r1, 8007ca6 <__ascii_wctomb+0x16>
 8007c92:	2aff      	cmp	r2, #255	; 0xff
 8007c94:	bf85      	ittet	hi
 8007c96:	238a      	movhi	r3, #138	; 0x8a
 8007c98:	6003      	strhi	r3, [r0, #0]
 8007c9a:	700a      	strbls	r2, [r1, #0]
 8007c9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ca0:	bf98      	it	ls
 8007ca2:	2001      	movls	r0, #1
 8007ca4:	4770      	bx	lr
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4770      	bx	lr
	...

08007cac <fiprintf>:
 8007cac:	b40e      	push	{r1, r2, r3}
 8007cae:	b503      	push	{r0, r1, lr}
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	ab03      	add	r3, sp, #12
 8007cb4:	4805      	ldr	r0, [pc, #20]	; (8007ccc <fiprintf+0x20>)
 8007cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	f000 f837 	bl	8007d30 <_vfiprintf_r>
 8007cc2:	b002      	add	sp, #8
 8007cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc8:	b003      	add	sp, #12
 8007cca:	4770      	bx	lr
 8007ccc:	20000064 	.word	0x20000064

08007cd0 <abort>:
 8007cd0:	b508      	push	{r3, lr}
 8007cd2:	2006      	movs	r0, #6
 8007cd4:	f000 fa04 	bl	80080e0 <raise>
 8007cd8:	2001      	movs	r0, #1
 8007cda:	f7fa f8e7 	bl	8001eac <_exit>

08007cde <__sfputc_r>:
 8007cde:	6893      	ldr	r3, [r2, #8]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	b410      	push	{r4}
 8007ce6:	6093      	str	r3, [r2, #8]
 8007ce8:	da08      	bge.n	8007cfc <__sfputc_r+0x1e>
 8007cea:	6994      	ldr	r4, [r2, #24]
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	db01      	blt.n	8007cf4 <__sfputc_r+0x16>
 8007cf0:	290a      	cmp	r1, #10
 8007cf2:	d103      	bne.n	8007cfc <__sfputc_r+0x1e>
 8007cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf8:	f000 b934 	b.w	8007f64 <__swbuf_r>
 8007cfc:	6813      	ldr	r3, [r2, #0]
 8007cfe:	1c58      	adds	r0, r3, #1
 8007d00:	6010      	str	r0, [r2, #0]
 8007d02:	7019      	strb	r1, [r3, #0]
 8007d04:	4608      	mov	r0, r1
 8007d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <__sfputs_r>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460f      	mov	r7, r1
 8007d12:	4614      	mov	r4, r2
 8007d14:	18d5      	adds	r5, r2, r3
 8007d16:	42ac      	cmp	r4, r5
 8007d18:	d101      	bne.n	8007d1e <__sfputs_r+0x12>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	e007      	b.n	8007d2e <__sfputs_r+0x22>
 8007d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d22:	463a      	mov	r2, r7
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7ff ffda 	bl	8007cde <__sfputc_r>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	d1f3      	bne.n	8007d16 <__sfputs_r+0xa>
 8007d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d30 <_vfiprintf_r>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	460d      	mov	r5, r1
 8007d36:	b09d      	sub	sp, #116	; 0x74
 8007d38:	4614      	mov	r4, r2
 8007d3a:	4698      	mov	r8, r3
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	b118      	cbz	r0, 8007d48 <_vfiprintf_r+0x18>
 8007d40:	6a03      	ldr	r3, [r0, #32]
 8007d42:	b90b      	cbnz	r3, 8007d48 <_vfiprintf_r+0x18>
 8007d44:	f7fe faa2 	bl	800628c <__sinit>
 8007d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d4a:	07d9      	lsls	r1, r3, #31
 8007d4c:	d405      	bmi.n	8007d5a <_vfiprintf_r+0x2a>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	059a      	lsls	r2, r3, #22
 8007d52:	d402      	bmi.n	8007d5a <_vfiprintf_r+0x2a>
 8007d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d56:	f7fe fb90 	bl	800647a <__retarget_lock_acquire_recursive>
 8007d5a:	89ab      	ldrh	r3, [r5, #12]
 8007d5c:	071b      	lsls	r3, r3, #28
 8007d5e:	d501      	bpl.n	8007d64 <_vfiprintf_r+0x34>
 8007d60:	692b      	ldr	r3, [r5, #16]
 8007d62:	b99b      	cbnz	r3, 8007d8c <_vfiprintf_r+0x5c>
 8007d64:	4629      	mov	r1, r5
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 f93a 	bl	8007fe0 <__swsetup_r>
 8007d6c:	b170      	cbz	r0, 8007d8c <_vfiprintf_r+0x5c>
 8007d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d70:	07dc      	lsls	r4, r3, #31
 8007d72:	d504      	bpl.n	8007d7e <_vfiprintf_r+0x4e>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	b01d      	add	sp, #116	; 0x74
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	89ab      	ldrh	r3, [r5, #12]
 8007d80:	0598      	lsls	r0, r3, #22
 8007d82:	d4f7      	bmi.n	8007d74 <_vfiprintf_r+0x44>
 8007d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d86:	f7fe fb79 	bl	800647c <__retarget_lock_release_recursive>
 8007d8a:	e7f3      	b.n	8007d74 <_vfiprintf_r+0x44>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d90:	2320      	movs	r3, #32
 8007d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d9a:	2330      	movs	r3, #48	; 0x30
 8007d9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f50 <_vfiprintf_r+0x220>
 8007da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007da4:	f04f 0901 	mov.w	r9, #1
 8007da8:	4623      	mov	r3, r4
 8007daa:	469a      	mov	sl, r3
 8007dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007db0:	b10a      	cbz	r2, 8007db6 <_vfiprintf_r+0x86>
 8007db2:	2a25      	cmp	r2, #37	; 0x25
 8007db4:	d1f9      	bne.n	8007daa <_vfiprintf_r+0x7a>
 8007db6:	ebba 0b04 	subs.w	fp, sl, r4
 8007dba:	d00b      	beq.n	8007dd4 <_vfiprintf_r+0xa4>
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ffa2 	bl	8007d0c <__sfputs_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f000 80a9 	beq.w	8007f20 <_vfiprintf_r+0x1f0>
 8007dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd0:	445a      	add	r2, fp
 8007dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8007dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80a1 	beq.w	8007f20 <_vfiprintf_r+0x1f0>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f04f 32ff 	mov.w	r2, #4294967295
 8007de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de8:	f10a 0a01 	add.w	sl, sl, #1
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	9307      	str	r3, [sp, #28]
 8007df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007df4:	931a      	str	r3, [sp, #104]	; 0x68
 8007df6:	4654      	mov	r4, sl
 8007df8:	2205      	movs	r2, #5
 8007dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfe:	4854      	ldr	r0, [pc, #336]	; (8007f50 <_vfiprintf_r+0x220>)
 8007e00:	f7f8 fa06 	bl	8000210 <memchr>
 8007e04:	9a04      	ldr	r2, [sp, #16]
 8007e06:	b9d8      	cbnz	r0, 8007e40 <_vfiprintf_r+0x110>
 8007e08:	06d1      	lsls	r1, r2, #27
 8007e0a:	bf44      	itt	mi
 8007e0c:	2320      	movmi	r3, #32
 8007e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e12:	0713      	lsls	r3, r2, #28
 8007e14:	bf44      	itt	mi
 8007e16:	232b      	movmi	r3, #43	; 0x2b
 8007e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e20:	2b2a      	cmp	r3, #42	; 0x2a
 8007e22:	d015      	beq.n	8007e50 <_vfiprintf_r+0x120>
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	4654      	mov	r4, sl
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f04f 0c0a 	mov.w	ip, #10
 8007e2e:	4621      	mov	r1, r4
 8007e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e34:	3b30      	subs	r3, #48	; 0x30
 8007e36:	2b09      	cmp	r3, #9
 8007e38:	d94d      	bls.n	8007ed6 <_vfiprintf_r+0x1a6>
 8007e3a:	b1b0      	cbz	r0, 8007e6a <_vfiprintf_r+0x13a>
 8007e3c:	9207      	str	r2, [sp, #28]
 8007e3e:	e014      	b.n	8007e6a <_vfiprintf_r+0x13a>
 8007e40:	eba0 0308 	sub.w	r3, r0, r8
 8007e44:	fa09 f303 	lsl.w	r3, r9, r3
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	46a2      	mov	sl, r4
 8007e4e:	e7d2      	b.n	8007df6 <_vfiprintf_r+0xc6>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	1d19      	adds	r1, r3, #4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	9103      	str	r1, [sp, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfbb      	ittet	lt
 8007e5c:	425b      	neglt	r3, r3
 8007e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e62:	9307      	strge	r3, [sp, #28]
 8007e64:	9307      	strlt	r3, [sp, #28]
 8007e66:	bfb8      	it	lt
 8007e68:	9204      	strlt	r2, [sp, #16]
 8007e6a:	7823      	ldrb	r3, [r4, #0]
 8007e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e6e:	d10c      	bne.n	8007e8a <_vfiprintf_r+0x15a>
 8007e70:	7863      	ldrb	r3, [r4, #1]
 8007e72:	2b2a      	cmp	r3, #42	; 0x2a
 8007e74:	d134      	bne.n	8007ee0 <_vfiprintf_r+0x1b0>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	9203      	str	r2, [sp, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfb8      	it	lt
 8007e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e86:	3402      	adds	r4, #2
 8007e88:	9305      	str	r3, [sp, #20]
 8007e8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f60 <_vfiprintf_r+0x230>
 8007e8e:	7821      	ldrb	r1, [r4, #0]
 8007e90:	2203      	movs	r2, #3
 8007e92:	4650      	mov	r0, sl
 8007e94:	f7f8 f9bc 	bl	8000210 <memchr>
 8007e98:	b138      	cbz	r0, 8007eaa <_vfiprintf_r+0x17a>
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	eba0 000a 	sub.w	r0, r0, sl
 8007ea0:	2240      	movs	r2, #64	; 0x40
 8007ea2:	4082      	lsls	r2, r0
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	3401      	adds	r4, #1
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eae:	4829      	ldr	r0, [pc, #164]	; (8007f54 <_vfiprintf_r+0x224>)
 8007eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb4:	2206      	movs	r2, #6
 8007eb6:	f7f8 f9ab 	bl	8000210 <memchr>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d03f      	beq.n	8007f3e <_vfiprintf_r+0x20e>
 8007ebe:	4b26      	ldr	r3, [pc, #152]	; (8007f58 <_vfiprintf_r+0x228>)
 8007ec0:	bb1b      	cbnz	r3, 8007f0a <_vfiprintf_r+0x1da>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	3307      	adds	r3, #7
 8007ec6:	f023 0307 	bic.w	r3, r3, #7
 8007eca:	3308      	adds	r3, #8
 8007ecc:	9303      	str	r3, [sp, #12]
 8007ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed0:	443b      	add	r3, r7
 8007ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed4:	e768      	b.n	8007da8 <_vfiprintf_r+0x78>
 8007ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eda:	460c      	mov	r4, r1
 8007edc:	2001      	movs	r0, #1
 8007ede:	e7a6      	b.n	8007e2e <_vfiprintf_r+0xfe>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	3401      	adds	r4, #1
 8007ee4:	9305      	str	r3, [sp, #20]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f04f 0c0a 	mov.w	ip, #10
 8007eec:	4620      	mov	r0, r4
 8007eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef2:	3a30      	subs	r2, #48	; 0x30
 8007ef4:	2a09      	cmp	r2, #9
 8007ef6:	d903      	bls.n	8007f00 <_vfiprintf_r+0x1d0>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0c6      	beq.n	8007e8a <_vfiprintf_r+0x15a>
 8007efc:	9105      	str	r1, [sp, #20]
 8007efe:	e7c4      	b.n	8007e8a <_vfiprintf_r+0x15a>
 8007f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f04:	4604      	mov	r4, r0
 8007f06:	2301      	movs	r3, #1
 8007f08:	e7f0      	b.n	8007eec <_vfiprintf_r+0x1bc>
 8007f0a:	ab03      	add	r3, sp, #12
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	462a      	mov	r2, r5
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <_vfiprintf_r+0x22c>)
 8007f12:	a904      	add	r1, sp, #16
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7fd fd67 	bl	80059e8 <_printf_float>
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	1c78      	adds	r0, r7, #1
 8007f1e:	d1d6      	bne.n	8007ece <_vfiprintf_r+0x19e>
 8007f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f22:	07d9      	lsls	r1, r3, #31
 8007f24:	d405      	bmi.n	8007f32 <_vfiprintf_r+0x202>
 8007f26:	89ab      	ldrh	r3, [r5, #12]
 8007f28:	059a      	lsls	r2, r3, #22
 8007f2a:	d402      	bmi.n	8007f32 <_vfiprintf_r+0x202>
 8007f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f2e:	f7fe faa5 	bl	800647c <__retarget_lock_release_recursive>
 8007f32:	89ab      	ldrh	r3, [r5, #12]
 8007f34:	065b      	lsls	r3, r3, #25
 8007f36:	f53f af1d 	bmi.w	8007d74 <_vfiprintf_r+0x44>
 8007f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f3c:	e71c      	b.n	8007d78 <_vfiprintf_r+0x48>
 8007f3e:	ab03      	add	r3, sp, #12
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	462a      	mov	r2, r5
 8007f44:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <_vfiprintf_r+0x22c>)
 8007f46:	a904      	add	r1, sp, #16
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7fd fff1 	bl	8005f30 <_printf_i>
 8007f4e:	e7e4      	b.n	8007f1a <_vfiprintf_r+0x1ea>
 8007f50:	08008cab 	.word	0x08008cab
 8007f54:	08008cb5 	.word	0x08008cb5
 8007f58:	080059e9 	.word	0x080059e9
 8007f5c:	08007d0d 	.word	0x08007d0d
 8007f60:	08008cb1 	.word	0x08008cb1

08007f64 <__swbuf_r>:
 8007f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f66:	460e      	mov	r6, r1
 8007f68:	4614      	mov	r4, r2
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	b118      	cbz	r0, 8007f76 <__swbuf_r+0x12>
 8007f6e:	6a03      	ldr	r3, [r0, #32]
 8007f70:	b90b      	cbnz	r3, 8007f76 <__swbuf_r+0x12>
 8007f72:	f7fe f98b 	bl	800628c <__sinit>
 8007f76:	69a3      	ldr	r3, [r4, #24]
 8007f78:	60a3      	str	r3, [r4, #8]
 8007f7a:	89a3      	ldrh	r3, [r4, #12]
 8007f7c:	071a      	lsls	r2, r3, #28
 8007f7e:	d525      	bpl.n	8007fcc <__swbuf_r+0x68>
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	b31b      	cbz	r3, 8007fcc <__swbuf_r+0x68>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	6922      	ldr	r2, [r4, #16]
 8007f88:	1a98      	subs	r0, r3, r2
 8007f8a:	6963      	ldr	r3, [r4, #20]
 8007f8c:	b2f6      	uxtb	r6, r6
 8007f8e:	4283      	cmp	r3, r0
 8007f90:	4637      	mov	r7, r6
 8007f92:	dc04      	bgt.n	8007f9e <__swbuf_r+0x3a>
 8007f94:	4621      	mov	r1, r4
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7ff fdee 	bl	8007b78 <_fflush_r>
 8007f9c:	b9e0      	cbnz	r0, 8007fd8 <__swbuf_r+0x74>
 8007f9e:	68a3      	ldr	r3, [r4, #8]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	60a3      	str	r3, [r4, #8]
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	6022      	str	r2, [r4, #0]
 8007faa:	701e      	strb	r6, [r3, #0]
 8007fac:	6962      	ldr	r2, [r4, #20]
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d004      	beq.n	8007fbe <__swbuf_r+0x5a>
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	07db      	lsls	r3, r3, #31
 8007fb8:	d506      	bpl.n	8007fc8 <__swbuf_r+0x64>
 8007fba:	2e0a      	cmp	r6, #10
 8007fbc:	d104      	bne.n	8007fc8 <__swbuf_r+0x64>
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f7ff fdd9 	bl	8007b78 <_fflush_r>
 8007fc6:	b938      	cbnz	r0, 8007fd8 <__swbuf_r+0x74>
 8007fc8:	4638      	mov	r0, r7
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f806 	bl	8007fe0 <__swsetup_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d0d5      	beq.n	8007f84 <__swbuf_r+0x20>
 8007fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8007fdc:	e7f4      	b.n	8007fc8 <__swbuf_r+0x64>
	...

08007fe0 <__swsetup_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4b2a      	ldr	r3, [pc, #168]	; (800808c <__swsetup_r+0xac>)
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	460c      	mov	r4, r1
 8007fea:	b118      	cbz	r0, 8007ff4 <__swsetup_r+0x14>
 8007fec:	6a03      	ldr	r3, [r0, #32]
 8007fee:	b90b      	cbnz	r3, 8007ff4 <__swsetup_r+0x14>
 8007ff0:	f7fe f94c 	bl	800628c <__sinit>
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ffa:	0718      	lsls	r0, r3, #28
 8007ffc:	d422      	bmi.n	8008044 <__swsetup_r+0x64>
 8007ffe:	06d9      	lsls	r1, r3, #27
 8008000:	d407      	bmi.n	8008012 <__swsetup_r+0x32>
 8008002:	2309      	movs	r3, #9
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	e034      	b.n	800807c <__swsetup_r+0x9c>
 8008012:	0758      	lsls	r0, r3, #29
 8008014:	d512      	bpl.n	800803c <__swsetup_r+0x5c>
 8008016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008018:	b141      	cbz	r1, 800802c <__swsetup_r+0x4c>
 800801a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800801e:	4299      	cmp	r1, r3
 8008020:	d002      	beq.n	8008028 <__swsetup_r+0x48>
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff f8a6 	bl	8007174 <_free_r>
 8008028:	2300      	movs	r3, #0
 800802a:	6363      	str	r3, [r4, #52]	; 0x34
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	2300      	movs	r3, #0
 8008036:	6063      	str	r3, [r4, #4]
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f043 0308 	orr.w	r3, r3, #8
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	b94b      	cbnz	r3, 800805c <__swsetup_r+0x7c>
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800804e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008052:	d003      	beq.n	800805c <__swsetup_r+0x7c>
 8008054:	4621      	mov	r1, r4
 8008056:	4628      	mov	r0, r5
 8008058:	f000 f884 	bl	8008164 <__smakebuf_r>
 800805c:	89a0      	ldrh	r0, [r4, #12]
 800805e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008062:	f010 0301 	ands.w	r3, r0, #1
 8008066:	d00a      	beq.n	800807e <__swsetup_r+0x9e>
 8008068:	2300      	movs	r3, #0
 800806a:	60a3      	str	r3, [r4, #8]
 800806c:	6963      	ldr	r3, [r4, #20]
 800806e:	425b      	negs	r3, r3
 8008070:	61a3      	str	r3, [r4, #24]
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	b943      	cbnz	r3, 8008088 <__swsetup_r+0xa8>
 8008076:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800807a:	d1c4      	bne.n	8008006 <__swsetup_r+0x26>
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	0781      	lsls	r1, r0, #30
 8008080:	bf58      	it	pl
 8008082:	6963      	ldrpl	r3, [r4, #20]
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	e7f4      	b.n	8008072 <__swsetup_r+0x92>
 8008088:	2000      	movs	r0, #0
 800808a:	e7f7      	b.n	800807c <__swsetup_r+0x9c>
 800808c:	20000064 	.word	0x20000064

08008090 <_raise_r>:
 8008090:	291f      	cmp	r1, #31
 8008092:	b538      	push	{r3, r4, r5, lr}
 8008094:	4604      	mov	r4, r0
 8008096:	460d      	mov	r5, r1
 8008098:	d904      	bls.n	80080a4 <_raise_r+0x14>
 800809a:	2316      	movs	r3, #22
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	f04f 30ff 	mov.w	r0, #4294967295
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80080a6:	b112      	cbz	r2, 80080ae <_raise_r+0x1e>
 80080a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080ac:	b94b      	cbnz	r3, 80080c2 <_raise_r+0x32>
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f830 	bl	8008114 <_getpid_r>
 80080b4:	462a      	mov	r2, r5
 80080b6:	4601      	mov	r1, r0
 80080b8:	4620      	mov	r0, r4
 80080ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080be:	f000 b817 	b.w	80080f0 <_kill_r>
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d00a      	beq.n	80080dc <_raise_r+0x4c>
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	d103      	bne.n	80080d2 <_raise_r+0x42>
 80080ca:	2316      	movs	r3, #22
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	2001      	movs	r0, #1
 80080d0:	e7e7      	b.n	80080a2 <_raise_r+0x12>
 80080d2:	2400      	movs	r4, #0
 80080d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080d8:	4628      	mov	r0, r5
 80080da:	4798      	blx	r3
 80080dc:	2000      	movs	r0, #0
 80080de:	e7e0      	b.n	80080a2 <_raise_r+0x12>

080080e0 <raise>:
 80080e0:	4b02      	ldr	r3, [pc, #8]	; (80080ec <raise+0xc>)
 80080e2:	4601      	mov	r1, r0
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f7ff bfd3 	b.w	8008090 <_raise_r>
 80080ea:	bf00      	nop
 80080ec:	20000064 	.word	0x20000064

080080f0 <_kill_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	; (8008110 <_kill_r+0x20>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f7f9 fec5 	bl	8001e8c <_kill>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d102      	bne.n	800810c <_kill_r+0x1c>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	b103      	cbz	r3, 800810c <_kill_r+0x1c>
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	bd38      	pop	{r3, r4, r5, pc}
 800810e:	bf00      	nop
 8008110:	20000528 	.word	0x20000528

08008114 <_getpid_r>:
 8008114:	f7f9 beb2 	b.w	8001e7c <_getpid>

08008118 <__swhatbuf_r>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	460c      	mov	r4, r1
 800811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008120:	2900      	cmp	r1, #0
 8008122:	b096      	sub	sp, #88	; 0x58
 8008124:	4615      	mov	r5, r2
 8008126:	461e      	mov	r6, r3
 8008128:	da0d      	bge.n	8008146 <__swhatbuf_r+0x2e>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008130:	f04f 0100 	mov.w	r1, #0
 8008134:	bf0c      	ite	eq
 8008136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800813a:	2340      	movne	r3, #64	; 0x40
 800813c:	2000      	movs	r0, #0
 800813e:	6031      	str	r1, [r6, #0]
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	b016      	add	sp, #88	; 0x58
 8008144:	bd70      	pop	{r4, r5, r6, pc}
 8008146:	466a      	mov	r2, sp
 8008148:	f000 f848 	bl	80081dc <_fstat_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	dbec      	blt.n	800812a <__swhatbuf_r+0x12>
 8008150:	9901      	ldr	r1, [sp, #4]
 8008152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800815a:	4259      	negs	r1, r3
 800815c:	4159      	adcs	r1, r3
 800815e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008162:	e7eb      	b.n	800813c <__swhatbuf_r+0x24>

08008164 <__smakebuf_r>:
 8008164:	898b      	ldrh	r3, [r1, #12]
 8008166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008168:	079d      	lsls	r5, r3, #30
 800816a:	4606      	mov	r6, r0
 800816c:	460c      	mov	r4, r1
 800816e:	d507      	bpl.n	8008180 <__smakebuf_r+0x1c>
 8008170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	2301      	movs	r3, #1
 800817a:	6163      	str	r3, [r4, #20]
 800817c:	b002      	add	sp, #8
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	ab01      	add	r3, sp, #4
 8008182:	466a      	mov	r2, sp
 8008184:	f7ff ffc8 	bl	8008118 <__swhatbuf_r>
 8008188:	9900      	ldr	r1, [sp, #0]
 800818a:	4605      	mov	r5, r0
 800818c:	4630      	mov	r0, r6
 800818e:	f7ff f865 	bl	800725c <_malloc_r>
 8008192:	b948      	cbnz	r0, 80081a8 <__smakebuf_r+0x44>
 8008194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008198:	059a      	lsls	r2, r3, #22
 800819a:	d4ef      	bmi.n	800817c <__smakebuf_r+0x18>
 800819c:	f023 0303 	bic.w	r3, r3, #3
 80081a0:	f043 0302 	orr.w	r3, r3, #2
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	e7e3      	b.n	8008170 <__smakebuf_r+0xc>
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	6020      	str	r0, [r4, #0]
 80081ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	6163      	str	r3, [r4, #20]
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	6120      	str	r0, [r4, #16]
 80081ba:	b15b      	cbz	r3, 80081d4 <__smakebuf_r+0x70>
 80081bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f81d 	bl	8008200 <_isatty_r>
 80081c6:	b128      	cbz	r0, 80081d4 <__smakebuf_r+0x70>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	f043 0301 	orr.w	r3, r3, #1
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	431d      	orrs	r5, r3
 80081d8:	81a5      	strh	r5, [r4, #12]
 80081da:	e7cf      	b.n	800817c <__smakebuf_r+0x18>

080081dc <_fstat_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	; (80081fc <_fstat_r+0x20>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7f9 feae 	bl	8001f4a <_fstat>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_fstat_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_fstat_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	20000528 	.word	0x20000528

08008200 <_isatty_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	; (800821c <_isatty_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7f9 fead 	bl	8001f6a <_isatty>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_isatty_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_isatty_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20000528 	.word	0x20000528

08008220 <atan2>:
 8008220:	f000 b906 	b.w	8008430 <__ieee754_atan2>

08008224 <sqrt>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	ed2d 8b02 	vpush	{d8}
 800822a:	ec55 4b10 	vmov	r4, r5, d0
 800822e:	f000 f825 	bl	800827c <__ieee754_sqrt>
 8008232:	4622      	mov	r2, r4
 8008234:	462b      	mov	r3, r5
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	eeb0 8a40 	vmov.f32	s16, s0
 800823e:	eef0 8a60 	vmov.f32	s17, s1
 8008242:	f7f8 fc93 	bl	8000b6c <__aeabi_dcmpun>
 8008246:	b990      	cbnz	r0, 800826e <sqrt+0x4a>
 8008248:	2200      	movs	r2, #0
 800824a:	2300      	movs	r3, #0
 800824c:	4620      	mov	r0, r4
 800824e:	4629      	mov	r1, r5
 8008250:	f7f8 fc64 	bl	8000b1c <__aeabi_dcmplt>
 8008254:	b158      	cbz	r0, 800826e <sqrt+0x4a>
 8008256:	f7fe f8e5 	bl	8006424 <__errno>
 800825a:	2321      	movs	r3, #33	; 0x21
 800825c:	6003      	str	r3, [r0, #0]
 800825e:	2200      	movs	r2, #0
 8008260:	2300      	movs	r3, #0
 8008262:	4610      	mov	r0, r2
 8008264:	4619      	mov	r1, r3
 8008266:	f7f8 fb11 	bl	800088c <__aeabi_ddiv>
 800826a:	ec41 0b18 	vmov	d8, r0, r1
 800826e:	eeb0 0a48 	vmov.f32	s0, s16
 8008272:	eef0 0a68 	vmov.f32	s1, s17
 8008276:	ecbd 8b02 	vpop	{d8}
 800827a:	bd38      	pop	{r3, r4, r5, pc}

0800827c <__ieee754_sqrt>:
 800827c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	ec55 4b10 	vmov	r4, r5, d0
 8008284:	4e67      	ldr	r6, [pc, #412]	; (8008424 <__ieee754_sqrt+0x1a8>)
 8008286:	43ae      	bics	r6, r5
 8008288:	ee10 0a10 	vmov	r0, s0
 800828c:	ee10 2a10 	vmov	r2, s0
 8008290:	4629      	mov	r1, r5
 8008292:	462b      	mov	r3, r5
 8008294:	d10d      	bne.n	80082b2 <__ieee754_sqrt+0x36>
 8008296:	f7f8 f9cf 	bl	8000638 <__aeabi_dmul>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f8 f813 	bl	80002cc <__adddf3>
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	ec45 4b10 	vmov	d0, r4, r5
 80082ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	dc0b      	bgt.n	80082ce <__ieee754_sqrt+0x52>
 80082b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80082ba:	4326      	orrs	r6, r4
 80082bc:	d0f5      	beq.n	80082aa <__ieee754_sqrt+0x2e>
 80082be:	b135      	cbz	r5, 80082ce <__ieee754_sqrt+0x52>
 80082c0:	f7f8 f802 	bl	80002c8 <__aeabi_dsub>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	f7f8 fae0 	bl	800088c <__aeabi_ddiv>
 80082cc:	e7eb      	b.n	80082a6 <__ieee754_sqrt+0x2a>
 80082ce:	1509      	asrs	r1, r1, #20
 80082d0:	f000 808d 	beq.w	80083ee <__ieee754_sqrt+0x172>
 80082d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80082dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082e0:	07c9      	lsls	r1, r1, #31
 80082e2:	bf5c      	itt	pl
 80082e4:	005b      	lslpl	r3, r3, #1
 80082e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80082ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082ee:	bf58      	it	pl
 80082f0:	0052      	lslpl	r2, r2, #1
 80082f2:	2500      	movs	r5, #0
 80082f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80082f8:	1076      	asrs	r6, r6, #1
 80082fa:	0052      	lsls	r2, r2, #1
 80082fc:	f04f 0e16 	mov.w	lr, #22
 8008300:	46ac      	mov	ip, r5
 8008302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008306:	eb0c 0001 	add.w	r0, ip, r1
 800830a:	4298      	cmp	r0, r3
 800830c:	bfde      	ittt	le
 800830e:	1a1b      	suble	r3, r3, r0
 8008310:	eb00 0c01 	addle.w	ip, r0, r1
 8008314:	186d      	addle	r5, r5, r1
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	f1be 0e01 	subs.w	lr, lr, #1
 800831c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008320:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008324:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008328:	d1ed      	bne.n	8008306 <__ieee754_sqrt+0x8a>
 800832a:	4674      	mov	r4, lr
 800832c:	2720      	movs	r7, #32
 800832e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008332:	4563      	cmp	r3, ip
 8008334:	eb01 000e 	add.w	r0, r1, lr
 8008338:	dc02      	bgt.n	8008340 <__ieee754_sqrt+0xc4>
 800833a:	d113      	bne.n	8008364 <__ieee754_sqrt+0xe8>
 800833c:	4290      	cmp	r0, r2
 800833e:	d811      	bhi.n	8008364 <__ieee754_sqrt+0xe8>
 8008340:	2800      	cmp	r0, #0
 8008342:	eb00 0e01 	add.w	lr, r0, r1
 8008346:	da57      	bge.n	80083f8 <__ieee754_sqrt+0x17c>
 8008348:	f1be 0f00 	cmp.w	lr, #0
 800834c:	db54      	blt.n	80083f8 <__ieee754_sqrt+0x17c>
 800834e:	f10c 0801 	add.w	r8, ip, #1
 8008352:	eba3 030c 	sub.w	r3, r3, ip
 8008356:	4290      	cmp	r0, r2
 8008358:	bf88      	it	hi
 800835a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800835e:	1a12      	subs	r2, r2, r0
 8008360:	440c      	add	r4, r1
 8008362:	46c4      	mov	ip, r8
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	3f01      	subs	r7, #1
 8008368:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800836c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008370:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008374:	d1dd      	bne.n	8008332 <__ieee754_sqrt+0xb6>
 8008376:	4313      	orrs	r3, r2
 8008378:	d01b      	beq.n	80083b2 <__ieee754_sqrt+0x136>
 800837a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008428 <__ieee754_sqrt+0x1ac>
 800837e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800842c <__ieee754_sqrt+0x1b0>
 8008382:	e9da 0100 	ldrd	r0, r1, [sl]
 8008386:	e9db 2300 	ldrd	r2, r3, [fp]
 800838a:	f7f7 ff9d 	bl	80002c8 <__aeabi_dsub>
 800838e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	4640      	mov	r0, r8
 8008398:	4649      	mov	r1, r9
 800839a:	f7f8 fbc9 	bl	8000b30 <__aeabi_dcmple>
 800839e:	b140      	cbz	r0, 80083b2 <__ieee754_sqrt+0x136>
 80083a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80083a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80083a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80083ac:	d126      	bne.n	80083fc <__ieee754_sqrt+0x180>
 80083ae:	3501      	adds	r5, #1
 80083b0:	463c      	mov	r4, r7
 80083b2:	106a      	asrs	r2, r5, #1
 80083b4:	0863      	lsrs	r3, r4, #1
 80083b6:	07e9      	lsls	r1, r5, #31
 80083b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80083bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80083c0:	bf48      	it	mi
 80083c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80083c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80083ca:	461c      	mov	r4, r3
 80083cc:	e76d      	b.n	80082aa <__ieee754_sqrt+0x2e>
 80083ce:	0ad3      	lsrs	r3, r2, #11
 80083d0:	3815      	subs	r0, #21
 80083d2:	0552      	lsls	r2, r2, #21
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0fa      	beq.n	80083ce <__ieee754_sqrt+0x152>
 80083d8:	02dc      	lsls	r4, r3, #11
 80083da:	d50a      	bpl.n	80083f2 <__ieee754_sqrt+0x176>
 80083dc:	f1c1 0420 	rsb	r4, r1, #32
 80083e0:	fa22 f404 	lsr.w	r4, r2, r4
 80083e4:	1e4d      	subs	r5, r1, #1
 80083e6:	408a      	lsls	r2, r1
 80083e8:	4323      	orrs	r3, r4
 80083ea:	1b41      	subs	r1, r0, r5
 80083ec:	e772      	b.n	80082d4 <__ieee754_sqrt+0x58>
 80083ee:	4608      	mov	r0, r1
 80083f0:	e7f0      	b.n	80083d4 <__ieee754_sqrt+0x158>
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	3101      	adds	r1, #1
 80083f6:	e7ef      	b.n	80083d8 <__ieee754_sqrt+0x15c>
 80083f8:	46e0      	mov	r8, ip
 80083fa:	e7aa      	b.n	8008352 <__ieee754_sqrt+0xd6>
 80083fc:	f7f7 ff66 	bl	80002cc <__adddf3>
 8008400:	e9da 8900 	ldrd	r8, r9, [sl]
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4640      	mov	r0, r8
 800840a:	4649      	mov	r1, r9
 800840c:	f7f8 fb86 	bl	8000b1c <__aeabi_dcmplt>
 8008410:	b120      	cbz	r0, 800841c <__ieee754_sqrt+0x1a0>
 8008412:	1ca0      	adds	r0, r4, #2
 8008414:	bf08      	it	eq
 8008416:	3501      	addeq	r5, #1
 8008418:	3402      	adds	r4, #2
 800841a:	e7ca      	b.n	80083b2 <__ieee754_sqrt+0x136>
 800841c:	3401      	adds	r4, #1
 800841e:	f024 0401 	bic.w	r4, r4, #1
 8008422:	e7c6      	b.n	80083b2 <__ieee754_sqrt+0x136>
 8008424:	7ff00000 	.word	0x7ff00000
 8008428:	200001d8 	.word	0x200001d8
 800842c:	200001e0 	.word	0x200001e0

08008430 <__ieee754_atan2>:
 8008430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008434:	ec57 6b11 	vmov	r6, r7, d1
 8008438:	4273      	negs	r3, r6
 800843a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80085b8 <__ieee754_atan2+0x188>
 800843e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008442:	4333      	orrs	r3, r6
 8008444:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008448:	4543      	cmp	r3, r8
 800844a:	ec51 0b10 	vmov	r0, r1, d0
 800844e:	ee11 5a10 	vmov	r5, s2
 8008452:	d80a      	bhi.n	800846a <__ieee754_atan2+0x3a>
 8008454:	4244      	negs	r4, r0
 8008456:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800845a:	4304      	orrs	r4, r0
 800845c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008460:	4544      	cmp	r4, r8
 8008462:	ee10 9a10 	vmov	r9, s0
 8008466:	468e      	mov	lr, r1
 8008468:	d907      	bls.n	800847a <__ieee754_atan2+0x4a>
 800846a:	4632      	mov	r2, r6
 800846c:	463b      	mov	r3, r7
 800846e:	f7f7 ff2d 	bl	80002cc <__adddf3>
 8008472:	ec41 0b10 	vmov	d0, r0, r1
 8008476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800847e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008482:	4334      	orrs	r4, r6
 8008484:	d103      	bne.n	800848e <__ieee754_atan2+0x5e>
 8008486:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848a:	f000 b899 	b.w	80085c0 <atan>
 800848e:	17bc      	asrs	r4, r7, #30
 8008490:	f004 0402 	and.w	r4, r4, #2
 8008494:	ea53 0909 	orrs.w	r9, r3, r9
 8008498:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800849c:	d107      	bne.n	80084ae <__ieee754_atan2+0x7e>
 800849e:	2c02      	cmp	r4, #2
 80084a0:	d05f      	beq.n	8008562 <__ieee754_atan2+0x132>
 80084a2:	2c03      	cmp	r4, #3
 80084a4:	d1e5      	bne.n	8008472 <__ieee754_atan2+0x42>
 80084a6:	a140      	add	r1, pc, #256	; (adr r1, 80085a8 <__ieee754_atan2+0x178>)
 80084a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ac:	e7e1      	b.n	8008472 <__ieee754_atan2+0x42>
 80084ae:	4315      	orrs	r5, r2
 80084b0:	d106      	bne.n	80084c0 <__ieee754_atan2+0x90>
 80084b2:	f1be 0f00 	cmp.w	lr, #0
 80084b6:	da5f      	bge.n	8008578 <__ieee754_atan2+0x148>
 80084b8:	a13d      	add	r1, pc, #244	; (adr r1, 80085b0 <__ieee754_atan2+0x180>)
 80084ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084be:	e7d8      	b.n	8008472 <__ieee754_atan2+0x42>
 80084c0:	4542      	cmp	r2, r8
 80084c2:	d10f      	bne.n	80084e4 <__ieee754_atan2+0xb4>
 80084c4:	4293      	cmp	r3, r2
 80084c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80084ca:	d107      	bne.n	80084dc <__ieee754_atan2+0xac>
 80084cc:	2c02      	cmp	r4, #2
 80084ce:	d84c      	bhi.n	800856a <__ieee754_atan2+0x13a>
 80084d0:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <__ieee754_atan2+0x170>)
 80084d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084da:	e7ca      	b.n	8008472 <__ieee754_atan2+0x42>
 80084dc:	2c02      	cmp	r4, #2
 80084de:	d848      	bhi.n	8008572 <__ieee754_atan2+0x142>
 80084e0:	4b30      	ldr	r3, [pc, #192]	; (80085a4 <__ieee754_atan2+0x174>)
 80084e2:	e7f6      	b.n	80084d2 <__ieee754_atan2+0xa2>
 80084e4:	4543      	cmp	r3, r8
 80084e6:	d0e4      	beq.n	80084b2 <__ieee754_atan2+0x82>
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80084ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80084f2:	da1e      	bge.n	8008532 <__ieee754_atan2+0x102>
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	da01      	bge.n	80084fc <__ieee754_atan2+0xcc>
 80084f8:	323c      	adds	r2, #60	; 0x3c
 80084fa:	db1e      	blt.n	800853a <__ieee754_atan2+0x10a>
 80084fc:	4632      	mov	r2, r6
 80084fe:	463b      	mov	r3, r7
 8008500:	f7f8 f9c4 	bl	800088c <__aeabi_ddiv>
 8008504:	ec41 0b10 	vmov	d0, r0, r1
 8008508:	f000 f9fa 	bl	8008900 <fabs>
 800850c:	f000 f858 	bl	80085c0 <atan>
 8008510:	ec51 0b10 	vmov	r0, r1, d0
 8008514:	2c01      	cmp	r4, #1
 8008516:	d013      	beq.n	8008540 <__ieee754_atan2+0x110>
 8008518:	2c02      	cmp	r4, #2
 800851a:	d015      	beq.n	8008548 <__ieee754_atan2+0x118>
 800851c:	2c00      	cmp	r4, #0
 800851e:	d0a8      	beq.n	8008472 <__ieee754_atan2+0x42>
 8008520:	a317      	add	r3, pc, #92	; (adr r3, 8008580 <__ieee754_atan2+0x150>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f7 fecf 	bl	80002c8 <__aeabi_dsub>
 800852a:	a317      	add	r3, pc, #92	; (adr r3, 8008588 <__ieee754_atan2+0x158>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	e014      	b.n	800855c <__ieee754_atan2+0x12c>
 8008532:	a117      	add	r1, pc, #92	; (adr r1, 8008590 <__ieee754_atan2+0x160>)
 8008534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008538:	e7ec      	b.n	8008514 <__ieee754_atan2+0xe4>
 800853a:	2000      	movs	r0, #0
 800853c:	2100      	movs	r1, #0
 800853e:	e7e9      	b.n	8008514 <__ieee754_atan2+0xe4>
 8008540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008544:	4619      	mov	r1, r3
 8008546:	e794      	b.n	8008472 <__ieee754_atan2+0x42>
 8008548:	a30d      	add	r3, pc, #52	; (adr r3, 8008580 <__ieee754_atan2+0x150>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	f7f7 febb 	bl	80002c8 <__aeabi_dsub>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	a10c      	add	r1, pc, #48	; (adr r1, 8008588 <__ieee754_atan2+0x158>)
 8008558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800855c:	f7f7 feb4 	bl	80002c8 <__aeabi_dsub>
 8008560:	e787      	b.n	8008472 <__ieee754_atan2+0x42>
 8008562:	a109      	add	r1, pc, #36	; (adr r1, 8008588 <__ieee754_atan2+0x158>)
 8008564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008568:	e783      	b.n	8008472 <__ieee754_atan2+0x42>
 800856a:	a10b      	add	r1, pc, #44	; (adr r1, 8008598 <__ieee754_atan2+0x168>)
 800856c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008570:	e77f      	b.n	8008472 <__ieee754_atan2+0x42>
 8008572:	2000      	movs	r0, #0
 8008574:	2100      	movs	r1, #0
 8008576:	e77c      	b.n	8008472 <__ieee754_atan2+0x42>
 8008578:	a105      	add	r1, pc, #20	; (adr r1, 8008590 <__ieee754_atan2+0x160>)
 800857a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800857e:	e778      	b.n	8008472 <__ieee754_atan2+0x42>
 8008580:	33145c07 	.word	0x33145c07
 8008584:	3ca1a626 	.word	0x3ca1a626
 8008588:	54442d18 	.word	0x54442d18
 800858c:	400921fb 	.word	0x400921fb
 8008590:	54442d18 	.word	0x54442d18
 8008594:	3ff921fb 	.word	0x3ff921fb
 8008598:	54442d18 	.word	0x54442d18
 800859c:	3fe921fb 	.word	0x3fe921fb
 80085a0:	08008cc0 	.word	0x08008cc0
 80085a4:	08008cd8 	.word	0x08008cd8
 80085a8:	54442d18 	.word	0x54442d18
 80085ac:	c00921fb 	.word	0xc00921fb
 80085b0:	54442d18 	.word	0x54442d18
 80085b4:	bff921fb 	.word	0xbff921fb
 80085b8:	7ff00000 	.word	0x7ff00000
 80085bc:	00000000 	.word	0x00000000

080085c0 <atan>:
 80085c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	ec55 4b10 	vmov	r4, r5, d0
 80085c8:	4bc3      	ldr	r3, [pc, #780]	; (80088d8 <atan+0x318>)
 80085ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80085ce:	429e      	cmp	r6, r3
 80085d0:	46ab      	mov	fp, r5
 80085d2:	dd18      	ble.n	8008606 <atan+0x46>
 80085d4:	4bc1      	ldr	r3, [pc, #772]	; (80088dc <atan+0x31c>)
 80085d6:	429e      	cmp	r6, r3
 80085d8:	dc01      	bgt.n	80085de <atan+0x1e>
 80085da:	d109      	bne.n	80085f0 <atan+0x30>
 80085dc:	b144      	cbz	r4, 80085f0 <atan+0x30>
 80085de:	4622      	mov	r2, r4
 80085e0:	462b      	mov	r3, r5
 80085e2:	4620      	mov	r0, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	f7f7 fe71 	bl	80002cc <__adddf3>
 80085ea:	4604      	mov	r4, r0
 80085ec:	460d      	mov	r5, r1
 80085ee:	e006      	b.n	80085fe <atan+0x3e>
 80085f0:	f1bb 0f00 	cmp.w	fp, #0
 80085f4:	f300 8131 	bgt.w	800885a <atan+0x29a>
 80085f8:	a59b      	add	r5, pc, #620	; (adr r5, 8008868 <atan+0x2a8>)
 80085fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80085fe:	ec45 4b10 	vmov	d0, r4, r5
 8008602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	4bb6      	ldr	r3, [pc, #728]	; (80088e0 <atan+0x320>)
 8008608:	429e      	cmp	r6, r3
 800860a:	dc14      	bgt.n	8008636 <atan+0x76>
 800860c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008610:	429e      	cmp	r6, r3
 8008612:	dc0d      	bgt.n	8008630 <atan+0x70>
 8008614:	a396      	add	r3, pc, #600	; (adr r3, 8008870 <atan+0x2b0>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	ee10 0a10 	vmov	r0, s0
 800861e:	4629      	mov	r1, r5
 8008620:	f7f7 fe54 	bl	80002cc <__adddf3>
 8008624:	4baf      	ldr	r3, [pc, #700]	; (80088e4 <atan+0x324>)
 8008626:	2200      	movs	r2, #0
 8008628:	f7f8 fa96 	bl	8000b58 <__aeabi_dcmpgt>
 800862c:	2800      	cmp	r0, #0
 800862e:	d1e6      	bne.n	80085fe <atan+0x3e>
 8008630:	f04f 3aff 	mov.w	sl, #4294967295
 8008634:	e02b      	b.n	800868e <atan+0xce>
 8008636:	f000 f963 	bl	8008900 <fabs>
 800863a:	4bab      	ldr	r3, [pc, #684]	; (80088e8 <atan+0x328>)
 800863c:	429e      	cmp	r6, r3
 800863e:	ec55 4b10 	vmov	r4, r5, d0
 8008642:	f300 80bf 	bgt.w	80087c4 <atan+0x204>
 8008646:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800864a:	429e      	cmp	r6, r3
 800864c:	f300 80a0 	bgt.w	8008790 <atan+0x1d0>
 8008650:	ee10 2a10 	vmov	r2, s0
 8008654:	ee10 0a10 	vmov	r0, s0
 8008658:	462b      	mov	r3, r5
 800865a:	4629      	mov	r1, r5
 800865c:	f7f7 fe36 	bl	80002cc <__adddf3>
 8008660:	4ba0      	ldr	r3, [pc, #640]	; (80088e4 <atan+0x324>)
 8008662:	2200      	movs	r2, #0
 8008664:	f7f7 fe30 	bl	80002c8 <__aeabi_dsub>
 8008668:	2200      	movs	r2, #0
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f7 fe29 	bl	80002cc <__adddf3>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7f8 f903 	bl	800088c <__aeabi_ddiv>
 8008686:	f04f 0a00 	mov.w	sl, #0
 800868a:	4604      	mov	r4, r0
 800868c:	460d      	mov	r5, r1
 800868e:	4622      	mov	r2, r4
 8008690:	462b      	mov	r3, r5
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f7 ffcf 	bl	8000638 <__aeabi_dmul>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4680      	mov	r8, r0
 80086a0:	4689      	mov	r9, r1
 80086a2:	f7f7 ffc9 	bl	8000638 <__aeabi_dmul>
 80086a6:	a374      	add	r3, pc, #464	; (adr r3, 8008878 <atan+0x2b8>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	4606      	mov	r6, r0
 80086ae:	460f      	mov	r7, r1
 80086b0:	f7f7 ffc2 	bl	8000638 <__aeabi_dmul>
 80086b4:	a372      	add	r3, pc, #456	; (adr r3, 8008880 <atan+0x2c0>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f7 fe07 	bl	80002cc <__adddf3>
 80086be:	4632      	mov	r2, r6
 80086c0:	463b      	mov	r3, r7
 80086c2:	f7f7 ffb9 	bl	8000638 <__aeabi_dmul>
 80086c6:	a370      	add	r3, pc, #448	; (adr r3, 8008888 <atan+0x2c8>)
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f7f7 fdfe 	bl	80002cc <__adddf3>
 80086d0:	4632      	mov	r2, r6
 80086d2:	463b      	mov	r3, r7
 80086d4:	f7f7 ffb0 	bl	8000638 <__aeabi_dmul>
 80086d8:	a36d      	add	r3, pc, #436	; (adr r3, 8008890 <atan+0x2d0>)
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	f7f7 fdf5 	bl	80002cc <__adddf3>
 80086e2:	4632      	mov	r2, r6
 80086e4:	463b      	mov	r3, r7
 80086e6:	f7f7 ffa7 	bl	8000638 <__aeabi_dmul>
 80086ea:	a36b      	add	r3, pc, #428	; (adr r3, 8008898 <atan+0x2d8>)
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 fdec 	bl	80002cc <__adddf3>
 80086f4:	4632      	mov	r2, r6
 80086f6:	463b      	mov	r3, r7
 80086f8:	f7f7 ff9e 	bl	8000638 <__aeabi_dmul>
 80086fc:	a368      	add	r3, pc, #416	; (adr r3, 80088a0 <atan+0x2e0>)
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	f7f7 fde3 	bl	80002cc <__adddf3>
 8008706:	4642      	mov	r2, r8
 8008708:	464b      	mov	r3, r9
 800870a:	f7f7 ff95 	bl	8000638 <__aeabi_dmul>
 800870e:	a366      	add	r3, pc, #408	; (adr r3, 80088a8 <atan+0x2e8>)
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	4680      	mov	r8, r0
 8008716:	4689      	mov	r9, r1
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f7 ff8c 	bl	8000638 <__aeabi_dmul>
 8008720:	a363      	add	r3, pc, #396	; (adr r3, 80088b0 <atan+0x2f0>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fdcf 	bl	80002c8 <__aeabi_dsub>
 800872a:	4632      	mov	r2, r6
 800872c:	463b      	mov	r3, r7
 800872e:	f7f7 ff83 	bl	8000638 <__aeabi_dmul>
 8008732:	a361      	add	r3, pc, #388	; (adr r3, 80088b8 <atan+0x2f8>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 fdc6 	bl	80002c8 <__aeabi_dsub>
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	f7f7 ff7a 	bl	8000638 <__aeabi_dmul>
 8008744:	a35e      	add	r3, pc, #376	; (adr r3, 80088c0 <atan+0x300>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fdbd 	bl	80002c8 <__aeabi_dsub>
 800874e:	4632      	mov	r2, r6
 8008750:	463b      	mov	r3, r7
 8008752:	f7f7 ff71 	bl	8000638 <__aeabi_dmul>
 8008756:	a35c      	add	r3, pc, #368	; (adr r3, 80088c8 <atan+0x308>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fdb4 	bl	80002c8 <__aeabi_dsub>
 8008760:	4632      	mov	r2, r6
 8008762:	463b      	mov	r3, r7
 8008764:	f7f7 ff68 	bl	8000638 <__aeabi_dmul>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4640      	mov	r0, r8
 800876e:	4649      	mov	r1, r9
 8008770:	f7f7 fdac 	bl	80002cc <__adddf3>
 8008774:	4622      	mov	r2, r4
 8008776:	462b      	mov	r3, r5
 8008778:	f7f7 ff5e 	bl	8000638 <__aeabi_dmul>
 800877c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	d14b      	bne.n	800881e <atan+0x25e>
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f7 fd9d 	bl	80002c8 <__aeabi_dsub>
 800878e:	e72c      	b.n	80085ea <atan+0x2a>
 8008790:	ee10 0a10 	vmov	r0, s0
 8008794:	4b53      	ldr	r3, [pc, #332]	; (80088e4 <atan+0x324>)
 8008796:	2200      	movs	r2, #0
 8008798:	4629      	mov	r1, r5
 800879a:	f7f7 fd95 	bl	80002c8 <__aeabi_dsub>
 800879e:	4b51      	ldr	r3, [pc, #324]	; (80088e4 <atan+0x324>)
 80087a0:	4606      	mov	r6, r0
 80087a2:	460f      	mov	r7, r1
 80087a4:	2200      	movs	r2, #0
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 fd8f 	bl	80002cc <__adddf3>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4630      	mov	r0, r6
 80087b4:	4639      	mov	r1, r7
 80087b6:	f7f8 f869 	bl	800088c <__aeabi_ddiv>
 80087ba:	f04f 0a01 	mov.w	sl, #1
 80087be:	4604      	mov	r4, r0
 80087c0:	460d      	mov	r5, r1
 80087c2:	e764      	b.n	800868e <atan+0xce>
 80087c4:	4b49      	ldr	r3, [pc, #292]	; (80088ec <atan+0x32c>)
 80087c6:	429e      	cmp	r6, r3
 80087c8:	da1d      	bge.n	8008806 <atan+0x246>
 80087ca:	ee10 0a10 	vmov	r0, s0
 80087ce:	4b48      	ldr	r3, [pc, #288]	; (80088f0 <atan+0x330>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	4629      	mov	r1, r5
 80087d4:	f7f7 fd78 	bl	80002c8 <__aeabi_dsub>
 80087d8:	4b45      	ldr	r3, [pc, #276]	; (80088f0 <atan+0x330>)
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	2200      	movs	r2, #0
 80087e0:	4620      	mov	r0, r4
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7f7 ff28 	bl	8000638 <__aeabi_dmul>
 80087e8:	4b3e      	ldr	r3, [pc, #248]	; (80088e4 <atan+0x324>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	f7f7 fd6e 	bl	80002cc <__adddf3>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4630      	mov	r0, r6
 80087f6:	4639      	mov	r1, r7
 80087f8:	f7f8 f848 	bl	800088c <__aeabi_ddiv>
 80087fc:	f04f 0a02 	mov.w	sl, #2
 8008800:	4604      	mov	r4, r0
 8008802:	460d      	mov	r5, r1
 8008804:	e743      	b.n	800868e <atan+0xce>
 8008806:	462b      	mov	r3, r5
 8008808:	ee10 2a10 	vmov	r2, s0
 800880c:	4939      	ldr	r1, [pc, #228]	; (80088f4 <atan+0x334>)
 800880e:	2000      	movs	r0, #0
 8008810:	f7f8 f83c 	bl	800088c <__aeabi_ddiv>
 8008814:	f04f 0a03 	mov.w	sl, #3
 8008818:	4604      	mov	r4, r0
 800881a:	460d      	mov	r5, r1
 800881c:	e737      	b.n	800868e <atan+0xce>
 800881e:	4b36      	ldr	r3, [pc, #216]	; (80088f8 <atan+0x338>)
 8008820:	4e36      	ldr	r6, [pc, #216]	; (80088fc <atan+0x33c>)
 8008822:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f7f7 fd4d 	bl	80002c8 <__aeabi_dsub>
 800882e:	4622      	mov	r2, r4
 8008830:	462b      	mov	r3, r5
 8008832:	f7f7 fd49 	bl	80002c8 <__aeabi_dsub>
 8008836:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008842:	f7f7 fd41 	bl	80002c8 <__aeabi_dsub>
 8008846:	f1bb 0f00 	cmp.w	fp, #0
 800884a:	4604      	mov	r4, r0
 800884c:	460d      	mov	r5, r1
 800884e:	f6bf aed6 	bge.w	80085fe <atan+0x3e>
 8008852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008856:	461d      	mov	r5, r3
 8008858:	e6d1      	b.n	80085fe <atan+0x3e>
 800885a:	a51d      	add	r5, pc, #116	; (adr r5, 80088d0 <atan+0x310>)
 800885c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008860:	e6cd      	b.n	80085fe <atan+0x3e>
 8008862:	bf00      	nop
 8008864:	f3af 8000 	nop.w
 8008868:	54442d18 	.word	0x54442d18
 800886c:	bff921fb 	.word	0xbff921fb
 8008870:	8800759c 	.word	0x8800759c
 8008874:	7e37e43c 	.word	0x7e37e43c
 8008878:	e322da11 	.word	0xe322da11
 800887c:	3f90ad3a 	.word	0x3f90ad3a
 8008880:	24760deb 	.word	0x24760deb
 8008884:	3fa97b4b 	.word	0x3fa97b4b
 8008888:	a0d03d51 	.word	0xa0d03d51
 800888c:	3fb10d66 	.word	0x3fb10d66
 8008890:	c54c206e 	.word	0xc54c206e
 8008894:	3fb745cd 	.word	0x3fb745cd
 8008898:	920083ff 	.word	0x920083ff
 800889c:	3fc24924 	.word	0x3fc24924
 80088a0:	5555550d 	.word	0x5555550d
 80088a4:	3fd55555 	.word	0x3fd55555
 80088a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80088ac:	bfa2b444 	.word	0xbfa2b444
 80088b0:	52defd9a 	.word	0x52defd9a
 80088b4:	3fadde2d 	.word	0x3fadde2d
 80088b8:	af749a6d 	.word	0xaf749a6d
 80088bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80088c0:	fe231671 	.word	0xfe231671
 80088c4:	3fbc71c6 	.word	0x3fbc71c6
 80088c8:	9998ebc4 	.word	0x9998ebc4
 80088cc:	3fc99999 	.word	0x3fc99999
 80088d0:	54442d18 	.word	0x54442d18
 80088d4:	3ff921fb 	.word	0x3ff921fb
 80088d8:	440fffff 	.word	0x440fffff
 80088dc:	7ff00000 	.word	0x7ff00000
 80088e0:	3fdbffff 	.word	0x3fdbffff
 80088e4:	3ff00000 	.word	0x3ff00000
 80088e8:	3ff2ffff 	.word	0x3ff2ffff
 80088ec:	40038000 	.word	0x40038000
 80088f0:	3ff80000 	.word	0x3ff80000
 80088f4:	bff00000 	.word	0xbff00000
 80088f8:	08008d10 	.word	0x08008d10
 80088fc:	08008cf0 	.word	0x08008cf0

08008900 <fabs>:
 8008900:	ec51 0b10 	vmov	r0, r1, d0
 8008904:	ee10 2a10 	vmov	r2, s0
 8008908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800890c:	ec43 2b10 	vmov	d0, r2, r3
 8008910:	4770      	bx	lr
	...

08008914 <_init>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	bf00      	nop
 8008918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891a:	bc08      	pop	{r3}
 800891c:	469e      	mov	lr, r3
 800891e:	4770      	bx	lr

08008920 <_fini>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	bf00      	nop
 8008924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	469e      	mov	lr, r3
 800892a:	4770      	bx	lr
