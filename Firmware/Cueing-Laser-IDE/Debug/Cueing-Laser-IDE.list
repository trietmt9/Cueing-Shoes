
Cueing-Laser-IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080093a8  080093a8  000193a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009978  08009978  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009978  08009978  00019978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009980  08009980  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009988  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001e8  08009b70  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08009b70  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f52  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b3a  00000000  00000000  000371ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00039ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b80  00000000  00000000  0003ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000051bc  00000000  00000000  0003b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ddb  00000000  00000000  0004093c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f93e3  00000000  00000000  00054717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005020  00000000  00000000  0014dafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00152b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009390 	.word	0x08009390

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009390 	.word	0x08009390

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	0000      	movs	r0, r0
	...

08000f88 <Hamming_window>:

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {}; // Impulse response h(j)

// Apply Hamming Window Method
void Hamming_window(float* window, uint8_t size)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < size; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e032      	b.n	8001000 <Hamming_window+0x78>
    {
        window[i] = 0.54 - 0.46 * cos(2*M_PI/(size - 1));
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fae0 	bl	8000564 <__aeabi_i2d>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	a11b      	add	r1, pc, #108	; (adr r1, 8001018 <Hamming_window+0x90>)
 8000faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fae:	f7ff fc6d 	bl	800088c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	ec43 2b17 	vmov	d7, r2, r3
 8000fba:	eeb0 0a47 	vmov.f32	s0, s14
 8000fbe:	eef0 0a67 	vmov.f32	s1, s15
 8000fc2:	f006 fe61 	bl	8007c88 <cos>
 8000fc6:	ec51 0b10 	vmov	r0, r1, d0
 8000fca:	a315      	add	r3, pc, #84	; (adr r3, 8001020 <Hamming_window+0x98>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fb32 	bl	8000638 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	a113      	add	r1, pc, #76	; (adr r1, 8001028 <Hamming_window+0xa0>)
 8000fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fde:	f7ff f973 	bl	80002c8 <__aeabi_dsub>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	18d4      	adds	r4, r2, r3
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2f>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6023      	str	r3, [r4, #0]
    for(uint8_t i = 0; i < size; i++)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	429a      	cmp	r2, r3
 8001006:	d3c8      	bcc.n	8000f9a <Hamming_window+0x12>
    }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	bf00      	nop
 8001014:	f3af 8000 	nop.w
 8001018:	54442d18 	.word	0x54442d18
 800101c:	401921fb 	.word	0x401921fb
 8001020:	d70a3d71 	.word	0xd70a3d71
 8001024:	3fdd70a3 	.word	0x3fdd70a3
 8001028:	147ae148 	.word	0x147ae148
 800102c:	3fe147ae 	.word	0x3fe147ae

08001030 <Window_Coeficient>:

void Window_Coeficient(float *coefficient, float *window, uint8_t size)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0 ; i < size; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]
 8001042:	e016      	b.n	8001072 <Window_Coeficient+0x42>
    {
        coefficient[i] *= window[i];
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	ed93 7a00 	vldr	s14, [r3]
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	4413      	add	r3, r2
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001068:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0 ; i < size; i++)
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	3301      	adds	r3, #1
 8001070:	75fb      	strb	r3, [r7, #23]
 8001072:	7dfa      	ldrb	r2, [r7, #23]
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	429a      	cmp	r2, r3
 8001078:	d3e4      	bcc.n	8001044 <Window_Coeficient+0x14>
    }
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <Filter_init>:

void Filter_init(FIR_Filter *fir)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    /* Clear filter buffer */
    for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e009      	b.n	80010aa <Filter_init+0x22>
    {
        fir->buffer[n] = 0.0f;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
    for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d9f2      	bls.n	8001096 <Filter_init+0xe>
    }

    /* Reset buffer index */
    fir->buffer_index = 0; // input index of the buffer x(n)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Clear filter output */

    fir->output = 0.0f; // output y(n)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	645a      	str	r2, [r3, #68]	; 0x44

    // Apply Hamming window method for impulse response 
    float Window;
    Hamming_window(&Window, FIR_FILTER_LENGTH);
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2110      	movs	r1, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff5e 	bl	8000f88 <Hamming_window>
    Window_Coeficient(&FIR_IMPULSE_RESPONSE, &Window, FIR_FILTER_LENGTH);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2210      	movs	r2, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <Filter_init+0x5c>)
 80010d6:	f7ff ffab 	bl	8001030 <Window_Coeficient>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000204 	.word	0x20000204

080010e8 <Filter_update>:

float Filter_update(FIR_Filter* fir, float input)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	ed87 0a00 	vstr	s0, [r7]
    /* Store latest sample in buffer */
    fir->buffer[fir->buffer_index] = input;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	601a      	str	r2, [r3, #0]

    /* Increment the buffer index */
    fir->buffer_index++;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800110a:	3301      	adds	r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Check if buffer index equal to FIR_FILTER_LENGTH 
    if (fir->buffer_index == FIR_FILTER_LENGTH)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800111a:	2b10      	cmp	r3, #16
 800111c:	d103      	bne.n	8001126 <Filter_update+0x3e>
    {
        fir->buffer_index = 0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
    /* Compute new output sample (use convolution) */
    fir->output = 0.0f; 
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
    uint8_t sumIndex = fir->buffer_index;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001134:	73fb      	strb	r3, [r7, #15]
    for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8001136:	2300      	movs	r3, #0
 8001138:	73bb      	strb	r3, [r7, #14]
 800113a:	e021      	b.n	8001180 <Filter_update+0x98>
    {
        /* Decrement index and wrap it necessary */
        if (sumIndex > 0)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <Filter_update+0x62>
        {
            sumIndex--;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3b01      	subs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e001      	b.n	800114e <Filter_update+0x66>
        }
        // Shift Impulse response index
        else 
        {
            sumIndex = FIR_FILTER_LENGTH - 1;
 800114a:	230f      	movs	r3, #15
 800114c:	73fb      	strb	r3, [r7, #15]
        }

    /* Multiply Impulse response with shifted input sample and add to output */
        // y[n] += h[j]*x[n-j]
        fir->output += FIR_IMPULSE_RESPONSE[n] * fir->buffer[sumIndex];
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	4a11      	ldr	r2, [pc, #68]	; (800119c <Filter_update+0xb4>)
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	edd3 6a00 	vldr	s13, [r3]
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	3301      	adds	r3, #1
 800117e:	73bb      	strb	r3, [r7, #14]
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	d9da      	bls.n	800113c <Filter_update+0x54>
    }
    return fir->output;  
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20000204 	.word	0x20000204

080011a0 <CS_SELECT>:
 * @brief Activates the chip select pin.
 *
 * This function Activates the chip select pin (GPIOA4) by setting it to GPIO_PIN_RESET.
 */
inline static void CS_SELECT()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 80011a4:	2064      	movs	r0, #100	; 0x64
 80011a6:	f001 f8eb 	bl	8002380 <HAL_Delay>
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2120      	movs	r1, #32
 80011ae:	4802      	ldr	r0, [pc, #8]	; (80011b8 <CS_SELECT+0x18>)
 80011b0:	f001 fdf6 	bl	8002da0 <HAL_GPIO_WritePin>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020800 	.word	0x40020800

080011bc <CS_UNSELECT>:
 * @brief Deactivates the chip select pin.
 *
 * This function deactivates the chip select pin (GPIOA4) by setting it to GPIO_PIN_SET.
 */
inline static void CS_UNSELECT(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2120      	movs	r1, #32
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <CS_UNSELECT+0x14>)
 80011c6:	f001 fdeb 	bl	8002da0 <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40020800 	.word	0x40020800

080011d4 <SPI_WriteByte>:
 * then writes the data from the provided pointer.
 *
 * @note The SPI handle must be initialized and configured before calling this function.
 */
void SPI_WriteByte(SPI_HandleTypeDef *SPIx, uint8_t Register, uint8_t* pData, uint8_t Data_length)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	461a      	mov	r2, r3
 80011e0:	460b      	mov	r3, r1
 80011e2:	72fb      	strb	r3, [r7, #11]
 80011e4:	4613      	mov	r3, r2
 80011e6:	72bb      	strb	r3, [r7, #10]
    CS_SELECT();
 80011e8:	f7ff ffda 	bl	80011a0 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 80011ec:	f107 010b 	add.w	r1, r7, #11
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	2201      	movs	r2, #1
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f002 fc7a 	bl	8003aee <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pData, Data_length, SPI_TIMEOUT);
 80011fa:	7abb      	ldrb	r3, [r7, #10]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	2364      	movs	r3, #100	; 0x64
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f002 fc73 	bl	8003aee <HAL_SPI_Transmit>
    CS_UNSELECT();
 8001208:	f7ff ffd8 	bl	80011bc <CS_UNSELECT>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <USER_BANK_SELECTION>:
 * 
 * @param user_bank The user bank to select.
 * @param SPIx The SPI handle.
 */
void USER_BANK_SELECTION(SPI_HandleTypeDef *SPIx, uint8_t USER_BANK_SELECT)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
    uint8_t user_bank_options = 0; 
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
    user_bank_options = (USER_BANK_SELECT << USER_BANK); // select the user bank 
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	b2db      	uxtb	r3, r3
 800122a:	73fb      	strb	r3, [r7, #15]
    CS_SELECT();
 800122c:	f7ff ffb8 	bl	80011a0 <CS_SELECT>
    SPI_WriteByte(SPIx, ICM20948_REG_BANK_SEL, &user_bank_options, 1);
 8001230:	f107 020f 	add.w	r2, r7, #15
 8001234:	2301      	movs	r3, #1
 8001236:	217f      	movs	r1, #127	; 0x7f
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffcb 	bl	80011d4 <SPI_WriteByte>
    CS_UNSELECT();
 800123e:	f7ff ffbd 	bl	80011bc <CS_UNSELECT>
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <SPI_WriteRegisters>:
 * @param Register The register to write to.
 * @param Data The data to write.
 * @param Data_length The length of the data to write.
 */
void SPI_WriteRegisters(usrbank_sel user_bank, SPI_HandleTypeDef *SPIx, uint8_t Register, uint8_t* Data, uint8_t Data_length)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	4613      	mov	r3, r2
 800125a:	73bb      	strb	r3, [r7, #14]
    USER_BANK_SELECTION(SPIx, user_bank);
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	4619      	mov	r1, r3
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f7ff ffd7 	bl	8001214 <USER_BANK_SELECTION>
    CS_SELECT();
 8001266:	f7ff ff9b 	bl	80011a0 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 800126a:	f107 010e 	add.w	r1, r7, #14
 800126e:	2364      	movs	r3, #100	; 0x64
 8001270:	2201      	movs	r2, #1
 8001272:	68b8      	ldr	r0, [r7, #8]
 8001274:	f002 fc3b 	bl	8003aee <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, Data, Data_length, SPI_TIMEOUT);
 8001278:	7e3b      	ldrb	r3, [r7, #24]
 800127a:	b29a      	uxth	r2, r3
 800127c:	2364      	movs	r3, #100	; 0x64
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f002 fc34 	bl	8003aee <HAL_SPI_Transmit>
    CS_UNSELECT();
 8001286:	f7ff ff99 	bl	80011bc <CS_UNSELECT>
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <SPI_ReadRegisters>:
 * @param Register The register to read from.
 * @param pData The data to read into.
 * @param Data_length The length of the data to read.
 */
void SPI_ReadRegisters(usrbank_sel user_bank, SPI_HandleTypeDef *SPIx, uint8_t reg, uint8_t* pData, uint8_t Data_length) 
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	4613      	mov	r3, r2
 80012a2:	73bb      	strb	r3, [r7, #14]
    reg |= 0x80;
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	73bb      	strb	r3, [r7, #14]
    USER_BANK_SELECTION(SPIx, user_bank);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	4619      	mov	r1, r3
 80012b2:	68b8      	ldr	r0, [r7, #8]
 80012b4:	f7ff ffae 	bl	8001214 <USER_BANK_SELECTION>
    CS_SELECT();
 80012b8:	f7ff ff72 	bl	80011a0 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &reg, 1, SPI_TIMEOUT);
 80012bc:	f107 010e 	add.w	r1, r7, #14
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	2201      	movs	r2, #1
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f002 fc12 	bl	8003aee <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pData, Data_length, SPI_TIMEOUT);
 80012ca:	7e3b      	ldrb	r3, [r7, #24]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	2364      	movs	r3, #100	; 0x64
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f002 fd4e 	bl	8003d74 <HAL_SPI_Receive>
    CS_UNSELECT();
 80012d8:	f7ff ff70 	bl	80011bc <CS_UNSELECT>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <WHO_AM_I_CHECK>:
 *
 * @param[in] SPIx The SPI handle to use for communication.
 * @param[out] who_am_i The pointer to the byte of data to be read.
 */
void WHO_AM_I_CHECK(SPI_HandleTypeDef *SPIx, uint8_t* who_am_i)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_WHO_AM_I, who_am_i, 1);
 80012ee:	2301      	movs	r3, #1
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff ffca 	bl	8001292 <SPI_ReadRegisters>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <ICM20948_Read>:
 *
 * @param[in] SPIx The SPI handle to use for communication.
 * @param[out] data A pointer to a struct containing the accelerometer and gyroscope data.
 */
void ICM20948_Read(SPI_HandleTypeDef* SPIx, gyro_accel_data_t* data)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
    // Read accelerometer data
    uint8_t accel_data[6];
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_ACCEL_XOUT_H, accel_data, 6);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	2206      	movs	r2, #6
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	222d      	movs	r2, #45	; 0x2d
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff ffb7 	bl	8001292 <SPI_ReadRegisters>
    data->RAW_Ax = (int16_t)(accel_data[0]<<8|accel_data[1]);
 8001324:	7c3b      	ldrb	r3, [r7, #16]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	7c7b      	ldrb	r3, [r7, #17]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	80da      	strh	r2, [r3, #6]
    data->RAW_Ay = (int16_t)(accel_data[2]<<8|accel_data[3]);
 8001336:	7cbb      	ldrb	r3, [r7, #18]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21a      	sxth	r2, r3
 800133c:	7cfb      	ldrb	r3, [r7, #19]
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b21a      	sxth	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	811a      	strh	r2, [r3, #8]
    data->RAW_Az = (int16_t)(accel_data[4]<<8|accel_data[5]);
 8001348:	7d3b      	ldrb	r3, [r7, #20]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	7d7b      	ldrb	r3, [r7, #21]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21a      	sxth	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	815a      	strh	r2, [r3, #10]

    // Convert accelerometer raw data to true accelerometer data
    data->Ax = (double)data->RAW_Ax / 8;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8ff 	bl	8000564 <__aeabi_i2d>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4b99      	ldr	r3, [pc, #612]	; (80015d0 <ICM20948_Read+0x2c8>)
 800136c:	f7ff fa8e 	bl	800088c <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fc36 	bl	8000be8 <__aeabi_d2f>
 800137c:	4602      	mov	r2, r0
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	619a      	str	r2, [r3, #24]
    data->Ay = (double)data->RAW_Ay / 8;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8eb 	bl	8000564 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b8f      	ldr	r3, [pc, #572]	; (80015d0 <ICM20948_Read+0x2c8>)
 8001394:	f7ff fa7a 	bl	800088c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fc22 	bl	8000be8 <__aeabi_d2f>
 80013a4:	4602      	mov	r2, r0
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	61da      	str	r2, [r3, #28]
    data->Az = (double)data->RAW_Az / 8;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8d7 	bl	8000564 <__aeabi_i2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b85      	ldr	r3, [pc, #532]	; (80015d0 <ICM20948_Read+0x2c8>)
 80013bc:	f7ff fa66 	bl	800088c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fc0e 	bl	8000be8 <__aeabi_d2f>
 80013cc:	4602      	mov	r2, r0
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	621a      	str	r2, [r3, #32]

    // Read gyroscope data
    uint8_t gyro_data[6];
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_GYRO_XOUT_H, gyro_data, 6);
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	2206      	movs	r2, #6
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	2233      	movs	r2, #51	; 0x33
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff ff57 	bl	8001292 <SPI_ReadRegisters>
    data->RAW_Gx = (int16_t)(gyro_data[0]<<8|gyro_data[1]);
 80013e4:	7a3b      	ldrb	r3, [r7, #8]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	7a7b      	ldrb	r3, [r7, #9]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	801a      	strh	r2, [r3, #0]
    data->RAW_Gy = (int16_t)(gyro_data[2]<<8|gyro_data[3]);
 80013f6:	7abb      	ldrb	r3, [r7, #10]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21a      	sxth	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	805a      	strh	r2, [r3, #2]
    data->RAW_Gz = (int16_t)(gyro_data[4]<<8|gyro_data[5]);
 8001408:	7b3b      	ldrb	r3, [r7, #12]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	b21a      	sxth	r2, r3
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21a      	sxth	r2, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	809a      	strh	r2, [r3, #4]

    // Convert gyroscope raw data to true gyroscope data
    data->Gx = (double)data->RAW_Gx / 500;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f89f 	bl	8000564 <__aeabi_i2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <ICM20948_Read+0x2cc>)
 800142c:	f7ff fa2e 	bl	800088c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbd6 	bl	8000be8 <__aeabi_d2f>
 800143c:	4602      	mov	r2, r0
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	60da      	str	r2, [r3, #12]
    data->Gy = (double)data->RAW_Gy / 500;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f88b 	bl	8000564 <__aeabi_i2d>
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b60      	ldr	r3, [pc, #384]	; (80015d4 <ICM20948_Read+0x2cc>)
 8001454:	f7ff fa1a 	bl	800088c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fbc2 	bl	8000be8 <__aeabi_d2f>
 8001464:	4602      	mov	r2, r0
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	611a      	str	r2, [r3, #16]
    data->Gz = (double)data->RAW_Gz / 500;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f877 	bl	8000564 <__aeabi_i2d>
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <ICM20948_Read+0x2cc>)
 800147c:	f7ff fa06 	bl	800088c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fbae 	bl	8000be8 <__aeabi_d2f>
 800148c:	4602      	mov	r2, r0
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	615a      	str	r2, [r3, #20]

    // compute Roll Pitch angle
    data->Roll = atan2(data->Ay, sqrt((data->Ax*data->Ax) + (data->Az*data->Az))) * 180 / M_PI;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f876 	bl	8000588 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	edd3 6a08 	vldr	s13, [r3, #32]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80014bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	ee17 0a90 	vmov	r0, s15
 80014c8:	f7ff f85e 	bl	8000588 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	ec43 2b10 	vmov	d0, r2, r3
 80014d4:	f006 fbaa 	bl	8007c2c <sqrt>
 80014d8:	eeb0 7a40 	vmov.f32	s14, s0
 80014dc:	eef0 7a60 	vmov.f32	s15, s1
 80014e0:	eeb0 1a47 	vmov.f32	s2, s14
 80014e4:	eef0 1a67 	vmov.f32	s3, s15
 80014e8:	ec45 4b10 	vmov	d0, r4, r5
 80014ec:	f006 fb9c 	bl	8007c28 <atan2>
 80014f0:	ec51 0b10 	vmov	r0, r1, d0
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <ICM20948_Read+0x2d0>)
 80014fa:	f7ff f89d 	bl	8000638 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	a330      	add	r3, pc, #192	; (adr r3, 80015c8 <ICM20948_Read+0x2c0>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f9be 	bl	800088c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb66 	bl	8000be8 <__aeabi_d2f>
 800151c:	4602      	mov	r2, r0
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
    data->Pitch = atan2(-data->Ax, sqrt((data->Ay*data->Ay) + (data->Az*data->Az))) * 180 / M_PI;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	edd3 7a06 	vldr	s15, [r3, #24]
 8001528:	eef1 7a67 	vneg.f32	s15, s15
 800152c:	ee17 3a90 	vmov	r3, s15
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f829 	bl	8000588 <__aeabi_f2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	edd3 7a07 	vldr	s15, [r3, #28]
 8001546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	edd3 6a08 	vldr	s13, [r3, #32]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	edd3 7a08 	vldr	s15, [r3, #32]
 8001556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	ee17 0a90 	vmov	r0, s15
 8001562:	f7ff f811 	bl	8000588 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	ec43 2b10 	vmov	d0, r2, r3
 800156e:	f006 fb5d 	bl	8007c2c <sqrt>
 8001572:	eeb0 7a40 	vmov.f32	s14, s0
 8001576:	eef0 7a60 	vmov.f32	s15, s1
 800157a:	eeb0 1a47 	vmov.f32	s2, s14
 800157e:	eef0 1a67 	vmov.f32	s3, s15
 8001582:	ec45 4b10 	vmov	d0, r4, r5
 8001586:	f006 fb4f 	bl	8007c28 <atan2>
 800158a:	ec51 0b10 	vmov	r0, r1, d0
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <ICM20948_Read+0x2d0>)
 8001594:	f7ff f850 	bl	8000638 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	a309      	add	r3, pc, #36	; (adr r3, 80015c8 <ICM20948_Read+0x2c0>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f971 	bl	800088c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fb19 	bl	8000be8 <__aeabi_d2f>
 80015b6:	4602      	mov	r2, r0
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28

}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	f3af 8000 	nop.w
 80015c8:	54442d18 	.word	0x54442d18
 80015cc:	400921fb 	.word	0x400921fb
 80015d0:	40200000 	.word	0x40200000
 80015d4:	407f4000 	.word	0x407f4000
 80015d8:	40668000 	.word	0x40668000

080015dc <ICM20948_Init>:
 * @brief Initial setting for the accelerometer and gyroscope data of the ICM20948 sensor.
 *
 * @param[in] SPIx The SPI handle to use for communication.
 */
void ICM20948_Init(SPI_HandleTypeDef *SPIx)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	6078      	str	r0, [r7, #4]
    uint8_t temp_data = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
    uint8_t who_am_i = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73bb      	strb	r3, [r7, #14]
    WHO_AM_I_CHECK(SPIx, &who_am_i);
 80015ec:	f107 030e 	add.w	r3, r7, #14
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fe76 	bl	80012e4 <WHO_AM_I_CHECK>
    if(who_am_i == ICM20948_AVAILABLE)
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
 80015fa:	2bea      	cmp	r3, #234	; 0xea
 80015fc:	d17c      	bne.n	80016f8 <ICM20948_Init+0x11c>
    {
        // Disable I2C slave module
        temp_data = (I2C_DISABLE<< I2C_IF_DIS);
 80015fe:	2310      	movs	r3, #16
 8001600:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_USER_CTRL, &temp_data, sizeof(temp_data));
 8001602:	f107 030f 	add.w	r3, r7, #15
 8001606:	2201      	movs	r2, #1
 8001608:	9200      	str	r2, [sp, #0]
 800160a:	2203      	movs	r2, #3
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff fe1b 	bl	800124a <SPI_WriteRegisters>

        // Reset the IMU, in this configuration temp will equal to 0xC1u 
        temp_data = 0; 
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
        temp_data |= (BEST_CLK_SRC << CLKSEL)|( SLEEP_EN << SLEEP)|(DEVICE_RST << DEVICE_RESET);
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800161e:	b2db      	uxtb	r3, r3
 8001620:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_PWR_MGMT_1, &temp_data, sizeof(temp_data));
 8001622:	f107 030f 	add.w	r3, r7, #15
 8001626:	2201      	movs	r2, #1
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	2206      	movs	r2, #6
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff fe0b 	bl	800124a <SPI_WriteRegisters>

        // Exit sleep mode
        temp_data = 0; 
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
        temp_data |= (BEST_CLK_SRC << CLKSEL);
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_PWR_MGMT_1, &temp_data, sizeof(temp_data));
 8001642:	f107 030f 	add.w	r3, r7, #15
 8001646:	2201      	movs	r2, #1
 8001648:	9200      	str	r2, [sp, #0]
 800164a:	2206      	movs	r2, #6
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fdfb 	bl	800124a <SPI_WriteRegisters>

        // Bias cancellation

        // GYRO_BIAS_CANCELLATION(SPIx);
        // Choose sample rate divider at 100, temp = 0x64u
        temp_data = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
        temp_data |= (GYRO_SMPLRT_DIV_100 << GYRO_SMPLRT_DIV);
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	f043 0364 	orr.w	r3, r3, #100	; 0x64
 800165e:	b2db      	uxtb	r3, r3
 8001660:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, GYRO_SMPLRT_DIV, &temp_data, sizeof(temp_data));
 8001662:	f107 030f 	add.w	r3, r7, #15
 8001666:	2201      	movs	r2, #1
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	2002      	movs	r0, #2
 8001670:	f7ff fdeb 	bl	800124a <SPI_WriteRegisters>

        // Enable low-pass filter  
        // Choose full scale rate at 500 dps with 3 decibels band-with is 51.2Hz and Noise band-with is 73.3Hz
        temp_data = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
        temp_data |= (DLPF_ENABLED << GYRO_FCHOICE)|(GYRO_FS_500DPS << GYRO_FS_SEL)|(GYRO_11_6Hz_17_8Hz << GYRO_DLPFCFG);
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800167e:	b2db      	uxtb	r3, r3
 8001680:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_GYRO_CONFIG_1, &temp_data, sizeof(temp_data));
 8001682:	f107 030f 	add.w	r3, r7, #15
 8001686:	2201      	movs	r2, #1
 8001688:	9200      	str	r2, [sp, #0]
 800168a:	2201      	movs	r2, #1
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	2002      	movs	r0, #2
 8001690:	f7ff fddb 	bl	800124a <SPI_WriteRegisters>

        // Enable output data rate alignment 
        temp_data = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
        temp_data |= (ODR_ALGIN_ON << ODR_ALIGN_EN);
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ODR_ALIGN_EN, &temp_data, sizeof(temp_data));
 80016a2:	f107 030f 	add.w	r3, r7, #15
 80016a6:	2201      	movs	r2, #1
 80016a8:	9200      	str	r2, [sp, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	2002      	movs	r0, #2
 80016b0:	f7ff fdcb 	bl	800124a <SPI_WriteRegisters>

        // Select sample rate divider for Accelerometer 
        temp_data = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
        temp_data |= (ACCEL_SMPLRT_DIV_1000<<ACCEL_SMPLRT_DIV_2);
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	f063 0317 	orn	r3, r3, #23
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_ACCEL_SMPLRT_DIV_2, &temp_data, sizeof(temp_data));
 80016c6:	f107 030f 	add.w	r3, r7, #15
 80016ca:	2201      	movs	r2, #1
 80016cc:	9200      	str	r2, [sp, #0]
 80016ce:	2211      	movs	r2, #17
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	2002      	movs	r0, #2
 80016d4:	f7ff fdb9 	bl	800124a <SPI_WriteRegisters>

        // Select accelerometer at 8g 
        // Enable low-pass filter 
        temp_data = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
        temp_data |= (DLPF_ENABLED << ACCEL_FCHOICE)|(ACCEL_FS_8G << ACCEL_FS_SEL)|(ACCEL_111_4Hz_136Hz << ACCEL_DLPFCFG);
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f043 0315 	orr.w	r3, r3, #21
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_ACCEL_CONFIG_1, &temp_data, sizeof(temp_data));
 80016e6:	f107 030f 	add.w	r3, r7, #15
 80016ea:	2201      	movs	r2, #1
 80016ec:	9200      	str	r2, [sp, #0]
 80016ee:	2214      	movs	r2, #20
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	2002      	movs	r0, #2
 80016f4:	f7ff fda9 	bl	800124a <SPI_WriteRegisters>

    }
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <Servo3_setAngle>:
 *
 * This function sets the angle for Servo 3 by calculating the corresponding PWM value and writing it to the TIM4 CCR3 register.
 *
 * @param angle The desired angle for Servo 3 in degrees.
 */
void Servo3_setAngle(angle_t angle) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
    uint8_t pwm;
    
    pwm = ((angle*10)/90)+5;
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4a09      	ldr	r2, [pc, #36]	; (8001734 <Servo3_setAngle+0x34>)
 800170e:	fb82 1203 	smull	r1, r2, r2, r3
 8001712:	1052      	asrs	r2, r2, #1
 8001714:	17db      	asrs	r3, r3, #31
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3305      	adds	r3, #5
 800171c:	73fb      	strb	r3, [r7, #15]
    TIM4->CCR3 = pwm;
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <Servo3_setAngle+0x38>)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001724:	2108      	movs	r1, #8
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <Servo3_setAngle+0x3c>)
 8001728:	f002 ffd6 	bl	80046d8 <HAL_TIM_PWM_Start>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	38e38e39 	.word	0x38e38e39
 8001738:	40000800 	.word	0x40000800
 800173c:	200003c0 	.word	0x200003c0

08001740 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001746:	463b      	mov	r3, r7
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_ADC1_Init+0x98>)
 8001754:	4a21      	ldr	r2, [pc, #132]	; (80017dc <MX_ADC1_Init+0x9c>)
 8001756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_ADC1_Init+0x98>)
 800175a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800175e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_ADC1_Init+0x98>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_ADC1_Init+0x98>)
 8001768:	2201      	movs	r2, #1
 800176a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_ADC1_Init+0x98>)
 800176e:	2201      	movs	r2, #1
 8001770:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_ADC1_Init+0x98>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_ADC1_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_ADC1_Init+0x98>)
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <MX_ADC1_Init+0xa0>)
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_ADC1_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_ADC1_Init+0x98>)
 800178e:	2201      	movs	r2, #1
 8001790:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_ADC1_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_ADC1_Init+0x98>)
 800179c:	2201      	movs	r2, #1
 800179e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_ADC1_Init+0x98>)
 80017a2:	f000 fe11 	bl	80023c8 <HAL_ADC_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017ac:	f000 f9d4 	bl	8001b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80017b0:	230d      	movs	r3, #13
 80017b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_ADC1_Init+0x98>)
 80017c2:	f000 fe45 	bl	8002450 <HAL_ADC_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017cc:	f000 f9c4 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000244 	.word	0x20000244
 80017dc:	40012000 	.word	0x40012000
 80017e0:	0f000001 	.word	0x0f000001

080017e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_ADC_MspInit+0x7c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d127      	bne.n	8001856 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_ADC_MspInit+0x80>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a15      	ldr	r2, [pc, #84]	; (8001864 <HAL_ADC_MspInit+0x80>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_ADC_MspInit+0x80>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_ADC_MspInit+0x80>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_ADC_MspInit+0x80>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_ADC_MspInit+0x80>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800183e:	230c      	movs	r3, #12
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001842:	2303      	movs	r3, #3
 8001844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_ADC_MspInit+0x84>)
 8001852:	f001 f911 	bl	8002a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40012000 	.word	0x40012000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020800 	.word	0x40020800

0800186c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC0   ------> USB_OTG_HS_ULPI_STP
*/
void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b48      	ldr	r3, [pc, #288]	; (80019a8 <MX_GPIO_Init+0x13c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <MX_GPIO_Init+0x13c>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <MX_GPIO_Init+0x13c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a40      	ldr	r2, [pc, #256]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <MX_GPIO_Init+0x13c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CE_Pin|NRF24_CS_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2118      	movs	r1, #24
 80018f6:	482d      	ldr	r0, [pc, #180]	; (80019ac <MX_GPIO_Init+0x140>)
 80018f8:	f001 fa52 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2120      	movs	r1, #32
 8001900:	482b      	ldr	r0, [pc, #172]	; (80019b0 <MX_GPIO_Init+0x144>)
 8001902:	f001 fa4d 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2101      	movs	r1, #1
 800190a:	482a      	ldr	r0, [pc, #168]	; (80019b4 <MX_GPIO_Init+0x148>)
 800190c:	f001 fa48 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001910:	2301      	movs	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001920:	230a      	movs	r3, #10
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4821      	ldr	r0, [pc, #132]	; (80019b0 <MX_GPIO_Init+0x144>)
 800192c:	f001 f8a4 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CS_Pin;
 8001930:	2318      	movs	r3, #24
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4819      	ldr	r0, [pc, #100]	; (80019ac <MX_GPIO_Init+0x140>)
 8001948:	f001 f896 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_INT_Pin;
 800194c:	2310      	movs	r3, #16
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001950:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_INT_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_GPIO_Init+0x144>)
 8001962:	f001 f889 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8001966:	2320      	movs	r3, #32
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_GPIO_Init+0x144>)
 800197e:	f001 f87b 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001982:	2301      	movs	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <MX_GPIO_Init+0x148>)
 800199a:	f001 f86d 	bl	8002a78 <HAL_GPIO_Init>

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020400 	.word	0x40020400

080019b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019be:	f000 fc6d 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c2:	f000 f855 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c6:	f7ff ff51 	bl	800186c <MX_GPIO_Init>
  MX_SPI1_Init();
 80019ca:	f000 f8cb 	bl	8001b64 <MX_SPI1_Init>
  MX_TIM3_Init();
 80019ce:	f000 fa71 	bl	8001eb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019d2:	f000 fb05 	bl	8001fe0 <MX_TIM4_Init>
  MX_ADC1_Init();
 80019d6:	f7ff feb3 	bl	8001740 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  
  ICM20948_Init(&hspi1);
 80019da:	4820      	ldr	r0, [pc, #128]	; (8001a5c <main+0xa4>)
 80019dc:	f7ff fdfe 	bl	80015dc <ICM20948_Init>
  Filter_init(&low_pass_filter);
 80019e0:	481f      	ldr	r0, [pc, #124]	; (8001a60 <main+0xa8>)
 80019e2:	f7ff fb51 	bl	8001088 <Filter_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  ICM20948_Read(&hspi1, &data);
 80019e6:	491f      	ldr	r1, [pc, #124]	; (8001a64 <main+0xac>)
 80019e8:	481c      	ldr	r0, [pc, #112]	; (8001a5c <main+0xa4>)
 80019ea:	f7ff fc8d 	bl	8001308 <ICM20948_Read>
  // Capture Roll and Pitch angle 
  MotionCapture[0] = data.Roll;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <main+0xac>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <main+0xb0>)
 80019f4:	6013      	str	r3, [r2, #0]
  MotionCapture[1] = data.Pitch;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <main+0xac>)
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <main+0xb0>)
 80019fc:	6053      	str	r3, [r2, #4]

  // Apply FIR filter for both angle
  Filter_update(&low_pass_filter,MotionCapture[0]);
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <main+0xb0>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	eeb0 0a67 	vmov.f32	s0, s15
 8001a08:	4815      	ldr	r0, [pc, #84]	; (8001a60 <main+0xa8>)
 8001a0a:	f7ff fb6d 	bl	80010e8 <Filter_update>
  Filter_Data[0] = low_pass_filter.output;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <main+0xa8>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <main+0xb4>)
 8001a14:	6013      	str	r3, [r2, #0]

  Filter_update(&low_pass_filter,MotionCapture[1]);
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <main+0xb0>)
 8001a18:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a20:	480f      	ldr	r0, [pc, #60]	; (8001a60 <main+0xa8>)
 8001a22:	f7ff fb61 	bl	80010e8 <Filter_update>
  Filter_Data[1] = low_pass_filter.output;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <main+0xa8>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <main+0xb4>)
 8001a2c:	6053      	str	r3, [r2, #4]

  
	for(uint8_t i=0; i < 181; i++ )
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71fb      	strb	r3, [r7, #7]
 8001a32:	e00e      	b.n	8001a52 <main+0x9a>
		{
			Servo3_setAngle(i);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe62 	bl	8001700 <Servo3_setAngle>
			HAL_Delay(10);
 8001a3c:	200a      	movs	r0, #10
 8001a3e:	f000 fc9f 	bl	8002380 <HAL_Delay>
			if(i == 180) i = 0;
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2bb4      	cmp	r3, #180	; 0xb4
 8001a46:	d101      	bne.n	8001a4c <main+0x94>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i < 181; i++ )
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2bb4      	cmp	r3, #180	; 0xb4
 8001a56:	d9ed      	bls.n	8001a34 <main+0x7c>
  ICM20948_Read(&hspi1, &data);
 8001a58:	e7c5      	b.n	80019e6 <main+0x2e>
 8001a5a:	bf00      	nop
 8001a5c:	2000031c 	.word	0x2000031c
 8001a60:	200002bc 	.word	0x200002bc
 8001a64:	2000028c 	.word	0x2000028c
 8001a68:	20000304 	.word	0x20000304
 8001a6c:	20000310 	.word	0x20000310

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b094      	sub	sp, #80	; 0x50
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	2234      	movs	r2, #52	; 0x34
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 f97f 	bl	8005d82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <SystemClock_Config+0xe0>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <SystemClock_Config+0xe0>)
 8001a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <SystemClock_Config+0xe0>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <SystemClock_Config+0xe4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <SystemClock_Config+0xe4>)
 8001aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <SystemClock_Config+0xe4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001ae4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001ae8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001aee:	2307      	movs	r3, #7
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fcd0 	bl	80034a0 <HAL_RCC_OscConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b06:	f000 f827 	bl	8001b58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b0a:	f001 f963 	bl	8002dd4 <HAL_PWREx_EnableOverDrive>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001b14:	f000 f820 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	2105      	movs	r1, #5
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 f99c 	bl	8002e74 <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001b42:	f000 f809 	bl	8001b58 <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40007000 	.word	0x40007000

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>
	...

08001b64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b6a:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <MX_SPI1_Init+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b84:	2202      	movs	r2, #2
 8001b86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b98:	2218      	movs	r2, #24
 8001b9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001bb6:	f001 ff11 	bl	80039dc <HAL_SPI_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bc0:	f7ff ffca 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000031c 	.word	0x2000031c
 8001bcc:	40013000 	.word	0x40013000

08001bd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_SPI_MspInit+0x84>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12b      	bne.n	8001c4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_SPI_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c2a:	23e0      	movs	r3, #224	; 0xe0
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_SPI_MspInit+0x8c>)
 8001c46:	f000 ff17 	bl	8002a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013000 	.word	0x40013000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_MspInit+0x4c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <HAL_MspInit+0x4c>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_MspInit+0x4c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_MspInit+0x4c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_MspInit+0x4c>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_MspInit+0x4c>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c9e:	2007      	movs	r0, #7
 8001ca0:	f000 feb6 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfc:	f000 fb20 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_kill>:

int _kill(int pid, int sig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d1e:	f004 f883 	bl	8005e28 <__errno>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2216      	movs	r2, #22
 8001d26:	601a      	str	r2, [r3, #0]
  return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_exit>:

void _exit (int status)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ffe7 	bl	8001d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d46:	e7fe      	b.n	8001d46 <_exit+0x12>

08001d48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e00a      	b.n	8001d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5a:	f3af 8000 	nop.w
 8001d5e:	4601      	mov	r1, r0
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	60ba      	str	r2, [r7, #8]
 8001d66:	b2ca      	uxtb	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf0      	blt.n	8001d5a <_read+0x12>
  }

  return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e009      	b.n	8001da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	60ba      	str	r2, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf1      	blt.n	8001d94 <_write+0x12>
  }
  return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_close>:

int _close(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de2:	605a      	str	r2, [r3, #4]
  return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_isatty>:

int _isatty(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f003 ffe8 	bl	8005e28 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20020000 	.word	0x20020000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	20000374 	.word	0x20000374
 8001e8c:	20000558 	.word	0x20000558

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08e      	sub	sp, #56	; 0x38
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec8:	f107 0320 	add.w	r3, r7, #32
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <MX_TIM3_Init+0x128>)
 8001ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001eec:	2259      	movs	r2, #89	; 0x59
 8001eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001ef8:	2263      	movs	r2, #99	; 0x63
 8001efa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f08:	4833      	ldr	r0, [pc, #204]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001f0a:	f002 fb3d 	bl	8004588 <HAL_TIM_Base_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001f14:	f7ff fe20 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f22:	4619      	mov	r1, r3
 8001f24:	482c      	ldr	r0, [pc, #176]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001f26:	f002 fd61 	bl	80049ec <HAL_TIM_ConfigClockSource>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001f30:	f7ff fe12 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f34:	4828      	ldr	r0, [pc, #160]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001f36:	f002 fb76 	bl	8004626 <HAL_TIM_PWM_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001f40:	f7ff fe0a 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	4619      	mov	r1, r3
 8001f52:	4821      	ldr	r0, [pc, #132]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001f54:	f003 f92e 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001f5e:	f7ff fdfb 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f62:	2360      	movs	r3, #96	; 0x60
 8001f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4817      	ldr	r0, [pc, #92]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001f7a:	f002 fc75 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001f84:	f7ff fde8 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4812      	ldr	r0, [pc, #72]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001f90:	f002 fc6a 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001f9a:	f7ff fddd 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001fa6:	f002 fc5f 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001fb0:	f7ff fdd2 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001fbc:	f002 fc54 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001fc6:	f7ff fdc7 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <MX_TIM3_Init+0x124>)
 8001fcc:	f000 f8d8 	bl	8002180 <HAL_TIM_MspPostInit>

}
 8001fd0:	bf00      	nop
 8001fd2:	3738      	adds	r7, #56	; 0x38
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000378 	.word	0x20000378
 8001fdc:	40000400 	.word	0x40000400

08001fe0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08e      	sub	sp, #56	; 0x38
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	f107 0320 	add.w	r3, r7, #32
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
 800200c:	615a      	str	r2, [r3, #20]
 800200e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <MX_TIM4_Init+0x128>)
 8002012:	4a3e      	ldr	r2, [pc, #248]	; (800210c <MX_TIM4_Init+0x12c>)
 8002014:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <MX_TIM4_Init+0x128>)
 8002018:	f242 3227 	movw	r2, #8999	; 0x2327
 800201c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <MX_TIM4_Init+0x128>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8002024:	4b38      	ldr	r3, [pc, #224]	; (8002108 <MX_TIM4_Init+0x128>)
 8002026:	22c7      	movs	r2, #199	; 0xc7
 8002028:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <MX_TIM4_Init+0x128>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <MX_TIM4_Init+0x128>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002036:	4834      	ldr	r0, [pc, #208]	; (8002108 <MX_TIM4_Init+0x128>)
 8002038:	f002 faa6 	bl	8004588 <HAL_TIM_Base_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002042:	f7ff fd89 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800204c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002050:	4619      	mov	r1, r3
 8002052:	482d      	ldr	r0, [pc, #180]	; (8002108 <MX_TIM4_Init+0x128>)
 8002054:	f002 fcca 	bl	80049ec <HAL_TIM_ConfigClockSource>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800205e:	f7ff fd7b 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002062:	4829      	ldr	r0, [pc, #164]	; (8002108 <MX_TIM4_Init+0x128>)
 8002064:	f002 fadf 	bl	8004626 <HAL_TIM_PWM_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800206e:	f7ff fd73 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800207a:	f107 0320 	add.w	r3, r7, #32
 800207e:	4619      	mov	r1, r3
 8002080:	4821      	ldr	r0, [pc, #132]	; (8002108 <MX_TIM4_Init+0x128>)
 8002082:	f003 f897 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800208c:	f7ff fd64 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002090:	2360      	movs	r3, #96	; 0x60
 8002092:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4818      	ldr	r0, [pc, #96]	; (8002108 <MX_TIM4_Init+0x128>)
 80020a8:	f002 fbde 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80020b2:	f7ff fd51 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2204      	movs	r2, #4
 80020ba:	4619      	mov	r1, r3
 80020bc:	4812      	ldr	r0, [pc, #72]	; (8002108 <MX_TIM4_Init+0x128>)
 80020be:	f002 fbd3 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80020c8:	f7ff fd46 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	2208      	movs	r2, #8
 80020d0:	4619      	mov	r1, r3
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_TIM4_Init+0x128>)
 80020d4:	f002 fbc8 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80020de:	f7ff fd3b 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	220c      	movs	r2, #12
 80020e6:	4619      	mov	r1, r3
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <MX_TIM4_Init+0x128>)
 80020ea:	f002 fbbd 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80020f4:	f7ff fd30 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <MX_TIM4_Init+0x128>)
 80020fa:	f000 f841 	bl	8002180 <HAL_TIM_MspPostInit>

}
 80020fe:	bf00      	nop
 8002100:	3738      	adds	r7, #56	; 0x38
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200003c0 	.word	0x200003c0
 800210c:	40000800 	.word	0x40000800

08002110 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a15      	ldr	r2, [pc, #84]	; (8002174 <HAL_TIM_Base_MspInit+0x64>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800213e:	e012      	b.n	8002166 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_TIM_Base_MspInit+0x6c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10d      	bne.n	8002166 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40000400 	.word	0x40000400
 8002178:	40023800 	.word	0x40023800
 800217c:	40000800 	.word	0x40000800

08002180 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a25      	ldr	r2, [pc, #148]	; (8002234 <HAL_TIM_MspPostInit+0xb4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d11f      	bne.n	80021e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_TIM_MspPostInit+0xb8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a23      	ldr	r2, [pc, #140]	; (8002238 <HAL_TIM_MspPostInit+0xb8>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_TIM_MspPostInit+0xb8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021be:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d0:	2302      	movs	r3, #2
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4818      	ldr	r0, [pc, #96]	; (800223c <HAL_TIM_MspPostInit+0xbc>)
 80021dc:	f000 fc4c 	bl	8002a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021e0:	e023      	b.n	800222a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a16      	ldr	r2, [pc, #88]	; (8002240 <HAL_TIM_MspPostInit+0xc0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d11e      	bne.n	800222a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_TIM_MspPostInit+0xb8>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4a10      	ldr	r2, [pc, #64]	; (8002238 <HAL_TIM_MspPostInit+0xb8>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	6313      	str	r3, [r2, #48]	; 0x30
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_TIM_MspPostInit+0xb8>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002208:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800221a:	2302      	movs	r3, #2
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <HAL_TIM_MspPostInit+0xc4>)
 8002226:	f000 fc27 	bl	8002a78 <HAL_GPIO_Init>
}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40000400 	.word	0x40000400
 8002238:	40023800 	.word	0x40023800
 800223c:	40020800 	.word	0x40020800
 8002240:	40000800 	.word	0x40000800
 8002244:	40020400 	.word	0x40020400

08002248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002280 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800224c:	f7ff fe20 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002252:	490d      	ldr	r1, [pc, #52]	; (8002288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002254:	4a0d      	ldr	r2, [pc, #52]	; (800228c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002268:	4c0a      	ldr	r4, [pc, #40]	; (8002294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002276:	f003 fddd 	bl	8005e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227a:	f7ff fb9d 	bl	80019b8 <main>
  bx  lr    
 800227e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800228c:	08009988 	.word	0x08009988
  ldr r2, =_sbss
 8002290:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002294:	20000558 	.word	0x20000558

08002298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC_IRQHandler>
	...

0800229c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <HAL_Init+0x40>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_Init+0x40>)
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_Init+0x40>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 fba3 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f808 	bl	80022e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d0:	f7ff fcc6 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x54>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x58>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fbad 	bl	8002a5e <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 fb83 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_InitTick+0x5c>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000000 	.word	0x20000000
 8002338:	20000008 	.word	0x20000008
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000008 	.word	0x20000008
 8002364:	20000408 	.word	0x20000408

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000408 	.word	0x20000408

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000008 	.word	0x20000008

080023c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e033      	b.n	8002446 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff f9fc 	bl	80017e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f94a 	bl	80026b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
 8002436:	e001      	b.n	800243c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e113      	b.n	8002694 <HAL_ADC_ConfigChannel+0x244>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b09      	cmp	r3, #9
 800247a:	d925      	bls.n	80024c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68d9      	ldr	r1, [r3, #12]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	3b1e      	subs	r3, #30
 8002492:	2207      	movs	r2, #7
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43da      	mvns	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	400a      	ands	r2, r1
 80024a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68d9      	ldr	r1, [r3, #12]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	4603      	mov	r3, r0
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4403      	add	r3, r0
 80024ba:	3b1e      	subs	r3, #30
 80024bc:	409a      	lsls	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	e022      	b.n	800250e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6919      	ldr	r1, [r3, #16]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	2207      	movs	r2, #7
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	400a      	ands	r2, r1
 80024ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6919      	ldr	r1, [r3, #16]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4403      	add	r3, r0
 8002504:	409a      	lsls	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b06      	cmp	r3, #6
 8002514:	d824      	bhi.n	8002560 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b05      	subs	r3, #5
 8002528:	221f      	movs	r2, #31
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b05      	subs	r3, #5
 8002552:	fa00 f203 	lsl.w	r2, r0, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	635a      	str	r2, [r3, #52]	; 0x34
 800255e:	e04c      	b.n	80025fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d824      	bhi.n	80025b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b23      	subs	r3, #35	; 0x23
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43da      	mvns	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	400a      	ands	r2, r1
 8002588:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	3b23      	subs	r3, #35	; 0x23
 80025a4:	fa00 f203 	lsl.w	r2, r0, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	e023      	b.n	80025fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b41      	subs	r3, #65	; 0x41
 80025c4:	221f      	movs	r2, #31
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b41      	subs	r3, #65	; 0x41
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fa:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_ADC_ConfigChannel+0x250>)
 80025fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a28      	ldr	r2, [pc, #160]	; (80026a4 <HAL_ADC_ConfigChannel+0x254>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10f      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d8>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b12      	cmp	r3, #18
 800260e:	d10b      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_ADC_ConfigChannel+0x254>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12b      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <HAL_ADC_ConfigChannel+0x258>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x1f4>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b11      	cmp	r3, #17
 8002642:	d122      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_ADC_ConfigChannel+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_ADC_ConfigChannel+0x25c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <HAL_ADC_ConfigChannel+0x260>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	0c9a      	lsrs	r2, r3, #18
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800267c:	e002      	b.n	8002684 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3b01      	subs	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f9      	bne.n	800267e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40012300 	.word	0x40012300
 80026a4:	40012000 	.word	0x40012000
 80026a8:	10000012 	.word	0x10000012
 80026ac:	20000000 	.word	0x20000000
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026bc:	4b79      	ldr	r3, [pc, #484]	; (80028a4 <ADC_Init+0x1f0>)
 80026be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	021a      	lsls	r2, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800270c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <ADC_Init+0x1f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800275a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800277c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e00f      	b.n	80027b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0202 	bic.w	r2, r2, #2
 80027c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7e1b      	ldrb	r3, [r3, #24]
 80027cc:	005a      	lsls	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	3b01      	subs	r3, #1
 800280c:	035a      	lsls	r2, r3, #13
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	e007      	b.n	8002828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002826:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	3b01      	subs	r3, #1
 8002844:	051a      	lsls	r2, r3, #20
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800285c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800286a:	025a      	lsls	r2, r3, #9
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	029a      	lsls	r2, r3, #10
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40012300 	.word	0x40012300
 80028a8:	0f000001 	.word	0x0f000001

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff47 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff5c 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ffb0 	bl	80029cc <SysTick_Config>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	; 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e165      	b.n	8002d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a94:	2201      	movs	r2, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f040 8154 	bne.w	8002d5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d130      	bne.n	8002b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 0201 	and.w	r2, r3, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d017      	beq.n	8002b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80ae 	beq.w	8002d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_GPIO_Init+0x300>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a5c      	ldr	r2, [pc, #368]	; (8002d78 <HAL_GPIO_Init+0x300>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b5a      	ldr	r3, [pc, #360]	; (8002d78 <HAL_GPIO_Init+0x300>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c1a:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4f      	ldr	r2, [pc, #316]	; (8002d80 <HAL_GPIO_Init+0x308>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d025      	beq.n	8002c92 <HAL_GPIO_Init+0x21a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4e      	ldr	r2, [pc, #312]	; (8002d84 <HAL_GPIO_Init+0x30c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01f      	beq.n	8002c8e <HAL_GPIO_Init+0x216>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4d      	ldr	r2, [pc, #308]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d019      	beq.n	8002c8a <HAL_GPIO_Init+0x212>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4c      	ldr	r2, [pc, #304]	; (8002d8c <HAL_GPIO_Init+0x314>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0x20e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4b      	ldr	r2, [pc, #300]	; (8002d90 <HAL_GPIO_Init+0x318>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_Init+0x20a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4a      	ldr	r2, [pc, #296]	; (8002d94 <HAL_GPIO_Init+0x31c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x206>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a49      	ldr	r2, [pc, #292]	; (8002d98 <HAL_GPIO_Init+0x320>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_Init+0x202>
 8002c76:	2306      	movs	r3, #6
 8002c78:	e00c      	b.n	8002c94 <HAL_GPIO_Init+0x21c>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e00a      	b.n	8002c94 <HAL_GPIO_Init+0x21c>
 8002c7e:	2305      	movs	r3, #5
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x21c>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x21c>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x21c>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x21c>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x21c>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd6:	4a31      	ldr	r2, [pc, #196]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d00:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2a:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d54:	4a11      	ldr	r2, [pc, #68]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f ae96 	bls.w	8002a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40021400 	.word	0x40021400
 8002d98:	40021800 	.word	0x40021800
 8002d9c:	40013c00 	.word	0x40013c00

08002da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
 8002dac:	4613      	mov	r3, r2
 8002dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db0:	787b      	ldrb	r3, [r7, #1]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dbc:	e003      	b.n	8002dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	041a      	lsls	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	619a      	str	r2, [r3, #24]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x90>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x90>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x90>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_PWREx_EnableOverDrive+0x94>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e00:	f7ff fab2 	bl	8002368 <HAL_GetTick>
 8002e04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e06:	e009      	b.n	8002e1c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e08:	f7ff faae 	bl	8002368 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e16:	d901      	bls.n	8002e1c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e01f      	b.n	8002e5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e28:	d1ee      	bne.n	8002e08 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e30:	f7ff fa9a 	bl	8002368 <HAL_GetTick>
 8002e34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e36:	e009      	b.n	8002e4c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e38:	f7ff fa96 	bl	8002368 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e46:	d901      	bls.n	8002e4c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e007      	b.n	8002e5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e58:	d1ee      	bne.n	8002e38 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	420e0040 	.word	0x420e0040
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	420e0044 	.word	0x420e0044

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0cc      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b68      	ldr	r3, [pc, #416]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d90c      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0b8      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee0:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	494d      	ldr	r1, [pc, #308]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d044      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d119      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e067      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4934      	ldr	r1, [pc, #208]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7ff fa00 	bl	8002368 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7ff f9fc 	bl	8002368 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e04f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d20c      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e032      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4916      	ldr	r1, [pc, #88]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	490e      	ldr	r1, [pc, #56]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffa:	f000 f821 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	490a      	ldr	r1, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	5ccb      	ldrb	r3, [r1, r3]
 800300e:	fa22 f303 	lsr.w	r3, r2, r3
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff f960 	bl	80022e0 <HAL_InitTick>

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023c00 	.word	0x40023c00
 8003030:	40023800 	.word	0x40023800
 8003034:	080093a8 	.word	0x080093a8
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003044:	b0ae      	sub	sp, #184	; 0xb8
 8003046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003066:	4bcb      	ldr	r3, [pc, #812]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b0c      	cmp	r3, #12
 8003070:	f200 8206 	bhi.w	8003480 <HAL_RCC_GetSysClockFreq+0x440>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030b1 	.word	0x080030b1
 8003080:	08003481 	.word	0x08003481
 8003084:	08003481 	.word	0x08003481
 8003088:	08003481 	.word	0x08003481
 800308c:	080030b9 	.word	0x080030b9
 8003090:	08003481 	.word	0x08003481
 8003094:	08003481 	.word	0x08003481
 8003098:	08003481 	.word	0x08003481
 800309c:	080030c1 	.word	0x080030c1
 80030a0:	08003481 	.word	0x08003481
 80030a4:	08003481 	.word	0x08003481
 80030a8:	08003481 	.word	0x08003481
 80030ac:	080032b1 	.word	0x080032b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4bb9      	ldr	r3, [pc, #740]	; (8003398 <HAL_RCC_GetSysClockFreq+0x358>)
 80030b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80030b6:	e1e7      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b8:	4bb8      	ldr	r3, [pc, #736]	; (800339c <HAL_RCC_GetSysClockFreq+0x35c>)
 80030ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030be:	e1e3      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c0:	4bb4      	ldr	r3, [pc, #720]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030cc:	4bb1      	ldr	r3, [pc, #708]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d071      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d8:	4bae      	ldr	r3, [pc, #696]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80030e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	0159      	lsls	r1, r3, #5
 800310c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003110:	0150      	lsls	r0, r2, #5
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4621      	mov	r1, r4
 8003118:	1a51      	subs	r1, r2, r1
 800311a:	6439      	str	r1, [r7, #64]	; 0x40
 800311c:	4629      	mov	r1, r5
 800311e:	eb63 0301 	sbc.w	r3, r3, r1
 8003122:	647b      	str	r3, [r7, #68]	; 0x44
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003130:	4649      	mov	r1, r9
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	4641      	mov	r1, r8
 8003136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313a:	4641      	mov	r1, r8
 800313c:	018a      	lsls	r2, r1, #6
 800313e:	4641      	mov	r1, r8
 8003140:	1a51      	subs	r1, r2, r1
 8003142:	63b9      	str	r1, [r7, #56]	; 0x38
 8003144:	4649      	mov	r1, r9
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003158:	4649      	mov	r1, r9
 800315a:	00cb      	lsls	r3, r1, #3
 800315c:	4641      	mov	r1, r8
 800315e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003162:	4641      	mov	r1, r8
 8003164:	00ca      	lsls	r2, r1, #3
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	4603      	mov	r3, r0
 800316c:	4622      	mov	r2, r4
 800316e:	189b      	adds	r3, r3, r2
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
 8003172:	462b      	mov	r3, r5
 8003174:	460a      	mov	r2, r1
 8003176:	eb42 0303 	adc.w	r3, r2, r3
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003188:	4629      	mov	r1, r5
 800318a:	024b      	lsls	r3, r1, #9
 800318c:	4621      	mov	r1, r4
 800318e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003192:	4621      	mov	r1, r4
 8003194:	024a      	lsls	r2, r1, #9
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80031ac:	f7fd fd6c 	bl	8000c88 <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ba:	e067      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031bc:	4b75      	ldr	r3, [pc, #468]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80031cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031d6:	2300      	movs	r3, #0
 80031d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80031de:	4622      	mov	r2, r4
 80031e0:	462b      	mov	r3, r5
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f0:	0150      	lsls	r0, r2, #5
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4621      	mov	r1, r4
 80031f8:	1a51      	subs	r1, r2, r1
 80031fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80031fc:	4629      	mov	r1, r5
 80031fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003210:	4649      	mov	r1, r9
 8003212:	018b      	lsls	r3, r1, #6
 8003214:	4641      	mov	r1, r8
 8003216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321a:	4641      	mov	r1, r8
 800321c:	018a      	lsls	r2, r1, #6
 800321e:	4641      	mov	r1, r8
 8003220:	ebb2 0a01 	subs.w	sl, r2, r1
 8003224:	4649      	mov	r1, r9
 8003226:	eb63 0b01 	sbc.w	fp, r3, r1
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003236:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800323a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800323e:	4692      	mov	sl, r2
 8003240:	469b      	mov	fp, r3
 8003242:	4623      	mov	r3, r4
 8003244:	eb1a 0303 	adds.w	r3, sl, r3
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	462b      	mov	r3, r5
 800324c:	eb4b 0303 	adc.w	r3, fp, r3
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800325e:	4629      	mov	r1, r5
 8003260:	028b      	lsls	r3, r1, #10
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003268:	4621      	mov	r1, r4
 800326a:	028a      	lsls	r2, r1, #10
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003274:	2200      	movs	r2, #0
 8003276:	673b      	str	r3, [r7, #112]	; 0x70
 8003278:	677a      	str	r2, [r7, #116]	; 0x74
 800327a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800327e:	f7fd fd03 	bl	8000c88 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4613      	mov	r3, r2
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800328c:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	3301      	adds	r3, #1
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800329e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032ae:	e0eb      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d06b      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	2200      	movs	r2, #0
 80032d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032da:	663b      	str	r3, [r7, #96]	; 0x60
 80032dc:	2300      	movs	r3, #0
 80032de:	667b      	str	r3, [r7, #100]	; 0x64
 80032e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80032e4:	4622      	mov	r2, r4
 80032e6:	462b      	mov	r3, r5
 80032e8:	f04f 0000 	mov.w	r0, #0
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	0159      	lsls	r1, r3, #5
 80032f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f6:	0150      	lsls	r0, r2, #5
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4621      	mov	r1, r4
 80032fe:	1a51      	subs	r1, r2, r1
 8003300:	61b9      	str	r1, [r7, #24]
 8003302:	4629      	mov	r1, r5
 8003304:	eb63 0301 	sbc.w	r3, r3, r1
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003316:	4659      	mov	r1, fp
 8003318:	018b      	lsls	r3, r1, #6
 800331a:	4651      	mov	r1, sl
 800331c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003320:	4651      	mov	r1, sl
 8003322:	018a      	lsls	r2, r1, #6
 8003324:	4651      	mov	r1, sl
 8003326:	ebb2 0801 	subs.w	r8, r2, r1
 800332a:	4659      	mov	r1, fp
 800332c:	eb63 0901 	sbc.w	r9, r3, r1
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003340:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003344:	4690      	mov	r8, r2
 8003346:	4699      	mov	r9, r3
 8003348:	4623      	mov	r3, r4
 800334a:	eb18 0303 	adds.w	r3, r8, r3
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	462b      	mov	r3, r5
 8003352:	eb49 0303 	adc.w	r3, r9, r3
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003364:	4629      	mov	r1, r5
 8003366:	024b      	lsls	r3, r1, #9
 8003368:	4621      	mov	r1, r4
 800336a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800336e:	4621      	mov	r1, r4
 8003370:	024a      	lsls	r2, r1, #9
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800337a:	2200      	movs	r2, #0
 800337c:	65bb      	str	r3, [r7, #88]	; 0x58
 800337e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003380:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003384:	f7fd fc80 	bl	8000c88 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003392:	e065      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x420>
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400
 800339c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_GetSysClockFreq+0x458>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	2200      	movs	r2, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	4611      	mov	r1, r2
 80033ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b0:	653b      	str	r3, [r7, #80]	; 0x50
 80033b2:	2300      	movs	r3, #0
 80033b4:	657b      	str	r3, [r7, #84]	; 0x54
 80033b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80033ba:	4642      	mov	r2, r8
 80033bc:	464b      	mov	r3, r9
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033cc:	0150      	lsls	r0, r2, #5
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4641      	mov	r1, r8
 80033d4:	1a51      	subs	r1, r2, r1
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	4649      	mov	r1, r9
 80033da:	eb63 0301 	sbc.w	r3, r3, r1
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80033ec:	4659      	mov	r1, fp
 80033ee:	018b      	lsls	r3, r1, #6
 80033f0:	4651      	mov	r1, sl
 80033f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033f6:	4651      	mov	r1, sl
 80033f8:	018a      	lsls	r2, r1, #6
 80033fa:	4651      	mov	r1, sl
 80033fc:	1a54      	subs	r4, r2, r1
 80033fe:	4659      	mov	r1, fp
 8003400:	eb63 0501 	sbc.w	r5, r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	00eb      	lsls	r3, r5, #3
 800340e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003412:	00e2      	lsls	r2, r4, #3
 8003414:	4614      	mov	r4, r2
 8003416:	461d      	mov	r5, r3
 8003418:	4643      	mov	r3, r8
 800341a:	18e3      	adds	r3, r4, r3
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	464b      	mov	r3, r9
 8003420:	eb45 0303 	adc.w	r3, r5, r3
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003432:	4629      	mov	r1, r5
 8003434:	028b      	lsls	r3, r1, #10
 8003436:	4621      	mov	r1, r4
 8003438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800343c:	4621      	mov	r1, r4
 800343e:	028a      	lsls	r2, r1, #10
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003448:	2200      	movs	r2, #0
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
 800344c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800344e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003452:	f7fd fc19 	bl	8000c88 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4613      	mov	r3, r2
 800345c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <HAL_RCC_GetSysClockFreq+0x458>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	0f1b      	lsrs	r3, r3, #28
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800346e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800347e:	e003      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003486:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800348c:	4618      	mov	r0, r3
 800348e:	37b8      	adds	r7, #184	; 0xb8
 8003490:	46bd      	mov	sp, r7
 8003492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	00f42400 	.word	0x00f42400

080034a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e28d      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8083 	beq.w	80035c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034c0:	4b94      	ldr	r3, [pc, #592]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d019      	beq.n	8003500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034cc:	4b91      	ldr	r3, [pc, #580]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034d8:	4b8e      	ldr	r3, [pc, #568]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e4:	d00c      	beq.n	8003500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	4b84      	ldr	r3, [pc, #528]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05b      	beq.n	80035c4 <HAL_RCC_OscConfig+0x124>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d157      	bne.n	80035c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e25a      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d106      	bne.n	8003530 <HAL_RCC_OscConfig+0x90>
 8003522:	4b7c      	ldr	r3, [pc, #496]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7b      	ldr	r2, [pc, #492]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e01d      	b.n	800356c <HAL_RCC_OscConfig+0xcc>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0xb4>
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b73      	ldr	r3, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a72      	ldr	r2, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0xcc>
 8003554:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800355a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6b      	ldr	r2, [pc, #428]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe fef8 	bl	8002368 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7fe fef4 	bl	8002368 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e21f      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b61      	ldr	r3, [pc, #388]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0xdc>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fee4 	bl	8002368 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe fee0 	bl	8002368 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e20b      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x104>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06f      	beq.n	80036b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035d2:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035de:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ea:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b44      	ldr	r3, [pc, #272]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x186>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1d3      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4937      	ldr	r1, [pc, #220]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <HAL_RCC_OscConfig+0x278>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fe fe8d 	bl	8002368 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003652:	f7fe fe89 	bl	8002368 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1b4      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4925      	ldr	r1, [pc, #148]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_OscConfig+0x278>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fe6c 	bl	8002368 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe fe68 	bl	8002368 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e193      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d036      	beq.n	800372c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0x27c>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe fe4c 	bl	8002368 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe fe48 	bl	8002368 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e173      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x234>
 80036f2:	e01b      	b.n	800372c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_OscConfig+0x27c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe fe35 	bl	8002368 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	e00e      	b.n	8003720 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe fe31 	bl	8002368 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d907      	bls.n	8003720 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e15c      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
 8003714:	40023800 	.word	0x40023800
 8003718:	42470000 	.word	0x42470000
 800371c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	4b8a      	ldr	r3, [pc, #552]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ea      	bne.n	8003702 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8097 	beq.w	8003868 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b83      	ldr	r3, [pc, #524]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b7c      	ldr	r3, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a75      	ldr	r2, [pc, #468]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fe fdf1 	bl	8002368 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fe fded 	bl	8002368 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e118      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x31e>
 80037b0:	4b66      	ldr	r3, [pc, #408]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a65      	ldr	r2, [pc, #404]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
 80037bc:	e01c      	b.n	80037f8 <HAL_RCC_OscConfig+0x358>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x340>
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a60      	ldr	r2, [pc, #384]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	4b5e      	ldr	r3, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a5d      	ldr	r2, [pc, #372]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0x358>
 80037e0:	4b5a      	ldr	r3, [pc, #360]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a59      	ldr	r2, [pc, #356]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a56      	ldr	r2, [pc, #344]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe fdb2 	bl	8002368 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe fdae 	bl	8002368 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0d7      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RCC_OscConfig+0x368>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fe fd9c 	bl	8002368 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fe fd98 	bl	8002368 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0c1      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	4b40      	ldr	r3, [pc, #256]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ee      	bne.n	8003834 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	4a3a      	ldr	r2, [pc, #232]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80ad 	beq.w	80039cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d060      	beq.n	8003940 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d145      	bne.n	8003912 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fd6c 	bl	8002368 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fd68 	bl	8002368 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e093      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	491b      	ldr	r1, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe fd3d 	bl	8002368 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe fd39 	bl	8002368 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e064      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x452>
 8003910:	e05c      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe fd26 	bl	8002368 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe fd22 	bl	8002368 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04d      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x480>
 800393e:	e045      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e040      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <HAL_RCC_OscConfig+0x538>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d030      	beq.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d129      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d122      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d119      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10f      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e07b      	b.n	8003ae6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039fe:	d009      	beq.n	8003a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	61da      	str	r2, [r3, #28]
 8003a06:	e005      	b.n	8003a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe f8ce 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	ea42 0103 	orr.w	r1, r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	f003 0104 	and.w	r1, r3, #4
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f003 0210 	and.w	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b088      	sub	sp, #32
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_SPI_Transmit+0x22>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e12d      	b.n	8003d6c <HAL_SPI_Transmit+0x27e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b18:	f7fe fc26 	bl	8002368 <HAL_GetTick>
 8003b1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d002      	beq.n	8003b34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b32:	e116      	b.n	8003d62 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_SPI_Transmit+0x52>
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b44:	e10d      	b.n	8003d62 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8c:	d10f      	bne.n	8003bae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d007      	beq.n	8003bcc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd4:	d14f      	bne.n	8003c76 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_Transmit+0xf6>
 8003bde:	8afb      	ldrh	r3, [r7, #22]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d142      	bne.n	8003c6a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c08:	e02f      	b.n	8003c6a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d112      	bne.n	8003c3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c3c:	e015      	b.n	8003c6a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3e:	f7fe fb93 	bl	8002368 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d803      	bhi.n	8003c56 <HAL_SPI_Transmit+0x168>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d102      	bne.n	8003c5c <HAL_SPI_Transmit+0x16e>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c68:	e07b      	b.n	8003d62 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ca      	bne.n	8003c0a <HAL_SPI_Transmit+0x11c>
 8003c74:	e050      	b.n	8003d18 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_SPI_Transmit+0x196>
 8003c7e:	8afb      	ldrh	r3, [r7, #22]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d144      	bne.n	8003d0e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	7812      	ldrb	r2, [r2, #0]
 8003c90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003caa:	e030      	b.n	8003d0e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d113      	bne.n	8003ce2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ce0:	e015      	b.n	8003d0e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce2:	f7fe fb41 	bl	8002368 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d803      	bhi.n	8003cfa <HAL_SPI_Transmit+0x20c>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d102      	bne.n	8003d00 <HAL_SPI_Transmit+0x212>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d0c:	e029      	b.n	8003d62 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1c9      	bne.n	8003cac <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	6839      	ldr	r1, [r7, #0]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fbdf 	bl	80044e0 <SPI_EndRxTxTransaction>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e003      	b.n	8003d62 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
 8003d96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d98:	e0fb      	b.n	8003f92 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da2:	d112      	bne.n	8003dca <HAL_SPI_Receive+0x56>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10e      	bne.n	8003dca <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2204      	movs	r2, #4
 8003db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f8ef 	bl	8003fa4 <HAL_SPI_TransmitReceive>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	e0e8      	b.n	8003f9c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_SPI_Receive+0x64>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e0e1      	b.n	8003f9c <HAL_SPI_Receive+0x228>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de0:	f7fe fac2 	bl	8002368 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_SPI_Receive+0x7e>
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003df6:	e0cc      	b.n	8003f92 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	88fa      	ldrh	r2, [r7, #6]
 8003e16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3e:	d10f      	bne.n	8003e60 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d007      	beq.n	8003e7e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d16a      	bne.n	8003f5c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e86:	e032      	b.n	8003eee <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d115      	bne.n	8003ec2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f103 020c 	add.w	r2, r3, #12
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ec0:	e015      	b.n	8003eee <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec2:	f7fe fa51 	bl	8002368 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d803      	bhi.n	8003eda <HAL_SPI_Receive+0x166>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Receive+0x16c>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d106      	bne.n	8003eee <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003eec:	e051      	b.n	8003f92 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1c7      	bne.n	8003e88 <HAL_SPI_Receive+0x114>
 8003ef8:	e035      	b.n	8003f66 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d113      	bne.n	8003f30 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	b292      	uxth	r2, r2
 8003f14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f2e:	e015      	b.n	8003f5c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f30:	f7fe fa1a 	bl	8002368 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d803      	bhi.n	8003f48 <HAL_SPI_Receive+0x1d4>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_Receive+0x1da>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f5a:	e01a      	b.n	8003f92 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1c9      	bne.n	8003efa <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fa52 	bl	8004414 <SPI_EndRxTransaction>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
 8003f88:	e003      	b.n	8003f92 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x26>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e198      	b.n	80042fc <HAL_SPI_TransmitReceive+0x358>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd2:	f7fe f9c9 	bl	8002368 <HAL_GetTick>
 8003fd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d00f      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x70>
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffa:	d107      	bne.n	800400c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d103      	bne.n	800400c <HAL_SPI_TransmitReceive+0x68>
 8004004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004008:	2b04      	cmp	r3, #4
 800400a:	d003      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800400c:	2302      	movs	r3, #2
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004012:	e16d      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x82>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x82>
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800402c:	e160      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b04      	cmp	r3, #4
 8004038:	d003      	beq.n	8004042 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2205      	movs	r2, #5
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	887a      	ldrh	r2, [r7, #2]
 8004052:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d007      	beq.n	8004096 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409e:	d17c      	bne.n	800419a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x10a>
 80040a8:	8b7b      	ldrh	r3, [r7, #26]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d16a      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d2:	e057      	b.n	8004184 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d11b      	bne.n	800411a <HAL_SPI_TransmitReceive+0x176>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d016      	beq.n	800411a <HAL_SPI_TransmitReceive+0x176>
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d113      	bne.n	800411a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d119      	bne.n	800415c <HAL_SPI_TransmitReceive+0x1b8>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d014      	beq.n	800415c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	b292      	uxth	r2, r2
 800413e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	1c9a      	adds	r2, r3, #2
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004158:	2301      	movs	r3, #1
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800415c:	f7fe f904 	bl	8002368 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004168:	429a      	cmp	r2, r3
 800416a:	d80b      	bhi.n	8004184 <HAL_SPI_TransmitReceive+0x1e0>
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d007      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004182:	e0b5      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1a2      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x130>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d19d      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x130>
 8004198:	e080      	b.n	800429c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x204>
 80041a2:	8b7b      	ldrh	r3, [r7, #26]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d16f      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	7812      	ldrb	r2, [r2, #0]
 80041b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ce:	e05b      	b.n	8004288 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d11c      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x274>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d017      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x274>
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d114      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	7812      	ldrb	r2, [r2, #0]
 80041fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d119      	bne.n	800425a <HAL_SPI_TransmitReceive+0x2b6>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d014      	beq.n	800425a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004256:	2301      	movs	r3, #1
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800425a:	f7fe f885 	bl	8002368 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004266:	429a      	cmp	r2, r3
 8004268:	d803      	bhi.n	8004272 <HAL_SPI_TransmitReceive+0x2ce>
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d102      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x2d4>
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d107      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004286:	e033      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d19e      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x22c>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d199      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f91d 	bl	80044e0 <SPI_EndRxTxTransaction>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042b8:	e01a      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042e6:	e003      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3730      	adds	r7, #48	; 0x30
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004314:	f7fe f828 	bl	8002368 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	4413      	add	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004324:	f7fe f820 	bl	8002368 <HAL_GetTick>
 8004328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	015b      	lsls	r3, r3, #5
 8004330:	0d1b      	lsrs	r3, r3, #20
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800433a:	e054      	b.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d050      	beq.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004344:	f7fe f810 	bl	8002368 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	429a      	cmp	r2, r3
 8004352:	d902      	bls.n	800435a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d13d      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004372:	d111      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	d004      	beq.n	8004388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d107      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a0:	d10f      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e017      	b.n	8004406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	429a      	cmp	r2, r3
 8004402:	d19b      	bne.n	800433c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000000 	.word	0x20000000

08004414 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004428:	d111      	bne.n	800444e <SPI_EndRxTransaction+0x3a>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004432:	d004      	beq.n	800443e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d107      	bne.n	800444e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004456:	d12a      	bne.n	80044ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d012      	beq.n	8004488 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	2180      	movs	r1, #128	; 0x80
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff ff49 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02d      	beq.n	80044d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e026      	b.n	80044d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	2101      	movs	r1, #1
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff ff36 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01a      	beq.n	80044d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e013      	b.n	80044d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2101      	movs	r1, #1
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ff23 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e000      	b.n	80044d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2201      	movs	r2, #1
 80044f4:	2102      	movs	r1, #2
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f7ff ff04 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e032      	b.n	8004578 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <SPI_EndRxTxTransaction+0xa0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <SPI_EndRxTxTransaction+0xa4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	0d5b      	lsrs	r3, r3, #21
 800451e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004530:	d112      	bne.n	8004558 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2200      	movs	r2, #0
 800453a:	2180      	movs	r1, #128	; 0x80
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fee1 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	f043 0220 	orr.w	r2, r3, #32
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e00f      	b.n	8004578 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	3b01      	subs	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d0f2      	beq.n	8004558 <SPI_EndRxTxTransaction+0x78>
 8004572:	e000      	b.n	8004576 <SPI_EndRxTxTransaction+0x96>
        break;
 8004574:	bf00      	nop
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000000 	.word	0x20000000
 8004584:	165e9f81 	.word	0x165e9f81

08004588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e041      	b.n	800461e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd fdae 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 fad8 	bl	8004b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e041      	b.n	80046bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f839 	bl	80046c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 fa89 	bl	8004b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start+0x24>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e022      	b.n	8004742 <HAL_TIM_PWM_Start+0x6a>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d109      	bne.n	8004716 <HAL_TIM_PWM_Start+0x3e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e015      	b.n	8004742 <HAL_TIM_PWM_Start+0x6a>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d109      	bne.n	8004730 <HAL_TIM_PWM_Start+0x58>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e008      	b.n	8004742 <HAL_TIM_PWM_Start+0x6a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07c      	b.n	8004844 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start+0x82>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004758:	e013      	b.n	8004782 <HAL_TIM_PWM_Start+0xaa>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d104      	bne.n	800476a <HAL_TIM_PWM_Start+0x92>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004768:	e00b      	b.n	8004782 <HAL_TIM_PWM_Start+0xaa>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d104      	bne.n	800477a <HAL_TIM_PWM_Start+0xa2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004778:	e003      	b.n	8004782 <HAL_TIM_PWM_Start+0xaa>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2201      	movs	r2, #1
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fcec 	bl	8005168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2d      	ldr	r2, [pc, #180]	; (800484c <HAL_TIM_PWM_Start+0x174>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIM_PWM_Start+0xcc>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2c      	ldr	r2, [pc, #176]	; (8004850 <HAL_TIM_PWM_Start+0x178>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_PWM_Start+0xd0>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_TIM_PWM_Start+0xd2>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <HAL_TIM_PWM_Start+0x174>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_TIM_PWM_Start+0x136>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d01d      	beq.n	800480e <HAL_TIM_PWM_Start+0x136>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <HAL_TIM_PWM_Start+0x17c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_TIM_PWM_Start+0x136>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1d      	ldr	r2, [pc, #116]	; (8004858 <HAL_TIM_PWM_Start+0x180>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_TIM_PWM_Start+0x136>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1c      	ldr	r2, [pc, #112]	; (800485c <HAL_TIM_PWM_Start+0x184>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIM_PWM_Start+0x136>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a16      	ldr	r2, [pc, #88]	; (8004850 <HAL_TIM_PWM_Start+0x178>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIM_PWM_Start+0x136>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a18      	ldr	r2, [pc, #96]	; (8004860 <HAL_TIM_PWM_Start+0x188>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIM_PWM_Start+0x136>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a16      	ldr	r2, [pc, #88]	; (8004864 <HAL_TIM_PWM_Start+0x18c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d111      	bne.n	8004832 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b06      	cmp	r3, #6
 800481e:	d010      	beq.n	8004842 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004830:	e007      	b.n	8004842 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40010000 	.word	0x40010000
 8004850:	40010400 	.word	0x40010400
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40014000 	.word	0x40014000
 8004864:	40001800 	.word	0x40001800

08004868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004882:	2302      	movs	r3, #2
 8004884:	e0ae      	b.n	80049e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	f200 809f 	bhi.w	80049d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004896:	a201      	add	r2, pc, #4	; (adr r2, 800489c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489c:	080048d1 	.word	0x080048d1
 80048a0:	080049d5 	.word	0x080049d5
 80048a4:	080049d5 	.word	0x080049d5
 80048a8:	080049d5 	.word	0x080049d5
 80048ac:	08004911 	.word	0x08004911
 80048b0:	080049d5 	.word	0x080049d5
 80048b4:	080049d5 	.word	0x080049d5
 80048b8:	080049d5 	.word	0x080049d5
 80048bc:	08004953 	.word	0x08004953
 80048c0:	080049d5 	.word	0x080049d5
 80048c4:	080049d5 	.word	0x080049d5
 80048c8:	080049d5 	.word	0x080049d5
 80048cc:	08004993 	.word	0x08004993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f9fc 	bl	8004cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0208 	orr.w	r2, r2, #8
 80048ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0204 	bic.w	r2, r2, #4
 80048fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6999      	ldr	r1, [r3, #24]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	619a      	str	r2, [r3, #24]
      break;
 800490e:	e064      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fa4c 	bl	8004db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800492a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6999      	ldr	r1, [r3, #24]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	021a      	lsls	r2, r3, #8
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	619a      	str	r2, [r3, #24]
      break;
 8004950:	e043      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 faa1 	bl	8004ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0208 	orr.w	r2, r2, #8
 800496c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0204 	bic.w	r2, r2, #4
 800497c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69d9      	ldr	r1, [r3, #28]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	61da      	str	r2, [r3, #28]
      break;
 8004990:	e023      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 faf5 	bl	8004f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69d9      	ldr	r1, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	021a      	lsls	r2, r3, #8
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	61da      	str	r2, [r3, #28]
      break;
 80049d2:	e002      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
      break;
 80049d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_TIM_ConfigClockSource+0x1c>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0b4      	b.n	8004b72 <HAL_TIM_ConfigClockSource+0x186>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a40:	d03e      	beq.n	8004ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a46:	f200 8087 	bhi.w	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	f000 8086 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x172>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d87f      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b70      	cmp	r3, #112	; 0x70
 8004a5a:	d01a      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0xa6>
 8004a5c:	2b70      	cmp	r3, #112	; 0x70
 8004a5e:	d87b      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b60      	cmp	r3, #96	; 0x60
 8004a62:	d050      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x11a>
 8004a64:	2b60      	cmp	r3, #96	; 0x60
 8004a66:	d877      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b50      	cmp	r3, #80	; 0x50
 8004a6a:	d03c      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a6c:	2b50      	cmp	r3, #80	; 0x50
 8004a6e:	d873      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	d058      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x13a>
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d86f      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b30      	cmp	r3, #48	; 0x30
 8004a7a:	d064      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a7c:	2b30      	cmp	r3, #48	; 0x30
 8004a7e:	d86b      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d060      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d867      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d05a      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a90:	e062      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aa2:	f000 fb41 	bl	8005128 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	609a      	str	r2, [r3, #8]
      break;
 8004abe:	e04f      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ad0:	f000 fb2a 	bl	8005128 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae2:	609a      	str	r2, [r3, #8]
      break;
 8004ae4:	e03c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 fa9e 	bl	8005034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2150      	movs	r1, #80	; 0x50
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 faf7 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004b04:	e02c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 fabd 	bl	8005092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2160      	movs	r1, #96	; 0x60
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fae7 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004b24:	e01c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 fa7e 	bl	8005034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fad7 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004b44:	e00c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 face 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004b56:	e003      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5c:	e000      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a46      	ldr	r2, [pc, #280]	; (8004ca8 <TIM_Base_SetConfig+0x12c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9a:	d00f      	beq.n	8004bbc <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a43      	ldr	r2, [pc, #268]	; (8004cac <TIM_Base_SetConfig+0x130>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a42      	ldr	r2, [pc, #264]	; (8004cb0 <TIM_Base_SetConfig+0x134>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d007      	beq.n	8004bbc <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a41      	ldr	r2, [pc, #260]	; (8004cb4 <TIM_Base_SetConfig+0x138>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_Base_SetConfig+0x40>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a40      	ldr	r2, [pc, #256]	; (8004cb8 <TIM_Base_SetConfig+0x13c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d108      	bne.n	8004bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a35      	ldr	r2, [pc, #212]	; (8004ca8 <TIM_Base_SetConfig+0x12c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d02b      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bdc:	d027      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a32      	ldr	r2, [pc, #200]	; (8004cac <TIM_Base_SetConfig+0x130>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d023      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a31      	ldr	r2, [pc, #196]	; (8004cb0 <TIM_Base_SetConfig+0x134>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01f      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a30      	ldr	r2, [pc, #192]	; (8004cb4 <TIM_Base_SetConfig+0x138>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01b      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2f      	ldr	r2, [pc, #188]	; (8004cb8 <TIM_Base_SetConfig+0x13c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d017      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <TIM_Base_SetConfig+0x140>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a2d      	ldr	r2, [pc, #180]	; (8004cc0 <TIM_Base_SetConfig+0x144>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00f      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a2c      	ldr	r2, [pc, #176]	; (8004cc4 <TIM_Base_SetConfig+0x148>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <TIM_Base_SetConfig+0x14c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d007      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <TIM_Base_SetConfig+0x150>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <TIM_Base_SetConfig+0x154>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <TIM_Base_SetConfig+0x12c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_Base_SetConfig+0xf8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <TIM_Base_SetConfig+0x13c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d103      	bne.n	8004c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d105      	bne.n	8004c9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f023 0201 	bic.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40000800 	.word	0x40000800
 8004cb4:	40000c00 	.word	0x40000c00
 8004cb8:	40010400 	.word	0x40010400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800
 8004cc8:	40001800 	.word	0x40001800
 8004ccc:	40001c00 	.word	0x40001c00
 8004cd0:	40002000 	.word	0x40002000

08004cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f023 0201 	bic.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0302 	bic.w	r3, r3, #2
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a20      	ldr	r2, [pc, #128]	; (8004dac <TIM_OC1_SetConfig+0xd8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC1_SetConfig+0x64>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1f      	ldr	r2, [pc, #124]	; (8004db0 <TIM_OC1_SetConfig+0xdc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10c      	bne.n	8004d52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 0308 	bic.w	r3, r3, #8
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f023 0304 	bic.w	r3, r3, #4
 8004d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <TIM_OC1_SetConfig+0xd8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_OC1_SetConfig+0x8e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a14      	ldr	r2, [pc, #80]	; (8004db0 <TIM_OC1_SetConfig+0xdc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d111      	bne.n	8004d86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	621a      	str	r2, [r3, #32]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40010400 	.word	0x40010400

08004db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f023 0210 	bic.w	r2, r3, #16
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f023 0320 	bic.w	r3, r3, #32
 8004dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a22      	ldr	r2, [pc, #136]	; (8004e98 <TIM_OC2_SetConfig+0xe4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC2_SetConfig+0x68>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <TIM_OC2_SetConfig+0xe8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d10d      	bne.n	8004e38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <TIM_OC2_SetConfig+0xe4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_OC2_SetConfig+0x94>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <TIM_OC2_SetConfig+0xe8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d113      	bne.n	8004e70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40010400 	.word	0x40010400

08004ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <TIM_OC3_SetConfig+0xe0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC3_SetConfig+0x66>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a20      	ldr	r2, [pc, #128]	; (8004f84 <TIM_OC3_SetConfig+0xe4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10d      	bne.n	8004f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <TIM_OC3_SetConfig+0xe0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_OC3_SetConfig+0x92>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <TIM_OC3_SetConfig+0xe4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d113      	bne.n	8004f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	621a      	str	r2, [r3, #32]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40010400 	.word	0x40010400

08004f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	031b      	lsls	r3, r3, #12
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <TIM_OC4_SetConfig+0xa4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC4_SetConfig+0x68>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a11      	ldr	r2, [pc, #68]	; (8005030 <TIM_OC4_SetConfig+0xa8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d109      	bne.n	8005004 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	019b      	lsls	r3, r3, #6
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40010400 	.word	0x40010400

08005034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800505e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 030a 	bic.w	r3, r3, #10
 8005070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f023 0210 	bic.w	r2, r3, #16
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	031b      	lsls	r3, r3, #12
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	f043 0307 	orr.w	r3, r3, #7
 8005114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	021a      	lsls	r2, r3, #8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	431a      	orrs	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4313      	orrs	r3, r2
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2201      	movs	r2, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	43db      	mvns	r3, r3
 800518a:	401a      	ands	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e05a      	b.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d01d      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10c      	bne.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40001800 	.word	0x40001800

080052ac <__cvt>:
 80052ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	ec55 4b10 	vmov	r4, r5, d0
 80052b4:	2d00      	cmp	r5, #0
 80052b6:	460e      	mov	r6, r1
 80052b8:	4619      	mov	r1, r3
 80052ba:	462b      	mov	r3, r5
 80052bc:	bfbb      	ittet	lt
 80052be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052c2:	461d      	movlt	r5, r3
 80052c4:	2300      	movge	r3, #0
 80052c6:	232d      	movlt	r3, #45	; 0x2d
 80052c8:	700b      	strb	r3, [r1, #0]
 80052ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052d0:	4691      	mov	r9, r2
 80052d2:	f023 0820 	bic.w	r8, r3, #32
 80052d6:	bfbc      	itt	lt
 80052d8:	4622      	movlt	r2, r4
 80052da:	4614      	movlt	r4, r2
 80052dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052e0:	d005      	beq.n	80052ee <__cvt+0x42>
 80052e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052e6:	d100      	bne.n	80052ea <__cvt+0x3e>
 80052e8:	3601      	adds	r6, #1
 80052ea:	2102      	movs	r1, #2
 80052ec:	e000      	b.n	80052f0 <__cvt+0x44>
 80052ee:	2103      	movs	r1, #3
 80052f0:	ab03      	add	r3, sp, #12
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	ab02      	add	r3, sp, #8
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	ec45 4b10 	vmov	d0, r4, r5
 80052fc:	4653      	mov	r3, sl
 80052fe:	4632      	mov	r2, r6
 8005300:	f000 fe4a 	bl	8005f98 <_dtoa_r>
 8005304:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005308:	4607      	mov	r7, r0
 800530a:	d102      	bne.n	8005312 <__cvt+0x66>
 800530c:	f019 0f01 	tst.w	r9, #1
 8005310:	d022      	beq.n	8005358 <__cvt+0xac>
 8005312:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005316:	eb07 0906 	add.w	r9, r7, r6
 800531a:	d110      	bne.n	800533e <__cvt+0x92>
 800531c:	783b      	ldrb	r3, [r7, #0]
 800531e:	2b30      	cmp	r3, #48	; 0x30
 8005320:	d10a      	bne.n	8005338 <__cvt+0x8c>
 8005322:	2200      	movs	r2, #0
 8005324:	2300      	movs	r3, #0
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f7fb fbed 	bl	8000b08 <__aeabi_dcmpeq>
 800532e:	b918      	cbnz	r0, 8005338 <__cvt+0x8c>
 8005330:	f1c6 0601 	rsb	r6, r6, #1
 8005334:	f8ca 6000 	str.w	r6, [sl]
 8005338:	f8da 3000 	ldr.w	r3, [sl]
 800533c:	4499      	add	r9, r3
 800533e:	2200      	movs	r2, #0
 8005340:	2300      	movs	r3, #0
 8005342:	4620      	mov	r0, r4
 8005344:	4629      	mov	r1, r5
 8005346:	f7fb fbdf 	bl	8000b08 <__aeabi_dcmpeq>
 800534a:	b108      	cbz	r0, 8005350 <__cvt+0xa4>
 800534c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005350:	2230      	movs	r2, #48	; 0x30
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	454b      	cmp	r3, r9
 8005356:	d307      	bcc.n	8005368 <__cvt+0xbc>
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800535c:	1bdb      	subs	r3, r3, r7
 800535e:	4638      	mov	r0, r7
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	b004      	add	sp, #16
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	1c59      	adds	r1, r3, #1
 800536a:	9103      	str	r1, [sp, #12]
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e7f0      	b.n	8005352 <__cvt+0xa6>

08005370 <__exponent>:
 8005370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005372:	4603      	mov	r3, r0
 8005374:	2900      	cmp	r1, #0
 8005376:	bfb8      	it	lt
 8005378:	4249      	neglt	r1, r1
 800537a:	f803 2b02 	strb.w	r2, [r3], #2
 800537e:	bfb4      	ite	lt
 8005380:	222d      	movlt	r2, #45	; 0x2d
 8005382:	222b      	movge	r2, #43	; 0x2b
 8005384:	2909      	cmp	r1, #9
 8005386:	7042      	strb	r2, [r0, #1]
 8005388:	dd2a      	ble.n	80053e0 <__exponent+0x70>
 800538a:	f10d 0207 	add.w	r2, sp, #7
 800538e:	4617      	mov	r7, r2
 8005390:	260a      	movs	r6, #10
 8005392:	4694      	mov	ip, r2
 8005394:	fb91 f5f6 	sdiv	r5, r1, r6
 8005398:	fb06 1415 	mls	r4, r6, r5, r1
 800539c:	3430      	adds	r4, #48	; 0x30
 800539e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80053a2:	460c      	mov	r4, r1
 80053a4:	2c63      	cmp	r4, #99	; 0x63
 80053a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80053aa:	4629      	mov	r1, r5
 80053ac:	dcf1      	bgt.n	8005392 <__exponent+0x22>
 80053ae:	3130      	adds	r1, #48	; 0x30
 80053b0:	f1ac 0402 	sub.w	r4, ip, #2
 80053b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80053b8:	1c41      	adds	r1, r0, #1
 80053ba:	4622      	mov	r2, r4
 80053bc:	42ba      	cmp	r2, r7
 80053be:	d30a      	bcc.n	80053d6 <__exponent+0x66>
 80053c0:	f10d 0209 	add.w	r2, sp, #9
 80053c4:	eba2 020c 	sub.w	r2, r2, ip
 80053c8:	42bc      	cmp	r4, r7
 80053ca:	bf88      	it	hi
 80053cc:	2200      	movhi	r2, #0
 80053ce:	4413      	add	r3, r2
 80053d0:	1a18      	subs	r0, r3, r0
 80053d2:	b003      	add	sp, #12
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80053da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80053de:	e7ed      	b.n	80053bc <__exponent+0x4c>
 80053e0:	2330      	movs	r3, #48	; 0x30
 80053e2:	3130      	adds	r1, #48	; 0x30
 80053e4:	7083      	strb	r3, [r0, #2]
 80053e6:	70c1      	strb	r1, [r0, #3]
 80053e8:	1d03      	adds	r3, r0, #4
 80053ea:	e7f1      	b.n	80053d0 <__exponent+0x60>

080053ec <_printf_float>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	ed2d 8b02 	vpush	{d8}
 80053f4:	b08d      	sub	sp, #52	; 0x34
 80053f6:	460c      	mov	r4, r1
 80053f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053fc:	4616      	mov	r6, r2
 80053fe:	461f      	mov	r7, r3
 8005400:	4605      	mov	r5, r0
 8005402:	f000 fcc7 	bl	8005d94 <_localeconv_r>
 8005406:	f8d0 a000 	ldr.w	sl, [r0]
 800540a:	4650      	mov	r0, sl
 800540c:	f7fa ff50 	bl	80002b0 <strlen>
 8005410:	2300      	movs	r3, #0
 8005412:	930a      	str	r3, [sp, #40]	; 0x28
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	9305      	str	r3, [sp, #20]
 8005418:	f8d8 3000 	ldr.w	r3, [r8]
 800541c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005420:	3307      	adds	r3, #7
 8005422:	f023 0307 	bic.w	r3, r3, #7
 8005426:	f103 0208 	add.w	r2, r3, #8
 800542a:	f8c8 2000 	str.w	r2, [r8]
 800542e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005432:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005436:	9307      	str	r3, [sp, #28]
 8005438:	f8cd 8018 	str.w	r8, [sp, #24]
 800543c:	ee08 0a10 	vmov	s16, r0
 8005440:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005448:	4b9e      	ldr	r3, [pc, #632]	; (80056c4 <_printf_float+0x2d8>)
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	f7fb fb8d 	bl	8000b6c <__aeabi_dcmpun>
 8005452:	bb88      	cbnz	r0, 80054b8 <_printf_float+0xcc>
 8005454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005458:	4b9a      	ldr	r3, [pc, #616]	; (80056c4 <_printf_float+0x2d8>)
 800545a:	f04f 32ff 	mov.w	r2, #4294967295
 800545e:	f7fb fb67 	bl	8000b30 <__aeabi_dcmple>
 8005462:	bb48      	cbnz	r0, 80054b8 <_printf_float+0xcc>
 8005464:	2200      	movs	r2, #0
 8005466:	2300      	movs	r3, #0
 8005468:	4640      	mov	r0, r8
 800546a:	4649      	mov	r1, r9
 800546c:	f7fb fb56 	bl	8000b1c <__aeabi_dcmplt>
 8005470:	b110      	cbz	r0, 8005478 <_printf_float+0x8c>
 8005472:	232d      	movs	r3, #45	; 0x2d
 8005474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005478:	4a93      	ldr	r2, [pc, #588]	; (80056c8 <_printf_float+0x2dc>)
 800547a:	4b94      	ldr	r3, [pc, #592]	; (80056cc <_printf_float+0x2e0>)
 800547c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005480:	bf94      	ite	ls
 8005482:	4690      	movls	r8, r2
 8005484:	4698      	movhi	r8, r3
 8005486:	2303      	movs	r3, #3
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	9b05      	ldr	r3, [sp, #20]
 800548c:	f023 0304 	bic.w	r3, r3, #4
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	f04f 0900 	mov.w	r9, #0
 8005496:	9700      	str	r7, [sp, #0]
 8005498:	4633      	mov	r3, r6
 800549a:	aa0b      	add	r2, sp, #44	; 0x2c
 800549c:	4621      	mov	r1, r4
 800549e:	4628      	mov	r0, r5
 80054a0:	f000 f9da 	bl	8005858 <_printf_common>
 80054a4:	3001      	adds	r0, #1
 80054a6:	f040 8090 	bne.w	80055ca <_printf_float+0x1de>
 80054aa:	f04f 30ff 	mov.w	r0, #4294967295
 80054ae:	b00d      	add	sp, #52	; 0x34
 80054b0:	ecbd 8b02 	vpop	{d8}
 80054b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	4649      	mov	r1, r9
 80054c0:	f7fb fb54 	bl	8000b6c <__aeabi_dcmpun>
 80054c4:	b140      	cbz	r0, 80054d8 <_printf_float+0xec>
 80054c6:	464b      	mov	r3, r9
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bfbc      	itt	lt
 80054cc:	232d      	movlt	r3, #45	; 0x2d
 80054ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054d2:	4a7f      	ldr	r2, [pc, #508]	; (80056d0 <_printf_float+0x2e4>)
 80054d4:	4b7f      	ldr	r3, [pc, #508]	; (80056d4 <_printf_float+0x2e8>)
 80054d6:	e7d1      	b.n	800547c <_printf_float+0x90>
 80054d8:	6863      	ldr	r3, [r4, #4]
 80054da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054de:	9206      	str	r2, [sp, #24]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	d13f      	bne.n	8005564 <_printf_float+0x178>
 80054e4:	2306      	movs	r3, #6
 80054e6:	6063      	str	r3, [r4, #4]
 80054e8:	9b05      	ldr	r3, [sp, #20]
 80054ea:	6861      	ldr	r1, [r4, #4]
 80054ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054f0:	2300      	movs	r3, #0
 80054f2:	9303      	str	r3, [sp, #12]
 80054f4:	ab0a      	add	r3, sp, #40	; 0x28
 80054f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054fa:	ab09      	add	r3, sp, #36	; 0x24
 80054fc:	ec49 8b10 	vmov	d0, r8, r9
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	6022      	str	r2, [r4, #0]
 8005504:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005508:	4628      	mov	r0, r5
 800550a:	f7ff fecf 	bl	80052ac <__cvt>
 800550e:	9b06      	ldr	r3, [sp, #24]
 8005510:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005512:	2b47      	cmp	r3, #71	; 0x47
 8005514:	4680      	mov	r8, r0
 8005516:	d108      	bne.n	800552a <_printf_float+0x13e>
 8005518:	1cc8      	adds	r0, r1, #3
 800551a:	db02      	blt.n	8005522 <_printf_float+0x136>
 800551c:	6863      	ldr	r3, [r4, #4]
 800551e:	4299      	cmp	r1, r3
 8005520:	dd41      	ble.n	80055a6 <_printf_float+0x1ba>
 8005522:	f1ab 0302 	sub.w	r3, fp, #2
 8005526:	fa5f fb83 	uxtb.w	fp, r3
 800552a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800552e:	d820      	bhi.n	8005572 <_printf_float+0x186>
 8005530:	3901      	subs	r1, #1
 8005532:	465a      	mov	r2, fp
 8005534:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005538:	9109      	str	r1, [sp, #36]	; 0x24
 800553a:	f7ff ff19 	bl	8005370 <__exponent>
 800553e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005540:	1813      	adds	r3, r2, r0
 8005542:	2a01      	cmp	r2, #1
 8005544:	4681      	mov	r9, r0
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	dc02      	bgt.n	8005550 <_printf_float+0x164>
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	07d2      	lsls	r2, r2, #31
 800554e:	d501      	bpl.n	8005554 <_printf_float+0x168>
 8005550:	3301      	adds	r3, #1
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005558:	2b00      	cmp	r3, #0
 800555a:	d09c      	beq.n	8005496 <_printf_float+0xaa>
 800555c:	232d      	movs	r3, #45	; 0x2d
 800555e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005562:	e798      	b.n	8005496 <_printf_float+0xaa>
 8005564:	9a06      	ldr	r2, [sp, #24]
 8005566:	2a47      	cmp	r2, #71	; 0x47
 8005568:	d1be      	bne.n	80054e8 <_printf_float+0xfc>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1bc      	bne.n	80054e8 <_printf_float+0xfc>
 800556e:	2301      	movs	r3, #1
 8005570:	e7b9      	b.n	80054e6 <_printf_float+0xfa>
 8005572:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005576:	d118      	bne.n	80055aa <_printf_float+0x1be>
 8005578:	2900      	cmp	r1, #0
 800557a:	6863      	ldr	r3, [r4, #4]
 800557c:	dd0b      	ble.n	8005596 <_printf_float+0x1aa>
 800557e:	6121      	str	r1, [r4, #16]
 8005580:	b913      	cbnz	r3, 8005588 <_printf_float+0x19c>
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	07d0      	lsls	r0, r2, #31
 8005586:	d502      	bpl.n	800558e <_printf_float+0x1a2>
 8005588:	3301      	adds	r3, #1
 800558a:	440b      	add	r3, r1
 800558c:	6123      	str	r3, [r4, #16]
 800558e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005590:	f04f 0900 	mov.w	r9, #0
 8005594:	e7de      	b.n	8005554 <_printf_float+0x168>
 8005596:	b913      	cbnz	r3, 800559e <_printf_float+0x1b2>
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	07d2      	lsls	r2, r2, #31
 800559c:	d501      	bpl.n	80055a2 <_printf_float+0x1b6>
 800559e:	3302      	adds	r3, #2
 80055a0:	e7f4      	b.n	800558c <_printf_float+0x1a0>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e7f2      	b.n	800558c <_printf_float+0x1a0>
 80055a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ac:	4299      	cmp	r1, r3
 80055ae:	db05      	blt.n	80055bc <_printf_float+0x1d0>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	6121      	str	r1, [r4, #16]
 80055b4:	07d8      	lsls	r0, r3, #31
 80055b6:	d5ea      	bpl.n	800558e <_printf_float+0x1a2>
 80055b8:	1c4b      	adds	r3, r1, #1
 80055ba:	e7e7      	b.n	800558c <_printf_float+0x1a0>
 80055bc:	2900      	cmp	r1, #0
 80055be:	bfd4      	ite	le
 80055c0:	f1c1 0202 	rsble	r2, r1, #2
 80055c4:	2201      	movgt	r2, #1
 80055c6:	4413      	add	r3, r2
 80055c8:	e7e0      	b.n	800558c <_printf_float+0x1a0>
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	055a      	lsls	r2, r3, #21
 80055ce:	d407      	bmi.n	80055e0 <_printf_float+0x1f4>
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	4642      	mov	r2, r8
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	d12c      	bne.n	8005638 <_printf_float+0x24c>
 80055de:	e764      	b.n	80054aa <_printf_float+0xbe>
 80055e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055e4:	f240 80e0 	bls.w	80057a8 <_printf_float+0x3bc>
 80055e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055ec:	2200      	movs	r2, #0
 80055ee:	2300      	movs	r3, #0
 80055f0:	f7fb fa8a 	bl	8000b08 <__aeabi_dcmpeq>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d034      	beq.n	8005662 <_printf_float+0x276>
 80055f8:	4a37      	ldr	r2, [pc, #220]	; (80056d8 <_printf_float+0x2ec>)
 80055fa:	2301      	movs	r3, #1
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	47b8      	blx	r7
 8005602:	3001      	adds	r0, #1
 8005604:	f43f af51 	beq.w	80054aa <_printf_float+0xbe>
 8005608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800560c:	429a      	cmp	r2, r3
 800560e:	db02      	blt.n	8005616 <_printf_float+0x22a>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	07d8      	lsls	r0, r3, #31
 8005614:	d510      	bpl.n	8005638 <_printf_float+0x24c>
 8005616:	ee18 3a10 	vmov	r3, s16
 800561a:	4652      	mov	r2, sl
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f af41 	beq.w	80054aa <_printf_float+0xbe>
 8005628:	f04f 0800 	mov.w	r8, #0
 800562c:	f104 091a 	add.w	r9, r4, #26
 8005630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005632:	3b01      	subs	r3, #1
 8005634:	4543      	cmp	r3, r8
 8005636:	dc09      	bgt.n	800564c <_printf_float+0x260>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	079b      	lsls	r3, r3, #30
 800563c:	f100 8107 	bmi.w	800584e <_printf_float+0x462>
 8005640:	68e0      	ldr	r0, [r4, #12]
 8005642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005644:	4298      	cmp	r0, r3
 8005646:	bfb8      	it	lt
 8005648:	4618      	movlt	r0, r3
 800564a:	e730      	b.n	80054ae <_printf_float+0xc2>
 800564c:	2301      	movs	r3, #1
 800564e:	464a      	mov	r2, r9
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	f43f af27 	beq.w	80054aa <_printf_float+0xbe>
 800565c:	f108 0801 	add.w	r8, r8, #1
 8005660:	e7e6      	b.n	8005630 <_printf_float+0x244>
 8005662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	dc39      	bgt.n	80056dc <_printf_float+0x2f0>
 8005668:	4a1b      	ldr	r2, [pc, #108]	; (80056d8 <_printf_float+0x2ec>)
 800566a:	2301      	movs	r3, #1
 800566c:	4631      	mov	r1, r6
 800566e:	4628      	mov	r0, r5
 8005670:	47b8      	blx	r7
 8005672:	3001      	adds	r0, #1
 8005674:	f43f af19 	beq.w	80054aa <_printf_float+0xbe>
 8005678:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800567c:	4313      	orrs	r3, r2
 800567e:	d102      	bne.n	8005686 <_printf_float+0x29a>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	07d9      	lsls	r1, r3, #31
 8005684:	d5d8      	bpl.n	8005638 <_printf_float+0x24c>
 8005686:	ee18 3a10 	vmov	r3, s16
 800568a:	4652      	mov	r2, sl
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	f43f af09 	beq.w	80054aa <_printf_float+0xbe>
 8005698:	f04f 0900 	mov.w	r9, #0
 800569c:	f104 0a1a 	add.w	sl, r4, #26
 80056a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a2:	425b      	negs	r3, r3
 80056a4:	454b      	cmp	r3, r9
 80056a6:	dc01      	bgt.n	80056ac <_printf_float+0x2c0>
 80056a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056aa:	e792      	b.n	80055d2 <_printf_float+0x1e6>
 80056ac:	2301      	movs	r3, #1
 80056ae:	4652      	mov	r2, sl
 80056b0:	4631      	mov	r1, r6
 80056b2:	4628      	mov	r0, r5
 80056b4:	47b8      	blx	r7
 80056b6:	3001      	adds	r0, #1
 80056b8:	f43f aef7 	beq.w	80054aa <_printf_float+0xbe>
 80056bc:	f109 0901 	add.w	r9, r9, #1
 80056c0:	e7ee      	b.n	80056a0 <_printf_float+0x2b4>
 80056c2:	bf00      	nop
 80056c4:	7fefffff 	.word	0x7fefffff
 80056c8:	080093b8 	.word	0x080093b8
 80056cc:	080093bc 	.word	0x080093bc
 80056d0:	080093c0 	.word	0x080093c0
 80056d4:	080093c4 	.word	0x080093c4
 80056d8:	080093c8 	.word	0x080093c8
 80056dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056e0:	429a      	cmp	r2, r3
 80056e2:	bfa8      	it	ge
 80056e4:	461a      	movge	r2, r3
 80056e6:	2a00      	cmp	r2, #0
 80056e8:	4691      	mov	r9, r2
 80056ea:	dc37      	bgt.n	800575c <_printf_float+0x370>
 80056ec:	f04f 0b00 	mov.w	fp, #0
 80056f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056f4:	f104 021a 	add.w	r2, r4, #26
 80056f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056fa:	9305      	str	r3, [sp, #20]
 80056fc:	eba3 0309 	sub.w	r3, r3, r9
 8005700:	455b      	cmp	r3, fp
 8005702:	dc33      	bgt.n	800576c <_printf_float+0x380>
 8005704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005708:	429a      	cmp	r2, r3
 800570a:	db3b      	blt.n	8005784 <_printf_float+0x398>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	07da      	lsls	r2, r3, #31
 8005710:	d438      	bmi.n	8005784 <_printf_float+0x398>
 8005712:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005716:	eba2 0903 	sub.w	r9, r2, r3
 800571a:	9b05      	ldr	r3, [sp, #20]
 800571c:	1ad2      	subs	r2, r2, r3
 800571e:	4591      	cmp	r9, r2
 8005720:	bfa8      	it	ge
 8005722:	4691      	movge	r9, r2
 8005724:	f1b9 0f00 	cmp.w	r9, #0
 8005728:	dc35      	bgt.n	8005796 <_printf_float+0x3aa>
 800572a:	f04f 0800 	mov.w	r8, #0
 800572e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005732:	f104 0a1a 	add.w	sl, r4, #26
 8005736:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	eba3 0309 	sub.w	r3, r3, r9
 8005740:	4543      	cmp	r3, r8
 8005742:	f77f af79 	ble.w	8005638 <_printf_float+0x24c>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	f43f aeaa 	beq.w	80054aa <_printf_float+0xbe>
 8005756:	f108 0801 	add.w	r8, r8, #1
 800575a:	e7ec      	b.n	8005736 <_printf_float+0x34a>
 800575c:	4613      	mov	r3, r2
 800575e:	4631      	mov	r1, r6
 8005760:	4642      	mov	r2, r8
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	d1c0      	bne.n	80056ec <_printf_float+0x300>
 800576a:	e69e      	b.n	80054aa <_printf_float+0xbe>
 800576c:	2301      	movs	r3, #1
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	9205      	str	r2, [sp, #20]
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	f43f ae97 	beq.w	80054aa <_printf_float+0xbe>
 800577c:	9a05      	ldr	r2, [sp, #20]
 800577e:	f10b 0b01 	add.w	fp, fp, #1
 8005782:	e7b9      	b.n	80056f8 <_printf_float+0x30c>
 8005784:	ee18 3a10 	vmov	r3, s16
 8005788:	4652      	mov	r2, sl
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	47b8      	blx	r7
 8005790:	3001      	adds	r0, #1
 8005792:	d1be      	bne.n	8005712 <_printf_float+0x326>
 8005794:	e689      	b.n	80054aa <_printf_float+0xbe>
 8005796:	9a05      	ldr	r2, [sp, #20]
 8005798:	464b      	mov	r3, r9
 800579a:	4442      	add	r2, r8
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	d1c1      	bne.n	800572a <_printf_float+0x33e>
 80057a6:	e680      	b.n	80054aa <_printf_float+0xbe>
 80057a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057aa:	2a01      	cmp	r2, #1
 80057ac:	dc01      	bgt.n	80057b2 <_printf_float+0x3c6>
 80057ae:	07db      	lsls	r3, r3, #31
 80057b0:	d53a      	bpl.n	8005828 <_printf_float+0x43c>
 80057b2:	2301      	movs	r3, #1
 80057b4:	4642      	mov	r2, r8
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	47b8      	blx	r7
 80057bc:	3001      	adds	r0, #1
 80057be:	f43f ae74 	beq.w	80054aa <_printf_float+0xbe>
 80057c2:	ee18 3a10 	vmov	r3, s16
 80057c6:	4652      	mov	r2, sl
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f ae6b 	beq.w	80054aa <_printf_float+0xbe>
 80057d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057d8:	2200      	movs	r2, #0
 80057da:	2300      	movs	r3, #0
 80057dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80057e0:	f7fb f992 	bl	8000b08 <__aeabi_dcmpeq>
 80057e4:	b9d8      	cbnz	r0, 800581e <_printf_float+0x432>
 80057e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057ea:	f108 0201 	add.w	r2, r8, #1
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	47b8      	blx	r7
 80057f4:	3001      	adds	r0, #1
 80057f6:	d10e      	bne.n	8005816 <_printf_float+0x42a>
 80057f8:	e657      	b.n	80054aa <_printf_float+0xbe>
 80057fa:	2301      	movs	r3, #1
 80057fc:	4652      	mov	r2, sl
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f ae50 	beq.w	80054aa <_printf_float+0xbe>
 800580a:	f108 0801 	add.w	r8, r8, #1
 800580e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	4543      	cmp	r3, r8
 8005814:	dcf1      	bgt.n	80057fa <_printf_float+0x40e>
 8005816:	464b      	mov	r3, r9
 8005818:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800581c:	e6da      	b.n	80055d4 <_printf_float+0x1e8>
 800581e:	f04f 0800 	mov.w	r8, #0
 8005822:	f104 0a1a 	add.w	sl, r4, #26
 8005826:	e7f2      	b.n	800580e <_printf_float+0x422>
 8005828:	2301      	movs	r3, #1
 800582a:	4642      	mov	r2, r8
 800582c:	e7df      	b.n	80057ee <_printf_float+0x402>
 800582e:	2301      	movs	r3, #1
 8005830:	464a      	mov	r2, r9
 8005832:	4631      	mov	r1, r6
 8005834:	4628      	mov	r0, r5
 8005836:	47b8      	blx	r7
 8005838:	3001      	adds	r0, #1
 800583a:	f43f ae36 	beq.w	80054aa <_printf_float+0xbe>
 800583e:	f108 0801 	add.w	r8, r8, #1
 8005842:	68e3      	ldr	r3, [r4, #12]
 8005844:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005846:	1a5b      	subs	r3, r3, r1
 8005848:	4543      	cmp	r3, r8
 800584a:	dcf0      	bgt.n	800582e <_printf_float+0x442>
 800584c:	e6f8      	b.n	8005640 <_printf_float+0x254>
 800584e:	f04f 0800 	mov.w	r8, #0
 8005852:	f104 0919 	add.w	r9, r4, #25
 8005856:	e7f4      	b.n	8005842 <_printf_float+0x456>

08005858 <_printf_common>:
 8005858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800585c:	4616      	mov	r6, r2
 800585e:	4699      	mov	r9, r3
 8005860:	688a      	ldr	r2, [r1, #8]
 8005862:	690b      	ldr	r3, [r1, #16]
 8005864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005868:	4293      	cmp	r3, r2
 800586a:	bfb8      	it	lt
 800586c:	4613      	movlt	r3, r2
 800586e:	6033      	str	r3, [r6, #0]
 8005870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005874:	4607      	mov	r7, r0
 8005876:	460c      	mov	r4, r1
 8005878:	b10a      	cbz	r2, 800587e <_printf_common+0x26>
 800587a:	3301      	adds	r3, #1
 800587c:	6033      	str	r3, [r6, #0]
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	0699      	lsls	r1, r3, #26
 8005882:	bf42      	ittt	mi
 8005884:	6833      	ldrmi	r3, [r6, #0]
 8005886:	3302      	addmi	r3, #2
 8005888:	6033      	strmi	r3, [r6, #0]
 800588a:	6825      	ldr	r5, [r4, #0]
 800588c:	f015 0506 	ands.w	r5, r5, #6
 8005890:	d106      	bne.n	80058a0 <_printf_common+0x48>
 8005892:	f104 0a19 	add.w	sl, r4, #25
 8005896:	68e3      	ldr	r3, [r4, #12]
 8005898:	6832      	ldr	r2, [r6, #0]
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	42ab      	cmp	r3, r5
 800589e:	dc26      	bgt.n	80058ee <_printf_common+0x96>
 80058a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058a4:	1e13      	subs	r3, r2, #0
 80058a6:	6822      	ldr	r2, [r4, #0]
 80058a8:	bf18      	it	ne
 80058aa:	2301      	movne	r3, #1
 80058ac:	0692      	lsls	r2, r2, #26
 80058ae:	d42b      	bmi.n	8005908 <_printf_common+0xb0>
 80058b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058b4:	4649      	mov	r1, r9
 80058b6:	4638      	mov	r0, r7
 80058b8:	47c0      	blx	r8
 80058ba:	3001      	adds	r0, #1
 80058bc:	d01e      	beq.n	80058fc <_printf_common+0xa4>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	6922      	ldr	r2, [r4, #16]
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	bf02      	ittt	eq
 80058ca:	68e5      	ldreq	r5, [r4, #12]
 80058cc:	6833      	ldreq	r3, [r6, #0]
 80058ce:	1aed      	subeq	r5, r5, r3
 80058d0:	68a3      	ldr	r3, [r4, #8]
 80058d2:	bf0c      	ite	eq
 80058d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d8:	2500      	movne	r5, #0
 80058da:	4293      	cmp	r3, r2
 80058dc:	bfc4      	itt	gt
 80058de:	1a9b      	subgt	r3, r3, r2
 80058e0:	18ed      	addgt	r5, r5, r3
 80058e2:	2600      	movs	r6, #0
 80058e4:	341a      	adds	r4, #26
 80058e6:	42b5      	cmp	r5, r6
 80058e8:	d11a      	bne.n	8005920 <_printf_common+0xc8>
 80058ea:	2000      	movs	r0, #0
 80058ec:	e008      	b.n	8005900 <_printf_common+0xa8>
 80058ee:	2301      	movs	r3, #1
 80058f0:	4652      	mov	r2, sl
 80058f2:	4649      	mov	r1, r9
 80058f4:	4638      	mov	r0, r7
 80058f6:	47c0      	blx	r8
 80058f8:	3001      	adds	r0, #1
 80058fa:	d103      	bne.n	8005904 <_printf_common+0xac>
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005904:	3501      	adds	r5, #1
 8005906:	e7c6      	b.n	8005896 <_printf_common+0x3e>
 8005908:	18e1      	adds	r1, r4, r3
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	2030      	movs	r0, #48	; 0x30
 800590e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005912:	4422      	add	r2, r4
 8005914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800591c:	3302      	adds	r3, #2
 800591e:	e7c7      	b.n	80058b0 <_printf_common+0x58>
 8005920:	2301      	movs	r3, #1
 8005922:	4622      	mov	r2, r4
 8005924:	4649      	mov	r1, r9
 8005926:	4638      	mov	r0, r7
 8005928:	47c0      	blx	r8
 800592a:	3001      	adds	r0, #1
 800592c:	d0e6      	beq.n	80058fc <_printf_common+0xa4>
 800592e:	3601      	adds	r6, #1
 8005930:	e7d9      	b.n	80058e6 <_printf_common+0x8e>
	...

08005934 <_printf_i>:
 8005934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	7e0f      	ldrb	r7, [r1, #24]
 800593a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800593c:	2f78      	cmp	r7, #120	; 0x78
 800593e:	4691      	mov	r9, r2
 8005940:	4680      	mov	r8, r0
 8005942:	460c      	mov	r4, r1
 8005944:	469a      	mov	sl, r3
 8005946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800594a:	d807      	bhi.n	800595c <_printf_i+0x28>
 800594c:	2f62      	cmp	r7, #98	; 0x62
 800594e:	d80a      	bhi.n	8005966 <_printf_i+0x32>
 8005950:	2f00      	cmp	r7, #0
 8005952:	f000 80d4 	beq.w	8005afe <_printf_i+0x1ca>
 8005956:	2f58      	cmp	r7, #88	; 0x58
 8005958:	f000 80c0 	beq.w	8005adc <_printf_i+0x1a8>
 800595c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005964:	e03a      	b.n	80059dc <_printf_i+0xa8>
 8005966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800596a:	2b15      	cmp	r3, #21
 800596c:	d8f6      	bhi.n	800595c <_printf_i+0x28>
 800596e:	a101      	add	r1, pc, #4	; (adr r1, 8005974 <_printf_i+0x40>)
 8005970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005974:	080059cd 	.word	0x080059cd
 8005978:	080059e1 	.word	0x080059e1
 800597c:	0800595d 	.word	0x0800595d
 8005980:	0800595d 	.word	0x0800595d
 8005984:	0800595d 	.word	0x0800595d
 8005988:	0800595d 	.word	0x0800595d
 800598c:	080059e1 	.word	0x080059e1
 8005990:	0800595d 	.word	0x0800595d
 8005994:	0800595d 	.word	0x0800595d
 8005998:	0800595d 	.word	0x0800595d
 800599c:	0800595d 	.word	0x0800595d
 80059a0:	08005ae5 	.word	0x08005ae5
 80059a4:	08005a0d 	.word	0x08005a0d
 80059a8:	08005a9f 	.word	0x08005a9f
 80059ac:	0800595d 	.word	0x0800595d
 80059b0:	0800595d 	.word	0x0800595d
 80059b4:	08005b07 	.word	0x08005b07
 80059b8:	0800595d 	.word	0x0800595d
 80059bc:	08005a0d 	.word	0x08005a0d
 80059c0:	0800595d 	.word	0x0800595d
 80059c4:	0800595d 	.word	0x0800595d
 80059c8:	08005aa7 	.word	0x08005aa7
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	1d1a      	adds	r2, r3, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	602a      	str	r2, [r5, #0]
 80059d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059dc:	2301      	movs	r3, #1
 80059de:	e09f      	b.n	8005b20 <_printf_i+0x1ec>
 80059e0:	6820      	ldr	r0, [r4, #0]
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	0607      	lsls	r7, r0, #24
 80059e6:	f103 0104 	add.w	r1, r3, #4
 80059ea:	6029      	str	r1, [r5, #0]
 80059ec:	d501      	bpl.n	80059f2 <_printf_i+0xbe>
 80059ee:	681e      	ldr	r6, [r3, #0]
 80059f0:	e003      	b.n	80059fa <_printf_i+0xc6>
 80059f2:	0646      	lsls	r6, r0, #25
 80059f4:	d5fb      	bpl.n	80059ee <_printf_i+0xba>
 80059f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	da03      	bge.n	8005a06 <_printf_i+0xd2>
 80059fe:	232d      	movs	r3, #45	; 0x2d
 8005a00:	4276      	negs	r6, r6
 8005a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a06:	485a      	ldr	r0, [pc, #360]	; (8005b70 <_printf_i+0x23c>)
 8005a08:	230a      	movs	r3, #10
 8005a0a:	e012      	b.n	8005a32 <_printf_i+0xfe>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	6820      	ldr	r0, [r4, #0]
 8005a10:	1d19      	adds	r1, r3, #4
 8005a12:	6029      	str	r1, [r5, #0]
 8005a14:	0605      	lsls	r5, r0, #24
 8005a16:	d501      	bpl.n	8005a1c <_printf_i+0xe8>
 8005a18:	681e      	ldr	r6, [r3, #0]
 8005a1a:	e002      	b.n	8005a22 <_printf_i+0xee>
 8005a1c:	0641      	lsls	r1, r0, #25
 8005a1e:	d5fb      	bpl.n	8005a18 <_printf_i+0xe4>
 8005a20:	881e      	ldrh	r6, [r3, #0]
 8005a22:	4853      	ldr	r0, [pc, #332]	; (8005b70 <_printf_i+0x23c>)
 8005a24:	2f6f      	cmp	r7, #111	; 0x6f
 8005a26:	bf0c      	ite	eq
 8005a28:	2308      	moveq	r3, #8
 8005a2a:	230a      	movne	r3, #10
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a32:	6865      	ldr	r5, [r4, #4]
 8005a34:	60a5      	str	r5, [r4, #8]
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	bfa2      	ittt	ge
 8005a3a:	6821      	ldrge	r1, [r4, #0]
 8005a3c:	f021 0104 	bicge.w	r1, r1, #4
 8005a40:	6021      	strge	r1, [r4, #0]
 8005a42:	b90e      	cbnz	r6, 8005a48 <_printf_i+0x114>
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	d04b      	beq.n	8005ae0 <_printf_i+0x1ac>
 8005a48:	4615      	mov	r5, r2
 8005a4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a4e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a52:	5dc7      	ldrb	r7, [r0, r7]
 8005a54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a58:	4637      	mov	r7, r6
 8005a5a:	42bb      	cmp	r3, r7
 8005a5c:	460e      	mov	r6, r1
 8005a5e:	d9f4      	bls.n	8005a4a <_printf_i+0x116>
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d10b      	bne.n	8005a7c <_printf_i+0x148>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	07de      	lsls	r6, r3, #31
 8005a68:	d508      	bpl.n	8005a7c <_printf_i+0x148>
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	6861      	ldr	r1, [r4, #4]
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	bfde      	ittt	le
 8005a72:	2330      	movle	r3, #48	; 0x30
 8005a74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a7c:	1b52      	subs	r2, r2, r5
 8005a7e:	6122      	str	r2, [r4, #16]
 8005a80:	f8cd a000 	str.w	sl, [sp]
 8005a84:	464b      	mov	r3, r9
 8005a86:	aa03      	add	r2, sp, #12
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f7ff fee4 	bl	8005858 <_printf_common>
 8005a90:	3001      	adds	r0, #1
 8005a92:	d14a      	bne.n	8005b2a <_printf_i+0x1f6>
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	b004      	add	sp, #16
 8005a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	f043 0320 	orr.w	r3, r3, #32
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	4833      	ldr	r0, [pc, #204]	; (8005b74 <_printf_i+0x240>)
 8005aa8:	2778      	movs	r7, #120	; 0x78
 8005aaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	6829      	ldr	r1, [r5, #0]
 8005ab2:	061f      	lsls	r7, r3, #24
 8005ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ab8:	d402      	bmi.n	8005ac0 <_printf_i+0x18c>
 8005aba:	065f      	lsls	r7, r3, #25
 8005abc:	bf48      	it	mi
 8005abe:	b2b6      	uxthmi	r6, r6
 8005ac0:	07df      	lsls	r7, r3, #31
 8005ac2:	bf48      	it	mi
 8005ac4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac8:	6029      	str	r1, [r5, #0]
 8005aca:	bf48      	it	mi
 8005acc:	6023      	strmi	r3, [r4, #0]
 8005ace:	b91e      	cbnz	r6, 8005ad8 <_printf_i+0x1a4>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	f023 0320 	bic.w	r3, r3, #32
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	2310      	movs	r3, #16
 8005ada:	e7a7      	b.n	8005a2c <_printf_i+0xf8>
 8005adc:	4824      	ldr	r0, [pc, #144]	; (8005b70 <_printf_i+0x23c>)
 8005ade:	e7e4      	b.n	8005aaa <_printf_i+0x176>
 8005ae0:	4615      	mov	r5, r2
 8005ae2:	e7bd      	b.n	8005a60 <_printf_i+0x12c>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	6826      	ldr	r6, [r4, #0]
 8005ae8:	6961      	ldr	r1, [r4, #20]
 8005aea:	1d18      	adds	r0, r3, #4
 8005aec:	6028      	str	r0, [r5, #0]
 8005aee:	0635      	lsls	r5, r6, #24
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	d501      	bpl.n	8005af8 <_printf_i+0x1c4>
 8005af4:	6019      	str	r1, [r3, #0]
 8005af6:	e002      	b.n	8005afe <_printf_i+0x1ca>
 8005af8:	0670      	lsls	r0, r6, #25
 8005afa:	d5fb      	bpl.n	8005af4 <_printf_i+0x1c0>
 8005afc:	8019      	strh	r1, [r3, #0]
 8005afe:	2300      	movs	r3, #0
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	4615      	mov	r5, r2
 8005b04:	e7bc      	b.n	8005a80 <_printf_i+0x14c>
 8005b06:	682b      	ldr	r3, [r5, #0]
 8005b08:	1d1a      	adds	r2, r3, #4
 8005b0a:	602a      	str	r2, [r5, #0]
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	6862      	ldr	r2, [r4, #4]
 8005b10:	2100      	movs	r1, #0
 8005b12:	4628      	mov	r0, r5
 8005b14:	f7fa fb7c 	bl	8000210 <memchr>
 8005b18:	b108      	cbz	r0, 8005b1e <_printf_i+0x1ea>
 8005b1a:	1b40      	subs	r0, r0, r5
 8005b1c:	6060      	str	r0, [r4, #4]
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	2300      	movs	r3, #0
 8005b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b28:	e7aa      	b.n	8005a80 <_printf_i+0x14c>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	462a      	mov	r2, r5
 8005b2e:	4649      	mov	r1, r9
 8005b30:	4640      	mov	r0, r8
 8005b32:	47d0      	blx	sl
 8005b34:	3001      	adds	r0, #1
 8005b36:	d0ad      	beq.n	8005a94 <_printf_i+0x160>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	079b      	lsls	r3, r3, #30
 8005b3c:	d413      	bmi.n	8005b66 <_printf_i+0x232>
 8005b3e:	68e0      	ldr	r0, [r4, #12]
 8005b40:	9b03      	ldr	r3, [sp, #12]
 8005b42:	4298      	cmp	r0, r3
 8005b44:	bfb8      	it	lt
 8005b46:	4618      	movlt	r0, r3
 8005b48:	e7a6      	b.n	8005a98 <_printf_i+0x164>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4640      	mov	r0, r8
 8005b52:	47d0      	blx	sl
 8005b54:	3001      	adds	r0, #1
 8005b56:	d09d      	beq.n	8005a94 <_printf_i+0x160>
 8005b58:	3501      	adds	r5, #1
 8005b5a:	68e3      	ldr	r3, [r4, #12]
 8005b5c:	9903      	ldr	r1, [sp, #12]
 8005b5e:	1a5b      	subs	r3, r3, r1
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	dcf2      	bgt.n	8005b4a <_printf_i+0x216>
 8005b64:	e7eb      	b.n	8005b3e <_printf_i+0x20a>
 8005b66:	2500      	movs	r5, #0
 8005b68:	f104 0619 	add.w	r6, r4, #25
 8005b6c:	e7f5      	b.n	8005b5a <_printf_i+0x226>
 8005b6e:	bf00      	nop
 8005b70:	080093ca 	.word	0x080093ca
 8005b74:	080093db 	.word	0x080093db

08005b78 <std>:
 8005b78:	2300      	movs	r3, #0
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b86:	6083      	str	r3, [r0, #8]
 8005b88:	8181      	strh	r1, [r0, #12]
 8005b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b8c:	81c2      	strh	r2, [r0, #14]
 8005b8e:	6183      	str	r3, [r0, #24]
 8005b90:	4619      	mov	r1, r3
 8005b92:	2208      	movs	r2, #8
 8005b94:	305c      	adds	r0, #92	; 0x5c
 8005b96:	f000 f8f4 	bl	8005d82 <memset>
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <std+0x58>)
 8005b9c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <std+0x5c>)
 8005ba0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <std+0x60>)
 8005ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <std+0x64>)
 8005ba8:	6323      	str	r3, [r4, #48]	; 0x30
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <std+0x68>)
 8005bac:	6224      	str	r4, [r4, #32]
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	d006      	beq.n	8005bc0 <std+0x48>
 8005bb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005bb6:	4294      	cmp	r4, r2
 8005bb8:	d002      	beq.n	8005bc0 <std+0x48>
 8005bba:	33d0      	adds	r3, #208	; 0xd0
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	d105      	bne.n	8005bcc <std+0x54>
 8005bc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc8:	f000 b958 	b.w	8005e7c <__retarget_lock_init_recursive>
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	bf00      	nop
 8005bd0:	08005cfd 	.word	0x08005cfd
 8005bd4:	08005d1f 	.word	0x08005d1f
 8005bd8:	08005d57 	.word	0x08005d57
 8005bdc:	08005d7b 	.word	0x08005d7b
 8005be0:	2000040c 	.word	0x2000040c

08005be4 <stdio_exit_handler>:
 8005be4:	4a02      	ldr	r2, [pc, #8]	; (8005bf0 <stdio_exit_handler+0xc>)
 8005be6:	4903      	ldr	r1, [pc, #12]	; (8005bf4 <stdio_exit_handler+0x10>)
 8005be8:	4803      	ldr	r0, [pc, #12]	; (8005bf8 <stdio_exit_handler+0x14>)
 8005bea:	f000 b869 	b.w	8005cc0 <_fwalk_sglue>
 8005bee:	bf00      	nop
 8005bf0:	2000000c 	.word	0x2000000c
 8005bf4:	08007581 	.word	0x08007581
 8005bf8:	20000018 	.word	0x20000018

08005bfc <cleanup_stdio>:
 8005bfc:	6841      	ldr	r1, [r0, #4]
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <cleanup_stdio+0x34>)
 8005c00:	4299      	cmp	r1, r3
 8005c02:	b510      	push	{r4, lr}
 8005c04:	4604      	mov	r4, r0
 8005c06:	d001      	beq.n	8005c0c <cleanup_stdio+0x10>
 8005c08:	f001 fcba 	bl	8007580 <_fflush_r>
 8005c0c:	68a1      	ldr	r1, [r4, #8]
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <cleanup_stdio+0x38>)
 8005c10:	4299      	cmp	r1, r3
 8005c12:	d002      	beq.n	8005c1a <cleanup_stdio+0x1e>
 8005c14:	4620      	mov	r0, r4
 8005c16:	f001 fcb3 	bl	8007580 <_fflush_r>
 8005c1a:	68e1      	ldr	r1, [r4, #12]
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <cleanup_stdio+0x3c>)
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	d004      	beq.n	8005c2c <cleanup_stdio+0x30>
 8005c22:	4620      	mov	r0, r4
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f001 bcaa 	b.w	8007580 <_fflush_r>
 8005c2c:	bd10      	pop	{r4, pc}
 8005c2e:	bf00      	nop
 8005c30:	2000040c 	.word	0x2000040c
 8005c34:	20000474 	.word	0x20000474
 8005c38:	200004dc 	.word	0x200004dc

08005c3c <global_stdio_init.part.0>:
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <global_stdio_init.part.0+0x30>)
 8005c40:	4c0b      	ldr	r4, [pc, #44]	; (8005c70 <global_stdio_init.part.0+0x34>)
 8005c42:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <global_stdio_init.part.0+0x38>)
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	4620      	mov	r0, r4
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2104      	movs	r1, #4
 8005c4c:	f7ff ff94 	bl	8005b78 <std>
 8005c50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c54:	2201      	movs	r2, #1
 8005c56:	2109      	movs	r1, #9
 8005c58:	f7ff ff8e 	bl	8005b78 <std>
 8005c5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c60:	2202      	movs	r2, #2
 8005c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c66:	2112      	movs	r1, #18
 8005c68:	f7ff bf86 	b.w	8005b78 <std>
 8005c6c:	20000544 	.word	0x20000544
 8005c70:	2000040c 	.word	0x2000040c
 8005c74:	08005be5 	.word	0x08005be5

08005c78 <__sfp_lock_acquire>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__sfp_lock_acquire+0x8>)
 8005c7a:	f000 b900 	b.w	8005e7e <__retarget_lock_acquire_recursive>
 8005c7e:	bf00      	nop
 8005c80:	2000054d 	.word	0x2000054d

08005c84 <__sfp_lock_release>:
 8005c84:	4801      	ldr	r0, [pc, #4]	; (8005c8c <__sfp_lock_release+0x8>)
 8005c86:	f000 b8fb 	b.w	8005e80 <__retarget_lock_release_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	2000054d 	.word	0x2000054d

08005c90 <__sinit>:
 8005c90:	b510      	push	{r4, lr}
 8005c92:	4604      	mov	r4, r0
 8005c94:	f7ff fff0 	bl	8005c78 <__sfp_lock_acquire>
 8005c98:	6a23      	ldr	r3, [r4, #32]
 8005c9a:	b11b      	cbz	r3, 8005ca4 <__sinit+0x14>
 8005c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca0:	f7ff bff0 	b.w	8005c84 <__sfp_lock_release>
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <__sinit+0x28>)
 8005ca6:	6223      	str	r3, [r4, #32]
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <__sinit+0x2c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1f5      	bne.n	8005c9c <__sinit+0xc>
 8005cb0:	f7ff ffc4 	bl	8005c3c <global_stdio_init.part.0>
 8005cb4:	e7f2      	b.n	8005c9c <__sinit+0xc>
 8005cb6:	bf00      	nop
 8005cb8:	08005bfd 	.word	0x08005bfd
 8005cbc:	20000544 	.word	0x20000544

08005cc0 <_fwalk_sglue>:
 8005cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	4688      	mov	r8, r1
 8005cc8:	4614      	mov	r4, r2
 8005cca:	2600      	movs	r6, #0
 8005ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8005cd4:	d505      	bpl.n	8005ce2 <_fwalk_sglue+0x22>
 8005cd6:	6824      	ldr	r4, [r4, #0]
 8005cd8:	2c00      	cmp	r4, #0
 8005cda:	d1f7      	bne.n	8005ccc <_fwalk_sglue+0xc>
 8005cdc:	4630      	mov	r0, r6
 8005cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce2:	89ab      	ldrh	r3, [r5, #12]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d907      	bls.n	8005cf8 <_fwalk_sglue+0x38>
 8005ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cec:	3301      	adds	r3, #1
 8005cee:	d003      	beq.n	8005cf8 <_fwalk_sglue+0x38>
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	47c0      	blx	r8
 8005cf6:	4306      	orrs	r6, r0
 8005cf8:	3568      	adds	r5, #104	; 0x68
 8005cfa:	e7e9      	b.n	8005cd0 <_fwalk_sglue+0x10>

08005cfc <__sread>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	460c      	mov	r4, r1
 8005d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d04:	f000 f86c 	bl	8005de0 <_read_r>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	bfab      	itete	ge
 8005d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d10:	181b      	addge	r3, r3, r0
 8005d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d16:	bfac      	ite	ge
 8005d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d1a:	81a3      	strhlt	r3, [r4, #12]
 8005d1c:	bd10      	pop	{r4, pc}

08005d1e <__swrite>:
 8005d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d22:	461f      	mov	r7, r3
 8005d24:	898b      	ldrh	r3, [r1, #12]
 8005d26:	05db      	lsls	r3, r3, #23
 8005d28:	4605      	mov	r5, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	d505      	bpl.n	8005d3c <__swrite+0x1e>
 8005d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d34:	2302      	movs	r3, #2
 8005d36:	2200      	movs	r2, #0
 8005d38:	f000 f840 	bl	8005dbc <_lseek_r>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	4632      	mov	r2, r6
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	f000 b857 	b.w	8005e04 <_write_r>

08005d56 <__sseek>:
 8005d56:	b510      	push	{r4, lr}
 8005d58:	460c      	mov	r4, r1
 8005d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5e:	f000 f82d 	bl	8005dbc <_lseek_r>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	bf15      	itete	ne
 8005d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d72:	81a3      	strheq	r3, [r4, #12]
 8005d74:	bf18      	it	ne
 8005d76:	81a3      	strhne	r3, [r4, #12]
 8005d78:	bd10      	pop	{r4, pc}

08005d7a <__sclose>:
 8005d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7e:	f000 b80d 	b.w	8005d9c <_close_r>

08005d82 <memset>:
 8005d82:	4402      	add	r2, r0
 8005d84:	4603      	mov	r3, r0
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d100      	bne.n	8005d8c <memset+0xa>
 8005d8a:	4770      	bx	lr
 8005d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d90:	e7f9      	b.n	8005d86 <memset+0x4>
	...

08005d94 <_localeconv_r>:
 8005d94:	4800      	ldr	r0, [pc, #0]	; (8005d98 <_localeconv_r+0x4>)
 8005d96:	4770      	bx	lr
 8005d98:	20000158 	.word	0x20000158

08005d9c <_close_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d06      	ldr	r5, [pc, #24]	; (8005db8 <_close_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fc f807 	bl	8001dba <_close>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_close_r+0x1a>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_close_r+0x1a>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	20000548 	.word	0x20000548

08005dbc <_lseek_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d07      	ldr	r5, [pc, #28]	; (8005ddc <_lseek_r+0x20>)
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	602a      	str	r2, [r5, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f7fc f81c 	bl	8001e08 <_lseek>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_lseek_r+0x1e>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_lseek_r+0x1e>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000548 	.word	0x20000548

08005de0 <_read_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	; (8005e00 <_read_r+0x20>)
 8005de4:	4604      	mov	r4, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fb ffaa 	bl	8001d48 <_read>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_read_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_read_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000548 	.word	0x20000548

08005e04 <_write_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d07      	ldr	r5, [pc, #28]	; (8005e24 <_write_r+0x20>)
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fb ffb5 	bl	8001d82 <_write>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_write_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_write_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20000548 	.word	0x20000548

08005e28 <__errno>:
 8005e28:	4b01      	ldr	r3, [pc, #4]	; (8005e30 <__errno+0x8>)
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000064 	.word	0x20000064

08005e34 <__libc_init_array>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	4d0d      	ldr	r5, [pc, #52]	; (8005e6c <__libc_init_array+0x38>)
 8005e38:	4c0d      	ldr	r4, [pc, #52]	; (8005e70 <__libc_init_array+0x3c>)
 8005e3a:	1b64      	subs	r4, r4, r5
 8005e3c:	10a4      	asrs	r4, r4, #2
 8005e3e:	2600      	movs	r6, #0
 8005e40:	42a6      	cmp	r6, r4
 8005e42:	d109      	bne.n	8005e58 <__libc_init_array+0x24>
 8005e44:	4d0b      	ldr	r5, [pc, #44]	; (8005e74 <__libc_init_array+0x40>)
 8005e46:	4c0c      	ldr	r4, [pc, #48]	; (8005e78 <__libc_init_array+0x44>)
 8005e48:	f003 faa2 	bl	8009390 <_init>
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	2600      	movs	r6, #0
 8005e52:	42a6      	cmp	r6, r4
 8005e54:	d105      	bne.n	8005e62 <__libc_init_array+0x2e>
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5c:	4798      	blx	r3
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7ee      	b.n	8005e40 <__libc_init_array+0xc>
 8005e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e66:	4798      	blx	r3
 8005e68:	3601      	adds	r6, #1
 8005e6a:	e7f2      	b.n	8005e52 <__libc_init_array+0x1e>
 8005e6c:	08009980 	.word	0x08009980
 8005e70:	08009980 	.word	0x08009980
 8005e74:	08009980 	.word	0x08009980
 8005e78:	08009984 	.word	0x08009984

08005e7c <__retarget_lock_init_recursive>:
 8005e7c:	4770      	bx	lr

08005e7e <__retarget_lock_acquire_recursive>:
 8005e7e:	4770      	bx	lr

08005e80 <__retarget_lock_release_recursive>:
 8005e80:	4770      	bx	lr

08005e82 <quorem>:
 8005e82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e86:	6903      	ldr	r3, [r0, #16]
 8005e88:	690c      	ldr	r4, [r1, #16]
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	db7e      	blt.n	8005f8e <quorem+0x10c>
 8005e90:	3c01      	subs	r4, #1
 8005e92:	f101 0814 	add.w	r8, r1, #20
 8005e96:	f100 0514 	add.w	r5, r0, #20
 8005e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005eb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eb8:	d331      	bcc.n	8005f1e <quorem+0x9c>
 8005eba:	f04f 0e00 	mov.w	lr, #0
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	46ac      	mov	ip, r5
 8005ec2:	46f2      	mov	sl, lr
 8005ec4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ec8:	b293      	uxth	r3, r2
 8005eca:	fb06 e303 	mla	r3, r6, r3, lr
 8005ece:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ed2:	0c1a      	lsrs	r2, r3, #16
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ebaa 0303 	sub.w	r3, sl, r3
 8005eda:	f8dc a000 	ldr.w	sl, [ip]
 8005ede:	fa13 f38a 	uxtah	r3, r3, sl
 8005ee2:	fb06 220e 	mla	r2, r6, lr, r2
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	9b00      	ldr	r3, [sp, #0]
 8005eea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005eee:	b292      	uxth	r2, r2
 8005ef0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ef8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005efc:	4581      	cmp	r9, r0
 8005efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f02:	f84c 3b04 	str.w	r3, [ip], #4
 8005f06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f0a:	d2db      	bcs.n	8005ec4 <quorem+0x42>
 8005f0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f10:	b92b      	cbnz	r3, 8005f1e <quorem+0x9c>
 8005f12:	9b01      	ldr	r3, [sp, #4]
 8005f14:	3b04      	subs	r3, #4
 8005f16:	429d      	cmp	r5, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	d32c      	bcc.n	8005f76 <quorem+0xf4>
 8005f1c:	613c      	str	r4, [r7, #16]
 8005f1e:	4638      	mov	r0, r7
 8005f20:	f001 f9a8 	bl	8007274 <__mcmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	db22      	blt.n	8005f6e <quorem+0xec>
 8005f28:	3601      	adds	r6, #1
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f32:	f8d1 c000 	ldr.w	ip, [r1]
 8005f36:	b293      	uxth	r3, r2
 8005f38:	1ac3      	subs	r3, r0, r3
 8005f3a:	0c12      	lsrs	r2, r2, #16
 8005f3c:	fa13 f38c 	uxtah	r3, r3, ip
 8005f40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f4e:	45c1      	cmp	r9, r8
 8005f50:	f841 3b04 	str.w	r3, [r1], #4
 8005f54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f58:	d2e9      	bcs.n	8005f2e <quorem+0xac>
 8005f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f62:	b922      	cbnz	r2, 8005f6e <quorem+0xec>
 8005f64:	3b04      	subs	r3, #4
 8005f66:	429d      	cmp	r5, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	d30a      	bcc.n	8005f82 <quorem+0x100>
 8005f6c:	613c      	str	r4, [r7, #16]
 8005f6e:	4630      	mov	r0, r6
 8005f70:	b003      	add	sp, #12
 8005f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	d1ce      	bne.n	8005f1c <quorem+0x9a>
 8005f7e:	3c01      	subs	r4, #1
 8005f80:	e7c9      	b.n	8005f16 <quorem+0x94>
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	3b04      	subs	r3, #4
 8005f86:	2a00      	cmp	r2, #0
 8005f88:	d1f0      	bne.n	8005f6c <quorem+0xea>
 8005f8a:	3c01      	subs	r4, #1
 8005f8c:	e7eb      	b.n	8005f66 <quorem+0xe4>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e7ee      	b.n	8005f70 <quorem+0xee>
 8005f92:	0000      	movs	r0, r0
 8005f94:	0000      	movs	r0, r0
	...

08005f98 <_dtoa_r>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	ed2d 8b04 	vpush	{d8-d9}
 8005fa0:	69c5      	ldr	r5, [r0, #28]
 8005fa2:	b093      	sub	sp, #76	; 0x4c
 8005fa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fa8:	ec57 6b10 	vmov	r6, r7, d0
 8005fac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fb0:	9107      	str	r1, [sp, #28]
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	920a      	str	r2, [sp, #40]	; 0x28
 8005fb6:	930d      	str	r3, [sp, #52]	; 0x34
 8005fb8:	b975      	cbnz	r5, 8005fd8 <_dtoa_r+0x40>
 8005fba:	2010      	movs	r0, #16
 8005fbc:	f000 fe2a 	bl	8006c14 <malloc>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	61e0      	str	r0, [r4, #28]
 8005fc4:	b920      	cbnz	r0, 8005fd0 <_dtoa_r+0x38>
 8005fc6:	4bae      	ldr	r3, [pc, #696]	; (8006280 <_dtoa_r+0x2e8>)
 8005fc8:	21ef      	movs	r1, #239	; 0xef
 8005fca:	48ae      	ldr	r0, [pc, #696]	; (8006284 <_dtoa_r+0x2ec>)
 8005fcc:	f001 fb1e 	bl	800760c <__assert_func>
 8005fd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fd4:	6005      	str	r5, [r0, #0]
 8005fd6:	60c5      	str	r5, [r0, #12]
 8005fd8:	69e3      	ldr	r3, [r4, #28]
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	b151      	cbz	r1, 8005ff4 <_dtoa_r+0x5c>
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	604a      	str	r2, [r1, #4]
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4093      	lsls	r3, r2
 8005fe6:	608b      	str	r3, [r1, #8]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 ff07 	bl	8006dfc <_Bfree>
 8005fee:	69e3      	ldr	r3, [r4, #28]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	1e3b      	subs	r3, r7, #0
 8005ff6:	bfbb      	ittet	lt
 8005ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ffc:	9303      	strlt	r3, [sp, #12]
 8005ffe:	2300      	movge	r3, #0
 8006000:	2201      	movlt	r2, #1
 8006002:	bfac      	ite	ge
 8006004:	f8c8 3000 	strge.w	r3, [r8]
 8006008:	f8c8 2000 	strlt.w	r2, [r8]
 800600c:	4b9e      	ldr	r3, [pc, #632]	; (8006288 <_dtoa_r+0x2f0>)
 800600e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006012:	ea33 0308 	bics.w	r3, r3, r8
 8006016:	d11b      	bne.n	8006050 <_dtoa_r+0xb8>
 8006018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800601a:	f242 730f 	movw	r3, #9999	; 0x270f
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006024:	4333      	orrs	r3, r6
 8006026:	f000 8593 	beq.w	8006b50 <_dtoa_r+0xbb8>
 800602a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800602c:	b963      	cbnz	r3, 8006048 <_dtoa_r+0xb0>
 800602e:	4b97      	ldr	r3, [pc, #604]	; (800628c <_dtoa_r+0x2f4>)
 8006030:	e027      	b.n	8006082 <_dtoa_r+0xea>
 8006032:	4b97      	ldr	r3, [pc, #604]	; (8006290 <_dtoa_r+0x2f8>)
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	9800      	ldr	r0, [sp, #0]
 800603e:	b013      	add	sp, #76	; 0x4c
 8006040:	ecbd 8b04 	vpop	{d8-d9}
 8006044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006048:	4b90      	ldr	r3, [pc, #576]	; (800628c <_dtoa_r+0x2f4>)
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	3303      	adds	r3, #3
 800604e:	e7f3      	b.n	8006038 <_dtoa_r+0xa0>
 8006050:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	ec51 0b17 	vmov	r0, r1, d7
 800605a:	eeb0 8a47 	vmov.f32	s16, s14
 800605e:	eef0 8a67 	vmov.f32	s17, s15
 8006062:	2300      	movs	r3, #0
 8006064:	f7fa fd50 	bl	8000b08 <__aeabi_dcmpeq>
 8006068:	4681      	mov	r9, r0
 800606a:	b160      	cbz	r0, 8006086 <_dtoa_r+0xee>
 800606c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800606e:	2301      	movs	r3, #1
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8568 	beq.w	8006b4a <_dtoa_r+0xbb2>
 800607a:	4b86      	ldr	r3, [pc, #536]	; (8006294 <_dtoa_r+0x2fc>)
 800607c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	3b01      	subs	r3, #1
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	e7da      	b.n	800603c <_dtoa_r+0xa4>
 8006086:	aa10      	add	r2, sp, #64	; 0x40
 8006088:	a911      	add	r1, sp, #68	; 0x44
 800608a:	4620      	mov	r0, r4
 800608c:	eeb0 0a48 	vmov.f32	s0, s16
 8006090:	eef0 0a68 	vmov.f32	s1, s17
 8006094:	f001 f994 	bl	80073c0 <__d2b>
 8006098:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800609c:	4682      	mov	sl, r0
 800609e:	2d00      	cmp	r5, #0
 80060a0:	d07f      	beq.n	80061a2 <_dtoa_r+0x20a>
 80060a2:	ee18 3a90 	vmov	r3, s17
 80060a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060ae:	ec51 0b18 	vmov	r0, r1, d8
 80060b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060be:	4619      	mov	r1, r3
 80060c0:	2200      	movs	r2, #0
 80060c2:	4b75      	ldr	r3, [pc, #468]	; (8006298 <_dtoa_r+0x300>)
 80060c4:	f7fa f900 	bl	80002c8 <__aeabi_dsub>
 80060c8:	a367      	add	r3, pc, #412	; (adr r3, 8006268 <_dtoa_r+0x2d0>)
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f7fa fab3 	bl	8000638 <__aeabi_dmul>
 80060d2:	a367      	add	r3, pc, #412	; (adr r3, 8006270 <_dtoa_r+0x2d8>)
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f7fa f8f8 	bl	80002cc <__adddf3>
 80060dc:	4606      	mov	r6, r0
 80060de:	4628      	mov	r0, r5
 80060e0:	460f      	mov	r7, r1
 80060e2:	f7fa fa3f 	bl	8000564 <__aeabi_i2d>
 80060e6:	a364      	add	r3, pc, #400	; (adr r3, 8006278 <_dtoa_r+0x2e0>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa faa4 	bl	8000638 <__aeabi_dmul>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa f8e8 	bl	80002cc <__adddf3>
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	f7fa fd4a 	bl	8000b98 <__aeabi_d2iz>
 8006104:	2200      	movs	r2, #0
 8006106:	4683      	mov	fp, r0
 8006108:	2300      	movs	r3, #0
 800610a:	4630      	mov	r0, r6
 800610c:	4639      	mov	r1, r7
 800610e:	f7fa fd05 	bl	8000b1c <__aeabi_dcmplt>
 8006112:	b148      	cbz	r0, 8006128 <_dtoa_r+0x190>
 8006114:	4658      	mov	r0, fp
 8006116:	f7fa fa25 	bl	8000564 <__aeabi_i2d>
 800611a:	4632      	mov	r2, r6
 800611c:	463b      	mov	r3, r7
 800611e:	f7fa fcf3 	bl	8000b08 <__aeabi_dcmpeq>
 8006122:	b908      	cbnz	r0, 8006128 <_dtoa_r+0x190>
 8006124:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006128:	f1bb 0f16 	cmp.w	fp, #22
 800612c:	d857      	bhi.n	80061de <_dtoa_r+0x246>
 800612e:	4b5b      	ldr	r3, [pc, #364]	; (800629c <_dtoa_r+0x304>)
 8006130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	ec51 0b18 	vmov	r0, r1, d8
 800613c:	f7fa fcee 	bl	8000b1c <__aeabi_dcmplt>
 8006140:	2800      	cmp	r0, #0
 8006142:	d04e      	beq.n	80061e2 <_dtoa_r+0x24a>
 8006144:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006148:	2300      	movs	r3, #0
 800614a:	930c      	str	r3, [sp, #48]	; 0x30
 800614c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800614e:	1b5b      	subs	r3, r3, r5
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	bf45      	ittet	mi
 8006154:	f1c3 0301 	rsbmi	r3, r3, #1
 8006158:	9305      	strmi	r3, [sp, #20]
 800615a:	2300      	movpl	r3, #0
 800615c:	2300      	movmi	r3, #0
 800615e:	9206      	str	r2, [sp, #24]
 8006160:	bf54      	ite	pl
 8006162:	9305      	strpl	r3, [sp, #20]
 8006164:	9306      	strmi	r3, [sp, #24]
 8006166:	f1bb 0f00 	cmp.w	fp, #0
 800616a:	db3c      	blt.n	80061e6 <_dtoa_r+0x24e>
 800616c:	9b06      	ldr	r3, [sp, #24]
 800616e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006172:	445b      	add	r3, fp
 8006174:	9306      	str	r3, [sp, #24]
 8006176:	2300      	movs	r3, #0
 8006178:	9308      	str	r3, [sp, #32]
 800617a:	9b07      	ldr	r3, [sp, #28]
 800617c:	2b09      	cmp	r3, #9
 800617e:	d868      	bhi.n	8006252 <_dtoa_r+0x2ba>
 8006180:	2b05      	cmp	r3, #5
 8006182:	bfc4      	itt	gt
 8006184:	3b04      	subgt	r3, #4
 8006186:	9307      	strgt	r3, [sp, #28]
 8006188:	9b07      	ldr	r3, [sp, #28]
 800618a:	f1a3 0302 	sub.w	r3, r3, #2
 800618e:	bfcc      	ite	gt
 8006190:	2500      	movgt	r5, #0
 8006192:	2501      	movle	r5, #1
 8006194:	2b03      	cmp	r3, #3
 8006196:	f200 8085 	bhi.w	80062a4 <_dtoa_r+0x30c>
 800619a:	e8df f003 	tbb	[pc, r3]
 800619e:	3b2e      	.short	0x3b2e
 80061a0:	5839      	.short	0x5839
 80061a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061a6:	441d      	add	r5, r3
 80061a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	bfc1      	itttt	gt
 80061b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80061b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061c0:	bfd6      	itet	le
 80061c2:	f1c3 0320 	rsble	r3, r3, #32
 80061c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80061ca:	fa06 f003 	lslle.w	r0, r6, r3
 80061ce:	f7fa f9b9 	bl	8000544 <__aeabi_ui2d>
 80061d2:	2201      	movs	r2, #1
 80061d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061d8:	3d01      	subs	r5, #1
 80061da:	920e      	str	r2, [sp, #56]	; 0x38
 80061dc:	e76f      	b.n	80060be <_dtoa_r+0x126>
 80061de:	2301      	movs	r3, #1
 80061e0:	e7b3      	b.n	800614a <_dtoa_r+0x1b2>
 80061e2:	900c      	str	r0, [sp, #48]	; 0x30
 80061e4:	e7b2      	b.n	800614c <_dtoa_r+0x1b4>
 80061e6:	9b05      	ldr	r3, [sp, #20]
 80061e8:	eba3 030b 	sub.w	r3, r3, fp
 80061ec:	9305      	str	r3, [sp, #20]
 80061ee:	f1cb 0300 	rsb	r3, fp, #0
 80061f2:	9308      	str	r3, [sp, #32]
 80061f4:	2300      	movs	r3, #0
 80061f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061f8:	e7bf      	b.n	800617a <_dtoa_r+0x1e2>
 80061fa:	2300      	movs	r3, #0
 80061fc:	9309      	str	r3, [sp, #36]	; 0x24
 80061fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	dc52      	bgt.n	80062aa <_dtoa_r+0x312>
 8006204:	2301      	movs	r3, #1
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	461a      	mov	r2, r3
 800620c:	920a      	str	r2, [sp, #40]	; 0x28
 800620e:	e00b      	b.n	8006228 <_dtoa_r+0x290>
 8006210:	2301      	movs	r3, #1
 8006212:	e7f3      	b.n	80061fc <_dtoa_r+0x264>
 8006214:	2300      	movs	r3, #0
 8006216:	9309      	str	r3, [sp, #36]	; 0x24
 8006218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621a:	445b      	add	r3, fp
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	3301      	adds	r3, #1
 8006220:	2b01      	cmp	r3, #1
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	bfb8      	it	lt
 8006226:	2301      	movlt	r3, #1
 8006228:	69e0      	ldr	r0, [r4, #28]
 800622a:	2100      	movs	r1, #0
 800622c:	2204      	movs	r2, #4
 800622e:	f102 0614 	add.w	r6, r2, #20
 8006232:	429e      	cmp	r6, r3
 8006234:	d93d      	bls.n	80062b2 <_dtoa_r+0x31a>
 8006236:	6041      	str	r1, [r0, #4]
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fd9f 	bl	8006d7c <_Balloc>
 800623e:	9000      	str	r0, [sp, #0]
 8006240:	2800      	cmp	r0, #0
 8006242:	d139      	bne.n	80062b8 <_dtoa_r+0x320>
 8006244:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <_dtoa_r+0x308>)
 8006246:	4602      	mov	r2, r0
 8006248:	f240 11af 	movw	r1, #431	; 0x1af
 800624c:	e6bd      	b.n	8005fca <_dtoa_r+0x32>
 800624e:	2301      	movs	r3, #1
 8006250:	e7e1      	b.n	8006216 <_dtoa_r+0x27e>
 8006252:	2501      	movs	r5, #1
 8006254:	2300      	movs	r3, #0
 8006256:	9307      	str	r3, [sp, #28]
 8006258:	9509      	str	r5, [sp, #36]	; 0x24
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	9304      	str	r3, [sp, #16]
 8006262:	2200      	movs	r2, #0
 8006264:	2312      	movs	r3, #18
 8006266:	e7d1      	b.n	800620c <_dtoa_r+0x274>
 8006268:	636f4361 	.word	0x636f4361
 800626c:	3fd287a7 	.word	0x3fd287a7
 8006270:	8b60c8b3 	.word	0x8b60c8b3
 8006274:	3fc68a28 	.word	0x3fc68a28
 8006278:	509f79fb 	.word	0x509f79fb
 800627c:	3fd34413 	.word	0x3fd34413
 8006280:	080093f9 	.word	0x080093f9
 8006284:	08009410 	.word	0x08009410
 8006288:	7ff00000 	.word	0x7ff00000
 800628c:	080093f5 	.word	0x080093f5
 8006290:	080093ec 	.word	0x080093ec
 8006294:	080093c9 	.word	0x080093c9
 8006298:	3ff80000 	.word	0x3ff80000
 800629c:	08009500 	.word	0x08009500
 80062a0:	08009468 	.word	0x08009468
 80062a4:	2301      	movs	r3, #1
 80062a6:	9309      	str	r3, [sp, #36]	; 0x24
 80062a8:	e7d7      	b.n	800625a <_dtoa_r+0x2c2>
 80062aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	9304      	str	r3, [sp, #16]
 80062b0:	e7ba      	b.n	8006228 <_dtoa_r+0x290>
 80062b2:	3101      	adds	r1, #1
 80062b4:	0052      	lsls	r2, r2, #1
 80062b6:	e7ba      	b.n	800622e <_dtoa_r+0x296>
 80062b8:	69e3      	ldr	r3, [r4, #28]
 80062ba:	9a00      	ldr	r2, [sp, #0]
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	2b0e      	cmp	r3, #14
 80062c2:	f200 80a8 	bhi.w	8006416 <_dtoa_r+0x47e>
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	f000 80a5 	beq.w	8006416 <_dtoa_r+0x47e>
 80062cc:	f1bb 0f00 	cmp.w	fp, #0
 80062d0:	dd38      	ble.n	8006344 <_dtoa_r+0x3ac>
 80062d2:	4bc0      	ldr	r3, [pc, #768]	; (80065d4 <_dtoa_r+0x63c>)
 80062d4:	f00b 020f 	and.w	r2, fp, #15
 80062d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80062e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80062e8:	d019      	beq.n	800631e <_dtoa_r+0x386>
 80062ea:	4bbb      	ldr	r3, [pc, #748]	; (80065d8 <_dtoa_r+0x640>)
 80062ec:	ec51 0b18 	vmov	r0, r1, d8
 80062f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062f4:	f7fa faca 	bl	800088c <__aeabi_ddiv>
 80062f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062fc:	f008 080f 	and.w	r8, r8, #15
 8006300:	2503      	movs	r5, #3
 8006302:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80065d8 <_dtoa_r+0x640>
 8006306:	f1b8 0f00 	cmp.w	r8, #0
 800630a:	d10a      	bne.n	8006322 <_dtoa_r+0x38a>
 800630c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006310:	4632      	mov	r2, r6
 8006312:	463b      	mov	r3, r7
 8006314:	f7fa faba 	bl	800088c <__aeabi_ddiv>
 8006318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800631c:	e02b      	b.n	8006376 <_dtoa_r+0x3de>
 800631e:	2502      	movs	r5, #2
 8006320:	e7ef      	b.n	8006302 <_dtoa_r+0x36a>
 8006322:	f018 0f01 	tst.w	r8, #1
 8006326:	d008      	beq.n	800633a <_dtoa_r+0x3a2>
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006330:	f7fa f982 	bl	8000638 <__aeabi_dmul>
 8006334:	3501      	adds	r5, #1
 8006336:	4606      	mov	r6, r0
 8006338:	460f      	mov	r7, r1
 800633a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800633e:	f109 0908 	add.w	r9, r9, #8
 8006342:	e7e0      	b.n	8006306 <_dtoa_r+0x36e>
 8006344:	f000 809f 	beq.w	8006486 <_dtoa_r+0x4ee>
 8006348:	f1cb 0600 	rsb	r6, fp, #0
 800634c:	4ba1      	ldr	r3, [pc, #644]	; (80065d4 <_dtoa_r+0x63c>)
 800634e:	4fa2      	ldr	r7, [pc, #648]	; (80065d8 <_dtoa_r+0x640>)
 8006350:	f006 020f 	and.w	r2, r6, #15
 8006354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	ec51 0b18 	vmov	r0, r1, d8
 8006360:	f7fa f96a 	bl	8000638 <__aeabi_dmul>
 8006364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006368:	1136      	asrs	r6, r6, #4
 800636a:	2300      	movs	r3, #0
 800636c:	2502      	movs	r5, #2
 800636e:	2e00      	cmp	r6, #0
 8006370:	d17e      	bne.n	8006470 <_dtoa_r+0x4d8>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d0      	bne.n	8006318 <_dtoa_r+0x380>
 8006376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006378:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8084 	beq.w	800648a <_dtoa_r+0x4f2>
 8006382:	4b96      	ldr	r3, [pc, #600]	; (80065dc <_dtoa_r+0x644>)
 8006384:	2200      	movs	r2, #0
 8006386:	4640      	mov	r0, r8
 8006388:	4649      	mov	r1, r9
 800638a:	f7fa fbc7 	bl	8000b1c <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	d07b      	beq.n	800648a <_dtoa_r+0x4f2>
 8006392:	9b04      	ldr	r3, [sp, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d078      	beq.n	800648a <_dtoa_r+0x4f2>
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	dd39      	ble.n	8006412 <_dtoa_r+0x47a>
 800639e:	4b90      	ldr	r3, [pc, #576]	; (80065e0 <_dtoa_r+0x648>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7fa f947 	bl	8000638 <__aeabi_dmul>
 80063aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ae:	9e01      	ldr	r6, [sp, #4]
 80063b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063b4:	3501      	adds	r5, #1
 80063b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063ba:	4628      	mov	r0, r5
 80063bc:	f7fa f8d2 	bl	8000564 <__aeabi_i2d>
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	f7fa f938 	bl	8000638 <__aeabi_dmul>
 80063c8:	4b86      	ldr	r3, [pc, #536]	; (80065e4 <_dtoa_r+0x64c>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	f7f9 ff7e 	bl	80002cc <__adddf3>
 80063d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d8:	9303      	str	r3, [sp, #12]
 80063da:	2e00      	cmp	r6, #0
 80063dc:	d158      	bne.n	8006490 <_dtoa_r+0x4f8>
 80063de:	4b82      	ldr	r3, [pc, #520]	; (80065e8 <_dtoa_r+0x650>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7f9 ff6f 	bl	80002c8 <__aeabi_dsub>
 80063ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ee:	4680      	mov	r8, r0
 80063f0:	4689      	mov	r9, r1
 80063f2:	f7fa fbb1 	bl	8000b58 <__aeabi_dcmpgt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f040 8296 	bne.w	8006928 <_dtoa_r+0x990>
 80063fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006400:	4640      	mov	r0, r8
 8006402:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006406:	4649      	mov	r1, r9
 8006408:	f7fa fb88 	bl	8000b1c <__aeabi_dcmplt>
 800640c:	2800      	cmp	r0, #0
 800640e:	f040 8289 	bne.w	8006924 <_dtoa_r+0x98c>
 8006412:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006418:	2b00      	cmp	r3, #0
 800641a:	f2c0 814e 	blt.w	80066ba <_dtoa_r+0x722>
 800641e:	f1bb 0f0e 	cmp.w	fp, #14
 8006422:	f300 814a 	bgt.w	80066ba <_dtoa_r+0x722>
 8006426:	4b6b      	ldr	r3, [pc, #428]	; (80065d4 <_dtoa_r+0x63c>)
 8006428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800642c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006432:	2b00      	cmp	r3, #0
 8006434:	f280 80dc 	bge.w	80065f0 <_dtoa_r+0x658>
 8006438:	9b04      	ldr	r3, [sp, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f300 80d8 	bgt.w	80065f0 <_dtoa_r+0x658>
 8006440:	f040 826f 	bne.w	8006922 <_dtoa_r+0x98a>
 8006444:	4b68      	ldr	r3, [pc, #416]	; (80065e8 <_dtoa_r+0x650>)
 8006446:	2200      	movs	r2, #0
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	f7fa f8f4 	bl	8000638 <__aeabi_dmul>
 8006450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006454:	f7fa fb76 	bl	8000b44 <__aeabi_dcmpge>
 8006458:	9e04      	ldr	r6, [sp, #16]
 800645a:	4637      	mov	r7, r6
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 8245 	bne.w	80068ec <_dtoa_r+0x954>
 8006462:	9d00      	ldr	r5, [sp, #0]
 8006464:	2331      	movs	r3, #49	; 0x31
 8006466:	f805 3b01 	strb.w	r3, [r5], #1
 800646a:	f10b 0b01 	add.w	fp, fp, #1
 800646e:	e241      	b.n	80068f4 <_dtoa_r+0x95c>
 8006470:	07f2      	lsls	r2, r6, #31
 8006472:	d505      	bpl.n	8006480 <_dtoa_r+0x4e8>
 8006474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006478:	f7fa f8de 	bl	8000638 <__aeabi_dmul>
 800647c:	3501      	adds	r5, #1
 800647e:	2301      	movs	r3, #1
 8006480:	1076      	asrs	r6, r6, #1
 8006482:	3708      	adds	r7, #8
 8006484:	e773      	b.n	800636e <_dtoa_r+0x3d6>
 8006486:	2502      	movs	r5, #2
 8006488:	e775      	b.n	8006376 <_dtoa_r+0x3de>
 800648a:	9e04      	ldr	r6, [sp, #16]
 800648c:	465f      	mov	r7, fp
 800648e:	e792      	b.n	80063b6 <_dtoa_r+0x41e>
 8006490:	9900      	ldr	r1, [sp, #0]
 8006492:	4b50      	ldr	r3, [pc, #320]	; (80065d4 <_dtoa_r+0x63c>)
 8006494:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006498:	4431      	add	r1, r6
 800649a:	9102      	str	r1, [sp, #8]
 800649c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800649e:	eeb0 9a47 	vmov.f32	s18, s14
 80064a2:	eef0 9a67 	vmov.f32	s19, s15
 80064a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d044      	beq.n	800653c <_dtoa_r+0x5a4>
 80064b2:	494e      	ldr	r1, [pc, #312]	; (80065ec <_dtoa_r+0x654>)
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7fa f9e9 	bl	800088c <__aeabi_ddiv>
 80064ba:	ec53 2b19 	vmov	r2, r3, d9
 80064be:	f7f9 ff03 	bl	80002c8 <__aeabi_dsub>
 80064c2:	9d00      	ldr	r5, [sp, #0]
 80064c4:	ec41 0b19 	vmov	d9, r0, r1
 80064c8:	4649      	mov	r1, r9
 80064ca:	4640      	mov	r0, r8
 80064cc:	f7fa fb64 	bl	8000b98 <__aeabi_d2iz>
 80064d0:	4606      	mov	r6, r0
 80064d2:	f7fa f847 	bl	8000564 <__aeabi_i2d>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4640      	mov	r0, r8
 80064dc:	4649      	mov	r1, r9
 80064de:	f7f9 fef3 	bl	80002c8 <__aeabi_dsub>
 80064e2:	3630      	adds	r6, #48	; 0x30
 80064e4:	f805 6b01 	strb.w	r6, [r5], #1
 80064e8:	ec53 2b19 	vmov	r2, r3, d9
 80064ec:	4680      	mov	r8, r0
 80064ee:	4689      	mov	r9, r1
 80064f0:	f7fa fb14 	bl	8000b1c <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d164      	bne.n	80065c2 <_dtoa_r+0x62a>
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	4937      	ldr	r1, [pc, #220]	; (80065dc <_dtoa_r+0x644>)
 80064fe:	2000      	movs	r0, #0
 8006500:	f7f9 fee2 	bl	80002c8 <__aeabi_dsub>
 8006504:	ec53 2b19 	vmov	r2, r3, d9
 8006508:	f7fa fb08 	bl	8000b1c <__aeabi_dcmplt>
 800650c:	2800      	cmp	r0, #0
 800650e:	f040 80b6 	bne.w	800667e <_dtoa_r+0x6e6>
 8006512:	9b02      	ldr	r3, [sp, #8]
 8006514:	429d      	cmp	r5, r3
 8006516:	f43f af7c 	beq.w	8006412 <_dtoa_r+0x47a>
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <_dtoa_r+0x648>)
 800651c:	ec51 0b19 	vmov	r0, r1, d9
 8006520:	2200      	movs	r2, #0
 8006522:	f7fa f889 	bl	8000638 <__aeabi_dmul>
 8006526:	4b2e      	ldr	r3, [pc, #184]	; (80065e0 <_dtoa_r+0x648>)
 8006528:	ec41 0b19 	vmov	d9, r0, r1
 800652c:	2200      	movs	r2, #0
 800652e:	4640      	mov	r0, r8
 8006530:	4649      	mov	r1, r9
 8006532:	f7fa f881 	bl	8000638 <__aeabi_dmul>
 8006536:	4680      	mov	r8, r0
 8006538:	4689      	mov	r9, r1
 800653a:	e7c5      	b.n	80064c8 <_dtoa_r+0x530>
 800653c:	ec51 0b17 	vmov	r0, r1, d7
 8006540:	f7fa f87a 	bl	8000638 <__aeabi_dmul>
 8006544:	9b02      	ldr	r3, [sp, #8]
 8006546:	9d00      	ldr	r5, [sp, #0]
 8006548:	930f      	str	r3, [sp, #60]	; 0x3c
 800654a:	ec41 0b19 	vmov	d9, r0, r1
 800654e:	4649      	mov	r1, r9
 8006550:	4640      	mov	r0, r8
 8006552:	f7fa fb21 	bl	8000b98 <__aeabi_d2iz>
 8006556:	4606      	mov	r6, r0
 8006558:	f7fa f804 	bl	8000564 <__aeabi_i2d>
 800655c:	3630      	adds	r6, #48	; 0x30
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4640      	mov	r0, r8
 8006564:	4649      	mov	r1, r9
 8006566:	f7f9 feaf 	bl	80002c8 <__aeabi_dsub>
 800656a:	f805 6b01 	strb.w	r6, [r5], #1
 800656e:	9b02      	ldr	r3, [sp, #8]
 8006570:	429d      	cmp	r5, r3
 8006572:	4680      	mov	r8, r0
 8006574:	4689      	mov	r9, r1
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	d124      	bne.n	80065c6 <_dtoa_r+0x62e>
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <_dtoa_r+0x654>)
 800657e:	ec51 0b19 	vmov	r0, r1, d9
 8006582:	f7f9 fea3 	bl	80002cc <__adddf3>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4640      	mov	r0, r8
 800658c:	4649      	mov	r1, r9
 800658e:	f7fa fae3 	bl	8000b58 <__aeabi_dcmpgt>
 8006592:	2800      	cmp	r0, #0
 8006594:	d173      	bne.n	800667e <_dtoa_r+0x6e6>
 8006596:	ec53 2b19 	vmov	r2, r3, d9
 800659a:	4914      	ldr	r1, [pc, #80]	; (80065ec <_dtoa_r+0x654>)
 800659c:	2000      	movs	r0, #0
 800659e:	f7f9 fe93 	bl	80002c8 <__aeabi_dsub>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4640      	mov	r0, r8
 80065a8:	4649      	mov	r1, r9
 80065aa:	f7fa fab7 	bl	8000b1c <__aeabi_dcmplt>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f43f af2f 	beq.w	8006412 <_dtoa_r+0x47a>
 80065b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065b6:	1e6b      	subs	r3, r5, #1
 80065b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80065ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065be:	2b30      	cmp	r3, #48	; 0x30
 80065c0:	d0f8      	beq.n	80065b4 <_dtoa_r+0x61c>
 80065c2:	46bb      	mov	fp, r7
 80065c4:	e04a      	b.n	800665c <_dtoa_r+0x6c4>
 80065c6:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <_dtoa_r+0x648>)
 80065c8:	f7fa f836 	bl	8000638 <__aeabi_dmul>
 80065cc:	4680      	mov	r8, r0
 80065ce:	4689      	mov	r9, r1
 80065d0:	e7bd      	b.n	800654e <_dtoa_r+0x5b6>
 80065d2:	bf00      	nop
 80065d4:	08009500 	.word	0x08009500
 80065d8:	080094d8 	.word	0x080094d8
 80065dc:	3ff00000 	.word	0x3ff00000
 80065e0:	40240000 	.word	0x40240000
 80065e4:	401c0000 	.word	0x401c0000
 80065e8:	40140000 	.word	0x40140000
 80065ec:	3fe00000 	.word	0x3fe00000
 80065f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065f4:	9d00      	ldr	r5, [sp, #0]
 80065f6:	4642      	mov	r2, r8
 80065f8:	464b      	mov	r3, r9
 80065fa:	4630      	mov	r0, r6
 80065fc:	4639      	mov	r1, r7
 80065fe:	f7fa f945 	bl	800088c <__aeabi_ddiv>
 8006602:	f7fa fac9 	bl	8000b98 <__aeabi_d2iz>
 8006606:	9001      	str	r0, [sp, #4]
 8006608:	f7f9 ffac 	bl	8000564 <__aeabi_i2d>
 800660c:	4642      	mov	r2, r8
 800660e:	464b      	mov	r3, r9
 8006610:	f7fa f812 	bl	8000638 <__aeabi_dmul>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	f7f9 fe54 	bl	80002c8 <__aeabi_dsub>
 8006620:	9e01      	ldr	r6, [sp, #4]
 8006622:	9f04      	ldr	r7, [sp, #16]
 8006624:	3630      	adds	r6, #48	; 0x30
 8006626:	f805 6b01 	strb.w	r6, [r5], #1
 800662a:	9e00      	ldr	r6, [sp, #0]
 800662c:	1bae      	subs	r6, r5, r6
 800662e:	42b7      	cmp	r7, r6
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	d134      	bne.n	80066a0 <_dtoa_r+0x708>
 8006636:	f7f9 fe49 	bl	80002cc <__adddf3>
 800663a:	4642      	mov	r2, r8
 800663c:	464b      	mov	r3, r9
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	f7fa fa89 	bl	8000b58 <__aeabi_dcmpgt>
 8006646:	b9c8      	cbnz	r0, 800667c <_dtoa_r+0x6e4>
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	4630      	mov	r0, r6
 800664e:	4639      	mov	r1, r7
 8006650:	f7fa fa5a 	bl	8000b08 <__aeabi_dcmpeq>
 8006654:	b110      	cbz	r0, 800665c <_dtoa_r+0x6c4>
 8006656:	9b01      	ldr	r3, [sp, #4]
 8006658:	07db      	lsls	r3, r3, #31
 800665a:	d40f      	bmi.n	800667c <_dtoa_r+0x6e4>
 800665c:	4651      	mov	r1, sl
 800665e:	4620      	mov	r0, r4
 8006660:	f000 fbcc 	bl	8006dfc <_Bfree>
 8006664:	2300      	movs	r3, #0
 8006666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006668:	702b      	strb	r3, [r5, #0]
 800666a:	f10b 0301 	add.w	r3, fp, #1
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006672:	2b00      	cmp	r3, #0
 8006674:	f43f ace2 	beq.w	800603c <_dtoa_r+0xa4>
 8006678:	601d      	str	r5, [r3, #0]
 800667a:	e4df      	b.n	800603c <_dtoa_r+0xa4>
 800667c:	465f      	mov	r7, fp
 800667e:	462b      	mov	r3, r5
 8006680:	461d      	mov	r5, r3
 8006682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006686:	2a39      	cmp	r2, #57	; 0x39
 8006688:	d106      	bne.n	8006698 <_dtoa_r+0x700>
 800668a:	9a00      	ldr	r2, [sp, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d1f7      	bne.n	8006680 <_dtoa_r+0x6e8>
 8006690:	9900      	ldr	r1, [sp, #0]
 8006692:	2230      	movs	r2, #48	; 0x30
 8006694:	3701      	adds	r7, #1
 8006696:	700a      	strb	r2, [r1, #0]
 8006698:	781a      	ldrb	r2, [r3, #0]
 800669a:	3201      	adds	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	e790      	b.n	80065c2 <_dtoa_r+0x62a>
 80066a0:	4ba3      	ldr	r3, [pc, #652]	; (8006930 <_dtoa_r+0x998>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	f7f9 ffc8 	bl	8000638 <__aeabi_dmul>
 80066a8:	2200      	movs	r2, #0
 80066aa:	2300      	movs	r3, #0
 80066ac:	4606      	mov	r6, r0
 80066ae:	460f      	mov	r7, r1
 80066b0:	f7fa fa2a 	bl	8000b08 <__aeabi_dcmpeq>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d09e      	beq.n	80065f6 <_dtoa_r+0x65e>
 80066b8:	e7d0      	b.n	800665c <_dtoa_r+0x6c4>
 80066ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066bc:	2a00      	cmp	r2, #0
 80066be:	f000 80ca 	beq.w	8006856 <_dtoa_r+0x8be>
 80066c2:	9a07      	ldr	r2, [sp, #28]
 80066c4:	2a01      	cmp	r2, #1
 80066c6:	f300 80ad 	bgt.w	8006824 <_dtoa_r+0x88c>
 80066ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066cc:	2a00      	cmp	r2, #0
 80066ce:	f000 80a5 	beq.w	800681c <_dtoa_r+0x884>
 80066d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066d6:	9e08      	ldr	r6, [sp, #32]
 80066d8:	9d05      	ldr	r5, [sp, #20]
 80066da:	9a05      	ldr	r2, [sp, #20]
 80066dc:	441a      	add	r2, r3
 80066de:	9205      	str	r2, [sp, #20]
 80066e0:	9a06      	ldr	r2, [sp, #24]
 80066e2:	2101      	movs	r1, #1
 80066e4:	441a      	add	r2, r3
 80066e6:	4620      	mov	r0, r4
 80066e8:	9206      	str	r2, [sp, #24]
 80066ea:	f000 fc3d 	bl	8006f68 <__i2b>
 80066ee:	4607      	mov	r7, r0
 80066f0:	b165      	cbz	r5, 800670c <_dtoa_r+0x774>
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd09      	ble.n	800670c <_dtoa_r+0x774>
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	9a05      	ldr	r2, [sp, #20]
 80066fc:	bfa8      	it	ge
 80066fe:	462b      	movge	r3, r5
 8006700:	1ad2      	subs	r2, r2, r3
 8006702:	9205      	str	r2, [sp, #20]
 8006704:	9a06      	ldr	r2, [sp, #24]
 8006706:	1aed      	subs	r5, r5, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	9306      	str	r3, [sp, #24]
 800670c:	9b08      	ldr	r3, [sp, #32]
 800670e:	b1f3      	cbz	r3, 800674e <_dtoa_r+0x7b6>
 8006710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80a3 	beq.w	800685e <_dtoa_r+0x8c6>
 8006718:	2e00      	cmp	r6, #0
 800671a:	dd10      	ble.n	800673e <_dtoa_r+0x7a6>
 800671c:	4639      	mov	r1, r7
 800671e:	4632      	mov	r2, r6
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fce1 	bl	80070e8 <__pow5mult>
 8006726:	4652      	mov	r2, sl
 8006728:	4601      	mov	r1, r0
 800672a:	4607      	mov	r7, r0
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fc31 	bl	8006f94 <__multiply>
 8006732:	4651      	mov	r1, sl
 8006734:	4680      	mov	r8, r0
 8006736:	4620      	mov	r0, r4
 8006738:	f000 fb60 	bl	8006dfc <_Bfree>
 800673c:	46c2      	mov	sl, r8
 800673e:	9b08      	ldr	r3, [sp, #32]
 8006740:	1b9a      	subs	r2, r3, r6
 8006742:	d004      	beq.n	800674e <_dtoa_r+0x7b6>
 8006744:	4651      	mov	r1, sl
 8006746:	4620      	mov	r0, r4
 8006748:	f000 fcce 	bl	80070e8 <__pow5mult>
 800674c:	4682      	mov	sl, r0
 800674e:	2101      	movs	r1, #1
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fc09 	bl	8006f68 <__i2b>
 8006756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006758:	2b00      	cmp	r3, #0
 800675a:	4606      	mov	r6, r0
 800675c:	f340 8081 	ble.w	8006862 <_dtoa_r+0x8ca>
 8006760:	461a      	mov	r2, r3
 8006762:	4601      	mov	r1, r0
 8006764:	4620      	mov	r0, r4
 8006766:	f000 fcbf 	bl	80070e8 <__pow5mult>
 800676a:	9b07      	ldr	r3, [sp, #28]
 800676c:	2b01      	cmp	r3, #1
 800676e:	4606      	mov	r6, r0
 8006770:	dd7a      	ble.n	8006868 <_dtoa_r+0x8d0>
 8006772:	f04f 0800 	mov.w	r8, #0
 8006776:	6933      	ldr	r3, [r6, #16]
 8006778:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800677c:	6918      	ldr	r0, [r3, #16]
 800677e:	f000 fba5 	bl	8006ecc <__hi0bits>
 8006782:	f1c0 0020 	rsb	r0, r0, #32
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	4418      	add	r0, r3
 800678a:	f010 001f 	ands.w	r0, r0, #31
 800678e:	f000 8094 	beq.w	80068ba <_dtoa_r+0x922>
 8006792:	f1c0 0320 	rsb	r3, r0, #32
 8006796:	2b04      	cmp	r3, #4
 8006798:	f340 8085 	ble.w	80068a6 <_dtoa_r+0x90e>
 800679c:	9b05      	ldr	r3, [sp, #20]
 800679e:	f1c0 001c 	rsb	r0, r0, #28
 80067a2:	4403      	add	r3, r0
 80067a4:	9305      	str	r3, [sp, #20]
 80067a6:	9b06      	ldr	r3, [sp, #24]
 80067a8:	4403      	add	r3, r0
 80067aa:	4405      	add	r5, r0
 80067ac:	9306      	str	r3, [sp, #24]
 80067ae:	9b05      	ldr	r3, [sp, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dd05      	ble.n	80067c0 <_dtoa_r+0x828>
 80067b4:	4651      	mov	r1, sl
 80067b6:	461a      	mov	r2, r3
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fcef 	bl	800719c <__lshift>
 80067be:	4682      	mov	sl, r0
 80067c0:	9b06      	ldr	r3, [sp, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dd05      	ble.n	80067d2 <_dtoa_r+0x83a>
 80067c6:	4631      	mov	r1, r6
 80067c8:	461a      	mov	r2, r3
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 fce6 	bl	800719c <__lshift>
 80067d0:	4606      	mov	r6, r0
 80067d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d072      	beq.n	80068be <_dtoa_r+0x926>
 80067d8:	4631      	mov	r1, r6
 80067da:	4650      	mov	r0, sl
 80067dc:	f000 fd4a 	bl	8007274 <__mcmp>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	da6c      	bge.n	80068be <_dtoa_r+0x926>
 80067e4:	2300      	movs	r3, #0
 80067e6:	4651      	mov	r1, sl
 80067e8:	220a      	movs	r2, #10
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 fb28 	bl	8006e40 <__multadd>
 80067f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067f6:	4682      	mov	sl, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 81b0 	beq.w	8006b5e <_dtoa_r+0xbc6>
 80067fe:	2300      	movs	r3, #0
 8006800:	4639      	mov	r1, r7
 8006802:	220a      	movs	r2, #10
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fb1b 	bl	8006e40 <__multadd>
 800680a:	9b01      	ldr	r3, [sp, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	4607      	mov	r7, r0
 8006810:	f300 8096 	bgt.w	8006940 <_dtoa_r+0x9a8>
 8006814:	9b07      	ldr	r3, [sp, #28]
 8006816:	2b02      	cmp	r3, #2
 8006818:	dc59      	bgt.n	80068ce <_dtoa_r+0x936>
 800681a:	e091      	b.n	8006940 <_dtoa_r+0x9a8>
 800681c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800681e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006822:	e758      	b.n	80066d6 <_dtoa_r+0x73e>
 8006824:	9b04      	ldr	r3, [sp, #16]
 8006826:	1e5e      	subs	r6, r3, #1
 8006828:	9b08      	ldr	r3, [sp, #32]
 800682a:	42b3      	cmp	r3, r6
 800682c:	bfbf      	itttt	lt
 800682e:	9b08      	ldrlt	r3, [sp, #32]
 8006830:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006832:	9608      	strlt	r6, [sp, #32]
 8006834:	1af3      	sublt	r3, r6, r3
 8006836:	bfb4      	ite	lt
 8006838:	18d2      	addlt	r2, r2, r3
 800683a:	1b9e      	subge	r6, r3, r6
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	bfbc      	itt	lt
 8006840:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006842:	2600      	movlt	r6, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	bfb7      	itett	lt
 8006848:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800684c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006850:	1a9d      	sublt	r5, r3, r2
 8006852:	2300      	movlt	r3, #0
 8006854:	e741      	b.n	80066da <_dtoa_r+0x742>
 8006856:	9e08      	ldr	r6, [sp, #32]
 8006858:	9d05      	ldr	r5, [sp, #20]
 800685a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800685c:	e748      	b.n	80066f0 <_dtoa_r+0x758>
 800685e:	9a08      	ldr	r2, [sp, #32]
 8006860:	e770      	b.n	8006744 <_dtoa_r+0x7ac>
 8006862:	9b07      	ldr	r3, [sp, #28]
 8006864:	2b01      	cmp	r3, #1
 8006866:	dc19      	bgt.n	800689c <_dtoa_r+0x904>
 8006868:	9b02      	ldr	r3, [sp, #8]
 800686a:	b9bb      	cbnz	r3, 800689c <_dtoa_r+0x904>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006872:	b99b      	cbnz	r3, 800689c <_dtoa_r+0x904>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800687a:	0d1b      	lsrs	r3, r3, #20
 800687c:	051b      	lsls	r3, r3, #20
 800687e:	b183      	cbz	r3, 80068a2 <_dtoa_r+0x90a>
 8006880:	9b05      	ldr	r3, [sp, #20]
 8006882:	3301      	adds	r3, #1
 8006884:	9305      	str	r3, [sp, #20]
 8006886:	9b06      	ldr	r3, [sp, #24]
 8006888:	3301      	adds	r3, #1
 800688a:	9306      	str	r3, [sp, #24]
 800688c:	f04f 0801 	mov.w	r8, #1
 8006890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006892:	2b00      	cmp	r3, #0
 8006894:	f47f af6f 	bne.w	8006776 <_dtoa_r+0x7de>
 8006898:	2001      	movs	r0, #1
 800689a:	e774      	b.n	8006786 <_dtoa_r+0x7ee>
 800689c:	f04f 0800 	mov.w	r8, #0
 80068a0:	e7f6      	b.n	8006890 <_dtoa_r+0x8f8>
 80068a2:	4698      	mov	r8, r3
 80068a4:	e7f4      	b.n	8006890 <_dtoa_r+0x8f8>
 80068a6:	d082      	beq.n	80067ae <_dtoa_r+0x816>
 80068a8:	9a05      	ldr	r2, [sp, #20]
 80068aa:	331c      	adds	r3, #28
 80068ac:	441a      	add	r2, r3
 80068ae:	9205      	str	r2, [sp, #20]
 80068b0:	9a06      	ldr	r2, [sp, #24]
 80068b2:	441a      	add	r2, r3
 80068b4:	441d      	add	r5, r3
 80068b6:	9206      	str	r2, [sp, #24]
 80068b8:	e779      	b.n	80067ae <_dtoa_r+0x816>
 80068ba:	4603      	mov	r3, r0
 80068bc:	e7f4      	b.n	80068a8 <_dtoa_r+0x910>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	dc37      	bgt.n	8006934 <_dtoa_r+0x99c>
 80068c4:	9b07      	ldr	r3, [sp, #28]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	dd34      	ble.n	8006934 <_dtoa_r+0x99c>
 80068ca:	9b04      	ldr	r3, [sp, #16]
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	b963      	cbnz	r3, 80068ec <_dtoa_r+0x954>
 80068d2:	4631      	mov	r1, r6
 80068d4:	2205      	movs	r2, #5
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fab2 	bl	8006e40 <__multadd>
 80068dc:	4601      	mov	r1, r0
 80068de:	4606      	mov	r6, r0
 80068e0:	4650      	mov	r0, sl
 80068e2:	f000 fcc7 	bl	8007274 <__mcmp>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f73f adbb 	bgt.w	8006462 <_dtoa_r+0x4ca>
 80068ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ee:	9d00      	ldr	r5, [sp, #0]
 80068f0:	ea6f 0b03 	mvn.w	fp, r3
 80068f4:	f04f 0800 	mov.w	r8, #0
 80068f8:	4631      	mov	r1, r6
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 fa7e 	bl	8006dfc <_Bfree>
 8006900:	2f00      	cmp	r7, #0
 8006902:	f43f aeab 	beq.w	800665c <_dtoa_r+0x6c4>
 8006906:	f1b8 0f00 	cmp.w	r8, #0
 800690a:	d005      	beq.n	8006918 <_dtoa_r+0x980>
 800690c:	45b8      	cmp	r8, r7
 800690e:	d003      	beq.n	8006918 <_dtoa_r+0x980>
 8006910:	4641      	mov	r1, r8
 8006912:	4620      	mov	r0, r4
 8006914:	f000 fa72 	bl	8006dfc <_Bfree>
 8006918:	4639      	mov	r1, r7
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fa6e 	bl	8006dfc <_Bfree>
 8006920:	e69c      	b.n	800665c <_dtoa_r+0x6c4>
 8006922:	2600      	movs	r6, #0
 8006924:	4637      	mov	r7, r6
 8006926:	e7e1      	b.n	80068ec <_dtoa_r+0x954>
 8006928:	46bb      	mov	fp, r7
 800692a:	4637      	mov	r7, r6
 800692c:	e599      	b.n	8006462 <_dtoa_r+0x4ca>
 800692e:	bf00      	nop
 8006930:	40240000 	.word	0x40240000
 8006934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 80c8 	beq.w	8006acc <_dtoa_r+0xb34>
 800693c:	9b04      	ldr	r3, [sp, #16]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	2d00      	cmp	r5, #0
 8006942:	dd05      	ble.n	8006950 <_dtoa_r+0x9b8>
 8006944:	4639      	mov	r1, r7
 8006946:	462a      	mov	r2, r5
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fc27 	bl	800719c <__lshift>
 800694e:	4607      	mov	r7, r0
 8006950:	f1b8 0f00 	cmp.w	r8, #0
 8006954:	d05b      	beq.n	8006a0e <_dtoa_r+0xa76>
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fa0f 	bl	8006d7c <_Balloc>
 800695e:	4605      	mov	r5, r0
 8006960:	b928      	cbnz	r0, 800696e <_dtoa_r+0x9d6>
 8006962:	4b83      	ldr	r3, [pc, #524]	; (8006b70 <_dtoa_r+0xbd8>)
 8006964:	4602      	mov	r2, r0
 8006966:	f240 21ef 	movw	r1, #751	; 0x2ef
 800696a:	f7ff bb2e 	b.w	8005fca <_dtoa_r+0x32>
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	3202      	adds	r2, #2
 8006972:	0092      	lsls	r2, r2, #2
 8006974:	f107 010c 	add.w	r1, r7, #12
 8006978:	300c      	adds	r0, #12
 800697a:	f000 fe39 	bl	80075f0 <memcpy>
 800697e:	2201      	movs	r2, #1
 8006980:	4629      	mov	r1, r5
 8006982:	4620      	mov	r0, r4
 8006984:	f000 fc0a 	bl	800719c <__lshift>
 8006988:	9b00      	ldr	r3, [sp, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006992:	4413      	add	r3, r2
 8006994:	9308      	str	r3, [sp, #32]
 8006996:	9b02      	ldr	r3, [sp, #8]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	46b8      	mov	r8, r7
 800699e:	9306      	str	r3, [sp, #24]
 80069a0:	4607      	mov	r7, r0
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	4631      	mov	r1, r6
 80069a6:	3b01      	subs	r3, #1
 80069a8:	4650      	mov	r0, sl
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	f7ff fa69 	bl	8005e82 <quorem>
 80069b0:	4641      	mov	r1, r8
 80069b2:	9002      	str	r0, [sp, #8]
 80069b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069b8:	4650      	mov	r0, sl
 80069ba:	f000 fc5b 	bl	8007274 <__mcmp>
 80069be:	463a      	mov	r2, r7
 80069c0:	9005      	str	r0, [sp, #20]
 80069c2:	4631      	mov	r1, r6
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 fc71 	bl	80072ac <__mdiff>
 80069ca:	68c2      	ldr	r2, [r0, #12]
 80069cc:	4605      	mov	r5, r0
 80069ce:	bb02      	cbnz	r2, 8006a12 <_dtoa_r+0xa7a>
 80069d0:	4601      	mov	r1, r0
 80069d2:	4650      	mov	r0, sl
 80069d4:	f000 fc4e 	bl	8007274 <__mcmp>
 80069d8:	4602      	mov	r2, r0
 80069da:	4629      	mov	r1, r5
 80069dc:	4620      	mov	r0, r4
 80069de:	9209      	str	r2, [sp, #36]	; 0x24
 80069e0:	f000 fa0c 	bl	8006dfc <_Bfree>
 80069e4:	9b07      	ldr	r3, [sp, #28]
 80069e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e8:	9d04      	ldr	r5, [sp, #16]
 80069ea:	ea43 0102 	orr.w	r1, r3, r2
 80069ee:	9b06      	ldr	r3, [sp, #24]
 80069f0:	4319      	orrs	r1, r3
 80069f2:	d110      	bne.n	8006a16 <_dtoa_r+0xa7e>
 80069f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069f8:	d029      	beq.n	8006a4e <_dtoa_r+0xab6>
 80069fa:	9b05      	ldr	r3, [sp, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dd02      	ble.n	8006a06 <_dtoa_r+0xa6e>
 8006a00:	9b02      	ldr	r3, [sp, #8]
 8006a02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	f883 9000 	strb.w	r9, [r3]
 8006a0c:	e774      	b.n	80068f8 <_dtoa_r+0x960>
 8006a0e:	4638      	mov	r0, r7
 8006a10:	e7ba      	b.n	8006988 <_dtoa_r+0x9f0>
 8006a12:	2201      	movs	r2, #1
 8006a14:	e7e1      	b.n	80069da <_dtoa_r+0xa42>
 8006a16:	9b05      	ldr	r3, [sp, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	db04      	blt.n	8006a26 <_dtoa_r+0xa8e>
 8006a1c:	9907      	ldr	r1, [sp, #28]
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	9906      	ldr	r1, [sp, #24]
 8006a22:	430b      	orrs	r3, r1
 8006a24:	d120      	bne.n	8006a68 <_dtoa_r+0xad0>
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	dded      	ble.n	8006a06 <_dtoa_r+0xa6e>
 8006a2a:	4651      	mov	r1, sl
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 fbb4 	bl	800719c <__lshift>
 8006a34:	4631      	mov	r1, r6
 8006a36:	4682      	mov	sl, r0
 8006a38:	f000 fc1c 	bl	8007274 <__mcmp>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	dc03      	bgt.n	8006a48 <_dtoa_r+0xab0>
 8006a40:	d1e1      	bne.n	8006a06 <_dtoa_r+0xa6e>
 8006a42:	f019 0f01 	tst.w	r9, #1
 8006a46:	d0de      	beq.n	8006a06 <_dtoa_r+0xa6e>
 8006a48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a4c:	d1d8      	bne.n	8006a00 <_dtoa_r+0xa68>
 8006a4e:	9a01      	ldr	r2, [sp, #4]
 8006a50:	2339      	movs	r3, #57	; 0x39
 8006a52:	7013      	strb	r3, [r2, #0]
 8006a54:	462b      	mov	r3, r5
 8006a56:	461d      	mov	r5, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a5e:	2a39      	cmp	r2, #57	; 0x39
 8006a60:	d06c      	beq.n	8006b3c <_dtoa_r+0xba4>
 8006a62:	3201      	adds	r2, #1
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e747      	b.n	80068f8 <_dtoa_r+0x960>
 8006a68:	2a00      	cmp	r2, #0
 8006a6a:	dd07      	ble.n	8006a7c <_dtoa_r+0xae4>
 8006a6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a70:	d0ed      	beq.n	8006a4e <_dtoa_r+0xab6>
 8006a72:	9a01      	ldr	r2, [sp, #4]
 8006a74:	f109 0301 	add.w	r3, r9, #1
 8006a78:	7013      	strb	r3, [r2, #0]
 8006a7a:	e73d      	b.n	80068f8 <_dtoa_r+0x960>
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	9a08      	ldr	r2, [sp, #32]
 8006a80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d043      	beq.n	8006b10 <_dtoa_r+0xb78>
 8006a88:	4651      	mov	r1, sl
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	220a      	movs	r2, #10
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 f9d6 	bl	8006e40 <__multadd>
 8006a94:	45b8      	cmp	r8, r7
 8006a96:	4682      	mov	sl, r0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	f04f 020a 	mov.w	r2, #10
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	d107      	bne.n	8006ab6 <_dtoa_r+0xb1e>
 8006aa6:	f000 f9cb 	bl	8006e40 <__multadd>
 8006aaa:	4680      	mov	r8, r0
 8006aac:	4607      	mov	r7, r0
 8006aae:	9b04      	ldr	r3, [sp, #16]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	e775      	b.n	80069a2 <_dtoa_r+0xa0a>
 8006ab6:	f000 f9c3 	bl	8006e40 <__multadd>
 8006aba:	4639      	mov	r1, r7
 8006abc:	4680      	mov	r8, r0
 8006abe:	2300      	movs	r3, #0
 8006ac0:	220a      	movs	r2, #10
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 f9bc 	bl	8006e40 <__multadd>
 8006ac8:	4607      	mov	r7, r0
 8006aca:	e7f0      	b.n	8006aae <_dtoa_r+0xb16>
 8006acc:	9b04      	ldr	r3, [sp, #16]
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	9d00      	ldr	r5, [sp, #0]
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4650      	mov	r0, sl
 8006ad6:	f7ff f9d4 	bl	8005e82 <quorem>
 8006ada:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ade:	9b00      	ldr	r3, [sp, #0]
 8006ae0:	f805 9b01 	strb.w	r9, [r5], #1
 8006ae4:	1aea      	subs	r2, r5, r3
 8006ae6:	9b01      	ldr	r3, [sp, #4]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	dd07      	ble.n	8006afc <_dtoa_r+0xb64>
 8006aec:	4651      	mov	r1, sl
 8006aee:	2300      	movs	r3, #0
 8006af0:	220a      	movs	r2, #10
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f9a4 	bl	8006e40 <__multadd>
 8006af8:	4682      	mov	sl, r0
 8006afa:	e7ea      	b.n	8006ad2 <_dtoa_r+0xb3a>
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bfc8      	it	gt
 8006b02:	461d      	movgt	r5, r3
 8006b04:	9b00      	ldr	r3, [sp, #0]
 8006b06:	bfd8      	it	le
 8006b08:	2501      	movle	r5, #1
 8006b0a:	441d      	add	r5, r3
 8006b0c:	f04f 0800 	mov.w	r8, #0
 8006b10:	4651      	mov	r1, sl
 8006b12:	2201      	movs	r2, #1
 8006b14:	4620      	mov	r0, r4
 8006b16:	f000 fb41 	bl	800719c <__lshift>
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4682      	mov	sl, r0
 8006b1e:	f000 fba9 	bl	8007274 <__mcmp>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	dc96      	bgt.n	8006a54 <_dtoa_r+0xabc>
 8006b26:	d102      	bne.n	8006b2e <_dtoa_r+0xb96>
 8006b28:	f019 0f01 	tst.w	r9, #1
 8006b2c:	d192      	bne.n	8006a54 <_dtoa_r+0xabc>
 8006b2e:	462b      	mov	r3, r5
 8006b30:	461d      	mov	r5, r3
 8006b32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b36:	2a30      	cmp	r2, #48	; 0x30
 8006b38:	d0fa      	beq.n	8006b30 <_dtoa_r+0xb98>
 8006b3a:	e6dd      	b.n	80068f8 <_dtoa_r+0x960>
 8006b3c:	9a00      	ldr	r2, [sp, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d189      	bne.n	8006a56 <_dtoa_r+0xabe>
 8006b42:	f10b 0b01 	add.w	fp, fp, #1
 8006b46:	2331      	movs	r3, #49	; 0x31
 8006b48:	e796      	b.n	8006a78 <_dtoa_r+0xae0>
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <_dtoa_r+0xbdc>)
 8006b4c:	f7ff ba99 	b.w	8006082 <_dtoa_r+0xea>
 8006b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f47f aa6d 	bne.w	8006032 <_dtoa_r+0x9a>
 8006b58:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <_dtoa_r+0xbe0>)
 8006b5a:	f7ff ba92 	b.w	8006082 <_dtoa_r+0xea>
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	dcb5      	bgt.n	8006ad0 <_dtoa_r+0xb38>
 8006b64:	9b07      	ldr	r3, [sp, #28]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	f73f aeb1 	bgt.w	80068ce <_dtoa_r+0x936>
 8006b6c:	e7b0      	b.n	8006ad0 <_dtoa_r+0xb38>
 8006b6e:	bf00      	nop
 8006b70:	08009468 	.word	0x08009468
 8006b74:	080093c8 	.word	0x080093c8
 8006b78:	080093ec 	.word	0x080093ec

08006b7c <_free_r>:
 8006b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	d044      	beq.n	8006c0c <_free_r+0x90>
 8006b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b86:	9001      	str	r0, [sp, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b8e:	bfb8      	it	lt
 8006b90:	18e4      	addlt	r4, r4, r3
 8006b92:	f000 f8e7 	bl	8006d64 <__malloc_lock>
 8006b96:	4a1e      	ldr	r2, [pc, #120]	; (8006c10 <_free_r+0x94>)
 8006b98:	9801      	ldr	r0, [sp, #4]
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	b933      	cbnz	r3, 8006bac <_free_r+0x30>
 8006b9e:	6063      	str	r3, [r4, #4]
 8006ba0:	6014      	str	r4, [r2, #0]
 8006ba2:	b003      	add	sp, #12
 8006ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ba8:	f000 b8e2 	b.w	8006d70 <__malloc_unlock>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d908      	bls.n	8006bc2 <_free_r+0x46>
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	1961      	adds	r1, r4, r5
 8006bb4:	428b      	cmp	r3, r1
 8006bb6:	bf01      	itttt	eq
 8006bb8:	6819      	ldreq	r1, [r3, #0]
 8006bba:	685b      	ldreq	r3, [r3, #4]
 8006bbc:	1949      	addeq	r1, r1, r5
 8006bbe:	6021      	streq	r1, [r4, #0]
 8006bc0:	e7ed      	b.n	8006b9e <_free_r+0x22>
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	b10b      	cbz	r3, 8006bcc <_free_r+0x50>
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d9fa      	bls.n	8006bc2 <_free_r+0x46>
 8006bcc:	6811      	ldr	r1, [r2, #0]
 8006bce:	1855      	adds	r5, r2, r1
 8006bd0:	42a5      	cmp	r5, r4
 8006bd2:	d10b      	bne.n	8006bec <_free_r+0x70>
 8006bd4:	6824      	ldr	r4, [r4, #0]
 8006bd6:	4421      	add	r1, r4
 8006bd8:	1854      	adds	r4, r2, r1
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	6011      	str	r1, [r2, #0]
 8006bde:	d1e0      	bne.n	8006ba2 <_free_r+0x26>
 8006be0:	681c      	ldr	r4, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	6053      	str	r3, [r2, #4]
 8006be6:	440c      	add	r4, r1
 8006be8:	6014      	str	r4, [r2, #0]
 8006bea:	e7da      	b.n	8006ba2 <_free_r+0x26>
 8006bec:	d902      	bls.n	8006bf4 <_free_r+0x78>
 8006bee:	230c      	movs	r3, #12
 8006bf0:	6003      	str	r3, [r0, #0]
 8006bf2:	e7d6      	b.n	8006ba2 <_free_r+0x26>
 8006bf4:	6825      	ldr	r5, [r4, #0]
 8006bf6:	1961      	adds	r1, r4, r5
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	bf04      	itt	eq
 8006bfc:	6819      	ldreq	r1, [r3, #0]
 8006bfe:	685b      	ldreq	r3, [r3, #4]
 8006c00:	6063      	str	r3, [r4, #4]
 8006c02:	bf04      	itt	eq
 8006c04:	1949      	addeq	r1, r1, r5
 8006c06:	6021      	streq	r1, [r4, #0]
 8006c08:	6054      	str	r4, [r2, #4]
 8006c0a:	e7ca      	b.n	8006ba2 <_free_r+0x26>
 8006c0c:	b003      	add	sp, #12
 8006c0e:	bd30      	pop	{r4, r5, pc}
 8006c10:	20000550 	.word	0x20000550

08006c14 <malloc>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <malloc+0xc>)
 8006c16:	4601      	mov	r1, r0
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	f000 b823 	b.w	8006c64 <_malloc_r>
 8006c1e:	bf00      	nop
 8006c20:	20000064 	.word	0x20000064

08006c24 <sbrk_aligned>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	4e0e      	ldr	r6, [pc, #56]	; (8006c60 <sbrk_aligned+0x3c>)
 8006c28:	460c      	mov	r4, r1
 8006c2a:	6831      	ldr	r1, [r6, #0]
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	b911      	cbnz	r1, 8006c36 <sbrk_aligned+0x12>
 8006c30:	f000 fcce 	bl	80075d0 <_sbrk_r>
 8006c34:	6030      	str	r0, [r6, #0]
 8006c36:	4621      	mov	r1, r4
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 fcc9 	bl	80075d0 <_sbrk_r>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d00a      	beq.n	8006c58 <sbrk_aligned+0x34>
 8006c42:	1cc4      	adds	r4, r0, #3
 8006c44:	f024 0403 	bic.w	r4, r4, #3
 8006c48:	42a0      	cmp	r0, r4
 8006c4a:	d007      	beq.n	8006c5c <sbrk_aligned+0x38>
 8006c4c:	1a21      	subs	r1, r4, r0
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 fcbe 	bl	80075d0 <_sbrk_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	d101      	bne.n	8006c5c <sbrk_aligned+0x38>
 8006c58:	f04f 34ff 	mov.w	r4, #4294967295
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	20000554 	.word	0x20000554

08006c64 <_malloc_r>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	1ccd      	adds	r5, r1, #3
 8006c6a:	f025 0503 	bic.w	r5, r5, #3
 8006c6e:	3508      	adds	r5, #8
 8006c70:	2d0c      	cmp	r5, #12
 8006c72:	bf38      	it	cc
 8006c74:	250c      	movcc	r5, #12
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	4607      	mov	r7, r0
 8006c7a:	db01      	blt.n	8006c80 <_malloc_r+0x1c>
 8006c7c:	42a9      	cmp	r1, r5
 8006c7e:	d905      	bls.n	8006c8c <_malloc_r+0x28>
 8006c80:	230c      	movs	r3, #12
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	2600      	movs	r6, #0
 8006c86:	4630      	mov	r0, r6
 8006c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d60 <_malloc_r+0xfc>
 8006c90:	f000 f868 	bl	8006d64 <__malloc_lock>
 8006c94:	f8d8 3000 	ldr.w	r3, [r8]
 8006c98:	461c      	mov	r4, r3
 8006c9a:	bb5c      	cbnz	r4, 8006cf4 <_malloc_r+0x90>
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f7ff ffc0 	bl	8006c24 <sbrk_aligned>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	d155      	bne.n	8006d56 <_malloc_r+0xf2>
 8006caa:	f8d8 4000 	ldr.w	r4, [r8]
 8006cae:	4626      	mov	r6, r4
 8006cb0:	2e00      	cmp	r6, #0
 8006cb2:	d145      	bne.n	8006d40 <_malloc_r+0xdc>
 8006cb4:	2c00      	cmp	r4, #0
 8006cb6:	d048      	beq.n	8006d4a <_malloc_r+0xe6>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	eb04 0903 	add.w	r9, r4, r3
 8006cc2:	f000 fc85 	bl	80075d0 <_sbrk_r>
 8006cc6:	4581      	cmp	r9, r0
 8006cc8:	d13f      	bne.n	8006d4a <_malloc_r+0xe6>
 8006cca:	6821      	ldr	r1, [r4, #0]
 8006ccc:	1a6d      	subs	r5, r5, r1
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff ffa7 	bl	8006c24 <sbrk_aligned>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d037      	beq.n	8006d4a <_malloc_r+0xe6>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	442b      	add	r3, r5
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d038      	beq.n	8006d5a <_malloc_r+0xf6>
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	42a2      	cmp	r2, r4
 8006cec:	d12b      	bne.n	8006d46 <_malloc_r+0xe2>
 8006cee:	2200      	movs	r2, #0
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	e00f      	b.n	8006d14 <_malloc_r+0xb0>
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	1b52      	subs	r2, r2, r5
 8006cf8:	d41f      	bmi.n	8006d3a <_malloc_r+0xd6>
 8006cfa:	2a0b      	cmp	r2, #11
 8006cfc:	d917      	bls.n	8006d2e <_malloc_r+0xca>
 8006cfe:	1961      	adds	r1, r4, r5
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	6025      	str	r5, [r4, #0]
 8006d04:	bf18      	it	ne
 8006d06:	6059      	strne	r1, [r3, #4]
 8006d08:	6863      	ldr	r3, [r4, #4]
 8006d0a:	bf08      	it	eq
 8006d0c:	f8c8 1000 	streq.w	r1, [r8]
 8006d10:	5162      	str	r2, [r4, r5]
 8006d12:	604b      	str	r3, [r1, #4]
 8006d14:	4638      	mov	r0, r7
 8006d16:	f104 060b 	add.w	r6, r4, #11
 8006d1a:	f000 f829 	bl	8006d70 <__malloc_unlock>
 8006d1e:	f026 0607 	bic.w	r6, r6, #7
 8006d22:	1d23      	adds	r3, r4, #4
 8006d24:	1af2      	subs	r2, r6, r3
 8006d26:	d0ae      	beq.n	8006c86 <_malloc_r+0x22>
 8006d28:	1b9b      	subs	r3, r3, r6
 8006d2a:	50a3      	str	r3, [r4, r2]
 8006d2c:	e7ab      	b.n	8006c86 <_malloc_r+0x22>
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	6862      	ldr	r2, [r4, #4]
 8006d32:	d1dd      	bne.n	8006cf0 <_malloc_r+0x8c>
 8006d34:	f8c8 2000 	str.w	r2, [r8]
 8006d38:	e7ec      	b.n	8006d14 <_malloc_r+0xb0>
 8006d3a:	4623      	mov	r3, r4
 8006d3c:	6864      	ldr	r4, [r4, #4]
 8006d3e:	e7ac      	b.n	8006c9a <_malloc_r+0x36>
 8006d40:	4634      	mov	r4, r6
 8006d42:	6876      	ldr	r6, [r6, #4]
 8006d44:	e7b4      	b.n	8006cb0 <_malloc_r+0x4c>
 8006d46:	4613      	mov	r3, r2
 8006d48:	e7cc      	b.n	8006ce4 <_malloc_r+0x80>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f000 f80e 	bl	8006d70 <__malloc_unlock>
 8006d54:	e797      	b.n	8006c86 <_malloc_r+0x22>
 8006d56:	6025      	str	r5, [r4, #0]
 8006d58:	e7dc      	b.n	8006d14 <_malloc_r+0xb0>
 8006d5a:	605b      	str	r3, [r3, #4]
 8006d5c:	deff      	udf	#255	; 0xff
 8006d5e:	bf00      	nop
 8006d60:	20000550 	.word	0x20000550

08006d64 <__malloc_lock>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__malloc_lock+0x8>)
 8006d66:	f7ff b88a 	b.w	8005e7e <__retarget_lock_acquire_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	2000054c 	.word	0x2000054c

08006d70 <__malloc_unlock>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__malloc_unlock+0x8>)
 8006d72:	f7ff b885 	b.w	8005e80 <__retarget_lock_release_recursive>
 8006d76:	bf00      	nop
 8006d78:	2000054c 	.word	0x2000054c

08006d7c <_Balloc>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	69c6      	ldr	r6, [r0, #28]
 8006d80:	4604      	mov	r4, r0
 8006d82:	460d      	mov	r5, r1
 8006d84:	b976      	cbnz	r6, 8006da4 <_Balloc+0x28>
 8006d86:	2010      	movs	r0, #16
 8006d88:	f7ff ff44 	bl	8006c14 <malloc>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	61e0      	str	r0, [r4, #28]
 8006d90:	b920      	cbnz	r0, 8006d9c <_Balloc+0x20>
 8006d92:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <_Balloc+0x78>)
 8006d94:	4818      	ldr	r0, [pc, #96]	; (8006df8 <_Balloc+0x7c>)
 8006d96:	216b      	movs	r1, #107	; 0x6b
 8006d98:	f000 fc38 	bl	800760c <__assert_func>
 8006d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006da0:	6006      	str	r6, [r0, #0]
 8006da2:	60c6      	str	r6, [r0, #12]
 8006da4:	69e6      	ldr	r6, [r4, #28]
 8006da6:	68f3      	ldr	r3, [r6, #12]
 8006da8:	b183      	cbz	r3, 8006dcc <_Balloc+0x50>
 8006daa:	69e3      	ldr	r3, [r4, #28]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006db2:	b9b8      	cbnz	r0, 8006de4 <_Balloc+0x68>
 8006db4:	2101      	movs	r1, #1
 8006db6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dba:	1d72      	adds	r2, r6, #5
 8006dbc:	0092      	lsls	r2, r2, #2
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 fc42 	bl	8007648 <_calloc_r>
 8006dc4:	b160      	cbz	r0, 8006de0 <_Balloc+0x64>
 8006dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dca:	e00e      	b.n	8006dea <_Balloc+0x6e>
 8006dcc:	2221      	movs	r2, #33	; 0x21
 8006dce:	2104      	movs	r1, #4
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fc39 	bl	8007648 <_calloc_r>
 8006dd6:	69e3      	ldr	r3, [r4, #28]
 8006dd8:	60f0      	str	r0, [r6, #12]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e4      	bne.n	8006daa <_Balloc+0x2e>
 8006de0:	2000      	movs	r0, #0
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	6802      	ldr	r2, [r0, #0]
 8006de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dea:	2300      	movs	r3, #0
 8006dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006df0:	e7f7      	b.n	8006de2 <_Balloc+0x66>
 8006df2:	bf00      	nop
 8006df4:	080093f9 	.word	0x080093f9
 8006df8:	08009479 	.word	0x08009479

08006dfc <_Bfree>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	69c6      	ldr	r6, [r0, #28]
 8006e00:	4605      	mov	r5, r0
 8006e02:	460c      	mov	r4, r1
 8006e04:	b976      	cbnz	r6, 8006e24 <_Bfree+0x28>
 8006e06:	2010      	movs	r0, #16
 8006e08:	f7ff ff04 	bl	8006c14 <malloc>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	61e8      	str	r0, [r5, #28]
 8006e10:	b920      	cbnz	r0, 8006e1c <_Bfree+0x20>
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <_Bfree+0x3c>)
 8006e14:	4809      	ldr	r0, [pc, #36]	; (8006e3c <_Bfree+0x40>)
 8006e16:	218f      	movs	r1, #143	; 0x8f
 8006e18:	f000 fbf8 	bl	800760c <__assert_func>
 8006e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e20:	6006      	str	r6, [r0, #0]
 8006e22:	60c6      	str	r6, [r0, #12]
 8006e24:	b13c      	cbz	r4, 8006e36 <_Bfree+0x3a>
 8006e26:	69eb      	ldr	r3, [r5, #28]
 8006e28:	6862      	ldr	r2, [r4, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e30:	6021      	str	r1, [r4, #0]
 8006e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	080093f9 	.word	0x080093f9
 8006e3c:	08009479 	.word	0x08009479

08006e40 <__multadd>:
 8006e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e44:	690d      	ldr	r5, [r1, #16]
 8006e46:	4607      	mov	r7, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	461e      	mov	r6, r3
 8006e4c:	f101 0c14 	add.w	ip, r1, #20
 8006e50:	2000      	movs	r0, #0
 8006e52:	f8dc 3000 	ldr.w	r3, [ip]
 8006e56:	b299      	uxth	r1, r3
 8006e58:	fb02 6101 	mla	r1, r2, r1, r6
 8006e5c:	0c1e      	lsrs	r6, r3, #16
 8006e5e:	0c0b      	lsrs	r3, r1, #16
 8006e60:	fb02 3306 	mla	r3, r2, r6, r3
 8006e64:	b289      	uxth	r1, r1
 8006e66:	3001      	adds	r0, #1
 8006e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e6c:	4285      	cmp	r5, r0
 8006e6e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e76:	dcec      	bgt.n	8006e52 <__multadd+0x12>
 8006e78:	b30e      	cbz	r6, 8006ebe <__multadd+0x7e>
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dc19      	bgt.n	8006eb4 <__multadd+0x74>
 8006e80:	6861      	ldr	r1, [r4, #4]
 8006e82:	4638      	mov	r0, r7
 8006e84:	3101      	adds	r1, #1
 8006e86:	f7ff ff79 	bl	8006d7c <_Balloc>
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	b928      	cbnz	r0, 8006e9a <__multadd+0x5a>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b0c      	ldr	r3, [pc, #48]	; (8006ec4 <__multadd+0x84>)
 8006e92:	480d      	ldr	r0, [pc, #52]	; (8006ec8 <__multadd+0x88>)
 8006e94:	21ba      	movs	r1, #186	; 0xba
 8006e96:	f000 fbb9 	bl	800760c <__assert_func>
 8006e9a:	6922      	ldr	r2, [r4, #16]
 8006e9c:	3202      	adds	r2, #2
 8006e9e:	f104 010c 	add.w	r1, r4, #12
 8006ea2:	0092      	lsls	r2, r2, #2
 8006ea4:	300c      	adds	r0, #12
 8006ea6:	f000 fba3 	bl	80075f0 <memcpy>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff ffa5 	bl	8006dfc <_Bfree>
 8006eb2:	4644      	mov	r4, r8
 8006eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006eb8:	3501      	adds	r5, #1
 8006eba:	615e      	str	r6, [r3, #20]
 8006ebc:	6125      	str	r5, [r4, #16]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec4:	08009468 	.word	0x08009468
 8006ec8:	08009479 	.word	0x08009479

08006ecc <__hi0bits>:
 8006ecc:	0c03      	lsrs	r3, r0, #16
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	b9d3      	cbnz	r3, 8006f08 <__hi0bits+0x3c>
 8006ed2:	0400      	lsls	r0, r0, #16
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006eda:	bf04      	itt	eq
 8006edc:	0200      	lsleq	r0, r0, #8
 8006ede:	3308      	addeq	r3, #8
 8006ee0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ee4:	bf04      	itt	eq
 8006ee6:	0100      	lsleq	r0, r0, #4
 8006ee8:	3304      	addeq	r3, #4
 8006eea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006eee:	bf04      	itt	eq
 8006ef0:	0080      	lsleq	r0, r0, #2
 8006ef2:	3302      	addeq	r3, #2
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	db05      	blt.n	8006f04 <__hi0bits+0x38>
 8006ef8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006efc:	f103 0301 	add.w	r3, r3, #1
 8006f00:	bf08      	it	eq
 8006f02:	2320      	moveq	r3, #32
 8006f04:	4618      	mov	r0, r3
 8006f06:	4770      	bx	lr
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e7e4      	b.n	8006ed6 <__hi0bits+0xa>

08006f0c <__lo0bits>:
 8006f0c:	6803      	ldr	r3, [r0, #0]
 8006f0e:	f013 0207 	ands.w	r2, r3, #7
 8006f12:	d00c      	beq.n	8006f2e <__lo0bits+0x22>
 8006f14:	07d9      	lsls	r1, r3, #31
 8006f16:	d422      	bmi.n	8006f5e <__lo0bits+0x52>
 8006f18:	079a      	lsls	r2, r3, #30
 8006f1a:	bf49      	itett	mi
 8006f1c:	085b      	lsrmi	r3, r3, #1
 8006f1e:	089b      	lsrpl	r3, r3, #2
 8006f20:	6003      	strmi	r3, [r0, #0]
 8006f22:	2201      	movmi	r2, #1
 8006f24:	bf5c      	itt	pl
 8006f26:	6003      	strpl	r3, [r0, #0]
 8006f28:	2202      	movpl	r2, #2
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4770      	bx	lr
 8006f2e:	b299      	uxth	r1, r3
 8006f30:	b909      	cbnz	r1, 8006f36 <__lo0bits+0x2a>
 8006f32:	0c1b      	lsrs	r3, r3, #16
 8006f34:	2210      	movs	r2, #16
 8006f36:	b2d9      	uxtb	r1, r3
 8006f38:	b909      	cbnz	r1, 8006f3e <__lo0bits+0x32>
 8006f3a:	3208      	adds	r2, #8
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	0719      	lsls	r1, r3, #28
 8006f40:	bf04      	itt	eq
 8006f42:	091b      	lsreq	r3, r3, #4
 8006f44:	3204      	addeq	r2, #4
 8006f46:	0799      	lsls	r1, r3, #30
 8006f48:	bf04      	itt	eq
 8006f4a:	089b      	lsreq	r3, r3, #2
 8006f4c:	3202      	addeq	r2, #2
 8006f4e:	07d9      	lsls	r1, r3, #31
 8006f50:	d403      	bmi.n	8006f5a <__lo0bits+0x4e>
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	f102 0201 	add.w	r2, r2, #1
 8006f58:	d003      	beq.n	8006f62 <__lo0bits+0x56>
 8006f5a:	6003      	str	r3, [r0, #0]
 8006f5c:	e7e5      	b.n	8006f2a <__lo0bits+0x1e>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	e7e3      	b.n	8006f2a <__lo0bits+0x1e>
 8006f62:	2220      	movs	r2, #32
 8006f64:	e7e1      	b.n	8006f2a <__lo0bits+0x1e>
	...

08006f68 <__i2b>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	f7ff ff05 	bl	8006d7c <_Balloc>
 8006f72:	4602      	mov	r2, r0
 8006f74:	b928      	cbnz	r0, 8006f82 <__i2b+0x1a>
 8006f76:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <__i2b+0x24>)
 8006f78:	4805      	ldr	r0, [pc, #20]	; (8006f90 <__i2b+0x28>)
 8006f7a:	f240 1145 	movw	r1, #325	; 0x145
 8006f7e:	f000 fb45 	bl	800760c <__assert_func>
 8006f82:	2301      	movs	r3, #1
 8006f84:	6144      	str	r4, [r0, #20]
 8006f86:	6103      	str	r3, [r0, #16]
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	bf00      	nop
 8006f8c:	08009468 	.word	0x08009468
 8006f90:	08009479 	.word	0x08009479

08006f94 <__multiply>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	4691      	mov	r9, r2
 8006f9a:	690a      	ldr	r2, [r1, #16]
 8006f9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	bfb8      	it	lt
 8006fa4:	460b      	movlt	r3, r1
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	bfbc      	itt	lt
 8006faa:	464c      	movlt	r4, r9
 8006fac:	4699      	movlt	r9, r3
 8006fae:	6927      	ldr	r7, [r4, #16]
 8006fb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	6861      	ldr	r1, [r4, #4]
 8006fb8:	eb07 060a 	add.w	r6, r7, sl
 8006fbc:	42b3      	cmp	r3, r6
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	bfb8      	it	lt
 8006fc2:	3101      	addlt	r1, #1
 8006fc4:	f7ff feda 	bl	8006d7c <_Balloc>
 8006fc8:	b930      	cbnz	r0, 8006fd8 <__multiply+0x44>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4b44      	ldr	r3, [pc, #272]	; (80070e0 <__multiply+0x14c>)
 8006fce:	4845      	ldr	r0, [pc, #276]	; (80070e4 <__multiply+0x150>)
 8006fd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fd4:	f000 fb1a 	bl	800760c <__assert_func>
 8006fd8:	f100 0514 	add.w	r5, r0, #20
 8006fdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4543      	cmp	r3, r8
 8006fe6:	d321      	bcc.n	800702c <__multiply+0x98>
 8006fe8:	f104 0314 	add.w	r3, r4, #20
 8006fec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ff0:	f109 0314 	add.w	r3, r9, #20
 8006ff4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ff8:	9202      	str	r2, [sp, #8]
 8006ffa:	1b3a      	subs	r2, r7, r4
 8006ffc:	3a15      	subs	r2, #21
 8006ffe:	f022 0203 	bic.w	r2, r2, #3
 8007002:	3204      	adds	r2, #4
 8007004:	f104 0115 	add.w	r1, r4, #21
 8007008:	428f      	cmp	r7, r1
 800700a:	bf38      	it	cc
 800700c:	2204      	movcc	r2, #4
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9a02      	ldr	r2, [sp, #8]
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	d80c      	bhi.n	8007032 <__multiply+0x9e>
 8007018:	2e00      	cmp	r6, #0
 800701a:	dd03      	ble.n	8007024 <__multiply+0x90>
 800701c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007020:	2b00      	cmp	r3, #0
 8007022:	d05b      	beq.n	80070dc <__multiply+0x148>
 8007024:	6106      	str	r6, [r0, #16]
 8007026:	b005      	add	sp, #20
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	f843 2b04 	str.w	r2, [r3], #4
 8007030:	e7d8      	b.n	8006fe4 <__multiply+0x50>
 8007032:	f8b3 a000 	ldrh.w	sl, [r3]
 8007036:	f1ba 0f00 	cmp.w	sl, #0
 800703a:	d024      	beq.n	8007086 <__multiply+0xf2>
 800703c:	f104 0e14 	add.w	lr, r4, #20
 8007040:	46a9      	mov	r9, r5
 8007042:	f04f 0c00 	mov.w	ip, #0
 8007046:	f85e 2b04 	ldr.w	r2, [lr], #4
 800704a:	f8d9 1000 	ldr.w	r1, [r9]
 800704e:	fa1f fb82 	uxth.w	fp, r2
 8007052:	b289      	uxth	r1, r1
 8007054:	fb0a 110b 	mla	r1, sl, fp, r1
 8007058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800705c:	f8d9 2000 	ldr.w	r2, [r9]
 8007060:	4461      	add	r1, ip
 8007062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007066:	fb0a c20b 	mla	r2, sl, fp, ip
 800706a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800706e:	b289      	uxth	r1, r1
 8007070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007074:	4577      	cmp	r7, lr
 8007076:	f849 1b04 	str.w	r1, [r9], #4
 800707a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800707e:	d8e2      	bhi.n	8007046 <__multiply+0xb2>
 8007080:	9a01      	ldr	r2, [sp, #4]
 8007082:	f845 c002 	str.w	ip, [r5, r2]
 8007086:	9a03      	ldr	r2, [sp, #12]
 8007088:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800708c:	3304      	adds	r3, #4
 800708e:	f1b9 0f00 	cmp.w	r9, #0
 8007092:	d021      	beq.n	80070d8 <__multiply+0x144>
 8007094:	6829      	ldr	r1, [r5, #0]
 8007096:	f104 0c14 	add.w	ip, r4, #20
 800709a:	46ae      	mov	lr, r5
 800709c:	f04f 0a00 	mov.w	sl, #0
 80070a0:	f8bc b000 	ldrh.w	fp, [ip]
 80070a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070a8:	fb09 220b 	mla	r2, r9, fp, r2
 80070ac:	4452      	add	r2, sl
 80070ae:	b289      	uxth	r1, r1
 80070b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070b4:	f84e 1b04 	str.w	r1, [lr], #4
 80070b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070c0:	f8be 1000 	ldrh.w	r1, [lr]
 80070c4:	fb09 110a 	mla	r1, r9, sl, r1
 80070c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070cc:	4567      	cmp	r7, ip
 80070ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070d2:	d8e5      	bhi.n	80070a0 <__multiply+0x10c>
 80070d4:	9a01      	ldr	r2, [sp, #4]
 80070d6:	50a9      	str	r1, [r5, r2]
 80070d8:	3504      	adds	r5, #4
 80070da:	e799      	b.n	8007010 <__multiply+0x7c>
 80070dc:	3e01      	subs	r6, #1
 80070de:	e79b      	b.n	8007018 <__multiply+0x84>
 80070e0:	08009468 	.word	0x08009468
 80070e4:	08009479 	.word	0x08009479

080070e8 <__pow5mult>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4615      	mov	r5, r2
 80070ee:	f012 0203 	ands.w	r2, r2, #3
 80070f2:	4606      	mov	r6, r0
 80070f4:	460f      	mov	r7, r1
 80070f6:	d007      	beq.n	8007108 <__pow5mult+0x20>
 80070f8:	4c25      	ldr	r4, [pc, #148]	; (8007190 <__pow5mult+0xa8>)
 80070fa:	3a01      	subs	r2, #1
 80070fc:	2300      	movs	r3, #0
 80070fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007102:	f7ff fe9d 	bl	8006e40 <__multadd>
 8007106:	4607      	mov	r7, r0
 8007108:	10ad      	asrs	r5, r5, #2
 800710a:	d03d      	beq.n	8007188 <__pow5mult+0xa0>
 800710c:	69f4      	ldr	r4, [r6, #28]
 800710e:	b97c      	cbnz	r4, 8007130 <__pow5mult+0x48>
 8007110:	2010      	movs	r0, #16
 8007112:	f7ff fd7f 	bl	8006c14 <malloc>
 8007116:	4602      	mov	r2, r0
 8007118:	61f0      	str	r0, [r6, #28]
 800711a:	b928      	cbnz	r0, 8007128 <__pow5mult+0x40>
 800711c:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <__pow5mult+0xac>)
 800711e:	481e      	ldr	r0, [pc, #120]	; (8007198 <__pow5mult+0xb0>)
 8007120:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007124:	f000 fa72 	bl	800760c <__assert_func>
 8007128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800712c:	6004      	str	r4, [r0, #0]
 800712e:	60c4      	str	r4, [r0, #12]
 8007130:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007138:	b94c      	cbnz	r4, 800714e <__pow5mult+0x66>
 800713a:	f240 2171 	movw	r1, #625	; 0x271
 800713e:	4630      	mov	r0, r6
 8007140:	f7ff ff12 	bl	8006f68 <__i2b>
 8007144:	2300      	movs	r3, #0
 8007146:	f8c8 0008 	str.w	r0, [r8, #8]
 800714a:	4604      	mov	r4, r0
 800714c:	6003      	str	r3, [r0, #0]
 800714e:	f04f 0900 	mov.w	r9, #0
 8007152:	07eb      	lsls	r3, r5, #31
 8007154:	d50a      	bpl.n	800716c <__pow5mult+0x84>
 8007156:	4639      	mov	r1, r7
 8007158:	4622      	mov	r2, r4
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ff1a 	bl	8006f94 <__multiply>
 8007160:	4639      	mov	r1, r7
 8007162:	4680      	mov	r8, r0
 8007164:	4630      	mov	r0, r6
 8007166:	f7ff fe49 	bl	8006dfc <_Bfree>
 800716a:	4647      	mov	r7, r8
 800716c:	106d      	asrs	r5, r5, #1
 800716e:	d00b      	beq.n	8007188 <__pow5mult+0xa0>
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	b938      	cbnz	r0, 8007184 <__pow5mult+0x9c>
 8007174:	4622      	mov	r2, r4
 8007176:	4621      	mov	r1, r4
 8007178:	4630      	mov	r0, r6
 800717a:	f7ff ff0b 	bl	8006f94 <__multiply>
 800717e:	6020      	str	r0, [r4, #0]
 8007180:	f8c0 9000 	str.w	r9, [r0]
 8007184:	4604      	mov	r4, r0
 8007186:	e7e4      	b.n	8007152 <__pow5mult+0x6a>
 8007188:	4638      	mov	r0, r7
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	bf00      	nop
 8007190:	080095c8 	.word	0x080095c8
 8007194:	080093f9 	.word	0x080093f9
 8007198:	08009479 	.word	0x08009479

0800719c <__lshift>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	460c      	mov	r4, r1
 80071a2:	6849      	ldr	r1, [r1, #4]
 80071a4:	6923      	ldr	r3, [r4, #16]
 80071a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	4607      	mov	r7, r0
 80071ae:	4691      	mov	r9, r2
 80071b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071b4:	f108 0601 	add.w	r6, r8, #1
 80071b8:	42b3      	cmp	r3, r6
 80071ba:	db0b      	blt.n	80071d4 <__lshift+0x38>
 80071bc:	4638      	mov	r0, r7
 80071be:	f7ff fddd 	bl	8006d7c <_Balloc>
 80071c2:	4605      	mov	r5, r0
 80071c4:	b948      	cbnz	r0, 80071da <__lshift+0x3e>
 80071c6:	4602      	mov	r2, r0
 80071c8:	4b28      	ldr	r3, [pc, #160]	; (800726c <__lshift+0xd0>)
 80071ca:	4829      	ldr	r0, [pc, #164]	; (8007270 <__lshift+0xd4>)
 80071cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071d0:	f000 fa1c 	bl	800760c <__assert_func>
 80071d4:	3101      	adds	r1, #1
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	e7ee      	b.n	80071b8 <__lshift+0x1c>
 80071da:	2300      	movs	r3, #0
 80071dc:	f100 0114 	add.w	r1, r0, #20
 80071e0:	f100 0210 	add.w	r2, r0, #16
 80071e4:	4618      	mov	r0, r3
 80071e6:	4553      	cmp	r3, sl
 80071e8:	db33      	blt.n	8007252 <__lshift+0xb6>
 80071ea:	6920      	ldr	r0, [r4, #16]
 80071ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071f0:	f104 0314 	add.w	r3, r4, #20
 80071f4:	f019 091f 	ands.w	r9, r9, #31
 80071f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007200:	d02b      	beq.n	800725a <__lshift+0xbe>
 8007202:	f1c9 0e20 	rsb	lr, r9, #32
 8007206:	468a      	mov	sl, r1
 8007208:	2200      	movs	r2, #0
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	fa00 f009 	lsl.w	r0, r0, r9
 8007210:	4310      	orrs	r0, r2
 8007212:	f84a 0b04 	str.w	r0, [sl], #4
 8007216:	f853 2b04 	ldr.w	r2, [r3], #4
 800721a:	459c      	cmp	ip, r3
 800721c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007220:	d8f3      	bhi.n	800720a <__lshift+0x6e>
 8007222:	ebac 0304 	sub.w	r3, ip, r4
 8007226:	3b15      	subs	r3, #21
 8007228:	f023 0303 	bic.w	r3, r3, #3
 800722c:	3304      	adds	r3, #4
 800722e:	f104 0015 	add.w	r0, r4, #21
 8007232:	4584      	cmp	ip, r0
 8007234:	bf38      	it	cc
 8007236:	2304      	movcc	r3, #4
 8007238:	50ca      	str	r2, [r1, r3]
 800723a:	b10a      	cbz	r2, 8007240 <__lshift+0xa4>
 800723c:	f108 0602 	add.w	r6, r8, #2
 8007240:	3e01      	subs	r6, #1
 8007242:	4638      	mov	r0, r7
 8007244:	612e      	str	r6, [r5, #16]
 8007246:	4621      	mov	r1, r4
 8007248:	f7ff fdd8 	bl	8006dfc <_Bfree>
 800724c:	4628      	mov	r0, r5
 800724e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007252:	f842 0f04 	str.w	r0, [r2, #4]!
 8007256:	3301      	adds	r3, #1
 8007258:	e7c5      	b.n	80071e6 <__lshift+0x4a>
 800725a:	3904      	subs	r1, #4
 800725c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007260:	f841 2f04 	str.w	r2, [r1, #4]!
 8007264:	459c      	cmp	ip, r3
 8007266:	d8f9      	bhi.n	800725c <__lshift+0xc0>
 8007268:	e7ea      	b.n	8007240 <__lshift+0xa4>
 800726a:	bf00      	nop
 800726c:	08009468 	.word	0x08009468
 8007270:	08009479 	.word	0x08009479

08007274 <__mcmp>:
 8007274:	b530      	push	{r4, r5, lr}
 8007276:	6902      	ldr	r2, [r0, #16]
 8007278:	690c      	ldr	r4, [r1, #16]
 800727a:	1b12      	subs	r2, r2, r4
 800727c:	d10e      	bne.n	800729c <__mcmp+0x28>
 800727e:	f100 0314 	add.w	r3, r0, #20
 8007282:	3114      	adds	r1, #20
 8007284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800728c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007294:	42a5      	cmp	r5, r4
 8007296:	d003      	beq.n	80072a0 <__mcmp+0x2c>
 8007298:	d305      	bcc.n	80072a6 <__mcmp+0x32>
 800729a:	2201      	movs	r2, #1
 800729c:	4610      	mov	r0, r2
 800729e:	bd30      	pop	{r4, r5, pc}
 80072a0:	4283      	cmp	r3, r0
 80072a2:	d3f3      	bcc.n	800728c <__mcmp+0x18>
 80072a4:	e7fa      	b.n	800729c <__mcmp+0x28>
 80072a6:	f04f 32ff 	mov.w	r2, #4294967295
 80072aa:	e7f7      	b.n	800729c <__mcmp+0x28>

080072ac <__mdiff>:
 80072ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	460c      	mov	r4, r1
 80072b2:	4606      	mov	r6, r0
 80072b4:	4611      	mov	r1, r2
 80072b6:	4620      	mov	r0, r4
 80072b8:	4690      	mov	r8, r2
 80072ba:	f7ff ffdb 	bl	8007274 <__mcmp>
 80072be:	1e05      	subs	r5, r0, #0
 80072c0:	d110      	bne.n	80072e4 <__mdiff+0x38>
 80072c2:	4629      	mov	r1, r5
 80072c4:	4630      	mov	r0, r6
 80072c6:	f7ff fd59 	bl	8006d7c <_Balloc>
 80072ca:	b930      	cbnz	r0, 80072da <__mdiff+0x2e>
 80072cc:	4b3a      	ldr	r3, [pc, #232]	; (80073b8 <__mdiff+0x10c>)
 80072ce:	4602      	mov	r2, r0
 80072d0:	f240 2137 	movw	r1, #567	; 0x237
 80072d4:	4839      	ldr	r0, [pc, #228]	; (80073bc <__mdiff+0x110>)
 80072d6:	f000 f999 	bl	800760c <__assert_func>
 80072da:	2301      	movs	r3, #1
 80072dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	bfa4      	itt	ge
 80072e6:	4643      	movge	r3, r8
 80072e8:	46a0      	movge	r8, r4
 80072ea:	4630      	mov	r0, r6
 80072ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072f0:	bfa6      	itte	ge
 80072f2:	461c      	movge	r4, r3
 80072f4:	2500      	movge	r5, #0
 80072f6:	2501      	movlt	r5, #1
 80072f8:	f7ff fd40 	bl	8006d7c <_Balloc>
 80072fc:	b920      	cbnz	r0, 8007308 <__mdiff+0x5c>
 80072fe:	4b2e      	ldr	r3, [pc, #184]	; (80073b8 <__mdiff+0x10c>)
 8007300:	4602      	mov	r2, r0
 8007302:	f240 2145 	movw	r1, #581	; 0x245
 8007306:	e7e5      	b.n	80072d4 <__mdiff+0x28>
 8007308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800730c:	6926      	ldr	r6, [r4, #16]
 800730e:	60c5      	str	r5, [r0, #12]
 8007310:	f104 0914 	add.w	r9, r4, #20
 8007314:	f108 0514 	add.w	r5, r8, #20
 8007318:	f100 0e14 	add.w	lr, r0, #20
 800731c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007324:	f108 0210 	add.w	r2, r8, #16
 8007328:	46f2      	mov	sl, lr
 800732a:	2100      	movs	r1, #0
 800732c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007334:	fa11 f88b 	uxtah	r8, r1, fp
 8007338:	b299      	uxth	r1, r3
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	eba8 0801 	sub.w	r8, r8, r1
 8007340:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007344:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007348:	fa1f f888 	uxth.w	r8, r8
 800734c:	1419      	asrs	r1, r3, #16
 800734e:	454e      	cmp	r6, r9
 8007350:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007354:	f84a 3b04 	str.w	r3, [sl], #4
 8007358:	d8e8      	bhi.n	800732c <__mdiff+0x80>
 800735a:	1b33      	subs	r3, r6, r4
 800735c:	3b15      	subs	r3, #21
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	3304      	adds	r3, #4
 8007364:	3415      	adds	r4, #21
 8007366:	42a6      	cmp	r6, r4
 8007368:	bf38      	it	cc
 800736a:	2304      	movcc	r3, #4
 800736c:	441d      	add	r5, r3
 800736e:	4473      	add	r3, lr
 8007370:	469e      	mov	lr, r3
 8007372:	462e      	mov	r6, r5
 8007374:	4566      	cmp	r6, ip
 8007376:	d30e      	bcc.n	8007396 <__mdiff+0xea>
 8007378:	f10c 0203 	add.w	r2, ip, #3
 800737c:	1b52      	subs	r2, r2, r5
 800737e:	f022 0203 	bic.w	r2, r2, #3
 8007382:	3d03      	subs	r5, #3
 8007384:	45ac      	cmp	ip, r5
 8007386:	bf38      	it	cc
 8007388:	2200      	movcc	r2, #0
 800738a:	4413      	add	r3, r2
 800738c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007390:	b17a      	cbz	r2, 80073b2 <__mdiff+0x106>
 8007392:	6107      	str	r7, [r0, #16]
 8007394:	e7a4      	b.n	80072e0 <__mdiff+0x34>
 8007396:	f856 8b04 	ldr.w	r8, [r6], #4
 800739a:	fa11 f288 	uxtah	r2, r1, r8
 800739e:	1414      	asrs	r4, r2, #16
 80073a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073a4:	b292      	uxth	r2, r2
 80073a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073aa:	f84e 2b04 	str.w	r2, [lr], #4
 80073ae:	1421      	asrs	r1, r4, #16
 80073b0:	e7e0      	b.n	8007374 <__mdiff+0xc8>
 80073b2:	3f01      	subs	r7, #1
 80073b4:	e7ea      	b.n	800738c <__mdiff+0xe0>
 80073b6:	bf00      	nop
 80073b8:	08009468 	.word	0x08009468
 80073bc:	08009479 	.word	0x08009479

080073c0 <__d2b>:
 80073c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073c4:	460f      	mov	r7, r1
 80073c6:	2101      	movs	r1, #1
 80073c8:	ec59 8b10 	vmov	r8, r9, d0
 80073cc:	4616      	mov	r6, r2
 80073ce:	f7ff fcd5 	bl	8006d7c <_Balloc>
 80073d2:	4604      	mov	r4, r0
 80073d4:	b930      	cbnz	r0, 80073e4 <__d2b+0x24>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4b24      	ldr	r3, [pc, #144]	; (800746c <__d2b+0xac>)
 80073da:	4825      	ldr	r0, [pc, #148]	; (8007470 <__d2b+0xb0>)
 80073dc:	f240 310f 	movw	r1, #783	; 0x30f
 80073e0:	f000 f914 	bl	800760c <__assert_func>
 80073e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073ec:	bb2d      	cbnz	r5, 800743a <__d2b+0x7a>
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	f1b8 0300 	subs.w	r3, r8, #0
 80073f4:	d026      	beq.n	8007444 <__d2b+0x84>
 80073f6:	4668      	mov	r0, sp
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	f7ff fd87 	bl	8006f0c <__lo0bits>
 80073fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007402:	b1e8      	cbz	r0, 8007440 <__d2b+0x80>
 8007404:	f1c0 0320 	rsb	r3, r0, #32
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	430b      	orrs	r3, r1
 800740e:	40c2      	lsrs	r2, r0
 8007410:	6163      	str	r3, [r4, #20]
 8007412:	9201      	str	r2, [sp, #4]
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	61a3      	str	r3, [r4, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	bf14      	ite	ne
 800741c:	2202      	movne	r2, #2
 800741e:	2201      	moveq	r2, #1
 8007420:	6122      	str	r2, [r4, #16]
 8007422:	b1bd      	cbz	r5, 8007454 <__d2b+0x94>
 8007424:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007428:	4405      	add	r5, r0
 800742a:	603d      	str	r5, [r7, #0]
 800742c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007430:	6030      	str	r0, [r6, #0]
 8007432:	4620      	mov	r0, r4
 8007434:	b003      	add	sp, #12
 8007436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800743a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800743e:	e7d6      	b.n	80073ee <__d2b+0x2e>
 8007440:	6161      	str	r1, [r4, #20]
 8007442:	e7e7      	b.n	8007414 <__d2b+0x54>
 8007444:	a801      	add	r0, sp, #4
 8007446:	f7ff fd61 	bl	8006f0c <__lo0bits>
 800744a:	9b01      	ldr	r3, [sp, #4]
 800744c:	6163      	str	r3, [r4, #20]
 800744e:	3020      	adds	r0, #32
 8007450:	2201      	movs	r2, #1
 8007452:	e7e5      	b.n	8007420 <__d2b+0x60>
 8007454:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007458:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800745c:	6038      	str	r0, [r7, #0]
 800745e:	6918      	ldr	r0, [r3, #16]
 8007460:	f7ff fd34 	bl	8006ecc <__hi0bits>
 8007464:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007468:	e7e2      	b.n	8007430 <__d2b+0x70>
 800746a:	bf00      	nop
 800746c:	08009468 	.word	0x08009468
 8007470:	08009479 	.word	0x08009479

08007474 <__sflush_r>:
 8007474:	898a      	ldrh	r2, [r1, #12]
 8007476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	4605      	mov	r5, r0
 800747c:	0710      	lsls	r0, r2, #28
 800747e:	460c      	mov	r4, r1
 8007480:	d458      	bmi.n	8007534 <__sflush_r+0xc0>
 8007482:	684b      	ldr	r3, [r1, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	dc05      	bgt.n	8007494 <__sflush_r+0x20>
 8007488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800748a:	2b00      	cmp	r3, #0
 800748c:	dc02      	bgt.n	8007494 <__sflush_r+0x20>
 800748e:	2000      	movs	r0, #0
 8007490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007496:	2e00      	cmp	r6, #0
 8007498:	d0f9      	beq.n	800748e <__sflush_r+0x1a>
 800749a:	2300      	movs	r3, #0
 800749c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074a0:	682f      	ldr	r7, [r5, #0]
 80074a2:	6a21      	ldr	r1, [r4, #32]
 80074a4:	602b      	str	r3, [r5, #0]
 80074a6:	d032      	beq.n	800750e <__sflush_r+0x9a>
 80074a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	075a      	lsls	r2, r3, #29
 80074ae:	d505      	bpl.n	80074bc <__sflush_r+0x48>
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	1ac0      	subs	r0, r0, r3
 80074b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074b6:	b10b      	cbz	r3, 80074bc <__sflush_r+0x48>
 80074b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ba:	1ac0      	subs	r0, r0, r3
 80074bc:	2300      	movs	r3, #0
 80074be:	4602      	mov	r2, r0
 80074c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074c2:	6a21      	ldr	r1, [r4, #32]
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b0      	blx	r6
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	d106      	bne.n	80074dc <__sflush_r+0x68>
 80074ce:	6829      	ldr	r1, [r5, #0]
 80074d0:	291d      	cmp	r1, #29
 80074d2:	d82b      	bhi.n	800752c <__sflush_r+0xb8>
 80074d4:	4a29      	ldr	r2, [pc, #164]	; (800757c <__sflush_r+0x108>)
 80074d6:	410a      	asrs	r2, r1
 80074d8:	07d6      	lsls	r6, r2, #31
 80074da:	d427      	bmi.n	800752c <__sflush_r+0xb8>
 80074dc:	2200      	movs	r2, #0
 80074de:	6062      	str	r2, [r4, #4]
 80074e0:	04d9      	lsls	r1, r3, #19
 80074e2:	6922      	ldr	r2, [r4, #16]
 80074e4:	6022      	str	r2, [r4, #0]
 80074e6:	d504      	bpl.n	80074f2 <__sflush_r+0x7e>
 80074e8:	1c42      	adds	r2, r0, #1
 80074ea:	d101      	bne.n	80074f0 <__sflush_r+0x7c>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b903      	cbnz	r3, 80074f2 <__sflush_r+0x7e>
 80074f0:	6560      	str	r0, [r4, #84]	; 0x54
 80074f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074f4:	602f      	str	r7, [r5, #0]
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d0c9      	beq.n	800748e <__sflush_r+0x1a>
 80074fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074fe:	4299      	cmp	r1, r3
 8007500:	d002      	beq.n	8007508 <__sflush_r+0x94>
 8007502:	4628      	mov	r0, r5
 8007504:	f7ff fb3a 	bl	8006b7c <_free_r>
 8007508:	2000      	movs	r0, #0
 800750a:	6360      	str	r0, [r4, #52]	; 0x34
 800750c:	e7c0      	b.n	8007490 <__sflush_r+0x1c>
 800750e:	2301      	movs	r3, #1
 8007510:	4628      	mov	r0, r5
 8007512:	47b0      	blx	r6
 8007514:	1c41      	adds	r1, r0, #1
 8007516:	d1c8      	bne.n	80074aa <__sflush_r+0x36>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0c5      	beq.n	80074aa <__sflush_r+0x36>
 800751e:	2b1d      	cmp	r3, #29
 8007520:	d001      	beq.n	8007526 <__sflush_r+0xb2>
 8007522:	2b16      	cmp	r3, #22
 8007524:	d101      	bne.n	800752a <__sflush_r+0xb6>
 8007526:	602f      	str	r7, [r5, #0]
 8007528:	e7b1      	b.n	800748e <__sflush_r+0x1a>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	e7ad      	b.n	8007490 <__sflush_r+0x1c>
 8007534:	690f      	ldr	r7, [r1, #16]
 8007536:	2f00      	cmp	r7, #0
 8007538:	d0a9      	beq.n	800748e <__sflush_r+0x1a>
 800753a:	0793      	lsls	r3, r2, #30
 800753c:	680e      	ldr	r6, [r1, #0]
 800753e:	bf08      	it	eq
 8007540:	694b      	ldreq	r3, [r1, #20]
 8007542:	600f      	str	r7, [r1, #0]
 8007544:	bf18      	it	ne
 8007546:	2300      	movne	r3, #0
 8007548:	eba6 0807 	sub.w	r8, r6, r7
 800754c:	608b      	str	r3, [r1, #8]
 800754e:	f1b8 0f00 	cmp.w	r8, #0
 8007552:	dd9c      	ble.n	800748e <__sflush_r+0x1a>
 8007554:	6a21      	ldr	r1, [r4, #32]
 8007556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007558:	4643      	mov	r3, r8
 800755a:	463a      	mov	r2, r7
 800755c:	4628      	mov	r0, r5
 800755e:	47b0      	blx	r6
 8007560:	2800      	cmp	r0, #0
 8007562:	dc06      	bgt.n	8007572 <__sflush_r+0xfe>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	e78e      	b.n	8007490 <__sflush_r+0x1c>
 8007572:	4407      	add	r7, r0
 8007574:	eba8 0800 	sub.w	r8, r8, r0
 8007578:	e7e9      	b.n	800754e <__sflush_r+0xda>
 800757a:	bf00      	nop
 800757c:	dfbffffe 	.word	0xdfbffffe

08007580 <_fflush_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	690b      	ldr	r3, [r1, #16]
 8007584:	4605      	mov	r5, r0
 8007586:	460c      	mov	r4, r1
 8007588:	b913      	cbnz	r3, 8007590 <_fflush_r+0x10>
 800758a:	2500      	movs	r5, #0
 800758c:	4628      	mov	r0, r5
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	b118      	cbz	r0, 800759a <_fflush_r+0x1a>
 8007592:	6a03      	ldr	r3, [r0, #32]
 8007594:	b90b      	cbnz	r3, 800759a <_fflush_r+0x1a>
 8007596:	f7fe fb7b 	bl	8005c90 <__sinit>
 800759a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f3      	beq.n	800758a <_fflush_r+0xa>
 80075a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075a4:	07d0      	lsls	r0, r2, #31
 80075a6:	d404      	bmi.n	80075b2 <_fflush_r+0x32>
 80075a8:	0599      	lsls	r1, r3, #22
 80075aa:	d402      	bmi.n	80075b2 <_fflush_r+0x32>
 80075ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ae:	f7fe fc66 	bl	8005e7e <__retarget_lock_acquire_recursive>
 80075b2:	4628      	mov	r0, r5
 80075b4:	4621      	mov	r1, r4
 80075b6:	f7ff ff5d 	bl	8007474 <__sflush_r>
 80075ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075bc:	07da      	lsls	r2, r3, #31
 80075be:	4605      	mov	r5, r0
 80075c0:	d4e4      	bmi.n	800758c <_fflush_r+0xc>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	059b      	lsls	r3, r3, #22
 80075c6:	d4e1      	bmi.n	800758c <_fflush_r+0xc>
 80075c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ca:	f7fe fc59 	bl	8005e80 <__retarget_lock_release_recursive>
 80075ce:	e7dd      	b.n	800758c <_fflush_r+0xc>

080075d0 <_sbrk_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d06      	ldr	r5, [pc, #24]	; (80075ec <_sbrk_r+0x1c>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	f7fa fc22 	bl	8001e24 <_sbrk>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_sbrk_r+0x1a>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_sbrk_r+0x1a>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20000548 	.word	0x20000548

080075f0 <memcpy>:
 80075f0:	440a      	add	r2, r1
 80075f2:	4291      	cmp	r1, r2
 80075f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075f8:	d100      	bne.n	80075fc <memcpy+0xc>
 80075fa:	4770      	bx	lr
 80075fc:	b510      	push	{r4, lr}
 80075fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007606:	4291      	cmp	r1, r2
 8007608:	d1f9      	bne.n	80075fe <memcpy+0xe>
 800760a:	bd10      	pop	{r4, pc}

0800760c <__assert_func>:
 800760c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800760e:	4614      	mov	r4, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4b09      	ldr	r3, [pc, #36]	; (8007638 <__assert_func+0x2c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4605      	mov	r5, r0
 8007618:	68d8      	ldr	r0, [r3, #12]
 800761a:	b14c      	cbz	r4, 8007630 <__assert_func+0x24>
 800761c:	4b07      	ldr	r3, [pc, #28]	; (800763c <__assert_func+0x30>)
 800761e:	9100      	str	r1, [sp, #0]
 8007620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007624:	4906      	ldr	r1, [pc, #24]	; (8007640 <__assert_func+0x34>)
 8007626:	462b      	mov	r3, r5
 8007628:	f000 f844 	bl	80076b4 <fiprintf>
 800762c:	f000 f854 	bl	80076d8 <abort>
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <__assert_func+0x38>)
 8007632:	461c      	mov	r4, r3
 8007634:	e7f3      	b.n	800761e <__assert_func+0x12>
 8007636:	bf00      	nop
 8007638:	20000064 	.word	0x20000064
 800763c:	080095de 	.word	0x080095de
 8007640:	080095eb 	.word	0x080095eb
 8007644:	08009619 	.word	0x08009619

08007648 <_calloc_r>:
 8007648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800764a:	fba1 2402 	umull	r2, r4, r1, r2
 800764e:	b94c      	cbnz	r4, 8007664 <_calloc_r+0x1c>
 8007650:	4611      	mov	r1, r2
 8007652:	9201      	str	r2, [sp, #4]
 8007654:	f7ff fb06 	bl	8006c64 <_malloc_r>
 8007658:	9a01      	ldr	r2, [sp, #4]
 800765a:	4605      	mov	r5, r0
 800765c:	b930      	cbnz	r0, 800766c <_calloc_r+0x24>
 800765e:	4628      	mov	r0, r5
 8007660:	b003      	add	sp, #12
 8007662:	bd30      	pop	{r4, r5, pc}
 8007664:	220c      	movs	r2, #12
 8007666:	6002      	str	r2, [r0, #0]
 8007668:	2500      	movs	r5, #0
 800766a:	e7f8      	b.n	800765e <_calloc_r+0x16>
 800766c:	4621      	mov	r1, r4
 800766e:	f7fe fb88 	bl	8005d82 <memset>
 8007672:	e7f4      	b.n	800765e <_calloc_r+0x16>

08007674 <__ascii_mbtowc>:
 8007674:	b082      	sub	sp, #8
 8007676:	b901      	cbnz	r1, 800767a <__ascii_mbtowc+0x6>
 8007678:	a901      	add	r1, sp, #4
 800767a:	b142      	cbz	r2, 800768e <__ascii_mbtowc+0x1a>
 800767c:	b14b      	cbz	r3, 8007692 <__ascii_mbtowc+0x1e>
 800767e:	7813      	ldrb	r3, [r2, #0]
 8007680:	600b      	str	r3, [r1, #0]
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	1e10      	subs	r0, r2, #0
 8007686:	bf18      	it	ne
 8007688:	2001      	movne	r0, #1
 800768a:	b002      	add	sp, #8
 800768c:	4770      	bx	lr
 800768e:	4610      	mov	r0, r2
 8007690:	e7fb      	b.n	800768a <__ascii_mbtowc+0x16>
 8007692:	f06f 0001 	mvn.w	r0, #1
 8007696:	e7f8      	b.n	800768a <__ascii_mbtowc+0x16>

08007698 <__ascii_wctomb>:
 8007698:	b149      	cbz	r1, 80076ae <__ascii_wctomb+0x16>
 800769a:	2aff      	cmp	r2, #255	; 0xff
 800769c:	bf85      	ittet	hi
 800769e:	238a      	movhi	r3, #138	; 0x8a
 80076a0:	6003      	strhi	r3, [r0, #0]
 80076a2:	700a      	strbls	r2, [r1, #0]
 80076a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80076a8:	bf98      	it	ls
 80076aa:	2001      	movls	r0, #1
 80076ac:	4770      	bx	lr
 80076ae:	4608      	mov	r0, r1
 80076b0:	4770      	bx	lr
	...

080076b4 <fiprintf>:
 80076b4:	b40e      	push	{r1, r2, r3}
 80076b6:	b503      	push	{r0, r1, lr}
 80076b8:	4601      	mov	r1, r0
 80076ba:	ab03      	add	r3, sp, #12
 80076bc:	4805      	ldr	r0, [pc, #20]	; (80076d4 <fiprintf+0x20>)
 80076be:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c2:	6800      	ldr	r0, [r0, #0]
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	f000 f837 	bl	8007738 <_vfiprintf_r>
 80076ca:	b002      	add	sp, #8
 80076cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076d0:	b003      	add	sp, #12
 80076d2:	4770      	bx	lr
 80076d4:	20000064 	.word	0x20000064

080076d8 <abort>:
 80076d8:	b508      	push	{r3, lr}
 80076da:	2006      	movs	r0, #6
 80076dc:	f000 fa04 	bl	8007ae8 <raise>
 80076e0:	2001      	movs	r0, #1
 80076e2:	f7fa fb27 	bl	8001d34 <_exit>

080076e6 <__sfputc_r>:
 80076e6:	6893      	ldr	r3, [r2, #8]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	b410      	push	{r4}
 80076ee:	6093      	str	r3, [r2, #8]
 80076f0:	da08      	bge.n	8007704 <__sfputc_r+0x1e>
 80076f2:	6994      	ldr	r4, [r2, #24]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	db01      	blt.n	80076fc <__sfputc_r+0x16>
 80076f8:	290a      	cmp	r1, #10
 80076fa:	d103      	bne.n	8007704 <__sfputc_r+0x1e>
 80076fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007700:	f000 b934 	b.w	800796c <__swbuf_r>
 8007704:	6813      	ldr	r3, [r2, #0]
 8007706:	1c58      	adds	r0, r3, #1
 8007708:	6010      	str	r0, [r2, #0]
 800770a:	7019      	strb	r1, [r3, #0]
 800770c:	4608      	mov	r0, r1
 800770e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007712:	4770      	bx	lr

08007714 <__sfputs_r>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	4606      	mov	r6, r0
 8007718:	460f      	mov	r7, r1
 800771a:	4614      	mov	r4, r2
 800771c:	18d5      	adds	r5, r2, r3
 800771e:	42ac      	cmp	r4, r5
 8007720:	d101      	bne.n	8007726 <__sfputs_r+0x12>
 8007722:	2000      	movs	r0, #0
 8007724:	e007      	b.n	8007736 <__sfputs_r+0x22>
 8007726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772a:	463a      	mov	r2, r7
 800772c:	4630      	mov	r0, r6
 800772e:	f7ff ffda 	bl	80076e6 <__sfputc_r>
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	d1f3      	bne.n	800771e <__sfputs_r+0xa>
 8007736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007738 <_vfiprintf_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	460d      	mov	r5, r1
 800773e:	b09d      	sub	sp, #116	; 0x74
 8007740:	4614      	mov	r4, r2
 8007742:	4698      	mov	r8, r3
 8007744:	4606      	mov	r6, r0
 8007746:	b118      	cbz	r0, 8007750 <_vfiprintf_r+0x18>
 8007748:	6a03      	ldr	r3, [r0, #32]
 800774a:	b90b      	cbnz	r3, 8007750 <_vfiprintf_r+0x18>
 800774c:	f7fe faa0 	bl	8005c90 <__sinit>
 8007750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007752:	07d9      	lsls	r1, r3, #31
 8007754:	d405      	bmi.n	8007762 <_vfiprintf_r+0x2a>
 8007756:	89ab      	ldrh	r3, [r5, #12]
 8007758:	059a      	lsls	r2, r3, #22
 800775a:	d402      	bmi.n	8007762 <_vfiprintf_r+0x2a>
 800775c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800775e:	f7fe fb8e 	bl	8005e7e <__retarget_lock_acquire_recursive>
 8007762:	89ab      	ldrh	r3, [r5, #12]
 8007764:	071b      	lsls	r3, r3, #28
 8007766:	d501      	bpl.n	800776c <_vfiprintf_r+0x34>
 8007768:	692b      	ldr	r3, [r5, #16]
 800776a:	b99b      	cbnz	r3, 8007794 <_vfiprintf_r+0x5c>
 800776c:	4629      	mov	r1, r5
 800776e:	4630      	mov	r0, r6
 8007770:	f000 f93a 	bl	80079e8 <__swsetup_r>
 8007774:	b170      	cbz	r0, 8007794 <_vfiprintf_r+0x5c>
 8007776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007778:	07dc      	lsls	r4, r3, #31
 800777a:	d504      	bpl.n	8007786 <_vfiprintf_r+0x4e>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	b01d      	add	sp, #116	; 0x74
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	0598      	lsls	r0, r3, #22
 800778a:	d4f7      	bmi.n	800777c <_vfiprintf_r+0x44>
 800778c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800778e:	f7fe fb77 	bl	8005e80 <__retarget_lock_release_recursive>
 8007792:	e7f3      	b.n	800777c <_vfiprintf_r+0x44>
 8007794:	2300      	movs	r3, #0
 8007796:	9309      	str	r3, [sp, #36]	; 0x24
 8007798:	2320      	movs	r3, #32
 800779a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800779e:	f8cd 800c 	str.w	r8, [sp, #12]
 80077a2:	2330      	movs	r3, #48	; 0x30
 80077a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007958 <_vfiprintf_r+0x220>
 80077a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ac:	f04f 0901 	mov.w	r9, #1
 80077b0:	4623      	mov	r3, r4
 80077b2:	469a      	mov	sl, r3
 80077b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077b8:	b10a      	cbz	r2, 80077be <_vfiprintf_r+0x86>
 80077ba:	2a25      	cmp	r2, #37	; 0x25
 80077bc:	d1f9      	bne.n	80077b2 <_vfiprintf_r+0x7a>
 80077be:	ebba 0b04 	subs.w	fp, sl, r4
 80077c2:	d00b      	beq.n	80077dc <_vfiprintf_r+0xa4>
 80077c4:	465b      	mov	r3, fp
 80077c6:	4622      	mov	r2, r4
 80077c8:	4629      	mov	r1, r5
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff ffa2 	bl	8007714 <__sfputs_r>
 80077d0:	3001      	adds	r0, #1
 80077d2:	f000 80a9 	beq.w	8007928 <_vfiprintf_r+0x1f0>
 80077d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d8:	445a      	add	r2, fp
 80077da:	9209      	str	r2, [sp, #36]	; 0x24
 80077dc:	f89a 3000 	ldrb.w	r3, [sl]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80a1 	beq.w	8007928 <_vfiprintf_r+0x1f0>
 80077e6:	2300      	movs	r3, #0
 80077e8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077f0:	f10a 0a01 	add.w	sl, sl, #1
 80077f4:	9304      	str	r3, [sp, #16]
 80077f6:	9307      	str	r3, [sp, #28]
 80077f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077fc:	931a      	str	r3, [sp, #104]	; 0x68
 80077fe:	4654      	mov	r4, sl
 8007800:	2205      	movs	r2, #5
 8007802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007806:	4854      	ldr	r0, [pc, #336]	; (8007958 <_vfiprintf_r+0x220>)
 8007808:	f7f8 fd02 	bl	8000210 <memchr>
 800780c:	9a04      	ldr	r2, [sp, #16]
 800780e:	b9d8      	cbnz	r0, 8007848 <_vfiprintf_r+0x110>
 8007810:	06d1      	lsls	r1, r2, #27
 8007812:	bf44      	itt	mi
 8007814:	2320      	movmi	r3, #32
 8007816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800781a:	0713      	lsls	r3, r2, #28
 800781c:	bf44      	itt	mi
 800781e:	232b      	movmi	r3, #43	; 0x2b
 8007820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007824:	f89a 3000 	ldrb.w	r3, [sl]
 8007828:	2b2a      	cmp	r3, #42	; 0x2a
 800782a:	d015      	beq.n	8007858 <_vfiprintf_r+0x120>
 800782c:	9a07      	ldr	r2, [sp, #28]
 800782e:	4654      	mov	r4, sl
 8007830:	2000      	movs	r0, #0
 8007832:	f04f 0c0a 	mov.w	ip, #10
 8007836:	4621      	mov	r1, r4
 8007838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800783c:	3b30      	subs	r3, #48	; 0x30
 800783e:	2b09      	cmp	r3, #9
 8007840:	d94d      	bls.n	80078de <_vfiprintf_r+0x1a6>
 8007842:	b1b0      	cbz	r0, 8007872 <_vfiprintf_r+0x13a>
 8007844:	9207      	str	r2, [sp, #28]
 8007846:	e014      	b.n	8007872 <_vfiprintf_r+0x13a>
 8007848:	eba0 0308 	sub.w	r3, r0, r8
 800784c:	fa09 f303 	lsl.w	r3, r9, r3
 8007850:	4313      	orrs	r3, r2
 8007852:	9304      	str	r3, [sp, #16]
 8007854:	46a2      	mov	sl, r4
 8007856:	e7d2      	b.n	80077fe <_vfiprintf_r+0xc6>
 8007858:	9b03      	ldr	r3, [sp, #12]
 800785a:	1d19      	adds	r1, r3, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	9103      	str	r1, [sp, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	bfbb      	ittet	lt
 8007864:	425b      	neglt	r3, r3
 8007866:	f042 0202 	orrlt.w	r2, r2, #2
 800786a:	9307      	strge	r3, [sp, #28]
 800786c:	9307      	strlt	r3, [sp, #28]
 800786e:	bfb8      	it	lt
 8007870:	9204      	strlt	r2, [sp, #16]
 8007872:	7823      	ldrb	r3, [r4, #0]
 8007874:	2b2e      	cmp	r3, #46	; 0x2e
 8007876:	d10c      	bne.n	8007892 <_vfiprintf_r+0x15a>
 8007878:	7863      	ldrb	r3, [r4, #1]
 800787a:	2b2a      	cmp	r3, #42	; 0x2a
 800787c:	d134      	bne.n	80078e8 <_vfiprintf_r+0x1b0>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	1d1a      	adds	r2, r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	9203      	str	r2, [sp, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfb8      	it	lt
 800788a:	f04f 33ff 	movlt.w	r3, #4294967295
 800788e:	3402      	adds	r4, #2
 8007890:	9305      	str	r3, [sp, #20]
 8007892:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007968 <_vfiprintf_r+0x230>
 8007896:	7821      	ldrb	r1, [r4, #0]
 8007898:	2203      	movs	r2, #3
 800789a:	4650      	mov	r0, sl
 800789c:	f7f8 fcb8 	bl	8000210 <memchr>
 80078a0:	b138      	cbz	r0, 80078b2 <_vfiprintf_r+0x17a>
 80078a2:	9b04      	ldr	r3, [sp, #16]
 80078a4:	eba0 000a 	sub.w	r0, r0, sl
 80078a8:	2240      	movs	r2, #64	; 0x40
 80078aa:	4082      	lsls	r2, r0
 80078ac:	4313      	orrs	r3, r2
 80078ae:	3401      	adds	r4, #1
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b6:	4829      	ldr	r0, [pc, #164]	; (800795c <_vfiprintf_r+0x224>)
 80078b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078bc:	2206      	movs	r2, #6
 80078be:	f7f8 fca7 	bl	8000210 <memchr>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d03f      	beq.n	8007946 <_vfiprintf_r+0x20e>
 80078c6:	4b26      	ldr	r3, [pc, #152]	; (8007960 <_vfiprintf_r+0x228>)
 80078c8:	bb1b      	cbnz	r3, 8007912 <_vfiprintf_r+0x1da>
 80078ca:	9b03      	ldr	r3, [sp, #12]
 80078cc:	3307      	adds	r3, #7
 80078ce:	f023 0307 	bic.w	r3, r3, #7
 80078d2:	3308      	adds	r3, #8
 80078d4:	9303      	str	r3, [sp, #12]
 80078d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d8:	443b      	add	r3, r7
 80078da:	9309      	str	r3, [sp, #36]	; 0x24
 80078dc:	e768      	b.n	80077b0 <_vfiprintf_r+0x78>
 80078de:	fb0c 3202 	mla	r2, ip, r2, r3
 80078e2:	460c      	mov	r4, r1
 80078e4:	2001      	movs	r0, #1
 80078e6:	e7a6      	b.n	8007836 <_vfiprintf_r+0xfe>
 80078e8:	2300      	movs	r3, #0
 80078ea:	3401      	adds	r4, #1
 80078ec:	9305      	str	r3, [sp, #20]
 80078ee:	4619      	mov	r1, r3
 80078f0:	f04f 0c0a 	mov.w	ip, #10
 80078f4:	4620      	mov	r0, r4
 80078f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078fa:	3a30      	subs	r2, #48	; 0x30
 80078fc:	2a09      	cmp	r2, #9
 80078fe:	d903      	bls.n	8007908 <_vfiprintf_r+0x1d0>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0c6      	beq.n	8007892 <_vfiprintf_r+0x15a>
 8007904:	9105      	str	r1, [sp, #20]
 8007906:	e7c4      	b.n	8007892 <_vfiprintf_r+0x15a>
 8007908:	fb0c 2101 	mla	r1, ip, r1, r2
 800790c:	4604      	mov	r4, r0
 800790e:	2301      	movs	r3, #1
 8007910:	e7f0      	b.n	80078f4 <_vfiprintf_r+0x1bc>
 8007912:	ab03      	add	r3, sp, #12
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	462a      	mov	r2, r5
 8007918:	4b12      	ldr	r3, [pc, #72]	; (8007964 <_vfiprintf_r+0x22c>)
 800791a:	a904      	add	r1, sp, #16
 800791c:	4630      	mov	r0, r6
 800791e:	f7fd fd65 	bl	80053ec <_printf_float>
 8007922:	4607      	mov	r7, r0
 8007924:	1c78      	adds	r0, r7, #1
 8007926:	d1d6      	bne.n	80078d6 <_vfiprintf_r+0x19e>
 8007928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800792a:	07d9      	lsls	r1, r3, #31
 800792c:	d405      	bmi.n	800793a <_vfiprintf_r+0x202>
 800792e:	89ab      	ldrh	r3, [r5, #12]
 8007930:	059a      	lsls	r2, r3, #22
 8007932:	d402      	bmi.n	800793a <_vfiprintf_r+0x202>
 8007934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007936:	f7fe faa3 	bl	8005e80 <__retarget_lock_release_recursive>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	065b      	lsls	r3, r3, #25
 800793e:	f53f af1d 	bmi.w	800777c <_vfiprintf_r+0x44>
 8007942:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007944:	e71c      	b.n	8007780 <_vfiprintf_r+0x48>
 8007946:	ab03      	add	r3, sp, #12
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	462a      	mov	r2, r5
 800794c:	4b05      	ldr	r3, [pc, #20]	; (8007964 <_vfiprintf_r+0x22c>)
 800794e:	a904      	add	r1, sp, #16
 8007950:	4630      	mov	r0, r6
 8007952:	f7fd ffef 	bl	8005934 <_printf_i>
 8007956:	e7e4      	b.n	8007922 <_vfiprintf_r+0x1ea>
 8007958:	0800971b 	.word	0x0800971b
 800795c:	08009725 	.word	0x08009725
 8007960:	080053ed 	.word	0x080053ed
 8007964:	08007715 	.word	0x08007715
 8007968:	08009721 	.word	0x08009721

0800796c <__swbuf_r>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	460e      	mov	r6, r1
 8007970:	4614      	mov	r4, r2
 8007972:	4605      	mov	r5, r0
 8007974:	b118      	cbz	r0, 800797e <__swbuf_r+0x12>
 8007976:	6a03      	ldr	r3, [r0, #32]
 8007978:	b90b      	cbnz	r3, 800797e <__swbuf_r+0x12>
 800797a:	f7fe f989 	bl	8005c90 <__sinit>
 800797e:	69a3      	ldr	r3, [r4, #24]
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	071a      	lsls	r2, r3, #28
 8007986:	d525      	bpl.n	80079d4 <__swbuf_r+0x68>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	b31b      	cbz	r3, 80079d4 <__swbuf_r+0x68>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	6922      	ldr	r2, [r4, #16]
 8007990:	1a98      	subs	r0, r3, r2
 8007992:	6963      	ldr	r3, [r4, #20]
 8007994:	b2f6      	uxtb	r6, r6
 8007996:	4283      	cmp	r3, r0
 8007998:	4637      	mov	r7, r6
 800799a:	dc04      	bgt.n	80079a6 <__swbuf_r+0x3a>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f7ff fdee 	bl	8007580 <_fflush_r>
 80079a4:	b9e0      	cbnz	r0, 80079e0 <__swbuf_r+0x74>
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	60a3      	str	r3, [r4, #8]
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	6022      	str	r2, [r4, #0]
 80079b2:	701e      	strb	r6, [r3, #0]
 80079b4:	6962      	ldr	r2, [r4, #20]
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d004      	beq.n	80079c6 <__swbuf_r+0x5a>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d506      	bpl.n	80079d0 <__swbuf_r+0x64>
 80079c2:	2e0a      	cmp	r6, #10
 80079c4:	d104      	bne.n	80079d0 <__swbuf_r+0x64>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f7ff fdd9 	bl	8007580 <_fflush_r>
 80079ce:	b938      	cbnz	r0, 80079e0 <__swbuf_r+0x74>
 80079d0:	4638      	mov	r0, r7
 80079d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f806 	bl	80079e8 <__swsetup_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d0d5      	beq.n	800798c <__swbuf_r+0x20>
 80079e0:	f04f 37ff 	mov.w	r7, #4294967295
 80079e4:	e7f4      	b.n	80079d0 <__swbuf_r+0x64>
	...

080079e8 <__swsetup_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	4b2a      	ldr	r3, [pc, #168]	; (8007a94 <__swsetup_r+0xac>)
 80079ec:	4605      	mov	r5, r0
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	460c      	mov	r4, r1
 80079f2:	b118      	cbz	r0, 80079fc <__swsetup_r+0x14>
 80079f4:	6a03      	ldr	r3, [r0, #32]
 80079f6:	b90b      	cbnz	r3, 80079fc <__swsetup_r+0x14>
 80079f8:	f7fe f94a 	bl	8005c90 <__sinit>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a02:	0718      	lsls	r0, r3, #28
 8007a04:	d422      	bmi.n	8007a4c <__swsetup_r+0x64>
 8007a06:	06d9      	lsls	r1, r3, #27
 8007a08:	d407      	bmi.n	8007a1a <__swsetup_r+0x32>
 8007a0a:	2309      	movs	r3, #9
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a12:	81a3      	strh	r3, [r4, #12]
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	e034      	b.n	8007a84 <__swsetup_r+0x9c>
 8007a1a:	0758      	lsls	r0, r3, #29
 8007a1c:	d512      	bpl.n	8007a44 <__swsetup_r+0x5c>
 8007a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a20:	b141      	cbz	r1, 8007a34 <__swsetup_r+0x4c>
 8007a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a26:	4299      	cmp	r1, r3
 8007a28:	d002      	beq.n	8007a30 <__swsetup_r+0x48>
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f7ff f8a6 	bl	8006b7c <_free_r>
 8007a30:	2300      	movs	r3, #0
 8007a32:	6363      	str	r3, [r4, #52]	; 0x34
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6063      	str	r3, [r4, #4]
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f043 0308 	orr.w	r3, r3, #8
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	b94b      	cbnz	r3, 8007a64 <__swsetup_r+0x7c>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a5a:	d003      	beq.n	8007a64 <__swsetup_r+0x7c>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 f884 	bl	8007b6c <__smakebuf_r>
 8007a64:	89a0      	ldrh	r0, [r4, #12]
 8007a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a6a:	f010 0301 	ands.w	r3, r0, #1
 8007a6e:	d00a      	beq.n	8007a86 <__swsetup_r+0x9e>
 8007a70:	2300      	movs	r3, #0
 8007a72:	60a3      	str	r3, [r4, #8]
 8007a74:	6963      	ldr	r3, [r4, #20]
 8007a76:	425b      	negs	r3, r3
 8007a78:	61a3      	str	r3, [r4, #24]
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	b943      	cbnz	r3, 8007a90 <__swsetup_r+0xa8>
 8007a7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a82:	d1c4      	bne.n	8007a0e <__swsetup_r+0x26>
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	0781      	lsls	r1, r0, #30
 8007a88:	bf58      	it	pl
 8007a8a:	6963      	ldrpl	r3, [r4, #20]
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	e7f4      	b.n	8007a7a <__swsetup_r+0x92>
 8007a90:	2000      	movs	r0, #0
 8007a92:	e7f7      	b.n	8007a84 <__swsetup_r+0x9c>
 8007a94:	20000064 	.word	0x20000064

08007a98 <_raise_r>:
 8007a98:	291f      	cmp	r1, #31
 8007a9a:	b538      	push	{r3, r4, r5, lr}
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	460d      	mov	r5, r1
 8007aa0:	d904      	bls.n	8007aac <_raise_r+0x14>
 8007aa2:	2316      	movs	r3, #22
 8007aa4:	6003      	str	r3, [r0, #0]
 8007aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007aae:	b112      	cbz	r2, 8007ab6 <_raise_r+0x1e>
 8007ab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ab4:	b94b      	cbnz	r3, 8007aca <_raise_r+0x32>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 f830 	bl	8007b1c <_getpid_r>
 8007abc:	462a      	mov	r2, r5
 8007abe:	4601      	mov	r1, r0
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac6:	f000 b817 	b.w	8007af8 <_kill_r>
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d00a      	beq.n	8007ae4 <_raise_r+0x4c>
 8007ace:	1c59      	adds	r1, r3, #1
 8007ad0:	d103      	bne.n	8007ada <_raise_r+0x42>
 8007ad2:	2316      	movs	r3, #22
 8007ad4:	6003      	str	r3, [r0, #0]
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	e7e7      	b.n	8007aaa <_raise_r+0x12>
 8007ada:	2400      	movs	r4, #0
 8007adc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	4798      	blx	r3
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	e7e0      	b.n	8007aaa <_raise_r+0x12>

08007ae8 <raise>:
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <raise+0xc>)
 8007aea:	4601      	mov	r1, r0
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f7ff bfd3 	b.w	8007a98 <_raise_r>
 8007af2:	bf00      	nop
 8007af4:	20000064 	.word	0x20000064

08007af8 <_kill_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d07      	ldr	r5, [pc, #28]	; (8007b18 <_kill_r+0x20>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	4611      	mov	r1, r2
 8007b04:	602b      	str	r3, [r5, #0]
 8007b06:	f7fa f905 	bl	8001d14 <_kill>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	d102      	bne.n	8007b14 <_kill_r+0x1c>
 8007b0e:	682b      	ldr	r3, [r5, #0]
 8007b10:	b103      	cbz	r3, 8007b14 <_kill_r+0x1c>
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	bd38      	pop	{r3, r4, r5, pc}
 8007b16:	bf00      	nop
 8007b18:	20000548 	.word	0x20000548

08007b1c <_getpid_r>:
 8007b1c:	f7fa b8f2 	b.w	8001d04 <_getpid>

08007b20 <__swhatbuf_r>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	460c      	mov	r4, r1
 8007b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	b096      	sub	sp, #88	; 0x58
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	461e      	mov	r6, r3
 8007b30:	da0d      	bge.n	8007b4e <__swhatbuf_r+0x2e>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b38:	f04f 0100 	mov.w	r1, #0
 8007b3c:	bf0c      	ite	eq
 8007b3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b42:	2340      	movne	r3, #64	; 0x40
 8007b44:	2000      	movs	r0, #0
 8007b46:	6031      	str	r1, [r6, #0]
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	b016      	add	sp, #88	; 0x58
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
 8007b4e:	466a      	mov	r2, sp
 8007b50:	f000 f848 	bl	8007be4 <_fstat_r>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	dbec      	blt.n	8007b32 <__swhatbuf_r+0x12>
 8007b58:	9901      	ldr	r1, [sp, #4]
 8007b5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b62:	4259      	negs	r1, r3
 8007b64:	4159      	adcs	r1, r3
 8007b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b6a:	e7eb      	b.n	8007b44 <__swhatbuf_r+0x24>

08007b6c <__smakebuf_r>:
 8007b6c:	898b      	ldrh	r3, [r1, #12]
 8007b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b70:	079d      	lsls	r5, r3, #30
 8007b72:	4606      	mov	r6, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	d507      	bpl.n	8007b88 <__smakebuf_r+0x1c>
 8007b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	2301      	movs	r3, #1
 8007b82:	6163      	str	r3, [r4, #20]
 8007b84:	b002      	add	sp, #8
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	ab01      	add	r3, sp, #4
 8007b8a:	466a      	mov	r2, sp
 8007b8c:	f7ff ffc8 	bl	8007b20 <__swhatbuf_r>
 8007b90:	9900      	ldr	r1, [sp, #0]
 8007b92:	4605      	mov	r5, r0
 8007b94:	4630      	mov	r0, r6
 8007b96:	f7ff f865 	bl	8006c64 <_malloc_r>
 8007b9a:	b948      	cbnz	r0, 8007bb0 <__smakebuf_r+0x44>
 8007b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ba0:	059a      	lsls	r2, r3, #22
 8007ba2:	d4ef      	bmi.n	8007b84 <__smakebuf_r+0x18>
 8007ba4:	f023 0303 	bic.w	r3, r3, #3
 8007ba8:	f043 0302 	orr.w	r3, r3, #2
 8007bac:	81a3      	strh	r3, [r4, #12]
 8007bae:	e7e3      	b.n	8007b78 <__smakebuf_r+0xc>
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	6020      	str	r0, [r4, #0]
 8007bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	6163      	str	r3, [r4, #20]
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	6120      	str	r0, [r4, #16]
 8007bc2:	b15b      	cbz	r3, 8007bdc <__smakebuf_r+0x70>
 8007bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 f81d 	bl	8007c08 <_isatty_r>
 8007bce:	b128      	cbz	r0, 8007bdc <__smakebuf_r+0x70>
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	431d      	orrs	r5, r3
 8007be0:	81a5      	strh	r5, [r4, #12]
 8007be2:	e7cf      	b.n	8007b84 <__smakebuf_r+0x18>

08007be4 <_fstat_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4d07      	ldr	r5, [pc, #28]	; (8007c04 <_fstat_r+0x20>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	4604      	mov	r4, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	602b      	str	r3, [r5, #0]
 8007bf2:	f7fa f8ee 	bl	8001dd2 <_fstat>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	d102      	bne.n	8007c00 <_fstat_r+0x1c>
 8007bfa:	682b      	ldr	r3, [r5, #0]
 8007bfc:	b103      	cbz	r3, 8007c00 <_fstat_r+0x1c>
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	bd38      	pop	{r3, r4, r5, pc}
 8007c02:	bf00      	nop
 8007c04:	20000548 	.word	0x20000548

08007c08 <_isatty_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d06      	ldr	r5, [pc, #24]	; (8007c24 <_isatty_r+0x1c>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	f7fa f8ed 	bl	8001df2 <_isatty>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_isatty_r+0x1a>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_isatty_r+0x1a>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	20000548 	.word	0x20000548

08007c28 <atan2>:
 8007c28:	f000 bae6 	b.w	80081f8 <__ieee754_atan2>

08007c2c <sqrt>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	ed2d 8b02 	vpush	{d8}
 8007c32:	ec55 4b10 	vmov	r4, r5, d0
 8007c36:	f000 f87b 	bl	8007d30 <__ieee754_sqrt>
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	eeb0 8a40 	vmov.f32	s16, s0
 8007c46:	eef0 8a60 	vmov.f32	s17, s1
 8007c4a:	f7f8 ff8f 	bl	8000b6c <__aeabi_dcmpun>
 8007c4e:	b990      	cbnz	r0, 8007c76 <sqrt+0x4a>
 8007c50:	2200      	movs	r2, #0
 8007c52:	2300      	movs	r3, #0
 8007c54:	4620      	mov	r0, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	f7f8 ff60 	bl	8000b1c <__aeabi_dcmplt>
 8007c5c:	b158      	cbz	r0, 8007c76 <sqrt+0x4a>
 8007c5e:	f7fe f8e3 	bl	8005e28 <__errno>
 8007c62:	2321      	movs	r3, #33	; 0x21
 8007c64:	6003      	str	r3, [r0, #0]
 8007c66:	2200      	movs	r2, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	f7f8 fe0d 	bl	800088c <__aeabi_ddiv>
 8007c72:	ec41 0b18 	vmov	d8, r0, r1
 8007c76:	eeb0 0a48 	vmov.f32	s0, s16
 8007c7a:	eef0 0a68 	vmov.f32	s1, s17
 8007c7e:	ecbd 8b02 	vpop	{d8}
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	0000      	movs	r0, r0
	...

08007c88 <cos>:
 8007c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c8a:	ec53 2b10 	vmov	r2, r3, d0
 8007c8e:	4826      	ldr	r0, [pc, #152]	; (8007d28 <cos+0xa0>)
 8007c90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c94:	4281      	cmp	r1, r0
 8007c96:	dc06      	bgt.n	8007ca6 <cos+0x1e>
 8007c98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007d20 <cos+0x98>
 8007c9c:	b005      	add	sp, #20
 8007c9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ca2:	f000 b921 	b.w	8007ee8 <__kernel_cos>
 8007ca6:	4821      	ldr	r0, [pc, #132]	; (8007d2c <cos+0xa4>)
 8007ca8:	4281      	cmp	r1, r0
 8007caa:	dd09      	ble.n	8007cc0 <cos+0x38>
 8007cac:	ee10 0a10 	vmov	r0, s0
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	f7f8 fb09 	bl	80002c8 <__aeabi_dsub>
 8007cb6:	ec41 0b10 	vmov	d0, r0, r1
 8007cba:	b005      	add	sp, #20
 8007cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cc0:	4668      	mov	r0, sp
 8007cc2:	f000 fb61 	bl	8008388 <__ieee754_rem_pio2>
 8007cc6:	f000 0003 	and.w	r0, r0, #3
 8007cca:	2801      	cmp	r0, #1
 8007ccc:	d00b      	beq.n	8007ce6 <cos+0x5e>
 8007cce:	2802      	cmp	r0, #2
 8007cd0:	d016      	beq.n	8007d00 <cos+0x78>
 8007cd2:	b9e0      	cbnz	r0, 8007d0e <cos+0x86>
 8007cd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cd8:	ed9d 0b00 	vldr	d0, [sp]
 8007cdc:	f000 f904 	bl	8007ee8 <__kernel_cos>
 8007ce0:	ec51 0b10 	vmov	r0, r1, d0
 8007ce4:	e7e7      	b.n	8007cb6 <cos+0x2e>
 8007ce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cea:	ed9d 0b00 	vldr	d0, [sp]
 8007cee:	f000 f9c3 	bl	8008078 <__kernel_sin>
 8007cf2:	ec53 2b10 	vmov	r2, r3, d0
 8007cf6:	ee10 0a10 	vmov	r0, s0
 8007cfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007cfe:	e7da      	b.n	8007cb6 <cos+0x2e>
 8007d00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d04:	ed9d 0b00 	vldr	d0, [sp]
 8007d08:	f000 f8ee 	bl	8007ee8 <__kernel_cos>
 8007d0c:	e7f1      	b.n	8007cf2 <cos+0x6a>
 8007d0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d12:	ed9d 0b00 	vldr	d0, [sp]
 8007d16:	2001      	movs	r0, #1
 8007d18:	f000 f9ae 	bl	8008078 <__kernel_sin>
 8007d1c:	e7e0      	b.n	8007ce0 <cos+0x58>
 8007d1e:	bf00      	nop
	...
 8007d28:	3fe921fb 	.word	0x3fe921fb
 8007d2c:	7fefffff 	.word	0x7fefffff

08007d30 <__ieee754_sqrt>:
 8007d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	ec55 4b10 	vmov	r4, r5, d0
 8007d38:	4e67      	ldr	r6, [pc, #412]	; (8007ed8 <__ieee754_sqrt+0x1a8>)
 8007d3a:	43ae      	bics	r6, r5
 8007d3c:	ee10 0a10 	vmov	r0, s0
 8007d40:	ee10 2a10 	vmov	r2, s0
 8007d44:	4629      	mov	r1, r5
 8007d46:	462b      	mov	r3, r5
 8007d48:	d10d      	bne.n	8007d66 <__ieee754_sqrt+0x36>
 8007d4a:	f7f8 fc75 	bl	8000638 <__aeabi_dmul>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7f8 fab9 	bl	80002cc <__adddf3>
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	ec45 4b10 	vmov	d0, r4, r5
 8007d62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	dc0b      	bgt.n	8007d82 <__ieee754_sqrt+0x52>
 8007d6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007d6e:	4326      	orrs	r6, r4
 8007d70:	d0f5      	beq.n	8007d5e <__ieee754_sqrt+0x2e>
 8007d72:	b135      	cbz	r5, 8007d82 <__ieee754_sqrt+0x52>
 8007d74:	f7f8 faa8 	bl	80002c8 <__aeabi_dsub>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	f7f8 fd86 	bl	800088c <__aeabi_ddiv>
 8007d80:	e7eb      	b.n	8007d5a <__ieee754_sqrt+0x2a>
 8007d82:	1509      	asrs	r1, r1, #20
 8007d84:	f000 808d 	beq.w	8007ea2 <__ieee754_sqrt+0x172>
 8007d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d8c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d94:	07c9      	lsls	r1, r1, #31
 8007d96:	bf5c      	itt	pl
 8007d98:	005b      	lslpl	r3, r3, #1
 8007d9a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007d9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007da2:	bf58      	it	pl
 8007da4:	0052      	lslpl	r2, r2, #1
 8007da6:	2500      	movs	r5, #0
 8007da8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007dac:	1076      	asrs	r6, r6, #1
 8007dae:	0052      	lsls	r2, r2, #1
 8007db0:	f04f 0e16 	mov.w	lr, #22
 8007db4:	46ac      	mov	ip, r5
 8007db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dba:	eb0c 0001 	add.w	r0, ip, r1
 8007dbe:	4298      	cmp	r0, r3
 8007dc0:	bfde      	ittt	le
 8007dc2:	1a1b      	suble	r3, r3, r0
 8007dc4:	eb00 0c01 	addle.w	ip, r0, r1
 8007dc8:	186d      	addle	r5, r5, r1
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	f1be 0e01 	subs.w	lr, lr, #1
 8007dd0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007dd4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007dd8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007ddc:	d1ed      	bne.n	8007dba <__ieee754_sqrt+0x8a>
 8007dde:	4674      	mov	r4, lr
 8007de0:	2720      	movs	r7, #32
 8007de2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007de6:	4563      	cmp	r3, ip
 8007de8:	eb01 000e 	add.w	r0, r1, lr
 8007dec:	dc02      	bgt.n	8007df4 <__ieee754_sqrt+0xc4>
 8007dee:	d113      	bne.n	8007e18 <__ieee754_sqrt+0xe8>
 8007df0:	4290      	cmp	r0, r2
 8007df2:	d811      	bhi.n	8007e18 <__ieee754_sqrt+0xe8>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	eb00 0e01 	add.w	lr, r0, r1
 8007dfa:	da57      	bge.n	8007eac <__ieee754_sqrt+0x17c>
 8007dfc:	f1be 0f00 	cmp.w	lr, #0
 8007e00:	db54      	blt.n	8007eac <__ieee754_sqrt+0x17c>
 8007e02:	f10c 0801 	add.w	r8, ip, #1
 8007e06:	eba3 030c 	sub.w	r3, r3, ip
 8007e0a:	4290      	cmp	r0, r2
 8007e0c:	bf88      	it	hi
 8007e0e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007e12:	1a12      	subs	r2, r2, r0
 8007e14:	440c      	add	r4, r1
 8007e16:	46c4      	mov	ip, r8
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	3f01      	subs	r7, #1
 8007e1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e20:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007e24:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007e28:	d1dd      	bne.n	8007de6 <__ieee754_sqrt+0xb6>
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	d01b      	beq.n	8007e66 <__ieee754_sqrt+0x136>
 8007e2e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007edc <__ieee754_sqrt+0x1ac>
 8007e32:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007ee0 <__ieee754_sqrt+0x1b0>
 8007e36:	e9da 0100 	ldrd	r0, r1, [sl]
 8007e3a:	e9db 2300 	ldrd	r2, r3, [fp]
 8007e3e:	f7f8 fa43 	bl	80002c8 <__aeabi_dsub>
 8007e42:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fe6f 	bl	8000b30 <__aeabi_dcmple>
 8007e52:	b140      	cbz	r0, 8007e66 <__ieee754_sqrt+0x136>
 8007e54:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007e58:	e9da 0100 	ldrd	r0, r1, [sl]
 8007e5c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007e60:	d126      	bne.n	8007eb0 <__ieee754_sqrt+0x180>
 8007e62:	3501      	adds	r5, #1
 8007e64:	463c      	mov	r4, r7
 8007e66:	106a      	asrs	r2, r5, #1
 8007e68:	0863      	lsrs	r3, r4, #1
 8007e6a:	07e9      	lsls	r1, r5, #31
 8007e6c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007e70:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007e74:	bf48      	it	mi
 8007e76:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007e7a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007e7e:	461c      	mov	r4, r3
 8007e80:	e76d      	b.n	8007d5e <__ieee754_sqrt+0x2e>
 8007e82:	0ad3      	lsrs	r3, r2, #11
 8007e84:	3815      	subs	r0, #21
 8007e86:	0552      	lsls	r2, r2, #21
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0fa      	beq.n	8007e82 <__ieee754_sqrt+0x152>
 8007e8c:	02dc      	lsls	r4, r3, #11
 8007e8e:	d50a      	bpl.n	8007ea6 <__ieee754_sqrt+0x176>
 8007e90:	f1c1 0420 	rsb	r4, r1, #32
 8007e94:	fa22 f404 	lsr.w	r4, r2, r4
 8007e98:	1e4d      	subs	r5, r1, #1
 8007e9a:	408a      	lsls	r2, r1
 8007e9c:	4323      	orrs	r3, r4
 8007e9e:	1b41      	subs	r1, r0, r5
 8007ea0:	e772      	b.n	8007d88 <__ieee754_sqrt+0x58>
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	e7f0      	b.n	8007e88 <__ieee754_sqrt+0x158>
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	3101      	adds	r1, #1
 8007eaa:	e7ef      	b.n	8007e8c <__ieee754_sqrt+0x15c>
 8007eac:	46e0      	mov	r8, ip
 8007eae:	e7aa      	b.n	8007e06 <__ieee754_sqrt+0xd6>
 8007eb0:	f7f8 fa0c 	bl	80002cc <__adddf3>
 8007eb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8007ec4:	b120      	cbz	r0, 8007ed0 <__ieee754_sqrt+0x1a0>
 8007ec6:	1ca0      	adds	r0, r4, #2
 8007ec8:	bf08      	it	eq
 8007eca:	3501      	addeq	r5, #1
 8007ecc:	3402      	adds	r4, #2
 8007ece:	e7ca      	b.n	8007e66 <__ieee754_sqrt+0x136>
 8007ed0:	3401      	adds	r4, #1
 8007ed2:	f024 0401 	bic.w	r4, r4, #1
 8007ed6:	e7c6      	b.n	8007e66 <__ieee754_sqrt+0x136>
 8007ed8:	7ff00000 	.word	0x7ff00000
 8007edc:	200001d8 	.word	0x200001d8
 8007ee0:	200001e0 	.word	0x200001e0
 8007ee4:	00000000 	.word	0x00000000

08007ee8 <__kernel_cos>:
 8007ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	ec57 6b10 	vmov	r6, r7, d0
 8007ef0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007ef4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007ef8:	ed8d 1b00 	vstr	d1, [sp]
 8007efc:	da07      	bge.n	8007f0e <__kernel_cos+0x26>
 8007efe:	ee10 0a10 	vmov	r0, s0
 8007f02:	4639      	mov	r1, r7
 8007f04:	f7f8 fe48 	bl	8000b98 <__aeabi_d2iz>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f000 8088 	beq.w	800801e <__kernel_cos+0x136>
 8007f0e:	4632      	mov	r2, r6
 8007f10:	463b      	mov	r3, r7
 8007f12:	4630      	mov	r0, r6
 8007f14:	4639      	mov	r1, r7
 8007f16:	f7f8 fb8f 	bl	8000638 <__aeabi_dmul>
 8007f1a:	4b51      	ldr	r3, [pc, #324]	; (8008060 <__kernel_cos+0x178>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	460d      	mov	r5, r1
 8007f22:	f7f8 fb89 	bl	8000638 <__aeabi_dmul>
 8007f26:	a340      	add	r3, pc, #256	; (adr r3, 8008028 <__kernel_cos+0x140>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	468b      	mov	fp, r1
 8007f30:	4620      	mov	r0, r4
 8007f32:	4629      	mov	r1, r5
 8007f34:	f7f8 fb80 	bl	8000638 <__aeabi_dmul>
 8007f38:	a33d      	add	r3, pc, #244	; (adr r3, 8008030 <__kernel_cos+0x148>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 f9c5 	bl	80002cc <__adddf3>
 8007f42:	4622      	mov	r2, r4
 8007f44:	462b      	mov	r3, r5
 8007f46:	f7f8 fb77 	bl	8000638 <__aeabi_dmul>
 8007f4a:	a33b      	add	r3, pc, #236	; (adr r3, 8008038 <__kernel_cos+0x150>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 f9ba 	bl	80002c8 <__aeabi_dsub>
 8007f54:	4622      	mov	r2, r4
 8007f56:	462b      	mov	r3, r5
 8007f58:	f7f8 fb6e 	bl	8000638 <__aeabi_dmul>
 8007f5c:	a338      	add	r3, pc, #224	; (adr r3, 8008040 <__kernel_cos+0x158>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f9b3 	bl	80002cc <__adddf3>
 8007f66:	4622      	mov	r2, r4
 8007f68:	462b      	mov	r3, r5
 8007f6a:	f7f8 fb65 	bl	8000638 <__aeabi_dmul>
 8007f6e:	a336      	add	r3, pc, #216	; (adr r3, 8008048 <__kernel_cos+0x160>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 f9a8 	bl	80002c8 <__aeabi_dsub>
 8007f78:	4622      	mov	r2, r4
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	f7f8 fb5c 	bl	8000638 <__aeabi_dmul>
 8007f80:	a333      	add	r3, pc, #204	; (adr r3, 8008050 <__kernel_cos+0x168>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f9a1 	bl	80002cc <__adddf3>
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	f7f8 fb53 	bl	8000638 <__aeabi_dmul>
 8007f92:	4622      	mov	r2, r4
 8007f94:	462b      	mov	r3, r5
 8007f96:	f7f8 fb4f 	bl	8000638 <__aeabi_dmul>
 8007f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f7f8 fb47 	bl	8000638 <__aeabi_dmul>
 8007faa:	460b      	mov	r3, r1
 8007fac:	4602      	mov	r2, r0
 8007fae:	4629      	mov	r1, r5
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f7f8 f989 	bl	80002c8 <__aeabi_dsub>
 8007fb6:	4b2b      	ldr	r3, [pc, #172]	; (8008064 <__kernel_cos+0x17c>)
 8007fb8:	4598      	cmp	r8, r3
 8007fba:	4606      	mov	r6, r0
 8007fbc:	460f      	mov	r7, r1
 8007fbe:	dc10      	bgt.n	8007fe2 <__kernel_cos+0xfa>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4650      	mov	r0, sl
 8007fc6:	4659      	mov	r1, fp
 8007fc8:	f7f8 f97e 	bl	80002c8 <__aeabi_dsub>
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4926      	ldr	r1, [pc, #152]	; (8008068 <__kernel_cos+0x180>)
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	f7f8 f978 	bl	80002c8 <__aeabi_dsub>
 8007fd8:	ec41 0b10 	vmov	d0, r0, r1
 8007fdc:	b003      	add	sp, #12
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe2:	4b22      	ldr	r3, [pc, #136]	; (800806c <__kernel_cos+0x184>)
 8007fe4:	4920      	ldr	r1, [pc, #128]	; (8008068 <__kernel_cos+0x180>)
 8007fe6:	4598      	cmp	r8, r3
 8007fe8:	bfcc      	ite	gt
 8007fea:	4d21      	ldrgt	r5, [pc, #132]	; (8008070 <__kernel_cos+0x188>)
 8007fec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007ff0:	2400      	movs	r4, #0
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	462b      	mov	r3, r5
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	f7f8 f966 	bl	80002c8 <__aeabi_dsub>
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	4680      	mov	r8, r0
 8008000:	4689      	mov	r9, r1
 8008002:	462b      	mov	r3, r5
 8008004:	4650      	mov	r0, sl
 8008006:	4659      	mov	r1, fp
 8008008:	f7f8 f95e 	bl	80002c8 <__aeabi_dsub>
 800800c:	4632      	mov	r2, r6
 800800e:	463b      	mov	r3, r7
 8008010:	f7f8 f95a 	bl	80002c8 <__aeabi_dsub>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4640      	mov	r0, r8
 800801a:	4649      	mov	r1, r9
 800801c:	e7da      	b.n	8007fd4 <__kernel_cos+0xec>
 800801e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008058 <__kernel_cos+0x170>
 8008022:	e7db      	b.n	8007fdc <__kernel_cos+0xf4>
 8008024:	f3af 8000 	nop.w
 8008028:	be8838d4 	.word	0xbe8838d4
 800802c:	bda8fae9 	.word	0xbda8fae9
 8008030:	bdb4b1c4 	.word	0xbdb4b1c4
 8008034:	3e21ee9e 	.word	0x3e21ee9e
 8008038:	809c52ad 	.word	0x809c52ad
 800803c:	3e927e4f 	.word	0x3e927e4f
 8008040:	19cb1590 	.word	0x19cb1590
 8008044:	3efa01a0 	.word	0x3efa01a0
 8008048:	16c15177 	.word	0x16c15177
 800804c:	3f56c16c 	.word	0x3f56c16c
 8008050:	5555554c 	.word	0x5555554c
 8008054:	3fa55555 	.word	0x3fa55555
 8008058:	00000000 	.word	0x00000000
 800805c:	3ff00000 	.word	0x3ff00000
 8008060:	3fe00000 	.word	0x3fe00000
 8008064:	3fd33332 	.word	0x3fd33332
 8008068:	3ff00000 	.word	0x3ff00000
 800806c:	3fe90000 	.word	0x3fe90000
 8008070:	3fd20000 	.word	0x3fd20000
 8008074:	00000000 	.word	0x00000000

08008078 <__kernel_sin>:
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	ed2d 8b04 	vpush	{d8-d9}
 8008080:	eeb0 8a41 	vmov.f32	s16, s2
 8008084:	eef0 8a61 	vmov.f32	s17, s3
 8008088:	ec55 4b10 	vmov	r4, r5, d0
 800808c:	b083      	sub	sp, #12
 800808e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008092:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008096:	9001      	str	r0, [sp, #4]
 8008098:	da06      	bge.n	80080a8 <__kernel_sin+0x30>
 800809a:	ee10 0a10 	vmov	r0, s0
 800809e:	4629      	mov	r1, r5
 80080a0:	f7f8 fd7a 	bl	8000b98 <__aeabi_d2iz>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d051      	beq.n	800814c <__kernel_sin+0xd4>
 80080a8:	4622      	mov	r2, r4
 80080aa:	462b      	mov	r3, r5
 80080ac:	4620      	mov	r0, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	f7f8 fac2 	bl	8000638 <__aeabi_dmul>
 80080b4:	4682      	mov	sl, r0
 80080b6:	468b      	mov	fp, r1
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4620      	mov	r0, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	f7f8 faba 	bl	8000638 <__aeabi_dmul>
 80080c4:	a341      	add	r3, pc, #260	; (adr r3, 80081cc <__kernel_sin+0x154>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	4680      	mov	r8, r0
 80080cc:	4689      	mov	r9, r1
 80080ce:	4650      	mov	r0, sl
 80080d0:	4659      	mov	r1, fp
 80080d2:	f7f8 fab1 	bl	8000638 <__aeabi_dmul>
 80080d6:	a33f      	add	r3, pc, #252	; (adr r3, 80081d4 <__kernel_sin+0x15c>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 f8f4 	bl	80002c8 <__aeabi_dsub>
 80080e0:	4652      	mov	r2, sl
 80080e2:	465b      	mov	r3, fp
 80080e4:	f7f8 faa8 	bl	8000638 <__aeabi_dmul>
 80080e8:	a33c      	add	r3, pc, #240	; (adr r3, 80081dc <__kernel_sin+0x164>)
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	f7f8 f8ed 	bl	80002cc <__adddf3>
 80080f2:	4652      	mov	r2, sl
 80080f4:	465b      	mov	r3, fp
 80080f6:	f7f8 fa9f 	bl	8000638 <__aeabi_dmul>
 80080fa:	a33a      	add	r3, pc, #232	; (adr r3, 80081e4 <__kernel_sin+0x16c>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f7f8 f8e2 	bl	80002c8 <__aeabi_dsub>
 8008104:	4652      	mov	r2, sl
 8008106:	465b      	mov	r3, fp
 8008108:	f7f8 fa96 	bl	8000638 <__aeabi_dmul>
 800810c:	a337      	add	r3, pc, #220	; (adr r3, 80081ec <__kernel_sin+0x174>)
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	f7f8 f8db 	bl	80002cc <__adddf3>
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	4606      	mov	r6, r0
 800811a:	460f      	mov	r7, r1
 800811c:	b9eb      	cbnz	r3, 800815a <__kernel_sin+0xe2>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4650      	mov	r0, sl
 8008124:	4659      	mov	r1, fp
 8008126:	f7f8 fa87 	bl	8000638 <__aeabi_dmul>
 800812a:	a325      	add	r3, pc, #148	; (adr r3, 80081c0 <__kernel_sin+0x148>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 f8ca 	bl	80002c8 <__aeabi_dsub>
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	f7f8 fa7e 	bl	8000638 <__aeabi_dmul>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4620      	mov	r0, r4
 8008142:	4629      	mov	r1, r5
 8008144:	f7f8 f8c2 	bl	80002cc <__adddf3>
 8008148:	4604      	mov	r4, r0
 800814a:	460d      	mov	r5, r1
 800814c:	ec45 4b10 	vmov	d0, r4, r5
 8008150:	b003      	add	sp, #12
 8008152:	ecbd 8b04 	vpop	{d8-d9}
 8008156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815a:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <__kernel_sin+0x150>)
 800815c:	ec51 0b18 	vmov	r0, r1, d8
 8008160:	2200      	movs	r2, #0
 8008162:	f7f8 fa69 	bl	8000638 <__aeabi_dmul>
 8008166:	4632      	mov	r2, r6
 8008168:	ec41 0b19 	vmov	d9, r0, r1
 800816c:	463b      	mov	r3, r7
 800816e:	4640      	mov	r0, r8
 8008170:	4649      	mov	r1, r9
 8008172:	f7f8 fa61 	bl	8000638 <__aeabi_dmul>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	ec51 0b19 	vmov	r0, r1, d9
 800817e:	f7f8 f8a3 	bl	80002c8 <__aeabi_dsub>
 8008182:	4652      	mov	r2, sl
 8008184:	465b      	mov	r3, fp
 8008186:	f7f8 fa57 	bl	8000638 <__aeabi_dmul>
 800818a:	ec53 2b18 	vmov	r2, r3, d8
 800818e:	f7f8 f89b 	bl	80002c8 <__aeabi_dsub>
 8008192:	a30b      	add	r3, pc, #44	; (adr r3, 80081c0 <__kernel_sin+0x148>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	4640      	mov	r0, r8
 800819e:	4649      	mov	r1, r9
 80081a0:	f7f8 fa4a 	bl	8000638 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 f88e 	bl	80002cc <__adddf3>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4620      	mov	r0, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	f7f8 f886 	bl	80002c8 <__aeabi_dsub>
 80081bc:	e7c4      	b.n	8008148 <__kernel_sin+0xd0>
 80081be:	bf00      	nop
 80081c0:	55555549 	.word	0x55555549
 80081c4:	3fc55555 	.word	0x3fc55555
 80081c8:	3fe00000 	.word	0x3fe00000
 80081cc:	5acfd57c 	.word	0x5acfd57c
 80081d0:	3de5d93a 	.word	0x3de5d93a
 80081d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80081d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80081dc:	57b1fe7d 	.word	0x57b1fe7d
 80081e0:	3ec71de3 	.word	0x3ec71de3
 80081e4:	19c161d5 	.word	0x19c161d5
 80081e8:	3f2a01a0 	.word	0x3f2a01a0
 80081ec:	1110f8a6 	.word	0x1110f8a6
 80081f0:	3f811111 	.word	0x3f811111
 80081f4:	00000000 	.word	0x00000000

080081f8 <__ieee754_atan2>:
 80081f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081fc:	ec57 6b11 	vmov	r6, r7, d1
 8008200:	4273      	negs	r3, r6
 8008202:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008380 <__ieee754_atan2+0x188>
 8008206:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800820a:	4333      	orrs	r3, r6
 800820c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008210:	4543      	cmp	r3, r8
 8008212:	ec51 0b10 	vmov	r0, r1, d0
 8008216:	ee11 5a10 	vmov	r5, s2
 800821a:	d80a      	bhi.n	8008232 <__ieee754_atan2+0x3a>
 800821c:	4244      	negs	r4, r0
 800821e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008222:	4304      	orrs	r4, r0
 8008224:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008228:	4544      	cmp	r4, r8
 800822a:	ee10 9a10 	vmov	r9, s0
 800822e:	468e      	mov	lr, r1
 8008230:	d907      	bls.n	8008242 <__ieee754_atan2+0x4a>
 8008232:	4632      	mov	r2, r6
 8008234:	463b      	mov	r3, r7
 8008236:	f7f8 f849 	bl	80002cc <__adddf3>
 800823a:	ec41 0b10 	vmov	d0, r0, r1
 800823e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008242:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008246:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800824a:	4334      	orrs	r4, r6
 800824c:	d103      	bne.n	8008256 <__ieee754_atan2+0x5e>
 800824e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008252:	f000 baa1 	b.w	8008798 <atan>
 8008256:	17bc      	asrs	r4, r7, #30
 8008258:	f004 0402 	and.w	r4, r4, #2
 800825c:	ea53 0909 	orrs.w	r9, r3, r9
 8008260:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008264:	d107      	bne.n	8008276 <__ieee754_atan2+0x7e>
 8008266:	2c02      	cmp	r4, #2
 8008268:	d05f      	beq.n	800832a <__ieee754_atan2+0x132>
 800826a:	2c03      	cmp	r4, #3
 800826c:	d1e5      	bne.n	800823a <__ieee754_atan2+0x42>
 800826e:	a140      	add	r1, pc, #256	; (adr r1, 8008370 <__ieee754_atan2+0x178>)
 8008270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008274:	e7e1      	b.n	800823a <__ieee754_atan2+0x42>
 8008276:	4315      	orrs	r5, r2
 8008278:	d106      	bne.n	8008288 <__ieee754_atan2+0x90>
 800827a:	f1be 0f00 	cmp.w	lr, #0
 800827e:	da5f      	bge.n	8008340 <__ieee754_atan2+0x148>
 8008280:	a13d      	add	r1, pc, #244	; (adr r1, 8008378 <__ieee754_atan2+0x180>)
 8008282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008286:	e7d8      	b.n	800823a <__ieee754_atan2+0x42>
 8008288:	4542      	cmp	r2, r8
 800828a:	d10f      	bne.n	80082ac <__ieee754_atan2+0xb4>
 800828c:	4293      	cmp	r3, r2
 800828e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008292:	d107      	bne.n	80082a4 <__ieee754_atan2+0xac>
 8008294:	2c02      	cmp	r4, #2
 8008296:	d84c      	bhi.n	8008332 <__ieee754_atan2+0x13a>
 8008298:	4b33      	ldr	r3, [pc, #204]	; (8008368 <__ieee754_atan2+0x170>)
 800829a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800829e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082a2:	e7ca      	b.n	800823a <__ieee754_atan2+0x42>
 80082a4:	2c02      	cmp	r4, #2
 80082a6:	d848      	bhi.n	800833a <__ieee754_atan2+0x142>
 80082a8:	4b30      	ldr	r3, [pc, #192]	; (800836c <__ieee754_atan2+0x174>)
 80082aa:	e7f6      	b.n	800829a <__ieee754_atan2+0xa2>
 80082ac:	4543      	cmp	r3, r8
 80082ae:	d0e4      	beq.n	800827a <__ieee754_atan2+0x82>
 80082b0:	1a9b      	subs	r3, r3, r2
 80082b2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80082b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082ba:	da1e      	bge.n	80082fa <__ieee754_atan2+0x102>
 80082bc:	2f00      	cmp	r7, #0
 80082be:	da01      	bge.n	80082c4 <__ieee754_atan2+0xcc>
 80082c0:	323c      	adds	r2, #60	; 0x3c
 80082c2:	db1e      	blt.n	8008302 <__ieee754_atan2+0x10a>
 80082c4:	4632      	mov	r2, r6
 80082c6:	463b      	mov	r3, r7
 80082c8:	f7f8 fae0 	bl	800088c <__aeabi_ddiv>
 80082cc:	ec41 0b10 	vmov	d0, r0, r1
 80082d0:	f000 fc02 	bl	8008ad8 <fabs>
 80082d4:	f000 fa60 	bl	8008798 <atan>
 80082d8:	ec51 0b10 	vmov	r0, r1, d0
 80082dc:	2c01      	cmp	r4, #1
 80082de:	d013      	beq.n	8008308 <__ieee754_atan2+0x110>
 80082e0:	2c02      	cmp	r4, #2
 80082e2:	d015      	beq.n	8008310 <__ieee754_atan2+0x118>
 80082e4:	2c00      	cmp	r4, #0
 80082e6:	d0a8      	beq.n	800823a <__ieee754_atan2+0x42>
 80082e8:	a317      	add	r3, pc, #92	; (adr r3, 8008348 <__ieee754_atan2+0x150>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f7 ffeb 	bl	80002c8 <__aeabi_dsub>
 80082f2:	a317      	add	r3, pc, #92	; (adr r3, 8008350 <__ieee754_atan2+0x158>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	e014      	b.n	8008324 <__ieee754_atan2+0x12c>
 80082fa:	a117      	add	r1, pc, #92	; (adr r1, 8008358 <__ieee754_atan2+0x160>)
 80082fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008300:	e7ec      	b.n	80082dc <__ieee754_atan2+0xe4>
 8008302:	2000      	movs	r0, #0
 8008304:	2100      	movs	r1, #0
 8008306:	e7e9      	b.n	80082dc <__ieee754_atan2+0xe4>
 8008308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800830c:	4619      	mov	r1, r3
 800830e:	e794      	b.n	800823a <__ieee754_atan2+0x42>
 8008310:	a30d      	add	r3, pc, #52	; (adr r3, 8008348 <__ieee754_atan2+0x150>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f7 ffd7 	bl	80002c8 <__aeabi_dsub>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	a10c      	add	r1, pc, #48	; (adr r1, 8008350 <__ieee754_atan2+0x158>)
 8008320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008324:	f7f7 ffd0 	bl	80002c8 <__aeabi_dsub>
 8008328:	e787      	b.n	800823a <__ieee754_atan2+0x42>
 800832a:	a109      	add	r1, pc, #36	; (adr r1, 8008350 <__ieee754_atan2+0x158>)
 800832c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008330:	e783      	b.n	800823a <__ieee754_atan2+0x42>
 8008332:	a10b      	add	r1, pc, #44	; (adr r1, 8008360 <__ieee754_atan2+0x168>)
 8008334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008338:	e77f      	b.n	800823a <__ieee754_atan2+0x42>
 800833a:	2000      	movs	r0, #0
 800833c:	2100      	movs	r1, #0
 800833e:	e77c      	b.n	800823a <__ieee754_atan2+0x42>
 8008340:	a105      	add	r1, pc, #20	; (adr r1, 8008358 <__ieee754_atan2+0x160>)
 8008342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008346:	e778      	b.n	800823a <__ieee754_atan2+0x42>
 8008348:	33145c07 	.word	0x33145c07
 800834c:	3ca1a626 	.word	0x3ca1a626
 8008350:	54442d18 	.word	0x54442d18
 8008354:	400921fb 	.word	0x400921fb
 8008358:	54442d18 	.word	0x54442d18
 800835c:	3ff921fb 	.word	0x3ff921fb
 8008360:	54442d18 	.word	0x54442d18
 8008364:	3fe921fb 	.word	0x3fe921fb
 8008368:	08009730 	.word	0x08009730
 800836c:	08009748 	.word	0x08009748
 8008370:	54442d18 	.word	0x54442d18
 8008374:	c00921fb 	.word	0xc00921fb
 8008378:	54442d18 	.word	0x54442d18
 800837c:	bff921fb 	.word	0xbff921fb
 8008380:	7ff00000 	.word	0x7ff00000
 8008384:	00000000 	.word	0x00000000

08008388 <__ieee754_rem_pio2>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	ed2d 8b02 	vpush	{d8}
 8008390:	ec55 4b10 	vmov	r4, r5, d0
 8008394:	4bca      	ldr	r3, [pc, #808]	; (80086c0 <__ieee754_rem_pio2+0x338>)
 8008396:	b08b      	sub	sp, #44	; 0x2c
 8008398:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800839c:	4598      	cmp	r8, r3
 800839e:	4682      	mov	sl, r0
 80083a0:	9502      	str	r5, [sp, #8]
 80083a2:	dc08      	bgt.n	80083b6 <__ieee754_rem_pio2+0x2e>
 80083a4:	2200      	movs	r2, #0
 80083a6:	2300      	movs	r3, #0
 80083a8:	ed80 0b00 	vstr	d0, [r0]
 80083ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80083b0:	f04f 0b00 	mov.w	fp, #0
 80083b4:	e028      	b.n	8008408 <__ieee754_rem_pio2+0x80>
 80083b6:	4bc3      	ldr	r3, [pc, #780]	; (80086c4 <__ieee754_rem_pio2+0x33c>)
 80083b8:	4598      	cmp	r8, r3
 80083ba:	dc78      	bgt.n	80084ae <__ieee754_rem_pio2+0x126>
 80083bc:	9b02      	ldr	r3, [sp, #8]
 80083be:	4ec2      	ldr	r6, [pc, #776]	; (80086c8 <__ieee754_rem_pio2+0x340>)
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	ee10 0a10 	vmov	r0, s0
 80083c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008688 <__ieee754_rem_pio2+0x300>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	4629      	mov	r1, r5
 80083ce:	dd39      	ble.n	8008444 <__ieee754_rem_pio2+0xbc>
 80083d0:	f7f7 ff7a 	bl	80002c8 <__aeabi_dsub>
 80083d4:	45b0      	cmp	r8, r6
 80083d6:	4604      	mov	r4, r0
 80083d8:	460d      	mov	r5, r1
 80083da:	d01b      	beq.n	8008414 <__ieee754_rem_pio2+0x8c>
 80083dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008690 <__ieee754_rem_pio2+0x308>)
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f7f7 ff71 	bl	80002c8 <__aeabi_dsub>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	e9ca 2300 	strd	r2, r3, [sl]
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f7 ff69 	bl	80002c8 <__aeabi_dsub>
 80083f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008690 <__ieee754_rem_pio2+0x308>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f7f7 ff64 	bl	80002c8 <__aeabi_dsub>
 8008400:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008404:	f04f 0b01 	mov.w	fp, #1
 8008408:	4658      	mov	r0, fp
 800840a:	b00b      	add	sp, #44	; 0x2c
 800840c:	ecbd 8b02 	vpop	{d8}
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	a3a0      	add	r3, pc, #640	; (adr r3, 8008698 <__ieee754_rem_pio2+0x310>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 ff55 	bl	80002c8 <__aeabi_dsub>
 800841e:	a3a0      	add	r3, pc, #640	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x318>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	4604      	mov	r4, r0
 8008426:	460d      	mov	r5, r1
 8008428:	f7f7 ff4e 	bl	80002c8 <__aeabi_dsub>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	e9ca 2300 	strd	r2, r3, [sl]
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f7f7 ff46 	bl	80002c8 <__aeabi_dsub>
 800843c:	a398      	add	r3, pc, #608	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x318>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	e7db      	b.n	80083fc <__ieee754_rem_pio2+0x74>
 8008444:	f7f7 ff42 	bl	80002cc <__adddf3>
 8008448:	45b0      	cmp	r8, r6
 800844a:	4604      	mov	r4, r0
 800844c:	460d      	mov	r5, r1
 800844e:	d016      	beq.n	800847e <__ieee754_rem_pio2+0xf6>
 8008450:	a38f      	add	r3, pc, #572	; (adr r3, 8008690 <__ieee754_rem_pio2+0x308>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	f7f7 ff39 	bl	80002cc <__adddf3>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	e9ca 2300 	strd	r2, r3, [sl]
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f7f7 ff2f 	bl	80002c8 <__aeabi_dsub>
 800846a:	a389      	add	r3, pc, #548	; (adr r3, 8008690 <__ieee754_rem_pio2+0x308>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 ff2c 	bl	80002cc <__adddf3>
 8008474:	f04f 3bff 	mov.w	fp, #4294967295
 8008478:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800847c:	e7c4      	b.n	8008408 <__ieee754_rem_pio2+0x80>
 800847e:	a386      	add	r3, pc, #536	; (adr r3, 8008698 <__ieee754_rem_pio2+0x310>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f7f7 ff22 	bl	80002cc <__adddf3>
 8008488:	a385      	add	r3, pc, #532	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x318>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	4604      	mov	r4, r0
 8008490:	460d      	mov	r5, r1
 8008492:	f7f7 ff1b 	bl	80002cc <__adddf3>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	e9ca 2300 	strd	r2, r3, [sl]
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f7 ff11 	bl	80002c8 <__aeabi_dsub>
 80084a6:	a37e      	add	r3, pc, #504	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x318>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	e7e0      	b.n	8008470 <__ieee754_rem_pio2+0xe8>
 80084ae:	4b87      	ldr	r3, [pc, #540]	; (80086cc <__ieee754_rem_pio2+0x344>)
 80084b0:	4598      	cmp	r8, r3
 80084b2:	f300 80d8 	bgt.w	8008666 <__ieee754_rem_pio2+0x2de>
 80084b6:	f000 fb0f 	bl	8008ad8 <fabs>
 80084ba:	ec55 4b10 	vmov	r4, r5, d0
 80084be:	ee10 0a10 	vmov	r0, s0
 80084c2:	a379      	add	r3, pc, #484	; (adr r3, 80086a8 <__ieee754_rem_pio2+0x320>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f8 f8b5 	bl	8000638 <__aeabi_dmul>
 80084ce:	4b80      	ldr	r3, [pc, #512]	; (80086d0 <__ieee754_rem_pio2+0x348>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	f7f7 fefb 	bl	80002cc <__adddf3>
 80084d6:	f7f8 fb5f 	bl	8000b98 <__aeabi_d2iz>
 80084da:	4683      	mov	fp, r0
 80084dc:	f7f8 f842 	bl	8000564 <__aeabi_i2d>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	ec43 2b18 	vmov	d8, r2, r3
 80084e8:	a367      	add	r3, pc, #412	; (adr r3, 8008688 <__ieee754_rem_pio2+0x300>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f7f8 f8a3 	bl	8000638 <__aeabi_dmul>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4620      	mov	r0, r4
 80084f8:	4629      	mov	r1, r5
 80084fa:	f7f7 fee5 	bl	80002c8 <__aeabi_dsub>
 80084fe:	a364      	add	r3, pc, #400	; (adr r3, 8008690 <__ieee754_rem_pio2+0x308>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	ec51 0b18 	vmov	r0, r1, d8
 800850c:	f7f8 f894 	bl	8000638 <__aeabi_dmul>
 8008510:	f1bb 0f1f 	cmp.w	fp, #31
 8008514:	4604      	mov	r4, r0
 8008516:	460d      	mov	r5, r1
 8008518:	dc0d      	bgt.n	8008536 <__ieee754_rem_pio2+0x1ae>
 800851a:	4b6e      	ldr	r3, [pc, #440]	; (80086d4 <__ieee754_rem_pio2+0x34c>)
 800851c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008524:	4543      	cmp	r3, r8
 8008526:	d006      	beq.n	8008536 <__ieee754_rem_pio2+0x1ae>
 8008528:	4622      	mov	r2, r4
 800852a:	462b      	mov	r3, r5
 800852c:	4630      	mov	r0, r6
 800852e:	4639      	mov	r1, r7
 8008530:	f7f7 feca 	bl	80002c8 <__aeabi_dsub>
 8008534:	e00e      	b.n	8008554 <__ieee754_rem_pio2+0x1cc>
 8008536:	462b      	mov	r3, r5
 8008538:	4622      	mov	r2, r4
 800853a:	4630      	mov	r0, r6
 800853c:	4639      	mov	r1, r7
 800853e:	f7f7 fec3 	bl	80002c8 <__aeabi_dsub>
 8008542:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008546:	9303      	str	r3, [sp, #12]
 8008548:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800854c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008550:	2b10      	cmp	r3, #16
 8008552:	dc02      	bgt.n	800855a <__ieee754_rem_pio2+0x1d2>
 8008554:	e9ca 0100 	strd	r0, r1, [sl]
 8008558:	e039      	b.n	80085ce <__ieee754_rem_pio2+0x246>
 800855a:	a34f      	add	r3, pc, #316	; (adr r3, 8008698 <__ieee754_rem_pio2+0x310>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	ec51 0b18 	vmov	r0, r1, d8
 8008564:	f7f8 f868 	bl	8000638 <__aeabi_dmul>
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f7f7 fea8 	bl	80002c8 <__aeabi_dsub>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4680      	mov	r8, r0
 800857e:	4689      	mov	r9, r1
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f7 fea0 	bl	80002c8 <__aeabi_dsub>
 8008588:	4622      	mov	r2, r4
 800858a:	462b      	mov	r3, r5
 800858c:	f7f7 fe9c 	bl	80002c8 <__aeabi_dsub>
 8008590:	a343      	add	r3, pc, #268	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x318>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	4604      	mov	r4, r0
 8008598:	460d      	mov	r5, r1
 800859a:	ec51 0b18 	vmov	r0, r1, d8
 800859e:	f7f8 f84b 	bl	8000638 <__aeabi_dmul>
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	f7f7 fe8f 	bl	80002c8 <__aeabi_dsub>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4604      	mov	r4, r0
 80085b0:	460d      	mov	r5, r1
 80085b2:	4640      	mov	r0, r8
 80085b4:	4649      	mov	r1, r9
 80085b6:	f7f7 fe87 	bl	80002c8 <__aeabi_dsub>
 80085ba:	9a03      	ldr	r2, [sp, #12]
 80085bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b31      	cmp	r3, #49	; 0x31
 80085c4:	dc24      	bgt.n	8008610 <__ieee754_rem_pio2+0x288>
 80085c6:	e9ca 0100 	strd	r0, r1, [sl]
 80085ca:	4646      	mov	r6, r8
 80085cc:	464f      	mov	r7, r9
 80085ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80085d2:	4630      	mov	r0, r6
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	4639      	mov	r1, r7
 80085da:	f7f7 fe75 	bl	80002c8 <__aeabi_dsub>
 80085de:	462b      	mov	r3, r5
 80085e0:	4622      	mov	r2, r4
 80085e2:	f7f7 fe71 	bl	80002c8 <__aeabi_dsub>
 80085e6:	9b02      	ldr	r3, [sp, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085ee:	f6bf af0b 	bge.w	8008408 <__ieee754_rem_pio2+0x80>
 80085f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085f6:	f8ca 3004 	str.w	r3, [sl, #4]
 80085fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085fe:	f8ca 8000 	str.w	r8, [sl]
 8008602:	f8ca 0008 	str.w	r0, [sl, #8]
 8008606:	f8ca 300c 	str.w	r3, [sl, #12]
 800860a:	f1cb 0b00 	rsb	fp, fp, #0
 800860e:	e6fb      	b.n	8008408 <__ieee754_rem_pio2+0x80>
 8008610:	a327      	add	r3, pc, #156	; (adr r3, 80086b0 <__ieee754_rem_pio2+0x328>)
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	ec51 0b18 	vmov	r0, r1, d8
 800861a:	f7f8 f80d 	bl	8000638 <__aeabi_dmul>
 800861e:	4604      	mov	r4, r0
 8008620:	460d      	mov	r5, r1
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4640      	mov	r0, r8
 8008628:	4649      	mov	r1, r9
 800862a:	f7f7 fe4d 	bl	80002c8 <__aeabi_dsub>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	4640      	mov	r0, r8
 8008638:	4649      	mov	r1, r9
 800863a:	f7f7 fe45 	bl	80002c8 <__aeabi_dsub>
 800863e:	4622      	mov	r2, r4
 8008640:	462b      	mov	r3, r5
 8008642:	f7f7 fe41 	bl	80002c8 <__aeabi_dsub>
 8008646:	a31c      	add	r3, pc, #112	; (adr r3, 80086b8 <__ieee754_rem_pio2+0x330>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	4604      	mov	r4, r0
 800864e:	460d      	mov	r5, r1
 8008650:	ec51 0b18 	vmov	r0, r1, d8
 8008654:	f7f7 fff0 	bl	8000638 <__aeabi_dmul>
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 fe34 	bl	80002c8 <__aeabi_dsub>
 8008660:	4604      	mov	r4, r0
 8008662:	460d      	mov	r5, r1
 8008664:	e760      	b.n	8008528 <__ieee754_rem_pio2+0x1a0>
 8008666:	4b1c      	ldr	r3, [pc, #112]	; (80086d8 <__ieee754_rem_pio2+0x350>)
 8008668:	4598      	cmp	r8, r3
 800866a:	dd37      	ble.n	80086dc <__ieee754_rem_pio2+0x354>
 800866c:	ee10 2a10 	vmov	r2, s0
 8008670:	462b      	mov	r3, r5
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f7 fe27 	bl	80002c8 <__aeabi_dsub>
 800867a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800867e:	e9ca 0100 	strd	r0, r1, [sl]
 8008682:	e695      	b.n	80083b0 <__ieee754_rem_pio2+0x28>
 8008684:	f3af 8000 	nop.w
 8008688:	54400000 	.word	0x54400000
 800868c:	3ff921fb 	.word	0x3ff921fb
 8008690:	1a626331 	.word	0x1a626331
 8008694:	3dd0b461 	.word	0x3dd0b461
 8008698:	1a600000 	.word	0x1a600000
 800869c:	3dd0b461 	.word	0x3dd0b461
 80086a0:	2e037073 	.word	0x2e037073
 80086a4:	3ba3198a 	.word	0x3ba3198a
 80086a8:	6dc9c883 	.word	0x6dc9c883
 80086ac:	3fe45f30 	.word	0x3fe45f30
 80086b0:	2e000000 	.word	0x2e000000
 80086b4:	3ba3198a 	.word	0x3ba3198a
 80086b8:	252049c1 	.word	0x252049c1
 80086bc:	397b839a 	.word	0x397b839a
 80086c0:	3fe921fb 	.word	0x3fe921fb
 80086c4:	4002d97b 	.word	0x4002d97b
 80086c8:	3ff921fb 	.word	0x3ff921fb
 80086cc:	413921fb 	.word	0x413921fb
 80086d0:	3fe00000 	.word	0x3fe00000
 80086d4:	08009760 	.word	0x08009760
 80086d8:	7fefffff 	.word	0x7fefffff
 80086dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80086e0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80086e4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80086e8:	4620      	mov	r0, r4
 80086ea:	460d      	mov	r5, r1
 80086ec:	f7f8 fa54 	bl	8000b98 <__aeabi_d2iz>
 80086f0:	f7f7 ff38 	bl	8000564 <__aeabi_i2d>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008700:	f7f7 fde2 	bl	80002c8 <__aeabi_dsub>
 8008704:	4b21      	ldr	r3, [pc, #132]	; (800878c <__ieee754_rem_pio2+0x404>)
 8008706:	2200      	movs	r2, #0
 8008708:	f7f7 ff96 	bl	8000638 <__aeabi_dmul>
 800870c:	460d      	mov	r5, r1
 800870e:	4604      	mov	r4, r0
 8008710:	f7f8 fa42 	bl	8000b98 <__aeabi_d2iz>
 8008714:	f7f7 ff26 	bl	8000564 <__aeabi_i2d>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008724:	f7f7 fdd0 	bl	80002c8 <__aeabi_dsub>
 8008728:	4b18      	ldr	r3, [pc, #96]	; (800878c <__ieee754_rem_pio2+0x404>)
 800872a:	2200      	movs	r2, #0
 800872c:	f7f7 ff84 	bl	8000638 <__aeabi_dmul>
 8008730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008734:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008738:	2703      	movs	r7, #3
 800873a:	2400      	movs	r4, #0
 800873c:	2500      	movs	r5, #0
 800873e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008742:	4622      	mov	r2, r4
 8008744:	462b      	mov	r3, r5
 8008746:	46b9      	mov	r9, r7
 8008748:	3f01      	subs	r7, #1
 800874a:	f7f8 f9dd 	bl	8000b08 <__aeabi_dcmpeq>
 800874e:	2800      	cmp	r0, #0
 8008750:	d1f5      	bne.n	800873e <__ieee754_rem_pio2+0x3b6>
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <__ieee754_rem_pio2+0x408>)
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	2302      	movs	r3, #2
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	4632      	mov	r2, r6
 800875c:	464b      	mov	r3, r9
 800875e:	4651      	mov	r1, sl
 8008760:	a804      	add	r0, sp, #16
 8008762:	f000 f9c5 	bl	8008af0 <__kernel_rem_pio2>
 8008766:	9b02      	ldr	r3, [sp, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	4683      	mov	fp, r0
 800876c:	f6bf ae4c 	bge.w	8008408 <__ieee754_rem_pio2+0x80>
 8008770:	e9da 2100 	ldrd	r2, r1, [sl]
 8008774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008778:	e9ca 2300 	strd	r2, r3, [sl]
 800877c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008784:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008788:	e73f      	b.n	800860a <__ieee754_rem_pio2+0x282>
 800878a:	bf00      	nop
 800878c:	41700000 	.word	0x41700000
 8008790:	080097e0 	.word	0x080097e0
 8008794:	00000000 	.word	0x00000000

08008798 <atan>:
 8008798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	ec55 4b10 	vmov	r4, r5, d0
 80087a0:	4bc3      	ldr	r3, [pc, #780]	; (8008ab0 <atan+0x318>)
 80087a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80087a6:	429e      	cmp	r6, r3
 80087a8:	46ab      	mov	fp, r5
 80087aa:	dd18      	ble.n	80087de <atan+0x46>
 80087ac:	4bc1      	ldr	r3, [pc, #772]	; (8008ab4 <atan+0x31c>)
 80087ae:	429e      	cmp	r6, r3
 80087b0:	dc01      	bgt.n	80087b6 <atan+0x1e>
 80087b2:	d109      	bne.n	80087c8 <atan+0x30>
 80087b4:	b144      	cbz	r4, 80087c8 <atan+0x30>
 80087b6:	4622      	mov	r2, r4
 80087b8:	462b      	mov	r3, r5
 80087ba:	4620      	mov	r0, r4
 80087bc:	4629      	mov	r1, r5
 80087be:	f7f7 fd85 	bl	80002cc <__adddf3>
 80087c2:	4604      	mov	r4, r0
 80087c4:	460d      	mov	r5, r1
 80087c6:	e006      	b.n	80087d6 <atan+0x3e>
 80087c8:	f1bb 0f00 	cmp.w	fp, #0
 80087cc:	f300 8131 	bgt.w	8008a32 <atan+0x29a>
 80087d0:	a59b      	add	r5, pc, #620	; (adr r5, 8008a40 <atan+0x2a8>)
 80087d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087d6:	ec45 4b10 	vmov	d0, r4, r5
 80087da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087de:	4bb6      	ldr	r3, [pc, #728]	; (8008ab8 <atan+0x320>)
 80087e0:	429e      	cmp	r6, r3
 80087e2:	dc14      	bgt.n	800880e <atan+0x76>
 80087e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80087e8:	429e      	cmp	r6, r3
 80087ea:	dc0d      	bgt.n	8008808 <atan+0x70>
 80087ec:	a396      	add	r3, pc, #600	; (adr r3, 8008a48 <atan+0x2b0>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	ee10 0a10 	vmov	r0, s0
 80087f6:	4629      	mov	r1, r5
 80087f8:	f7f7 fd68 	bl	80002cc <__adddf3>
 80087fc:	4baf      	ldr	r3, [pc, #700]	; (8008abc <atan+0x324>)
 80087fe:	2200      	movs	r2, #0
 8008800:	f7f8 f9aa 	bl	8000b58 <__aeabi_dcmpgt>
 8008804:	2800      	cmp	r0, #0
 8008806:	d1e6      	bne.n	80087d6 <atan+0x3e>
 8008808:	f04f 3aff 	mov.w	sl, #4294967295
 800880c:	e02b      	b.n	8008866 <atan+0xce>
 800880e:	f000 f963 	bl	8008ad8 <fabs>
 8008812:	4bab      	ldr	r3, [pc, #684]	; (8008ac0 <atan+0x328>)
 8008814:	429e      	cmp	r6, r3
 8008816:	ec55 4b10 	vmov	r4, r5, d0
 800881a:	f300 80bf 	bgt.w	800899c <atan+0x204>
 800881e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008822:	429e      	cmp	r6, r3
 8008824:	f300 80a0 	bgt.w	8008968 <atan+0x1d0>
 8008828:	ee10 2a10 	vmov	r2, s0
 800882c:	ee10 0a10 	vmov	r0, s0
 8008830:	462b      	mov	r3, r5
 8008832:	4629      	mov	r1, r5
 8008834:	f7f7 fd4a 	bl	80002cc <__adddf3>
 8008838:	4ba0      	ldr	r3, [pc, #640]	; (8008abc <atan+0x324>)
 800883a:	2200      	movs	r2, #0
 800883c:	f7f7 fd44 	bl	80002c8 <__aeabi_dsub>
 8008840:	2200      	movs	r2, #0
 8008842:	4606      	mov	r6, r0
 8008844:	460f      	mov	r7, r1
 8008846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800884a:	4620      	mov	r0, r4
 800884c:	4629      	mov	r1, r5
 800884e:	f7f7 fd3d 	bl	80002cc <__adddf3>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f8 f817 	bl	800088c <__aeabi_ddiv>
 800885e:	f04f 0a00 	mov.w	sl, #0
 8008862:	4604      	mov	r4, r0
 8008864:	460d      	mov	r5, r1
 8008866:	4622      	mov	r2, r4
 8008868:	462b      	mov	r3, r5
 800886a:	4620      	mov	r0, r4
 800886c:	4629      	mov	r1, r5
 800886e:	f7f7 fee3 	bl	8000638 <__aeabi_dmul>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4680      	mov	r8, r0
 8008878:	4689      	mov	r9, r1
 800887a:	f7f7 fedd 	bl	8000638 <__aeabi_dmul>
 800887e:	a374      	add	r3, pc, #464	; (adr r3, 8008a50 <atan+0x2b8>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	4606      	mov	r6, r0
 8008886:	460f      	mov	r7, r1
 8008888:	f7f7 fed6 	bl	8000638 <__aeabi_dmul>
 800888c:	a372      	add	r3, pc, #456	; (adr r3, 8008a58 <atan+0x2c0>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f7f7 fd1b 	bl	80002cc <__adddf3>
 8008896:	4632      	mov	r2, r6
 8008898:	463b      	mov	r3, r7
 800889a:	f7f7 fecd 	bl	8000638 <__aeabi_dmul>
 800889e:	a370      	add	r3, pc, #448	; (adr r3, 8008a60 <atan+0x2c8>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f7f7 fd12 	bl	80002cc <__adddf3>
 80088a8:	4632      	mov	r2, r6
 80088aa:	463b      	mov	r3, r7
 80088ac:	f7f7 fec4 	bl	8000638 <__aeabi_dmul>
 80088b0:	a36d      	add	r3, pc, #436	; (adr r3, 8008a68 <atan+0x2d0>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fd09 	bl	80002cc <__adddf3>
 80088ba:	4632      	mov	r2, r6
 80088bc:	463b      	mov	r3, r7
 80088be:	f7f7 febb 	bl	8000638 <__aeabi_dmul>
 80088c2:	a36b      	add	r3, pc, #428	; (adr r3, 8008a70 <atan+0x2d8>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f7f7 fd00 	bl	80002cc <__adddf3>
 80088cc:	4632      	mov	r2, r6
 80088ce:	463b      	mov	r3, r7
 80088d0:	f7f7 feb2 	bl	8000638 <__aeabi_dmul>
 80088d4:	a368      	add	r3, pc, #416	; (adr r3, 8008a78 <atan+0x2e0>)
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	f7f7 fcf7 	bl	80002cc <__adddf3>
 80088de:	4642      	mov	r2, r8
 80088e0:	464b      	mov	r3, r9
 80088e2:	f7f7 fea9 	bl	8000638 <__aeabi_dmul>
 80088e6:	a366      	add	r3, pc, #408	; (adr r3, 8008a80 <atan+0x2e8>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	4680      	mov	r8, r0
 80088ee:	4689      	mov	r9, r1
 80088f0:	4630      	mov	r0, r6
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f7 fea0 	bl	8000638 <__aeabi_dmul>
 80088f8:	a363      	add	r3, pc, #396	; (adr r3, 8008a88 <atan+0x2f0>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fce3 	bl	80002c8 <__aeabi_dsub>
 8008902:	4632      	mov	r2, r6
 8008904:	463b      	mov	r3, r7
 8008906:	f7f7 fe97 	bl	8000638 <__aeabi_dmul>
 800890a:	a361      	add	r3, pc, #388	; (adr r3, 8008a90 <atan+0x2f8>)
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f7f7 fcda 	bl	80002c8 <__aeabi_dsub>
 8008914:	4632      	mov	r2, r6
 8008916:	463b      	mov	r3, r7
 8008918:	f7f7 fe8e 	bl	8000638 <__aeabi_dmul>
 800891c:	a35e      	add	r3, pc, #376	; (adr r3, 8008a98 <atan+0x300>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fcd1 	bl	80002c8 <__aeabi_dsub>
 8008926:	4632      	mov	r2, r6
 8008928:	463b      	mov	r3, r7
 800892a:	f7f7 fe85 	bl	8000638 <__aeabi_dmul>
 800892e:	a35c      	add	r3, pc, #368	; (adr r3, 8008aa0 <atan+0x308>)
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	f7f7 fcc8 	bl	80002c8 <__aeabi_dsub>
 8008938:	4632      	mov	r2, r6
 800893a:	463b      	mov	r3, r7
 800893c:	f7f7 fe7c 	bl	8000638 <__aeabi_dmul>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4640      	mov	r0, r8
 8008946:	4649      	mov	r1, r9
 8008948:	f7f7 fcc0 	bl	80002cc <__adddf3>
 800894c:	4622      	mov	r2, r4
 800894e:	462b      	mov	r3, r5
 8008950:	f7f7 fe72 	bl	8000638 <__aeabi_dmul>
 8008954:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	d14b      	bne.n	80089f6 <atan+0x25e>
 800895e:	4620      	mov	r0, r4
 8008960:	4629      	mov	r1, r5
 8008962:	f7f7 fcb1 	bl	80002c8 <__aeabi_dsub>
 8008966:	e72c      	b.n	80087c2 <atan+0x2a>
 8008968:	ee10 0a10 	vmov	r0, s0
 800896c:	4b53      	ldr	r3, [pc, #332]	; (8008abc <atan+0x324>)
 800896e:	2200      	movs	r2, #0
 8008970:	4629      	mov	r1, r5
 8008972:	f7f7 fca9 	bl	80002c8 <__aeabi_dsub>
 8008976:	4b51      	ldr	r3, [pc, #324]	; (8008abc <atan+0x324>)
 8008978:	4606      	mov	r6, r0
 800897a:	460f      	mov	r7, r1
 800897c:	2200      	movs	r2, #0
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	f7f7 fca3 	bl	80002cc <__adddf3>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4630      	mov	r0, r6
 800898c:	4639      	mov	r1, r7
 800898e:	f7f7 ff7d 	bl	800088c <__aeabi_ddiv>
 8008992:	f04f 0a01 	mov.w	sl, #1
 8008996:	4604      	mov	r4, r0
 8008998:	460d      	mov	r5, r1
 800899a:	e764      	b.n	8008866 <atan+0xce>
 800899c:	4b49      	ldr	r3, [pc, #292]	; (8008ac4 <atan+0x32c>)
 800899e:	429e      	cmp	r6, r3
 80089a0:	da1d      	bge.n	80089de <atan+0x246>
 80089a2:	ee10 0a10 	vmov	r0, s0
 80089a6:	4b48      	ldr	r3, [pc, #288]	; (8008ac8 <atan+0x330>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7f7 fc8c 	bl	80002c8 <__aeabi_dsub>
 80089b0:	4b45      	ldr	r3, [pc, #276]	; (8008ac8 <atan+0x330>)
 80089b2:	4606      	mov	r6, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	2200      	movs	r2, #0
 80089b8:	4620      	mov	r0, r4
 80089ba:	4629      	mov	r1, r5
 80089bc:	f7f7 fe3c 	bl	8000638 <__aeabi_dmul>
 80089c0:	4b3e      	ldr	r3, [pc, #248]	; (8008abc <atan+0x324>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	f7f7 fc82 	bl	80002cc <__adddf3>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4630      	mov	r0, r6
 80089ce:	4639      	mov	r1, r7
 80089d0:	f7f7 ff5c 	bl	800088c <__aeabi_ddiv>
 80089d4:	f04f 0a02 	mov.w	sl, #2
 80089d8:	4604      	mov	r4, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	e743      	b.n	8008866 <atan+0xce>
 80089de:	462b      	mov	r3, r5
 80089e0:	ee10 2a10 	vmov	r2, s0
 80089e4:	4939      	ldr	r1, [pc, #228]	; (8008acc <atan+0x334>)
 80089e6:	2000      	movs	r0, #0
 80089e8:	f7f7 ff50 	bl	800088c <__aeabi_ddiv>
 80089ec:	f04f 0a03 	mov.w	sl, #3
 80089f0:	4604      	mov	r4, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	e737      	b.n	8008866 <atan+0xce>
 80089f6:	4b36      	ldr	r3, [pc, #216]	; (8008ad0 <atan+0x338>)
 80089f8:	4e36      	ldr	r6, [pc, #216]	; (8008ad4 <atan+0x33c>)
 80089fa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f7f7 fc61 	bl	80002c8 <__aeabi_dsub>
 8008a06:	4622      	mov	r2, r4
 8008a08:	462b      	mov	r3, r5
 8008a0a:	f7f7 fc5d 	bl	80002c8 <__aeabi_dsub>
 8008a0e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008a1a:	f7f7 fc55 	bl	80002c8 <__aeabi_dsub>
 8008a1e:	f1bb 0f00 	cmp.w	fp, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	460d      	mov	r5, r1
 8008a26:	f6bf aed6 	bge.w	80087d6 <atan+0x3e>
 8008a2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a2e:	461d      	mov	r5, r3
 8008a30:	e6d1      	b.n	80087d6 <atan+0x3e>
 8008a32:	a51d      	add	r5, pc, #116	; (adr r5, 8008aa8 <atan+0x310>)
 8008a34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a38:	e6cd      	b.n	80087d6 <atan+0x3e>
 8008a3a:	bf00      	nop
 8008a3c:	f3af 8000 	nop.w
 8008a40:	54442d18 	.word	0x54442d18
 8008a44:	bff921fb 	.word	0xbff921fb
 8008a48:	8800759c 	.word	0x8800759c
 8008a4c:	7e37e43c 	.word	0x7e37e43c
 8008a50:	e322da11 	.word	0xe322da11
 8008a54:	3f90ad3a 	.word	0x3f90ad3a
 8008a58:	24760deb 	.word	0x24760deb
 8008a5c:	3fa97b4b 	.word	0x3fa97b4b
 8008a60:	a0d03d51 	.word	0xa0d03d51
 8008a64:	3fb10d66 	.word	0x3fb10d66
 8008a68:	c54c206e 	.word	0xc54c206e
 8008a6c:	3fb745cd 	.word	0x3fb745cd
 8008a70:	920083ff 	.word	0x920083ff
 8008a74:	3fc24924 	.word	0x3fc24924
 8008a78:	5555550d 	.word	0x5555550d
 8008a7c:	3fd55555 	.word	0x3fd55555
 8008a80:	2c6a6c2f 	.word	0x2c6a6c2f
 8008a84:	bfa2b444 	.word	0xbfa2b444
 8008a88:	52defd9a 	.word	0x52defd9a
 8008a8c:	3fadde2d 	.word	0x3fadde2d
 8008a90:	af749a6d 	.word	0xaf749a6d
 8008a94:	3fb3b0f2 	.word	0x3fb3b0f2
 8008a98:	fe231671 	.word	0xfe231671
 8008a9c:	3fbc71c6 	.word	0x3fbc71c6
 8008aa0:	9998ebc4 	.word	0x9998ebc4
 8008aa4:	3fc99999 	.word	0x3fc99999
 8008aa8:	54442d18 	.word	0x54442d18
 8008aac:	3ff921fb 	.word	0x3ff921fb
 8008ab0:	440fffff 	.word	0x440fffff
 8008ab4:	7ff00000 	.word	0x7ff00000
 8008ab8:	3fdbffff 	.word	0x3fdbffff
 8008abc:	3ff00000 	.word	0x3ff00000
 8008ac0:	3ff2ffff 	.word	0x3ff2ffff
 8008ac4:	40038000 	.word	0x40038000
 8008ac8:	3ff80000 	.word	0x3ff80000
 8008acc:	bff00000 	.word	0xbff00000
 8008ad0:	08009908 	.word	0x08009908
 8008ad4:	080098e8 	.word	0x080098e8

08008ad8 <fabs>:
 8008ad8:	ec51 0b10 	vmov	r0, r1, d0
 8008adc:	ee10 2a10 	vmov	r2, s0
 8008ae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ae4:	ec43 2b10 	vmov	d0, r2, r3
 8008ae8:	4770      	bx	lr
 8008aea:	0000      	movs	r0, r0
 8008aec:	0000      	movs	r0, r0
	...

08008af0 <__kernel_rem_pio2>:
 8008af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	ed2d 8b02 	vpush	{d8}
 8008af8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008afc:	f112 0f14 	cmn.w	r2, #20
 8008b00:	9306      	str	r3, [sp, #24]
 8008b02:	9104      	str	r1, [sp, #16]
 8008b04:	4bc2      	ldr	r3, [pc, #776]	; (8008e10 <__kernel_rem_pio2+0x320>)
 8008b06:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008b08:	9009      	str	r0, [sp, #36]	; 0x24
 8008b0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	9b06      	ldr	r3, [sp, #24]
 8008b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b16:	bfa8      	it	ge
 8008b18:	1ed4      	subge	r4, r2, #3
 8008b1a:	9305      	str	r3, [sp, #20]
 8008b1c:	bfb2      	itee	lt
 8008b1e:	2400      	movlt	r4, #0
 8008b20:	2318      	movge	r3, #24
 8008b22:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b26:	f06f 0317 	mvn.w	r3, #23
 8008b2a:	fb04 3303 	mla	r3, r4, r3, r3
 8008b2e:	eb03 0a02 	add.w	sl, r3, r2
 8008b32:	9b00      	ldr	r3, [sp, #0]
 8008b34:	9a05      	ldr	r2, [sp, #20]
 8008b36:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008e00 <__kernel_rem_pio2+0x310>
 8008b3a:	eb03 0802 	add.w	r8, r3, r2
 8008b3e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008b40:	1aa7      	subs	r7, r4, r2
 8008b42:	ae20      	add	r6, sp, #128	; 0x80
 8008b44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008b48:	2500      	movs	r5, #0
 8008b4a:	4545      	cmp	r5, r8
 8008b4c:	dd13      	ble.n	8008b76 <__kernel_rem_pio2+0x86>
 8008b4e:	9b06      	ldr	r3, [sp, #24]
 8008b50:	aa20      	add	r2, sp, #128	; 0x80
 8008b52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008b56:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008b5a:	f04f 0800 	mov.w	r8, #0
 8008b5e:	9b00      	ldr	r3, [sp, #0]
 8008b60:	4598      	cmp	r8, r3
 8008b62:	dc31      	bgt.n	8008bc8 <__kernel_rem_pio2+0xd8>
 8008b64:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008e00 <__kernel_rem_pio2+0x310>
 8008b68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b70:	462f      	mov	r7, r5
 8008b72:	2600      	movs	r6, #0
 8008b74:	e01b      	b.n	8008bae <__kernel_rem_pio2+0xbe>
 8008b76:	42ef      	cmn	r7, r5
 8008b78:	d407      	bmi.n	8008b8a <__kernel_rem_pio2+0x9a>
 8008b7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008b7e:	f7f7 fcf1 	bl	8000564 <__aeabi_i2d>
 8008b82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008b86:	3501      	adds	r5, #1
 8008b88:	e7df      	b.n	8008b4a <__kernel_rem_pio2+0x5a>
 8008b8a:	ec51 0b18 	vmov	r0, r1, d8
 8008b8e:	e7f8      	b.n	8008b82 <__kernel_rem_pio2+0x92>
 8008b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008b98:	f7f7 fd4e 	bl	8000638 <__aeabi_dmul>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba4:	f7f7 fb92 	bl	80002cc <__adddf3>
 8008ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bac:	3601      	adds	r6, #1
 8008bae:	9b05      	ldr	r3, [sp, #20]
 8008bb0:	429e      	cmp	r6, r3
 8008bb2:	f1a7 0708 	sub.w	r7, r7, #8
 8008bb6:	ddeb      	ble.n	8008b90 <__kernel_rem_pio2+0xa0>
 8008bb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bbc:	f108 0801 	add.w	r8, r8, #1
 8008bc0:	ecab 7b02 	vstmia	fp!, {d7}
 8008bc4:	3508      	adds	r5, #8
 8008bc6:	e7ca      	b.n	8008b5e <__kernel_rem_pio2+0x6e>
 8008bc8:	9b00      	ldr	r3, [sp, #0]
 8008bca:	aa0c      	add	r2, sp, #48	; 0x30
 8008bcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bd2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008bd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008bd8:	9c00      	ldr	r4, [sp, #0]
 8008bda:	930a      	str	r3, [sp, #40]	; 0x28
 8008bdc:	00e3      	lsls	r3, r4, #3
 8008bde:	9308      	str	r3, [sp, #32]
 8008be0:	ab98      	add	r3, sp, #608	; 0x260
 8008be2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008be6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008bea:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008bee:	ab70      	add	r3, sp, #448	; 0x1c0
 8008bf0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008bf4:	46c3      	mov	fp, r8
 8008bf6:	46a1      	mov	r9, r4
 8008bf8:	f1b9 0f00 	cmp.w	r9, #0
 8008bfc:	f1a5 0508 	sub.w	r5, r5, #8
 8008c00:	dc77      	bgt.n	8008cf2 <__kernel_rem_pio2+0x202>
 8008c02:	ec47 6b10 	vmov	d0, r6, r7
 8008c06:	4650      	mov	r0, sl
 8008c08:	f000 fac2 	bl	8009190 <scalbn>
 8008c0c:	ec57 6b10 	vmov	r6, r7, d0
 8008c10:	2200      	movs	r2, #0
 8008c12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c16:	ee10 0a10 	vmov	r0, s0
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	f7f7 fd0c 	bl	8000638 <__aeabi_dmul>
 8008c20:	ec41 0b10 	vmov	d0, r0, r1
 8008c24:	f000 fb34 	bl	8009290 <floor>
 8008c28:	4b7a      	ldr	r3, [pc, #488]	; (8008e14 <__kernel_rem_pio2+0x324>)
 8008c2a:	ec51 0b10 	vmov	r0, r1, d0
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f7f7 fd02 	bl	8000638 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fb44 	bl	80002c8 <__aeabi_dsub>
 8008c40:	460f      	mov	r7, r1
 8008c42:	4606      	mov	r6, r0
 8008c44:	f7f7 ffa8 	bl	8000b98 <__aeabi_d2iz>
 8008c48:	9002      	str	r0, [sp, #8]
 8008c4a:	f7f7 fc8b 	bl	8000564 <__aeabi_i2d>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	f7f7 fb37 	bl	80002c8 <__aeabi_dsub>
 8008c5a:	f1ba 0f00 	cmp.w	sl, #0
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460f      	mov	r7, r1
 8008c62:	dd6d      	ble.n	8008d40 <__kernel_rem_pio2+0x250>
 8008c64:	1e61      	subs	r1, r4, #1
 8008c66:	ab0c      	add	r3, sp, #48	; 0x30
 8008c68:	9d02      	ldr	r5, [sp, #8]
 8008c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c6e:	f1ca 0018 	rsb	r0, sl, #24
 8008c72:	fa43 f200 	asr.w	r2, r3, r0
 8008c76:	4415      	add	r5, r2
 8008c78:	4082      	lsls	r2, r0
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	aa0c      	add	r2, sp, #48	; 0x30
 8008c7e:	9502      	str	r5, [sp, #8]
 8008c80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008c84:	f1ca 0217 	rsb	r2, sl, #23
 8008c88:	fa43 fb02 	asr.w	fp, r3, r2
 8008c8c:	f1bb 0f00 	cmp.w	fp, #0
 8008c90:	dd65      	ble.n	8008d5e <__kernel_rem_pio2+0x26e>
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	2200      	movs	r2, #0
 8008c96:	3301      	adds	r3, #1
 8008c98:	9302      	str	r3, [sp, #8]
 8008c9a:	4615      	mov	r5, r2
 8008c9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008ca0:	4294      	cmp	r4, r2
 8008ca2:	f300 809f 	bgt.w	8008de4 <__kernel_rem_pio2+0x2f4>
 8008ca6:	f1ba 0f00 	cmp.w	sl, #0
 8008caa:	dd07      	ble.n	8008cbc <__kernel_rem_pio2+0x1cc>
 8008cac:	f1ba 0f01 	cmp.w	sl, #1
 8008cb0:	f000 80c1 	beq.w	8008e36 <__kernel_rem_pio2+0x346>
 8008cb4:	f1ba 0f02 	cmp.w	sl, #2
 8008cb8:	f000 80c7 	beq.w	8008e4a <__kernel_rem_pio2+0x35a>
 8008cbc:	f1bb 0f02 	cmp.w	fp, #2
 8008cc0:	d14d      	bne.n	8008d5e <__kernel_rem_pio2+0x26e>
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	463b      	mov	r3, r7
 8008cc6:	4954      	ldr	r1, [pc, #336]	; (8008e18 <__kernel_rem_pio2+0x328>)
 8008cc8:	2000      	movs	r0, #0
 8008cca:	f7f7 fafd 	bl	80002c8 <__aeabi_dsub>
 8008cce:	4606      	mov	r6, r0
 8008cd0:	460f      	mov	r7, r1
 8008cd2:	2d00      	cmp	r5, #0
 8008cd4:	d043      	beq.n	8008d5e <__kernel_rem_pio2+0x26e>
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008e08 <__kernel_rem_pio2+0x318>
 8008cdc:	f000 fa58 	bl	8009190 <scalbn>
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	ec53 2b10 	vmov	r2, r3, d0
 8008ce8:	f7f7 faee 	bl	80002c8 <__aeabi_dsub>
 8008cec:	4606      	mov	r6, r0
 8008cee:	460f      	mov	r7, r1
 8008cf0:	e035      	b.n	8008d5e <__kernel_rem_pio2+0x26e>
 8008cf2:	4b4a      	ldr	r3, [pc, #296]	; (8008e1c <__kernel_rem_pio2+0x32c>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	f7f7 fc9d 	bl	8000638 <__aeabi_dmul>
 8008cfe:	f7f7 ff4b 	bl	8000b98 <__aeabi_d2iz>
 8008d02:	f7f7 fc2f 	bl	8000564 <__aeabi_i2d>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	ec43 2b18 	vmov	d8, r2, r3
 8008d0e:	4b44      	ldr	r3, [pc, #272]	; (8008e20 <__kernel_rem_pio2+0x330>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	f7f7 fc91 	bl	8000638 <__aeabi_dmul>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f7 fad3 	bl	80002c8 <__aeabi_dsub>
 8008d22:	f7f7 ff39 	bl	8000b98 <__aeabi_d2iz>
 8008d26:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d2a:	f84b 0b04 	str.w	r0, [fp], #4
 8008d2e:	ec51 0b18 	vmov	r0, r1, d8
 8008d32:	f7f7 facb 	bl	80002cc <__adddf3>
 8008d36:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	460f      	mov	r7, r1
 8008d3e:	e75b      	b.n	8008bf8 <__kernel_rem_pio2+0x108>
 8008d40:	d106      	bne.n	8008d50 <__kernel_rem_pio2+0x260>
 8008d42:	1e63      	subs	r3, r4, #1
 8008d44:	aa0c      	add	r2, sp, #48	; 0x30
 8008d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d4a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008d4e:	e79d      	b.n	8008c8c <__kernel_rem_pio2+0x19c>
 8008d50:	4b34      	ldr	r3, [pc, #208]	; (8008e24 <__kernel_rem_pio2+0x334>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	f7f7 fef6 	bl	8000b44 <__aeabi_dcmpge>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d140      	bne.n	8008dde <__kernel_rem_pio2+0x2ee>
 8008d5c:	4683      	mov	fp, r0
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2300      	movs	r3, #0
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 fecf 	bl	8000b08 <__aeabi_dcmpeq>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f000 80c1 	beq.w	8008ef2 <__kernel_rem_pio2+0x402>
 8008d70:	1e65      	subs	r5, r4, #1
 8008d72:	462b      	mov	r3, r5
 8008d74:	2200      	movs	r2, #0
 8008d76:	9900      	ldr	r1, [sp, #0]
 8008d78:	428b      	cmp	r3, r1
 8008d7a:	da6d      	bge.n	8008e58 <__kernel_rem_pio2+0x368>
 8008d7c:	2a00      	cmp	r2, #0
 8008d7e:	f000 808a 	beq.w	8008e96 <__kernel_rem_pio2+0x3a6>
 8008d82:	ab0c      	add	r3, sp, #48	; 0x30
 8008d84:	f1aa 0a18 	sub.w	sl, sl, #24
 8008d88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80ae 	beq.w	8008eee <__kernel_rem_pio2+0x3fe>
 8008d92:	4650      	mov	r0, sl
 8008d94:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008e08 <__kernel_rem_pio2+0x318>
 8008d98:	f000 f9fa 	bl	8009190 <scalbn>
 8008d9c:	1c6b      	adds	r3, r5, #1
 8008d9e:	00da      	lsls	r2, r3, #3
 8008da0:	9205      	str	r2, [sp, #20]
 8008da2:	ec57 6b10 	vmov	r6, r7, d0
 8008da6:	aa70      	add	r2, sp, #448	; 0x1c0
 8008da8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008e1c <__kernel_rem_pio2+0x32c>
 8008dac:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008db0:	462c      	mov	r4, r5
 8008db2:	f04f 0800 	mov.w	r8, #0
 8008db6:	2c00      	cmp	r4, #0
 8008db8:	f280 80d4 	bge.w	8008f64 <__kernel_rem_pio2+0x474>
 8008dbc:	462c      	mov	r4, r5
 8008dbe:	2c00      	cmp	r4, #0
 8008dc0:	f2c0 8102 	blt.w	8008fc8 <__kernel_rem_pio2+0x4d8>
 8008dc4:	4b18      	ldr	r3, [pc, #96]	; (8008e28 <__kernel_rem_pio2+0x338>)
 8008dc6:	461e      	mov	r6, r3
 8008dc8:	ab70      	add	r3, sp, #448	; 0x1c0
 8008dca:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008dce:	1b2b      	subs	r3, r5, r4
 8008dd0:	f04f 0900 	mov.w	r9, #0
 8008dd4:	f04f 0a00 	mov.w	sl, #0
 8008dd8:	2700      	movs	r7, #0
 8008dda:	9306      	str	r3, [sp, #24]
 8008ddc:	e0e6      	b.n	8008fac <__kernel_rem_pio2+0x4bc>
 8008dde:	f04f 0b02 	mov.w	fp, #2
 8008de2:	e756      	b.n	8008c92 <__kernel_rem_pio2+0x1a2>
 8008de4:	f8d8 3000 	ldr.w	r3, [r8]
 8008de8:	bb05      	cbnz	r5, 8008e2c <__kernel_rem_pio2+0x33c>
 8008dea:	b123      	cbz	r3, 8008df6 <__kernel_rem_pio2+0x306>
 8008dec:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008df0:	f8c8 3000 	str.w	r3, [r8]
 8008df4:	2301      	movs	r3, #1
 8008df6:	3201      	adds	r2, #1
 8008df8:	f108 0804 	add.w	r8, r8, #4
 8008dfc:	461d      	mov	r5, r3
 8008dfe:	e74f      	b.n	8008ca0 <__kernel_rem_pio2+0x1b0>
	...
 8008e0c:	3ff00000 	.word	0x3ff00000
 8008e10:	08009968 	.word	0x08009968
 8008e14:	40200000 	.word	0x40200000
 8008e18:	3ff00000 	.word	0x3ff00000
 8008e1c:	3e700000 	.word	0x3e700000
 8008e20:	41700000 	.word	0x41700000
 8008e24:	3fe00000 	.word	0x3fe00000
 8008e28:	08009928 	.word	0x08009928
 8008e2c:	1acb      	subs	r3, r1, r3
 8008e2e:	f8c8 3000 	str.w	r3, [r8]
 8008e32:	462b      	mov	r3, r5
 8008e34:	e7df      	b.n	8008df6 <__kernel_rem_pio2+0x306>
 8008e36:	1e62      	subs	r2, r4, #1
 8008e38:	ab0c      	add	r3, sp, #48	; 0x30
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e42:	a90c      	add	r1, sp, #48	; 0x30
 8008e44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e48:	e738      	b.n	8008cbc <__kernel_rem_pio2+0x1cc>
 8008e4a:	1e62      	subs	r2, r4, #1
 8008e4c:	ab0c      	add	r3, sp, #48	; 0x30
 8008e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e52:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e56:	e7f4      	b.n	8008e42 <__kernel_rem_pio2+0x352>
 8008e58:	a90c      	add	r1, sp, #48	; 0x30
 8008e5a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	430a      	orrs	r2, r1
 8008e62:	e788      	b.n	8008d76 <__kernel_rem_pio2+0x286>
 8008e64:	3301      	adds	r3, #1
 8008e66:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008e6a:	2900      	cmp	r1, #0
 8008e6c:	d0fa      	beq.n	8008e64 <__kernel_rem_pio2+0x374>
 8008e6e:	9a08      	ldr	r2, [sp, #32]
 8008e70:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008e74:	446a      	add	r2, sp
 8008e76:	3a98      	subs	r2, #152	; 0x98
 8008e78:	9208      	str	r2, [sp, #32]
 8008e7a:	9a06      	ldr	r2, [sp, #24]
 8008e7c:	a920      	add	r1, sp, #128	; 0x80
 8008e7e:	18a2      	adds	r2, r4, r2
 8008e80:	18e3      	adds	r3, r4, r3
 8008e82:	f104 0801 	add.w	r8, r4, #1
 8008e86:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008e8a:	9302      	str	r3, [sp, #8]
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	4543      	cmp	r3, r8
 8008e90:	da04      	bge.n	8008e9c <__kernel_rem_pio2+0x3ac>
 8008e92:	461c      	mov	r4, r3
 8008e94:	e6a2      	b.n	8008bdc <__kernel_rem_pio2+0xec>
 8008e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e7e4      	b.n	8008e66 <__kernel_rem_pio2+0x376>
 8008e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008ea2:	f7f7 fb5f 	bl	8000564 <__aeabi_i2d>
 8008ea6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eac:	46ab      	mov	fp, r5
 8008eae:	461c      	mov	r4, r3
 8008eb0:	f04f 0900 	mov.w	r9, #0
 8008eb4:	2600      	movs	r6, #0
 8008eb6:	2700      	movs	r7, #0
 8008eb8:	9b05      	ldr	r3, [sp, #20]
 8008eba:	4599      	cmp	r9, r3
 8008ebc:	dd06      	ble.n	8008ecc <__kernel_rem_pio2+0x3dc>
 8008ebe:	9b08      	ldr	r3, [sp, #32]
 8008ec0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008ec4:	f108 0801 	add.w	r8, r8, #1
 8008ec8:	9308      	str	r3, [sp, #32]
 8008eca:	e7df      	b.n	8008e8c <__kernel_rem_pio2+0x39c>
 8008ecc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008ed0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008ed4:	f7f7 fbb0 	bl	8000638 <__aeabi_dmul>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4630      	mov	r0, r6
 8008ede:	4639      	mov	r1, r7
 8008ee0:	f7f7 f9f4 	bl	80002cc <__adddf3>
 8008ee4:	f109 0901 	add.w	r9, r9, #1
 8008ee8:	4606      	mov	r6, r0
 8008eea:	460f      	mov	r7, r1
 8008eec:	e7e4      	b.n	8008eb8 <__kernel_rem_pio2+0x3c8>
 8008eee:	3d01      	subs	r5, #1
 8008ef0:	e747      	b.n	8008d82 <__kernel_rem_pio2+0x292>
 8008ef2:	ec47 6b10 	vmov	d0, r6, r7
 8008ef6:	f1ca 0000 	rsb	r0, sl, #0
 8008efa:	f000 f949 	bl	8009190 <scalbn>
 8008efe:	ec57 6b10 	vmov	r6, r7, d0
 8008f02:	4ba0      	ldr	r3, [pc, #640]	; (8009184 <__kernel_rem_pio2+0x694>)
 8008f04:	ee10 0a10 	vmov	r0, s0
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fe1a 	bl	8000b44 <__aeabi_dcmpge>
 8008f10:	b1f8      	cbz	r0, 8008f52 <__kernel_rem_pio2+0x462>
 8008f12:	4b9d      	ldr	r3, [pc, #628]	; (8009188 <__kernel_rem_pio2+0x698>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	4630      	mov	r0, r6
 8008f18:	4639      	mov	r1, r7
 8008f1a:	f7f7 fb8d 	bl	8000638 <__aeabi_dmul>
 8008f1e:	f7f7 fe3b 	bl	8000b98 <__aeabi_d2iz>
 8008f22:	4680      	mov	r8, r0
 8008f24:	f7f7 fb1e 	bl	8000564 <__aeabi_i2d>
 8008f28:	4b96      	ldr	r3, [pc, #600]	; (8009184 <__kernel_rem_pio2+0x694>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f7f7 fb84 	bl	8000638 <__aeabi_dmul>
 8008f30:	460b      	mov	r3, r1
 8008f32:	4602      	mov	r2, r0
 8008f34:	4639      	mov	r1, r7
 8008f36:	4630      	mov	r0, r6
 8008f38:	f7f7 f9c6 	bl	80002c8 <__aeabi_dsub>
 8008f3c:	f7f7 fe2c 	bl	8000b98 <__aeabi_d2iz>
 8008f40:	1c65      	adds	r5, r4, #1
 8008f42:	ab0c      	add	r3, sp, #48	; 0x30
 8008f44:	f10a 0a18 	add.w	sl, sl, #24
 8008f48:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f4c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008f50:	e71f      	b.n	8008d92 <__kernel_rem_pio2+0x2a2>
 8008f52:	4630      	mov	r0, r6
 8008f54:	4639      	mov	r1, r7
 8008f56:	f7f7 fe1f 	bl	8000b98 <__aeabi_d2iz>
 8008f5a:	ab0c      	add	r3, sp, #48	; 0x30
 8008f5c:	4625      	mov	r5, r4
 8008f5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f62:	e716      	b.n	8008d92 <__kernel_rem_pio2+0x2a2>
 8008f64:	ab0c      	add	r3, sp, #48	; 0x30
 8008f66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008f6a:	f7f7 fafb 	bl	8000564 <__aeabi_i2d>
 8008f6e:	4632      	mov	r2, r6
 8008f70:	463b      	mov	r3, r7
 8008f72:	f7f7 fb61 	bl	8000638 <__aeabi_dmul>
 8008f76:	4642      	mov	r2, r8
 8008f78:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	4630      	mov	r0, r6
 8008f80:	4639      	mov	r1, r7
 8008f82:	f7f7 fb59 	bl	8000638 <__aeabi_dmul>
 8008f86:	3c01      	subs	r4, #1
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	e713      	b.n	8008db6 <__kernel_rem_pio2+0x2c6>
 8008f8e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008f92:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008f96:	f7f7 fb4f 	bl	8000638 <__aeabi_dmul>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4648      	mov	r0, r9
 8008fa0:	4651      	mov	r1, sl
 8008fa2:	f7f7 f993 	bl	80002cc <__adddf3>
 8008fa6:	3701      	adds	r7, #1
 8008fa8:	4681      	mov	r9, r0
 8008faa:	468a      	mov	sl, r1
 8008fac:	9b00      	ldr	r3, [sp, #0]
 8008fae:	429f      	cmp	r7, r3
 8008fb0:	dc02      	bgt.n	8008fb8 <__kernel_rem_pio2+0x4c8>
 8008fb2:	9b06      	ldr	r3, [sp, #24]
 8008fb4:	429f      	cmp	r7, r3
 8008fb6:	ddea      	ble.n	8008f8e <__kernel_rem_pio2+0x49e>
 8008fb8:	9a06      	ldr	r2, [sp, #24]
 8008fba:	ab48      	add	r3, sp, #288	; 0x120
 8008fbc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008fc0:	e9c6 9a00 	strd	r9, sl, [r6]
 8008fc4:	3c01      	subs	r4, #1
 8008fc6:	e6fa      	b.n	8008dbe <__kernel_rem_pio2+0x2ce>
 8008fc8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	dc0b      	bgt.n	8008fe6 <__kernel_rem_pio2+0x4f6>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	dc39      	bgt.n	8009046 <__kernel_rem_pio2+0x556>
 8008fd2:	d05d      	beq.n	8009090 <__kernel_rem_pio2+0x5a0>
 8008fd4:	9b02      	ldr	r3, [sp, #8]
 8008fd6:	f003 0007 	and.w	r0, r3, #7
 8008fda:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008fde:	ecbd 8b02 	vpop	{d8}
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d1f3      	bne.n	8008fd4 <__kernel_rem_pio2+0x4e4>
 8008fec:	9b05      	ldr	r3, [sp, #20]
 8008fee:	9500      	str	r5, [sp, #0]
 8008ff0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008ff4:	eb0d 0403 	add.w	r4, sp, r3
 8008ff8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008ffc:	46a2      	mov	sl, r4
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	f1aa 0a08 	sub.w	sl, sl, #8
 8009006:	dc69      	bgt.n	80090dc <__kernel_rem_pio2+0x5ec>
 8009008:	46aa      	mov	sl, r5
 800900a:	f1ba 0f01 	cmp.w	sl, #1
 800900e:	f1a4 0408 	sub.w	r4, r4, #8
 8009012:	f300 8083 	bgt.w	800911c <__kernel_rem_pio2+0x62c>
 8009016:	9c05      	ldr	r4, [sp, #20]
 8009018:	ab48      	add	r3, sp, #288	; 0x120
 800901a:	441c      	add	r4, r3
 800901c:	2000      	movs	r0, #0
 800901e:	2100      	movs	r1, #0
 8009020:	2d01      	cmp	r5, #1
 8009022:	f300 809a 	bgt.w	800915a <__kernel_rem_pio2+0x66a>
 8009026:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800902a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800902e:	f1bb 0f00 	cmp.w	fp, #0
 8009032:	f040 8098 	bne.w	8009166 <__kernel_rem_pio2+0x676>
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	e9c3 7800 	strd	r7, r8, [r3]
 800903c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009040:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009044:	e7c6      	b.n	8008fd4 <__kernel_rem_pio2+0x4e4>
 8009046:	9e05      	ldr	r6, [sp, #20]
 8009048:	ab48      	add	r3, sp, #288	; 0x120
 800904a:	441e      	add	r6, r3
 800904c:	462c      	mov	r4, r5
 800904e:	2000      	movs	r0, #0
 8009050:	2100      	movs	r1, #0
 8009052:	2c00      	cmp	r4, #0
 8009054:	da33      	bge.n	80090be <__kernel_rem_pio2+0x5ce>
 8009056:	f1bb 0f00 	cmp.w	fp, #0
 800905a:	d036      	beq.n	80090ca <__kernel_rem_pio2+0x5da>
 800905c:	4602      	mov	r2, r0
 800905e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009062:	9c04      	ldr	r4, [sp, #16]
 8009064:	e9c4 2300 	strd	r2, r3, [r4]
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009070:	f7f7 f92a 	bl	80002c8 <__aeabi_dsub>
 8009074:	ae4a      	add	r6, sp, #296	; 0x128
 8009076:	2401      	movs	r4, #1
 8009078:	42a5      	cmp	r5, r4
 800907a:	da29      	bge.n	80090d0 <__kernel_rem_pio2+0x5e0>
 800907c:	f1bb 0f00 	cmp.w	fp, #0
 8009080:	d002      	beq.n	8009088 <__kernel_rem_pio2+0x598>
 8009082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009086:	4619      	mov	r1, r3
 8009088:	9b04      	ldr	r3, [sp, #16]
 800908a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800908e:	e7a1      	b.n	8008fd4 <__kernel_rem_pio2+0x4e4>
 8009090:	9c05      	ldr	r4, [sp, #20]
 8009092:	ab48      	add	r3, sp, #288	; 0x120
 8009094:	441c      	add	r4, r3
 8009096:	2000      	movs	r0, #0
 8009098:	2100      	movs	r1, #0
 800909a:	2d00      	cmp	r5, #0
 800909c:	da09      	bge.n	80090b2 <__kernel_rem_pio2+0x5c2>
 800909e:	f1bb 0f00 	cmp.w	fp, #0
 80090a2:	d002      	beq.n	80090aa <__kernel_rem_pio2+0x5ba>
 80090a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a8:	4619      	mov	r1, r3
 80090aa:	9b04      	ldr	r3, [sp, #16]
 80090ac:	e9c3 0100 	strd	r0, r1, [r3]
 80090b0:	e790      	b.n	8008fd4 <__kernel_rem_pio2+0x4e4>
 80090b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80090b6:	f7f7 f909 	bl	80002cc <__adddf3>
 80090ba:	3d01      	subs	r5, #1
 80090bc:	e7ed      	b.n	800909a <__kernel_rem_pio2+0x5aa>
 80090be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80090c2:	f7f7 f903 	bl	80002cc <__adddf3>
 80090c6:	3c01      	subs	r4, #1
 80090c8:	e7c3      	b.n	8009052 <__kernel_rem_pio2+0x562>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	e7c8      	b.n	8009062 <__kernel_rem_pio2+0x572>
 80090d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80090d4:	f7f7 f8fa 	bl	80002cc <__adddf3>
 80090d8:	3401      	adds	r4, #1
 80090da:	e7cd      	b.n	8009078 <__kernel_rem_pio2+0x588>
 80090dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80090e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	4632      	mov	r2, r6
 80090ec:	463b      	mov	r3, r7
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 f8eb 	bl	80002cc <__adddf3>
 80090f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4640      	mov	r0, r8
 8009100:	4649      	mov	r1, r9
 8009102:	f7f7 f8e1 	bl	80002c8 <__aeabi_dsub>
 8009106:	4632      	mov	r2, r6
 8009108:	463b      	mov	r3, r7
 800910a:	f7f7 f8df 	bl	80002cc <__adddf3>
 800910e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009112:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009116:	ed8a 7b00 	vstr	d7, [sl]
 800911a:	e770      	b.n	8008ffe <__kernel_rem_pio2+0x50e>
 800911c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009120:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009124:	4640      	mov	r0, r8
 8009126:	4632      	mov	r2, r6
 8009128:	463b      	mov	r3, r7
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 f8ce 	bl	80002cc <__adddf3>
 8009130:	e9cd 0100 	strd	r0, r1, [sp]
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4640      	mov	r0, r8
 800913a:	4649      	mov	r1, r9
 800913c:	f7f7 f8c4 	bl	80002c8 <__aeabi_dsub>
 8009140:	4632      	mov	r2, r6
 8009142:	463b      	mov	r3, r7
 8009144:	f7f7 f8c2 	bl	80002cc <__adddf3>
 8009148:	ed9d 7b00 	vldr	d7, [sp]
 800914c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009150:	ed84 7b00 	vstr	d7, [r4]
 8009154:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009158:	e757      	b.n	800900a <__kernel_rem_pio2+0x51a>
 800915a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800915e:	f7f7 f8b5 	bl	80002cc <__adddf3>
 8009162:	3d01      	subs	r5, #1
 8009164:	e75c      	b.n	8009020 <__kernel_rem_pio2+0x530>
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	9a04      	ldr	r2, [sp, #16]
 800916a:	601f      	str	r7, [r3, #0]
 800916c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009170:	605c      	str	r4, [r3, #4]
 8009172:	609d      	str	r5, [r3, #8]
 8009174:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009178:	60d3      	str	r3, [r2, #12]
 800917a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800917e:	6110      	str	r0, [r2, #16]
 8009180:	6153      	str	r3, [r2, #20]
 8009182:	e727      	b.n	8008fd4 <__kernel_rem_pio2+0x4e4>
 8009184:	41700000 	.word	0x41700000
 8009188:	3e700000 	.word	0x3e700000
 800918c:	00000000 	.word	0x00000000

08009190 <scalbn>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	ec55 4b10 	vmov	r4, r5, d0
 8009196:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800919a:	4606      	mov	r6, r0
 800919c:	462b      	mov	r3, r5
 800919e:	b999      	cbnz	r1, 80091c8 <scalbn+0x38>
 80091a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091a4:	4323      	orrs	r3, r4
 80091a6:	d03f      	beq.n	8009228 <scalbn+0x98>
 80091a8:	4b35      	ldr	r3, [pc, #212]	; (8009280 <scalbn+0xf0>)
 80091aa:	4629      	mov	r1, r5
 80091ac:	ee10 0a10 	vmov	r0, s0
 80091b0:	2200      	movs	r2, #0
 80091b2:	f7f7 fa41 	bl	8000638 <__aeabi_dmul>
 80091b6:	4b33      	ldr	r3, [pc, #204]	; (8009284 <scalbn+0xf4>)
 80091b8:	429e      	cmp	r6, r3
 80091ba:	4604      	mov	r4, r0
 80091bc:	460d      	mov	r5, r1
 80091be:	da10      	bge.n	80091e2 <scalbn+0x52>
 80091c0:	a327      	add	r3, pc, #156	; (adr r3, 8009260 <scalbn+0xd0>)
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	e01f      	b.n	8009208 <scalbn+0x78>
 80091c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80091cc:	4291      	cmp	r1, r2
 80091ce:	d10c      	bne.n	80091ea <scalbn+0x5a>
 80091d0:	ee10 2a10 	vmov	r2, s0
 80091d4:	4620      	mov	r0, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	f7f7 f878 	bl	80002cc <__adddf3>
 80091dc:	4604      	mov	r4, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	e022      	b.n	8009228 <scalbn+0x98>
 80091e2:	460b      	mov	r3, r1
 80091e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80091e8:	3936      	subs	r1, #54	; 0x36
 80091ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80091ee:	4296      	cmp	r6, r2
 80091f0:	dd0d      	ble.n	800920e <scalbn+0x7e>
 80091f2:	2d00      	cmp	r5, #0
 80091f4:	a11c      	add	r1, pc, #112	; (adr r1, 8009268 <scalbn+0xd8>)
 80091f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091fa:	da02      	bge.n	8009202 <scalbn+0x72>
 80091fc:	a11c      	add	r1, pc, #112	; (adr r1, 8009270 <scalbn+0xe0>)
 80091fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009202:	a319      	add	r3, pc, #100	; (adr r3, 8009268 <scalbn+0xd8>)
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	f7f7 fa16 	bl	8000638 <__aeabi_dmul>
 800920c:	e7e6      	b.n	80091dc <scalbn+0x4c>
 800920e:	1872      	adds	r2, r6, r1
 8009210:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009214:	428a      	cmp	r2, r1
 8009216:	dcec      	bgt.n	80091f2 <scalbn+0x62>
 8009218:	2a00      	cmp	r2, #0
 800921a:	dd08      	ble.n	800922e <scalbn+0x9e>
 800921c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009220:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009224:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009228:	ec45 4b10 	vmov	d0, r4, r5
 800922c:	bd70      	pop	{r4, r5, r6, pc}
 800922e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009232:	da08      	bge.n	8009246 <scalbn+0xb6>
 8009234:	2d00      	cmp	r5, #0
 8009236:	a10a      	add	r1, pc, #40	; (adr r1, 8009260 <scalbn+0xd0>)
 8009238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800923c:	dac0      	bge.n	80091c0 <scalbn+0x30>
 800923e:	a10e      	add	r1, pc, #56	; (adr r1, 8009278 <scalbn+0xe8>)
 8009240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009244:	e7bc      	b.n	80091c0 <scalbn+0x30>
 8009246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800924a:	3236      	adds	r2, #54	; 0x36
 800924c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009250:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009254:	4620      	mov	r0, r4
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <scalbn+0xf8>)
 8009258:	2200      	movs	r2, #0
 800925a:	e7d5      	b.n	8009208 <scalbn+0x78>
 800925c:	f3af 8000 	nop.w
 8009260:	c2f8f359 	.word	0xc2f8f359
 8009264:	01a56e1f 	.word	0x01a56e1f
 8009268:	8800759c 	.word	0x8800759c
 800926c:	7e37e43c 	.word	0x7e37e43c
 8009270:	8800759c 	.word	0x8800759c
 8009274:	fe37e43c 	.word	0xfe37e43c
 8009278:	c2f8f359 	.word	0xc2f8f359
 800927c:	81a56e1f 	.word	0x81a56e1f
 8009280:	43500000 	.word	0x43500000
 8009284:	ffff3cb0 	.word	0xffff3cb0
 8009288:	3c900000 	.word	0x3c900000
 800928c:	00000000 	.word	0x00000000

08009290 <floor>:
 8009290:	ec51 0b10 	vmov	r0, r1, d0
 8009294:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80092a0:	2e13      	cmp	r6, #19
 80092a2:	ee10 5a10 	vmov	r5, s0
 80092a6:	ee10 8a10 	vmov	r8, s0
 80092aa:	460c      	mov	r4, r1
 80092ac:	dc31      	bgt.n	8009312 <floor+0x82>
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	da14      	bge.n	80092dc <floor+0x4c>
 80092b2:	a333      	add	r3, pc, #204	; (adr r3, 8009380 <floor+0xf0>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f7f7 f808 	bl	80002cc <__adddf3>
 80092bc:	2200      	movs	r2, #0
 80092be:	2300      	movs	r3, #0
 80092c0:	f7f7 fc4a 	bl	8000b58 <__aeabi_dcmpgt>
 80092c4:	b138      	cbz	r0, 80092d6 <floor+0x46>
 80092c6:	2c00      	cmp	r4, #0
 80092c8:	da53      	bge.n	8009372 <floor+0xe2>
 80092ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80092ce:	4325      	orrs	r5, r4
 80092d0:	d052      	beq.n	8009378 <floor+0xe8>
 80092d2:	4c2d      	ldr	r4, [pc, #180]	; (8009388 <floor+0xf8>)
 80092d4:	2500      	movs	r5, #0
 80092d6:	4621      	mov	r1, r4
 80092d8:	4628      	mov	r0, r5
 80092da:	e024      	b.n	8009326 <floor+0x96>
 80092dc:	4f2b      	ldr	r7, [pc, #172]	; (800938c <floor+0xfc>)
 80092de:	4137      	asrs	r7, r6
 80092e0:	ea01 0307 	and.w	r3, r1, r7
 80092e4:	4303      	orrs	r3, r0
 80092e6:	d01e      	beq.n	8009326 <floor+0x96>
 80092e8:	a325      	add	r3, pc, #148	; (adr r3, 8009380 <floor+0xf0>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f6 ffed 	bl	80002cc <__adddf3>
 80092f2:	2200      	movs	r2, #0
 80092f4:	2300      	movs	r3, #0
 80092f6:	f7f7 fc2f 	bl	8000b58 <__aeabi_dcmpgt>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d0eb      	beq.n	80092d6 <floor+0x46>
 80092fe:	2c00      	cmp	r4, #0
 8009300:	bfbe      	ittt	lt
 8009302:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009306:	4133      	asrlt	r3, r6
 8009308:	18e4      	addlt	r4, r4, r3
 800930a:	ea24 0407 	bic.w	r4, r4, r7
 800930e:	2500      	movs	r5, #0
 8009310:	e7e1      	b.n	80092d6 <floor+0x46>
 8009312:	2e33      	cmp	r6, #51	; 0x33
 8009314:	dd0b      	ble.n	800932e <floor+0x9e>
 8009316:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800931a:	d104      	bne.n	8009326 <floor+0x96>
 800931c:	ee10 2a10 	vmov	r2, s0
 8009320:	460b      	mov	r3, r1
 8009322:	f7f6 ffd3 	bl	80002cc <__adddf3>
 8009326:	ec41 0b10 	vmov	d0, r0, r1
 800932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800932e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009332:	f04f 37ff 	mov.w	r7, #4294967295
 8009336:	40df      	lsrs	r7, r3
 8009338:	4238      	tst	r0, r7
 800933a:	d0f4      	beq.n	8009326 <floor+0x96>
 800933c:	a310      	add	r3, pc, #64	; (adr r3, 8009380 <floor+0xf0>)
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f7f6 ffc3 	bl	80002cc <__adddf3>
 8009346:	2200      	movs	r2, #0
 8009348:	2300      	movs	r3, #0
 800934a:	f7f7 fc05 	bl	8000b58 <__aeabi_dcmpgt>
 800934e:	2800      	cmp	r0, #0
 8009350:	d0c1      	beq.n	80092d6 <floor+0x46>
 8009352:	2c00      	cmp	r4, #0
 8009354:	da0a      	bge.n	800936c <floor+0xdc>
 8009356:	2e14      	cmp	r6, #20
 8009358:	d101      	bne.n	800935e <floor+0xce>
 800935a:	3401      	adds	r4, #1
 800935c:	e006      	b.n	800936c <floor+0xdc>
 800935e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009362:	2301      	movs	r3, #1
 8009364:	40b3      	lsls	r3, r6
 8009366:	441d      	add	r5, r3
 8009368:	45a8      	cmp	r8, r5
 800936a:	d8f6      	bhi.n	800935a <floor+0xca>
 800936c:	ea25 0507 	bic.w	r5, r5, r7
 8009370:	e7b1      	b.n	80092d6 <floor+0x46>
 8009372:	2500      	movs	r5, #0
 8009374:	462c      	mov	r4, r5
 8009376:	e7ae      	b.n	80092d6 <floor+0x46>
 8009378:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800937c:	e7ab      	b.n	80092d6 <floor+0x46>
 800937e:	bf00      	nop
 8009380:	8800759c 	.word	0x8800759c
 8009384:	7e37e43c 	.word	0x7e37e43c
 8009388:	bff00000 	.word	0xbff00000
 800938c:	000fffff 	.word	0x000fffff

08009390 <_init>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

0800939c <_fini>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr
