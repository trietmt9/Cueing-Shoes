
Cueing-Laser-IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  080085b8  080085b8  000185b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008944  08008944  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008944  08008944  00018944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800894c  0800894c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008950  08008950  00018950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001d4  08008b28  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08008b28  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6a1  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000279e  00000000  00000000  0002f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00032088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b91  00000000  00000000  00032f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024112  00000000  00000000  00033b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012897  00000000  00000000  00057c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e03fe  00000000  00000000  0006a4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e2c  00000000  00000000  0014a8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014f6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085a0 	.word	0x080085a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080085a0 	.word	0x080085a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <Vibrator_Control>:
 * @brief Controls the brightness of LED1.
 *
 * @param[in] brightness The brightness level of LED1.
 */
void Vibrator_Control(Vibrate_percentage pwm)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
    TIM3->CCR1 = pwm;
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <Vibrator_Control+0x20>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <Vibrator_Control+0x24>)
 8000ef8:	f003 ff7e 	bl	8004df8 <HAL_TIM_PWM_Start>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40000400 	.word	0x40000400
 8000f08:	20000338 	.word	0x20000338

08000f0c <Laser_Brightness>:
 * @brief Controls the brightness of LED2.
 *
 * @param[in] brightness The brightness level of LED2.
 */
void Laser_Brightness(Brightness brightness)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
    TIM3->CCR2 = brightness;
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <Laser_Brightness+0x20>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <Laser_Brightness+0x24>)
 8000f20:	f003 ff6a 	bl	8004df8 <HAL_TIM_PWM_Start>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40000400 	.word	0x40000400
 8000f30:	20000338 	.word	0x20000338

08000f34 <SPI_WriteRegisters>:
 *
 * @return None.
 *
 */
void SPI_WriteRegisters(SPI_HandleTypeDef *SPIx, uint8_t csPin, uint8_t Register, uint8_t* pData, uint8_t Data_length)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	72fb      	strb	r3, [r7, #11]
 8000f42:	4613      	mov	r3, r2
 8000f44:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(GPIOA, csPin, RESET);
 8000f46:	7afb      	ldrb	r3, [r7, #11]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <SPI_WriteRegisters+0x58>)
 8000f50:	f002 fa46 	bl	80033e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 8000f54:	f107 010a 	add.w	r1, r7, #10
 8000f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f003 f8e3 	bl	800412a <HAL_SPI_Transmit>
  HAL_SPI_Transmit(SPIx, pData, Data_length, SPI_TIMEOUT);
 8000f64:	7e3b      	ldrb	r3, [r7, #24]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f003 f8db 	bl	800412a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, csPin, SET);
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <SPI_WriteRegisters+0x58>)
 8000f7e:	f002 fa2f 	bl	80033e0 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020000 	.word	0x40020000

08000f90 <SPI_ReadRegisters>:
 *
 * @return None.
 *
 */
void SPI_ReadRegisters(SPI_HandleTypeDef *SPIx, uint8_t csPin, uint8_t reg, uint8_t* pData, uint8_t Data_length)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	72fb      	strb	r3, [r7, #11]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	72bb      	strb	r3, [r7, #10]
  reg = 0x80 | (reg & 0x3F);
 8000fa2:	7abb      	ldrb	r3, [r7, #10]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	72bb      	strb	r3, [r7, #10]
  HAL_GPIO_WritePin(GPIOA, csPin, RESET);
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <SPI_ReadRegisters+0x6c>)
 8000fc0:	f002 fa0e 	bl	80033e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPIx, &reg, sizeof(reg), SPI_TIMEOUT);
 8000fc4:	f107 010a 	add.w	r1, r7, #10
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	2201      	movs	r2, #1
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f003 f8ab 	bl	800412a <HAL_SPI_Transmit>
  HAL_SPI_Receive(SPIx, pData, Data_length , SPI_TIMEOUT);
 8000fd4:	7e3b      	ldrb	r3, [r7, #24]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f003 f9e6 	bl	80043b0 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, csPin, SET);
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <SPI_ReadRegisters+0x6c>)
 8000fee:	f002 f9f7 	bl	80033e0 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020000 	.word	0x40020000

08001000 <IsWhoAmI>:
 *
 * @return None.
 *
 */
void IsWhoAmI(SPI_HandleTypeDef *SPIx, uint8_t* who_am_i)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af02      	add	r7, sp, #8
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  SPI_ReadRegisters(SPIx, IMU_AG_CS_Pin, WHO_AM_I, who_am_i, sizeof(who_am_i));
 800100a:	2304      	movs	r3, #4
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	220f      	movs	r2, #15
 8001012:	2110      	movs	r1, #16
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffbb 	bl	8000f90 <SPI_ReadRegisters>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <LSM9DS1_Init>:
 *
 * @param[in] SPIx Pointer to the SPI handle structure that contains the configuration information for the SPI module.
 * 
 */
void LSM9DS1_Init(SPI_HandleTypeDef* SPIx)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af02      	add	r7, sp, #8
 8001028:	6078      	str	r0, [r7, #4]
  uint8_t who_am_i, temp;
  IsWhoAmI(SPIx,&who_am_i);
 800102a:	f107 030f 	add.w	r3, r7, #15
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffe5 	bl	8001000 <IsWhoAmI>
  // Setup bandwidth and DPS of IMU's gyroscope 
  temp = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	73bb      	strb	r3, [r7, #14]
  temp = 0x78;
 800103a:	2378      	movs	r3, #120	; 0x78
 800103c:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG1_G, &temp, sizeof(temp));
 800103e:	f107 030e 	add.w	r3, r7, #14
 8001042:	2201      	movs	r2, #1
 8001044:	9200      	str	r2, [sp, #0]
 8001046:	2210      	movs	r2, #16
 8001048:	2110      	movs	r1, #16
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff72 	bl	8000f34 <SPI_WriteRegisters>
  // Configure output and interrupts selection 
  temp = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]
  temp = 0x00;
 8001054:	2300      	movs	r3, #0
 8001056:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG2_G, &temp, sizeof(temp));
 8001058:	f107 030e 	add.w	r3, r7, #14
 800105c:	2201      	movs	r2, #1
 800105e:	9200      	str	r2, [sp, #0]
 8001060:	2211      	movs	r2, #17
 8001062:	2110      	movs	r1, #16
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff65 	bl	8000f34 <SPI_WriteRegisters>
  // HIGH PASS FILTER
  temp = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	73bb      	strb	r3, [r7, #14]
  temp = 0x48u;
 800106e:	2348      	movs	r3, #72	; 0x48
 8001070:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG3_G, &temp, sizeof(temp));
 8001072:	f107 030e 	add.w	r3, r7, #14
 8001076:	2201      	movs	r2, #1
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	2212      	movs	r2, #18
 800107c:	2110      	movs	r1, #16
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff58 	bl	8000f34 <SPI_WriteRegisters>
  // ORIENT
  temp = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	73bb      	strb	r3, [r7, #14]
  temp = 0x00u;
 8001088:	2300      	movs	r3, #0
 800108a:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, ORIENT_CFG_G, &temp, sizeof(temp));
 800108c:	f107 030e 	add.w	r3, r7, #14
 8001090:	2201      	movs	r2, #1
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	2213      	movs	r2, #19
 8001096:	2110      	movs	r1, #16
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff4b 	bl	8000f34 <SPI_WriteRegisters>
  // interrupts
  temp = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	73bb      	strb	r3, [r7, #14]
  temp = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, INT_GEN_SRC_G, &temp, sizeof(temp));
 80010a6:	f107 030e 	add.w	r3, r7, #14
 80010aa:	2201      	movs	r2, #1
 80010ac:	9200      	str	r2, [sp, #0]
 80010ae:	2214      	movs	r2, #20
 80010b0:	2110      	movs	r1, #16
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff3e 	bl	8000f34 <SPI_WriteRegisters>
  //Gyro Output enable
  temp = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73bb      	strb	r3, [r7, #14]
  temp = 0x38u;
 80010bc:	2338      	movs	r3, #56	; 0x38
 80010be:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG4, &temp, sizeof(temp));
 80010c0:	f107 030e 	add.w	r3, r7, #14
 80010c4:	2201      	movs	r2, #1
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	221e      	movs	r2, #30
 80010ca:	2110      	movs	r1, #16
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff31 	bl	8000f34 <SPI_WriteRegisters>
  // Accelerometer output enable
  temp = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
  temp = 0x78u;
 80010d6:	2378      	movs	r3, #120	; 0x78
 80010d8:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG5_XL, &temp, sizeof(temp));
 80010da:	f107 030e 	add.w	r3, r7, #14
 80010de:	2201      	movs	r2, #1
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	221f      	movs	r2, #31
 80010e4:	2110      	movs	r1, #16
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff24 	bl	8000f34 <SPI_WriteRegisters>
  // BW and ODR
  temp = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73bb      	strb	r3, [r7, #14]
  temp = 0x16u;
 80010f0:	2316      	movs	r3, #22
 80010f2:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG6_XL, &temp, sizeof(temp));
 80010f4:	f107 030e 	add.w	r3, r7, #14
 80010f8:	2201      	movs	r2, #1
 80010fa:	9200      	str	r2, [sp, #0]
 80010fc:	2220      	movs	r2, #32
 80010fe:	2110      	movs	r1, #16
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff17 	bl	8000f34 <SPI_WriteRegisters>
  // cut off frequency = 16Hz and Output data rate = 59.5Hz
  temp = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	73bb      	strb	r3, [r7, #14]
  temp = 0x02u;
 800110a:	2302      	movs	r3, #2
 800110c:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG7_XL, &temp, sizeof(temp));
 800110e:	f107 030e 	add.w	r3, r7, #14
 8001112:	2201      	movs	r2, #1
 8001114:	9200      	str	r2, [sp, #0]
 8001116:	2221      	movs	r2, #33	; 0x21
 8001118:	2110      	movs	r1, #16
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff0a 	bl	8000f34 <SPI_WriteRegisters>
  //
  temp = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73bb      	strb	r3, [r7, #14]
  temp = 0x40u;
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG8, &temp, sizeof(temp));
 8001128:	f107 030e 	add.w	r3, r7, #14
 800112c:	2201      	movs	r2, #1
 800112e:	9200      	str	r2, [sp, #0]
 8001130:	2222      	movs	r2, #34	; 0x22
 8001132:	2110      	movs	r1, #16
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fefd 	bl	8000f34 <SPI_WriteRegisters>
  //
  temp = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	73bb      	strb	r3, [r7, #14]
  temp = 0x07u;
 800113e:	2307      	movs	r3, #7
 8001140:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, CTRL_REG9, &temp, sizeof(temp));
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	2201      	movs	r2, #1
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	2223      	movs	r2, #35	; 0x23
 800114c:	2110      	movs	r1, #16
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fef0 	bl	8000f34 <SPI_WriteRegisters>
  //
  temp = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73bb      	strb	r3, [r7, #14]
  temp = 0x00u;
 8001158:	2300      	movs	r3, #0
 800115a:	73bb      	strb	r3, [r7, #14]
  SPI_WriteRegisters(SPIx, IMU_AG_CS_Pin, FIFO_CTRL, &temp, sizeof(temp));
 800115c:	f107 030e 	add.w	r3, r7, #14
 8001160:	2201      	movs	r2, #1
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	222e      	movs	r2, #46	; 0x2e
 8001166:	2110      	movs	r1, #16
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fee3 	bl	8000f34 <SPI_WriteRegisters>

}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  Laser_Brightness(MAX_BEAM);
 8001180:	2064      	movs	r0, #100	; 0x64
 8001182:	f7ff fec3 	bl	8000f0c <Laser_Brightness>
//  Vibrator_Control(STRONG);
//  LSM9DS1_Read(&hspi1, &pData);
//  Vibrator_Control(STRONG);
  MotionCapture[0] = pData.Data_t.Ax;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_ADC_ConvCpltCallback+0x54>)
 8001188:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_ADC_ConvCpltCallback+0x58>)
 8001196:	edc3 7a00 	vstr	s15, [r3]
  MotionCapture[1] = pData.Data_t.Ay;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_ADC_ConvCpltCallback+0x54>)
 800119c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_ADC_ConvCpltCallback+0x58>)
 80011aa:	edc3 7a01 	vstr	s15, [r3, #4]
  MotionCapture[2] = pData.Data_t.Az;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_ADC_ConvCpltCallback+0x54>)
 80011b0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HAL_ADC_ConvCpltCallback+0x58>)
 80011be:	edc3 7a02 	vstr	s15, [r3, #8]


}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200003d0 	.word	0x200003d0
 80011d0:	200003f4 	.word	0x200003f4

080011d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e4:	d131      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x76>
  {
    if(analog[0] < 1000)
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ee:	d225      	bcs.n	800123c <HAL_TIM_PeriodElapsedCallback+0x68>
    {
      timeFoG++;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011fa:	701a      	strb	r2, [r3, #0]

      if(timeFoG >= 3 && timeFoG < 5 ) Vibrator_Control(WEAK);
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d907      	bls.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x40>
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d803      	bhi.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x40>
 800120c:	2046      	movs	r0, #70	; 0x46
 800120e:	f7ff fe69 	bl	8000ee4 <Vibrator_Control>
 8001212:	e01a      	b.n	800124a <HAL_TIM_PeriodElapsedCallback+0x76>
      else if(timeFoG >= 5 && timeFoG < 8) Vibrator_Control(MEDIUM);
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d907      	bls.n	800122c <HAL_TIM_PeriodElapsedCallback+0x58>
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b07      	cmp	r3, #7
 8001222:	d803      	bhi.n	800122c <HAL_TIM_PeriodElapsedCallback+0x58>
 8001224:	2050      	movs	r0, #80	; 0x50
 8001226:	f7ff fe5d 	bl	8000ee4 <Vibrator_Control>
 800122a:	e00e      	b.n	800124a <HAL_TIM_PeriodElapsedCallback+0x76>
      else if (timeFoG >= 8) Vibrator_Control(STRONG);
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b07      	cmp	r3, #7
 8001232:	d90a      	bls.n	800124a <HAL_TIM_PeriodElapsedCallback+0x76>
 8001234:	2064      	movs	r0, #100	; 0x64
 8001236:	f7ff fe55 	bl	8000ee4 <Vibrator_Control>
    {
      Vibrator_Control(FOG_NOT_DETECTED);
      timeFoG = 0;
    }
  }
}
 800123a:	e006      	b.n	800124a <HAL_TIM_PeriodElapsedCallback+0x76>
      Vibrator_Control(FOG_NOT_DETECTED);
 800123c:	203c      	movs	r0, #60	; 0x3c
 800123e:	f7ff fe51 	bl	8000ee4 <Vibrator_Control>
      timeFoG = 0;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
}
 8001248:	e7ff      	b.n	800124a <HAL_TIM_PeriodElapsedCallback+0x76>
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200003c8 	.word	0x200003c8
 8001258:	20000400 	.word	0x20000400

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001260:	f000 fe1e 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001264:	f000 f822 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001268:	f000 faa2 	bl	80017b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800126c:	f000 fa80 	bl	8001770 <MX_DMA_Init>
  MX_SPI1_Init();
 8001270:	f000 f8ee 	bl	8001450 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001274:	f000 f970 	bl	8001558 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001278:	f000 fa04 	bl	8001684 <MX_TIM4_Init>
  MX_ADC1_Init();
 800127c:	f000 f888 	bl	8001390 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001280:	f000 f91c 	bl	80014bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LSM9DS1_Init(&hspi1);
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <main+0x40>)
 8001286:	f7ff fecc 	bl	8001022 <LSM9DS1_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <main+0x44>)
 800128c:	f003 fcea 	bl	8004c64 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, analog, 2);
 8001290:	2202      	movs	r2, #2
 8001292:	4904      	ldr	r1, [pc, #16]	; (80012a4 <main+0x48>)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <main+0x4c>)
 8001296:	f000 feb9 	bl	800200c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800129a:	e7fe      	b.n	800129a <main+0x3e>
 800129c:	20000298 	.word	0x20000298
 80012a0:	200002f0 	.word	0x200002f0
 80012a4:	200003c8 	.word	0x200003c8
 80012a8:	200001f0 	.word	0x200001f0

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	; 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	2234      	movs	r2, #52	; 0x34
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 fa1d 	bl	80066fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <SystemClock_Config+0xdc>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <SystemClock_Config+0xdc>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <SystemClock_Config+0xdc>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	2300      	movs	r3, #0
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <SystemClock_Config+0xe0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a25      	ldr	r2, [pc, #148]	; (800138c <SystemClock_Config+0xe0>)
 80012f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <SystemClock_Config+0xe0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001308:	2301      	movs	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001310:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800131c:	2308      	movs	r3, #8
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001320:	23b4      	movs	r3, #180	; 0xb4
 8001322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001328:	2303      	movs	r3, #3
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800132c:	2302      	movs	r3, #2
 800132e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4618      	mov	r0, r3
 8001336:	f002 fbd1 	bl	8003adc <HAL_RCC_OscConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001340:	f000 facc 	bl	80018dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001344:	f002 f866 	bl	8003414 <HAL_PWREx_EnableOverDrive>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800134e:	f000 fac5 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800135e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001362:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2105      	movs	r1, #5
 8001370:	4618      	mov	r0, r3
 8001372:	f002 f89f 	bl	80034b4 <HAL_RCC_ClockConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800137c:	f000 faae 	bl	80018dc <Error_Handler>
  }
}
 8001380:	bf00      	nop
 8001382:	3750      	adds	r7, #80	; 0x50
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013a4:	4a28      	ldr	r2, [pc, #160]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013be:	2201      	movs	r2, #1
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013d2:	4a1e      	ldr	r2, [pc, #120]	; (800144c <MX_ADC1_Init+0xbc>)
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013de:	2202      	movs	r2, #2
 80013e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013f2:	f000 fdc7 	bl	8001f84 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 fa6e 	bl	80018dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001400:	230c      	movs	r3, #12
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_ADC1_Init+0xb4>)
 8001412:	f000 ff1f 	bl	8002254 <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800141c:	f000 fa5e 	bl	80018dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001420:	230d      	movs	r3, #13
 8001422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_ADC1_Init+0xb4>)
 800142e:	f000 ff11 	bl	8002254 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001438:	f000 fa50 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001f0 	.word	0x200001f0
 8001448:	40012000 	.word	0x40012000
 800144c:	0f000001 	.word	0x0f000001

08001450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <MX_SPI1_Init+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001470:	2202      	movs	r2, #2
 8001472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001476:	2201      	movs	r2, #1
 8001478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_SPI1_Init+0x64>)
 800147c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001484:	2218      	movs	r2, #24
 8001486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_SPI1_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_SPI1_Init+0x64>)
 800149c:	220a      	movs	r2, #10
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_SPI1_Init+0x64>)
 80014a2:	f002 fdb9 	bl	8004018 <HAL_SPI_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014ac:	f000 fa16 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000298 	.word	0x20000298
 80014b8:	40013000 	.word	0x40013000

080014bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_TIM2_Init+0x98>)
 80014da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_TIM2_Init+0x98>)
 80014e2:	f242 3228 	movw	r2, #9000	; 0x2328
 80014e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_TIM2_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_TIM2_Init+0x98>)
 80014f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80014f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_TIM2_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_TIM2_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001502:	4814      	ldr	r0, [pc, #80]	; (8001554 <MX_TIM2_Init+0x98>)
 8001504:	f003 fb5e 	bl	8004bc4 <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800150e:	f000 f9e5 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_TIM2_Init+0x98>)
 8001520:	f003 fee4 	bl	80052ec <HAL_TIM_ConfigClockSource>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800152a:	f000 f9d7 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_TIM2_Init+0x98>)
 800153c:	f004 fae2 	bl	8005b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001546:	f000 f9c9 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002f0 	.word	0x200002f0

08001558 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	; 0x38
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001588:	4b3c      	ldr	r3, [pc, #240]	; (800167c <MX_TIM3_Init+0x124>)
 800158a:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <MX_TIM3_Init+0x128>)
 800158c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <MX_TIM3_Init+0x124>)
 8001590:	2259      	movs	r2, #89	; 0x59
 8001592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <MX_TIM3_Init+0x124>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <MX_TIM3_Init+0x124>)
 800159c:	2263      	movs	r2, #99	; 0x63
 800159e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b36      	ldr	r3, [pc, #216]	; (800167c <MX_TIM3_Init+0x124>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <MX_TIM3_Init+0x124>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ac:	4833      	ldr	r0, [pc, #204]	; (800167c <MX_TIM3_Init+0x124>)
 80015ae:	f003 fb09 	bl	8004bc4 <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80015b8:	f000 f990 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c6:	4619      	mov	r1, r3
 80015c8:	482c      	ldr	r0, [pc, #176]	; (800167c <MX_TIM3_Init+0x124>)
 80015ca:	f003 fe8f 	bl	80052ec <HAL_TIM_ConfigClockSource>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80015d4:	f000 f982 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015d8:	4828      	ldr	r0, [pc, #160]	; (800167c <MX_TIM3_Init+0x124>)
 80015da:	f003 fbb3 	bl	8004d44 <HAL_TIM_PWM_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80015e4:	f000 f97a 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	4619      	mov	r1, r3
 80015f6:	4821      	ldr	r0, [pc, #132]	; (800167c <MX_TIM3_Init+0x124>)
 80015f8:	f004 fa84 	bl	8005b04 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001602:	f000 f96b 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2360      	movs	r3, #96	; 0x60
 8001608:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	4817      	ldr	r0, [pc, #92]	; (800167c <MX_TIM3_Init+0x124>)
 800161e:	f003 fda3 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001628:	f000 f958 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2204      	movs	r2, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4812      	ldr	r0, [pc, #72]	; (800167c <MX_TIM3_Init+0x124>)
 8001634:	f003 fd98 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800163e:	f000 f94d 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2208      	movs	r2, #8
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <MX_TIM3_Init+0x124>)
 800164a:	f003 fd8d 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001654:	f000 f942 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	220c      	movs	r2, #12
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <MX_TIM3_Init+0x124>)
 8001660:	f003 fd82 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 800166a:	f000 f937 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <MX_TIM3_Init+0x124>)
 8001670:	f000 fa74 	bl	8001b5c <HAL_TIM_MspPostInit>

}
 8001674:	bf00      	nop
 8001676:	3738      	adds	r7, #56	; 0x38
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000338 	.word	0x20000338
 8001680:	40000400 	.word	0x40000400

08001684 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08e      	sub	sp, #56	; 0x38
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016b4:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <MX_TIM4_Init+0xe4>)
 80016b6:	4a2d      	ldr	r2, [pc, #180]	; (800176c <MX_TIM4_Init+0xe8>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <MX_TIM4_Init+0xe4>)
 80016bc:	f242 3227 	movw	r2, #8999	; 0x2327
 80016c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <MX_TIM4_Init+0xe4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <MX_TIM4_Init+0xe4>)
 80016ca:	22c7      	movs	r2, #199	; 0xc7
 80016cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <MX_TIM4_Init+0xe4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <MX_TIM4_Init+0xe4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016da:	4823      	ldr	r0, [pc, #140]	; (8001768 <MX_TIM4_Init+0xe4>)
 80016dc:	f003 fa72 	bl	8004bc4 <HAL_TIM_Base_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016e6:	f000 f8f9 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f4:	4619      	mov	r1, r3
 80016f6:	481c      	ldr	r0, [pc, #112]	; (8001768 <MX_TIM4_Init+0xe4>)
 80016f8:	f003 fdf8 	bl	80052ec <HAL_TIM_ConfigClockSource>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001702:	f000 f8eb 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001706:	4818      	ldr	r0, [pc, #96]	; (8001768 <MX_TIM4_Init+0xe4>)
 8001708:	f003 fb1c 	bl	8004d44 <HAL_TIM_PWM_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001712:	f000 f8e3 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800171e:	f107 0320 	add.w	r3, r7, #32
 8001722:	4619      	mov	r1, r3
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <MX_TIM4_Init+0xe4>)
 8001726:	f004 f9ed 	bl	8005b04 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001730:	f000 f8d4 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001734:	2360      	movs	r3, #96	; 0x60
 8001736:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_TIM4_Init+0xe4>)
 800174c:	f003 fd0c 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001756:	f000 f8c1 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_TIM4_Init+0xe4>)
 800175c:	f000 f9fe 	bl	8001b5c <HAL_TIM_MspPostInit>

}
 8001760:	bf00      	nop
 8001762:	3738      	adds	r7, #56	; 0x38
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000380 	.word	0x20000380
 800176c:	40000800 	.word	0x40000800

08001770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_DMA_Init+0x3c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <MX_DMA_Init+0x3c>)
 8001780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_DMA_Init+0x3c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2038      	movs	r0, #56	; 0x38
 8001798:	f001 f8e7 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800179c:	2038      	movs	r0, #56	; 0x38
 800179e:	f001 f900 	bl	80029a2 <HAL_NVIC_EnableIRQ>

}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <MX_GPIO_Init+0x11c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <MX_GPIO_Init+0x11c>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <MX_GPIO_Init+0x11c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <MX_GPIO_Init+0x11c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a38      	ldr	r2, [pc, #224]	; (80018cc <MX_GPIO_Init+0x11c>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <MX_GPIO_Init+0x11c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <MX_GPIO_Init+0x11c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a31      	ldr	r2, [pc, #196]	; (80018cc <MX_GPIO_Init+0x11c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <MX_GPIO_Init+0x11c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <MX_GPIO_Init+0x11c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <MX_GPIO_Init+0x11c>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <MX_GPIO_Init+0x11c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|IMU_M_CS_Pin|IMU_AG_CS_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	211c      	movs	r1, #28
 800183a:	4825      	ldr	r0, [pc, #148]	; (80018d0 <MX_GPIO_Init+0x120>)
 800183c:	f001 fdd0 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2120      	movs	r1, #32
 8001844:	4823      	ldr	r0, [pc, #140]	; (80018d4 <MX_GPIO_Init+0x124>)
 8001846:	f001 fdcb 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2101      	movs	r1, #1
 800184e:	4822      	ldr	r0, [pc, #136]	; (80018d8 <MX_GPIO_Init+0x128>)
 8001850:	f001 fdc6 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 IMU_M_CS_Pin IMU_AG_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|IMU_M_CS_Pin|IMU_AG_CS_Pin;
 8001854:	231c      	movs	r3, #28
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4819      	ldr	r0, [pc, #100]	; (80018d0 <MX_GPIO_Init+0x120>)
 800186c:	f001 fc24 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_INT_Pin */
  GPIO_InitStruct.Pin = NRF24_INT_Pin;
 8001870:	2310      	movs	r3, #16
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001874:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_INT_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <MX_GPIO_Init+0x124>)
 8001886:	f001 fc17 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CS_Pin */
  GPIO_InitStruct.Pin = NRF24_CS_Pin;
 800188a:	2320      	movs	r3, #32
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CS_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <MX_GPIO_Init+0x124>)
 80018a2:	f001 fc09 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80018a6:	2301      	movs	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <MX_GPIO_Init+0x128>)
 80018be:	f001 fbfb 	bl	80030b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020400 	.word	0x40020400

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <Error_Handler+0x8>
	...

080018e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_MspInit+0x4c>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_MspInit+0x4c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001926:	2007      	movs	r0, #7
 8001928:	f001 f814 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <HAL_ADC_MspInit+0xdc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d158      	bne.n	8001a0c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_ADC_MspInit+0xe0>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a2d      	ldr	r2, [pc, #180]	; (8001a18 <HAL_ADC_MspInit+0xe0>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_ADC_MspInit+0xe0>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_ADC_MspInit+0xe0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_ADC_MspInit+0xe0>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_ADC_MspInit+0xe0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001992:	230c      	movs	r3, #12
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001996:	2303      	movs	r3, #3
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	481d      	ldr	r0, [pc, #116]	; (8001a1c <HAL_ADC_MspInit+0xe4>)
 80019a6:	f001 fb87 	bl	80030b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019ac:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_ADC_MspInit+0xec>)
 80019ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 80019f2:	f000 fff1 	bl	80029d8 <HAL_DMA_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80019fc:	f7ff ff6e 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_ADC_MspInit+0xe8>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40012000 	.word	0x40012000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	20000238 	.word	0x20000238
 8001a24:	40026410 	.word	0x40026410

08001a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_SPI_MspInit+0x84>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d12b      	bne.n	8001aa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a82:	23e0      	movs	r3, #224	; 0xe0
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a92:	2305      	movs	r3, #5
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <HAL_SPI_MspInit+0x8c>)
 8001a9e:	f001 fb0b 	bl	80030b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40013000 	.word	0x40013000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac8:	d116      	bne.n	8001af8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	201c      	movs	r0, #28
 8001aec:	f000 ff3d 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001af0:	201c      	movs	r0, #28
 8001af2:	f000 ff56 	bl	80029a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001af6:	e026      	b.n	8001b46 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <HAL_TIM_Base_MspInit+0x9c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10e      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
}
 8001b1e:	e012      	b.n	8001b46 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_TIM_Base_MspInit+0xa0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10d      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_TIM_Base_MspInit+0x98>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40000800 	.word	0x40000800

08001b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <HAL_TIM_MspPostInit+0xb0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d11f      	bne.n	8001bbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_TIM_MspPostInit+0xb4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_TIM_MspPostInit+0xb4>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_TIM_MspPostInit+0xb4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b9a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bac:	2302      	movs	r3, #2
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4817      	ldr	r0, [pc, #92]	; (8001c14 <HAL_TIM_MspPostInit+0xb8>)
 8001bb8:	f001 fa7e 	bl	80030b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bbc:	e022      	b.n	8001c04 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <HAL_TIM_MspPostInit+0xbc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d11d      	bne.n	8001c04 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_TIM_MspPostInit+0xb4>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_TIM_MspPostInit+0xb4>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_TIM_MspPostInit+0xb4>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001be4:	2340      	movs	r3, #64	; 0x40
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <HAL_TIM_MspPostInit+0xc0>)
 8001c00:	f001 fa5a 	bl	80030b8 <HAL_GPIO_Init>
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40000800 	.word	0x40000800
 8001c1c:	40020400 	.word	0x40020400

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c24:	e7fe      	b.n	8001c24 <NMI_Handler+0x4>

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <MemManage_Handler+0x4>

08001c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6c:	f000 f96a 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM2_IRQHandler+0x10>)
 8001c7a:	f003 f985 	bl	8004f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002f0 	.word	0x200002f0

08001c88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <DMA2_Stream0_IRQHandler+0x10>)
 8001c8e:	f000 ffa9 	bl	8002be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000238 	.word	0x20000238

08001c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_kill>:

int _kill(int pid, int sig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb6:	f004 fd73 	bl	80067a0 <__errno>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2216      	movs	r2, #22
 8001cbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_exit>:

void _exit (int status)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ffe7 	bl	8001cac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cde:	e7fe      	b.n	8001cde <_exit+0x12>

08001ce0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e00a      	b.n	8001d08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf2:	f3af 8000 	nop.w
 8001cf6:	4601      	mov	r1, r0
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf0      	blt.n	8001cf2 <_read+0x12>
  }

  return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e009      	b.n	8001d40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	60ba      	str	r2, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	dbf1      	blt.n	8001d2c <_write+0x12>
  }
  return len;
 8001d48:	687b      	ldr	r3, [r7, #4]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_close>:

int _close(int file)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_isatty>:

int _isatty(int file)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <_sbrk+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <_sbrk+0x60>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_sbrk+0x64>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <_sbrk+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d207      	bcs.n	8001dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dec:	f004 fcd8 	bl	80067a0 <__errno>
 8001df0:	4603      	mov	r3, r0
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <_sbrk+0x64>)
 8001e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20020000 	.word	0x20020000
 8001e1c:	00000400 	.word	0x00000400
 8001e20:	20000404 	.word	0x20000404
 8001e24:	20000558 	.word	0x20000558

08001e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SystemInit+0x20>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <SystemInit+0x20>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e50:	f7ff ffea 	bl	8001e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e56:	490d      	ldr	r1, [pc, #52]	; (8001e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	; (8001e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f004 fc97 	bl	80067ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7ff f9ed 	bl	800125c <main>
  bx  lr    
 8001e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e90:	08008954 	.word	0x08008954
  ldr r2, =_sbss
 8001e94:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e98:	20000558 	.word	0x20000558

08001e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <HAL_Init+0x40>)
 8001eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_Init+0x40>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_Init+0x40>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 fd43 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fd08 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fd5b 	bl	80029be <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 fd23 	bl	800296a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_IncTick+0x20>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x24>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_IncTick+0x24>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008
 8001f68:	20000408 	.word	0x20000408

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_GetTick+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000408 	.word	0x20000408

08001f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e033      	b.n	8002002 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fcc8 	bl	8001938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fca:	f023 0302 	bic.w	r3, r3, #2
 8001fce:	f043 0202 	orr.w	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa6e 	bl	80024b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ff2:	e001      	b.n	8001ff8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_Start_DMA+0x1e>
 8002026:	2302      	movs	r3, #2
 8002028:	e0e9      	b.n	80021fe <HAL_ADC_Start_DMA+0x1f2>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d018      	beq.n	8002072 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002050:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <HAL_ADC_Start_DMA+0x1fc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6d      	ldr	r2, [pc, #436]	; (800220c <HAL_ADC_Start_DMA+0x200>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9a      	lsrs	r2, r3, #18
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002064:	e002      	b.n	800206c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	3b01      	subs	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f9      	bne.n	8002066 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002080:	d107      	bne.n	8002092 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 80a1 	bne.w	80021e4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e0:	d106      	bne.n	80020f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f023 0206 	bic.w	r2, r3, #6
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
 80020ee:	e002      	b.n	80020f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_ADC_Start_DMA+0x204>)
 8002100:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	4a43      	ldr	r2, [pc, #268]	; (8002214 <HAL_ADC_Start_DMA+0x208>)
 8002108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	4a42      	ldr	r2, [pc, #264]	; (8002218 <HAL_ADC_Start_DMA+0x20c>)
 8002110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	4a41      	ldr	r2, [pc, #260]	; (800221c <HAL_ADC_Start_DMA+0x210>)
 8002118:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002122:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002132:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002142:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	334c      	adds	r3, #76	; 0x4c
 800214e:	4619      	mov	r1, r3
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f000 fcee 	bl	8002b34 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2b00      	cmp	r3, #0
 8002162:	d12a      	bne.n	80021ba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2d      	ldr	r2, [pc, #180]	; (8002220 <HAL_ADC_Start_DMA+0x214>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d015      	beq.n	800219a <HAL_ADC_Start_DMA+0x18e>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <HAL_ADC_Start_DMA+0x218>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d105      	bne.n	8002184 <HAL_ADC_Start_DMA+0x178>
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_ADC_Start_DMA+0x204>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_ADC_Start_DMA+0x21c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d136      	bne.n	80021fc <HAL_ADC_Start_DMA+0x1f0>
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_ADC_Start_DMA+0x204>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d130      	bne.n	80021fc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d129      	bne.n	80021fc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e020      	b.n	80021fc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_ADC_Start_DMA+0x214>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d11b      	bne.n	80021fc <HAL_ADC_Start_DMA+0x1f0>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d114      	bne.n	80021fc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	e00b      	b.n	80021fc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f043 0210 	orr.w	r2, r3, #16
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000
 800220c:	431bde83 	.word	0x431bde83
 8002210:	40012300 	.word	0x40012300
 8002214:	080026b1 	.word	0x080026b1
 8002218:	0800276b 	.word	0x0800276b
 800221c:	08002787 	.word	0x08002787
 8002220:	40012000 	.word	0x40012000
 8002224:	40012100 	.word	0x40012100
 8002228:	40012200 	.word	0x40012200

0800222c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1c>
 800226c:	2302      	movs	r3, #2
 800226e:	e113      	b.n	8002498 <HAL_ADC_ConfigChannel+0x244>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b09      	cmp	r3, #9
 800227e:	d925      	bls.n	80022cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68d9      	ldr	r1, [r3, #12]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	3b1e      	subs	r3, #30
 8002296:	2207      	movs	r2, #7
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43da      	mvns	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	400a      	ands	r2, r1
 80022a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68d9      	ldr	r1, [r3, #12]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	4603      	mov	r3, r0
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4403      	add	r3, r0
 80022be:	3b1e      	subs	r3, #30
 80022c0:	409a      	lsls	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	e022      	b.n	8002312 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6919      	ldr	r1, [r3, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	2207      	movs	r2, #7
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	400a      	ands	r2, r1
 80022ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6919      	ldr	r1, [r3, #16]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	4603      	mov	r3, r0
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4403      	add	r3, r0
 8002308:	409a      	lsls	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b06      	cmp	r3, #6
 8002318:	d824      	bhi.n	8002364 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b05      	subs	r3, #5
 800232c:	221f      	movs	r2, #31
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	400a      	ands	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b05      	subs	r3, #5
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	635a      	str	r2, [r3, #52]	; 0x34
 8002362:	e04c      	b.n	80023fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b0c      	cmp	r3, #12
 800236a:	d824      	bhi.n	80023b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	3b23      	subs	r3, #35	; 0x23
 800237e:	221f      	movs	r2, #31
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43da      	mvns	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	400a      	ands	r2, r1
 800238c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	4618      	mov	r0, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b23      	subs	r3, #35	; 0x23
 80023a8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
 80023b4:	e023      	b.n	80023fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b41      	subs	r3, #65	; 0x41
 80023c8:	221f      	movs	r2, #31
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	400a      	ands	r2, r1
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b41      	subs	r3, #65	; 0x41
 80023f2:	fa00 f203 	lsl.w	r2, r0, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fe:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <HAL_ADC_ConfigChannel+0x250>)
 8002400:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_ADC_ConfigChannel+0x254>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10f      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1d8>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b12      	cmp	r3, #18
 8002412:	d10b      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <HAL_ADC_ConfigChannel+0x254>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d12b      	bne.n	800248e <HAL_ADC_ConfigChannel+0x23a>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_ADC_ConfigChannel+0x258>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d003      	beq.n	8002448 <HAL_ADC_ConfigChannel+0x1f4>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b11      	cmp	r3, #17
 8002446:	d122      	bne.n	800248e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_ADC_ConfigChannel+0x258>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d111      	bne.n	800248e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_ADC_ConfigChannel+0x25c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <HAL_ADC_ConfigChannel+0x260>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	0c9a      	lsrs	r2, r3, #18
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002480:	e002      	b.n	8002488 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3b01      	subs	r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f9      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40012300 	.word	0x40012300
 80024a8:	40012000 	.word	0x40012000
 80024ac:	10000012 	.word	0x10000012
 80024b0:	20000000 	.word	0x20000000
 80024b4:	431bde83 	.word	0x431bde83

080024b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c0:	4b79      	ldr	r3, [pc, #484]	; (80026a8 <ADC_Init+0x1f0>)
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	431a      	orrs	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	021a      	lsls	r2, r3, #8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002532:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	4a58      	ldr	r2, [pc, #352]	; (80026ac <ADC_Init+0x1f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d022      	beq.n	8002596 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800255e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	e00f      	b.n	80025b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0202 	bic.w	r2, r2, #2
 80025c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7e1b      	ldrb	r3, [r3, #24]
 80025d0:	005a      	lsls	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002602:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	3b01      	subs	r3, #1
 8002610:	035a      	lsls	r2, r3, #13
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	e007      	b.n	800262c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	3b01      	subs	r3, #1
 8002648:	051a      	lsls	r2, r3, #20
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6899      	ldr	r1, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800266e:	025a      	lsls	r2, r3, #9
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	029a      	lsls	r2, r3, #10
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40012300 	.word	0x40012300
 80026ac:	0f000001 	.word	0x0f000001

080026b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d13c      	bne.n	8002744 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d12b      	bne.n	800273c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d127      	bne.n	800273c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002704:	2b00      	cmp	r3, #0
 8002706:	d119      	bne.n	800273c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0220 	bic.w	r2, r2, #32
 8002716:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7fe fd1b 	bl	8001178 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002742:	e00e      	b.n	8002762 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fd75 	bl	8002240 <HAL_ADC_ErrorCallback>
}
 8002756:	e004      	b.n	8002762 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fd57 	bl	800222c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2240      	movs	r2, #64	; 0x40
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f043 0204 	orr.w	r2, r3, #4
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fd4a 	bl	8002240 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d0:	4013      	ands	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	60d3      	str	r3, [r2, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <__NVIC_GetPriorityGrouping+0x18>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	f003 0307 	and.w	r3, r3, #7
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	2b00      	cmp	r3, #0
 8002828:	db0b      	blt.n	8002842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	4907      	ldr	r1, [pc, #28]	; (8002850 <__NVIC_EnableIRQ+0x38>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2001      	movs	r0, #1
 800283a:	fa00 f202 	lsl.w	r2, r0, r2
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e100 	.word	0xe000e100

08002854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	db0a      	blt.n	800287e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	490c      	ldr	r1, [pc, #48]	; (80028a0 <__NVIC_SetPriority+0x4c>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	0112      	lsls	r2, r2, #4
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	440b      	add	r3, r1
 8002878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800287c:	e00a      	b.n	8002894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4908      	ldr	r1, [pc, #32]	; (80028a4 <__NVIC_SetPriority+0x50>)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	3b04      	subs	r3, #4
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	440b      	add	r3, r1
 8002892:	761a      	strb	r2, [r3, #24]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f1c3 0307 	rsb	r3, r3, #7
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	bf28      	it	cs
 80028c6:	2304      	movcs	r3, #4
 80028c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d902      	bls.n	80028d8 <NVIC_EncodePriority+0x30>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3b03      	subs	r3, #3
 80028d6:	e000      	b.n	80028da <NVIC_EncodePriority+0x32>
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	401a      	ands	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	4313      	orrs	r3, r2
         );
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	210f      	movs	r1, #15
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f7ff ff8e 	bl	8002854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff29 	bl	80027b4 <__NVIC_SetPriorityGrouping>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297c:	f7ff ff3e 	bl	80027fc <__NVIC_GetPriorityGrouping>
 8002980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7ff ff8e 	bl	80028a8 <NVIC_EncodePriority>
 800298c:	4602      	mov	r2, r0
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5d 	bl	8002854 <__NVIC_SetPriority>
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff31 	bl	8002818 <__NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa2 	bl	8002910 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff fac2 	bl	8001f6c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e099      	b.n	8002b28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a14:	e00f      	b.n	8002a36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a16:	f7ff faa9 	bl	8001f6c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d908      	bls.n	8002a36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e078      	b.n	8002b28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e8      	bne.n	8002a16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_DMA_Init+0x158>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d107      	bne.n	8002aa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0307 	bic.w	r3, r3, #7
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d117      	bne.n	8002afa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00e      	beq.n	8002afa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fa6f 	bl	8002fc0 <DMA_CheckFifoParam>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2240      	movs	r2, #64	; 0x40
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002af6:	2301      	movs	r3, #1
 8002af8:	e016      	b.n	8002b28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa26 	bl	8002f54 <DMA_CalcBaseAndBitshift>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	223f      	movs	r2, #63	; 0x3f
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	f010803f 	.word	0xf010803f

08002b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_DMA_Start_IT+0x26>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e040      	b.n	8002bdc <HAL_DMA_Start_IT+0xa8>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d12f      	bne.n	8002bce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f9b8 	bl	8002ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	223f      	movs	r2, #63	; 0x3f
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0216 	orr.w	r2, r2, #22
 8002ba2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e005      	b.n	8002bda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bf0:	4b8e      	ldr	r3, [pc, #568]	; (8002e2c <HAL_DMA_IRQHandler+0x248>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a8e      	ldr	r2, [pc, #568]	; (8002e30 <HAL_DMA_IRQHandler+0x24c>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0a9b      	lsrs	r3, r3, #10
 8002bfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2208      	movs	r2, #8
 8002c10:	409a      	lsls	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01a      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0204 	bic.w	r2, r2, #4
 8002c36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	2201      	movs	r2, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	2201      	movs	r2, #1
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f043 0202 	orr.w	r2, r3, #2
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	2204      	movs	r2, #4
 8002caa:	409a      	lsls	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d043      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03c      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	2210      	movs	r2, #16
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d108      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d024      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
 8002d12:	e01f      	b.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
 8002d24:	e016      	b.n	8002d54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0208 	bic.w	r2, r2, #8
 8002d42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	2220      	movs	r2, #32
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 808f 	beq.w	8002e84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8087 	beq.w	8002e84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d136      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0216 	bic.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_DMA_IRQHandler+0x1da>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	223f      	movs	r2, #63	; 0x3f
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d07e      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
        }
        return;
 8002dfa:	e079      	b.n	8002ef0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01d      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d031      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
 8002e28:	e02c      	b.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d023      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
 8002e44:	e01e      	b.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10f      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0210 	bic.w	r2, r2, #16
 8002e62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d032      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d022      	beq.n	8002ede <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d307      	bcc.n	8002ecc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f2      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x2cc>
 8002eca:	e000      	b.n	8002ece <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ecc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
 8002eee:	e000      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ef0:	bf00      	nop
    }
  }
}
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d108      	bne.n	8002f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f36:	e007      	b.n	8002f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3b10      	subs	r3, #16
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f6e:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <DMA_CalcBaseAndBitshift+0x68>)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d909      	bls.n	8002f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	659a      	str	r2, [r3, #88]	; 0x58
 8002f94:	e007      	b.n	8002fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	aaaaaaab 	.word	0xaaaaaaab
 8002fbc:	080085c8 	.word	0x080085c8

08002fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11f      	bne.n	800301a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d856      	bhi.n	800308e <DMA_CheckFifoParam+0xce>
 8002fe0:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <DMA_CheckFifoParam+0x28>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	0800300b 	.word	0x0800300b
 8002ff0:	08002ff9 	.word	0x08002ff9
 8002ff4:	0800308f 	.word	0x0800308f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d046      	beq.n	8003092 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e043      	b.n	8003092 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003012:	d140      	bne.n	8003096 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003018:	e03d      	b.n	8003096 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003022:	d121      	bne.n	8003068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d837      	bhi.n	800309a <DMA_CheckFifoParam+0xda>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <DMA_CheckFifoParam+0x70>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003041 	.word	0x08003041
 8003034:	08003047 	.word	0x08003047
 8003038:	08003041 	.word	0x08003041
 800303c:	08003059 	.word	0x08003059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e030      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d025      	beq.n	800309e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003056:	e022      	b.n	800309e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003060:	d11f      	bne.n	80030a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003066:	e01c      	b.n	80030a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d903      	bls.n	8003076 <DMA_CheckFifoParam+0xb6>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d003      	beq.n	800307c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003074:	e018      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      break;
 800307a:	e015      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      break;
 800308c:	e00b      	b.n	80030a6 <DMA_CheckFifoParam+0xe6>
      break;
 800308e:	bf00      	nop
 8003090:	e00a      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003092:	bf00      	nop
 8003094:	e008      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003096:	bf00      	nop
 8003098:	e006      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 800309a:	bf00      	nop
 800309c:	e004      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 800309e:	bf00      	nop
 80030a0:	e002      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
    }
  } 
  
  return status; 
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e165      	b.n	80033a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8154 	bne.w	800339a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d005      	beq.n	800310a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	2b02      	cmp	r3, #2
 8003108:	d130      	bne.n	800316c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 0201 	and.w	r2, r3, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b03      	cmp	r3, #3
 8003176:	d017      	beq.n	80031a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d123      	bne.n	80031fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80ae 	beq.w	800339a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b5d      	ldr	r3, [pc, #372]	; (80033b8 <HAL_GPIO_Init+0x300>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_GPIO_Init+0x300>)
 8003248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800324c:	6453      	str	r3, [r2, #68]	; 0x44
 800324e:	4b5a      	ldr	r3, [pc, #360]	; (80033b8 <HAL_GPIO_Init+0x300>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800325a:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_GPIO_Init+0x304>)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	3302      	adds	r3, #2
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4f      	ldr	r2, [pc, #316]	; (80033c0 <HAL_GPIO_Init+0x308>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d025      	beq.n	80032d2 <HAL_GPIO_Init+0x21a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4e      	ldr	r2, [pc, #312]	; (80033c4 <HAL_GPIO_Init+0x30c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01f      	beq.n	80032ce <HAL_GPIO_Init+0x216>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4d      	ldr	r2, [pc, #308]	; (80033c8 <HAL_GPIO_Init+0x310>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d019      	beq.n	80032ca <HAL_GPIO_Init+0x212>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4c      	ldr	r2, [pc, #304]	; (80033cc <HAL_GPIO_Init+0x314>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_GPIO_Init+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <HAL_GPIO_Init+0x318>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00d      	beq.n	80032c2 <HAL_GPIO_Init+0x20a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4a      	ldr	r2, [pc, #296]	; (80033d4 <HAL_GPIO_Init+0x31c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <HAL_GPIO_Init+0x206>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a49      	ldr	r2, [pc, #292]	; (80033d8 <HAL_GPIO_Init+0x320>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_GPIO_Init+0x202>
 80032b6:	2306      	movs	r3, #6
 80032b8:	e00c      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ba:	2307      	movs	r3, #7
 80032bc:	e00a      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032be:	2305      	movs	r3, #5
 80032c0:	e008      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032d2:	2300      	movs	r3, #0
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e4:	4935      	ldr	r1, [pc, #212]	; (80033bc <HAL_GPIO_Init+0x304>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_GPIO_Init+0x324>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003316:	4a31      	ldr	r2, [pc, #196]	; (80033dc <HAL_GPIO_Init+0x324>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_GPIO_Init+0x324>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_GPIO_Init+0x324>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_GPIO_Init+0x324>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_GPIO_Init+0x324>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_GPIO_Init+0x324>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003394:	4a11      	ldr	r2, [pc, #68]	; (80033dc <HAL_GPIO_Init+0x324>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	f67f ae96 	bls.w	80030d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40021400 	.word	0x40021400
 80033d8:	40021800 	.word	0x40021800
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
 80033ec:	4613      	mov	r3, r2
 80033ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033fc:	e003      	b.n	8003406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fe:	887b      	ldrh	r3, [r7, #2]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800343a:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003440:	f7fe fd94 	bl	8001f6c <HAL_GetTick>
 8003444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003446:	e009      	b.n	800345c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003448:	f7fe fd90 	bl	8001f6c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003456:	d901      	bls.n	800345c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e01f      	b.n	800349c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_PWREx_EnableOverDrive+0x98>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d1ee      	bne.n	8003448 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003470:	f7fe fd7c 	bl	8001f6c <HAL_GetTick>
 8003474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003476:	e009      	b.n	800348c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003478:	f7fe fd78 	bl	8001f6c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003486:	d901      	bls.n	800348c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e007      	b.n	800349c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <HAL_PWREx_EnableOverDrive+0x98>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003498:	d1ee      	bne.n	8003478 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	420e0040 	.word	0x420e0040
 80034ac:	40007000 	.word	0x40007000
 80034b0:	420e0044 	.word	0x420e0044

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0cc      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b68      	ldr	r3, [pc, #416]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d90c      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b63      	ldr	r3, [pc, #396]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0b8      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003508:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003520:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a52      	ldr	r2, [pc, #328]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	494d      	ldr	r1, [pc, #308]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d044      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d119      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e07f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d003      	beq.n	8003572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356e:	2b03      	cmp	r3, #3
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e06f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003582:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e067      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003592:	4b37      	ldr	r3, [pc, #220]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 0203 	bic.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4934      	ldr	r1, [pc, #208]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a4:	f7fe fce2 	bl	8001f6c <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ac:	f7fe fcde 	bl	8001f6c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e04f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 020c 	and.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1eb      	bne.n	80035ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d20c      	bcs.n	80035fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b22      	ldr	r3, [pc, #136]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e032      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4916      	ldr	r1, [pc, #88]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	490e      	ldr	r1, [pc, #56]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800363a:	f000 f821 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 800363e:	4602      	mov	r2, r0
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	490a      	ldr	r1, [pc, #40]	; (8003674 <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	5ccb      	ldrb	r3, [r1, r3]
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fc42 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023c00 	.word	0x40023c00
 8003670:	40023800 	.word	0x40023800
 8003674:	080085b8 	.word	0x080085b8
 8003678:	20000000 	.word	0x20000000
 800367c:	20000004 	.word	0x20000004

08003680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003684:	b0ae      	sub	sp, #184	; 0xb8
 8003686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a6:	4bcb      	ldr	r3, [pc, #812]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	f200 8204 	bhi.w	8003abc <HAL_RCC_GetSysClockFreq+0x43c>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	08003abd 	.word	0x08003abd
 80036c4:	08003abd 	.word	0x08003abd
 80036c8:	08003abd 	.word	0x08003abd
 80036cc:	080036f9 	.word	0x080036f9
 80036d0:	08003abd 	.word	0x08003abd
 80036d4:	08003abd 	.word	0x08003abd
 80036d8:	08003abd 	.word	0x08003abd
 80036dc:	08003701 	.word	0x08003701
 80036e0:	08003abd 	.word	0x08003abd
 80036e4:	08003abd 	.word	0x08003abd
 80036e8:	08003abd 	.word	0x08003abd
 80036ec:	080038f1 	.word	0x080038f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4bb9      	ldr	r3, [pc, #740]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80036f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80036f6:	e1e5      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036f8:	4bb7      	ldr	r3, [pc, #732]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80036fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036fe:	e1e1      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003700:	4bb4      	ldr	r3, [pc, #720]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370c:	4bb1      	ldr	r3, [pc, #708]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d071      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003718:	4bae      	ldr	r3, [pc, #696]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	2200      	movs	r2, #0
 8003720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003724:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800372c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800373a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800373e:	4622      	mov	r2, r4
 8003740:	462b      	mov	r3, r5
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	0159      	lsls	r1, r3, #5
 800374c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003750:	0150      	lsls	r0, r2, #5
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4621      	mov	r1, r4
 8003758:	1a51      	subs	r1, r2, r1
 800375a:	6439      	str	r1, [r7, #64]	; 0x40
 800375c:	4629      	mov	r1, r5
 800375e:	eb63 0301 	sbc.w	r3, r3, r1
 8003762:	647b      	str	r3, [r7, #68]	; 0x44
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003770:	4649      	mov	r1, r9
 8003772:	018b      	lsls	r3, r1, #6
 8003774:	4641      	mov	r1, r8
 8003776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800377a:	4641      	mov	r1, r8
 800377c:	018a      	lsls	r2, r1, #6
 800377e:	4641      	mov	r1, r8
 8003780:	1a51      	subs	r1, r2, r1
 8003782:	63b9      	str	r1, [r7, #56]	; 0x38
 8003784:	4649      	mov	r1, r9
 8003786:	eb63 0301 	sbc.w	r3, r3, r1
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003798:	4649      	mov	r1, r9
 800379a:	00cb      	lsls	r3, r1, #3
 800379c:	4641      	mov	r1, r8
 800379e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a2:	4641      	mov	r1, r8
 80037a4:	00ca      	lsls	r2, r1, #3
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	4622      	mov	r2, r4
 80037ae:	189b      	adds	r3, r3, r2
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
 80037b2:	462b      	mov	r3, r5
 80037b4:	460a      	mov	r2, r1
 80037b6:	eb42 0303 	adc.w	r3, r2, r3
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037c8:	4629      	mov	r1, r5
 80037ca:	028b      	lsls	r3, r1, #10
 80037cc:	4621      	mov	r1, r4
 80037ce:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037d2:	4621      	mov	r1, r4
 80037d4:	028a      	lsls	r2, r1, #10
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80037ec:	f7fd f9fc 	bl	8000be8 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037fa:	e067      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fc:	4b75      	ldr	r3, [pc, #468]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	2200      	movs	r2, #0
 8003804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003808:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800380c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003814:	67bb      	str	r3, [r7, #120]	; 0x78
 8003816:	2300      	movs	r3, #0
 8003818:	67fb      	str	r3, [r7, #124]	; 0x7c
 800381a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800381e:	4622      	mov	r2, r4
 8003820:	462b      	mov	r3, r5
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	0159      	lsls	r1, r3, #5
 800382c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003830:	0150      	lsls	r0, r2, #5
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4621      	mov	r1, r4
 8003838:	1a51      	subs	r1, r2, r1
 800383a:	62b9      	str	r1, [r7, #40]	; 0x28
 800383c:	4629      	mov	r1, r5
 800383e:	eb63 0301 	sbc.w	r3, r3, r1
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003850:	4649      	mov	r1, r9
 8003852:	018b      	lsls	r3, r1, #6
 8003854:	4641      	mov	r1, r8
 8003856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800385a:	4641      	mov	r1, r8
 800385c:	018a      	lsls	r2, r1, #6
 800385e:	4641      	mov	r1, r8
 8003860:	ebb2 0a01 	subs.w	sl, r2, r1
 8003864:	4649      	mov	r1, r9
 8003866:	eb63 0b01 	sbc.w	fp, r3, r1
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003876:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800387a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800387e:	4692      	mov	sl, r2
 8003880:	469b      	mov	fp, r3
 8003882:	4623      	mov	r3, r4
 8003884:	eb1a 0303 	adds.w	r3, sl, r3
 8003888:	623b      	str	r3, [r7, #32]
 800388a:	462b      	mov	r3, r5
 800388c:	eb4b 0303 	adc.w	r3, fp, r3
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800389e:	4629      	mov	r1, r5
 80038a0:	028b      	lsls	r3, r1, #10
 80038a2:	4621      	mov	r1, r4
 80038a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a8:	4621      	mov	r1, r4
 80038aa:	028a      	lsls	r2, r1, #10
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038b4:	2200      	movs	r2, #0
 80038b6:	673b      	str	r3, [r7, #112]	; 0x70
 80038b8:	677a      	str	r2, [r7, #116]	; 0x74
 80038ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80038be:	f7fd f993 	bl	8000be8 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4613      	mov	r3, r2
 80038c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038cc:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80038de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038ee:	e0e9      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038fc:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d069      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003908:	4b32      	ldr	r3, [pc, #200]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	2200      	movs	r2, #0
 8003910:	66bb      	str	r3, [r7, #104]	; 0x68
 8003912:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391a:	663b      	str	r3, [r7, #96]	; 0x60
 800391c:	2300      	movs	r3, #0
 800391e:	667b      	str	r3, [r7, #100]	; 0x64
 8003920:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	f04f 0000 	mov.w	r0, #0
 800392c:	f04f 0100 	mov.w	r1, #0
 8003930:	0159      	lsls	r1, r3, #5
 8003932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003936:	0150      	lsls	r0, r2, #5
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4621      	mov	r1, r4
 800393e:	1a51      	subs	r1, r2, r1
 8003940:	61b9      	str	r1, [r7, #24]
 8003942:	4629      	mov	r1, r5
 8003944:	eb63 0301 	sbc.w	r3, r3, r1
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003956:	4659      	mov	r1, fp
 8003958:	018b      	lsls	r3, r1, #6
 800395a:	4651      	mov	r1, sl
 800395c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003960:	4651      	mov	r1, sl
 8003962:	018a      	lsls	r2, r1, #6
 8003964:	4651      	mov	r1, sl
 8003966:	ebb2 0801 	subs.w	r8, r2, r1
 800396a:	4659      	mov	r1, fp
 800396c:	eb63 0901 	sbc.w	r9, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800397c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003980:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003984:	4690      	mov	r8, r2
 8003986:	4699      	mov	r9, r3
 8003988:	4623      	mov	r3, r4
 800398a:	eb18 0303 	adds.w	r3, r8, r3
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	462b      	mov	r3, r5
 8003992:	eb49 0303 	adc.w	r3, r9, r3
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039a4:	4629      	mov	r1, r5
 80039a6:	028b      	lsls	r3, r1, #10
 80039a8:	4621      	mov	r1, r4
 80039aa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ae:	4621      	mov	r1, r4
 80039b0:	028a      	lsls	r2, r1, #10
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039ba:	2200      	movs	r2, #0
 80039bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80039be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039c4:	f7fd f910 	bl	8000be8 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d2:	e063      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x41c>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039dc:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x454>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	2200      	movs	r2, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	4611      	mov	r1, r2
 80039e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ec:	653b      	str	r3, [r7, #80]	; 0x50
 80039ee:	2300      	movs	r3, #0
 80039f0:	657b      	str	r3, [r7, #84]	; 0x54
 80039f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80039f6:	4642      	mov	r2, r8
 80039f8:	464b      	mov	r3, r9
 80039fa:	f04f 0000 	mov.w	r0, #0
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	0159      	lsls	r1, r3, #5
 8003a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a08:	0150      	lsls	r0, r2, #5
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4641      	mov	r1, r8
 8003a10:	1a51      	subs	r1, r2, r1
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	4649      	mov	r1, r9
 8003a16:	eb63 0301 	sbc.w	r3, r3, r1
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a28:	4659      	mov	r1, fp
 8003a2a:	018b      	lsls	r3, r1, #6
 8003a2c:	4651      	mov	r1, sl
 8003a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a32:	4651      	mov	r1, sl
 8003a34:	018a      	lsls	r2, r1, #6
 8003a36:	4651      	mov	r1, sl
 8003a38:	1a54      	subs	r4, r2, r1
 8003a3a:	4659      	mov	r1, fp
 8003a3c:	eb63 0501 	sbc.w	r5, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	00eb      	lsls	r3, r5, #3
 8003a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4e:	00e2      	lsls	r2, r4, #3
 8003a50:	4614      	mov	r4, r2
 8003a52:	461d      	mov	r5, r3
 8003a54:	4643      	mov	r3, r8
 8003a56:	18e3      	adds	r3, r4, r3
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	eb45 0303 	adc.w	r3, r5, r3
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6e:	4629      	mov	r1, r5
 8003a70:	028b      	lsls	r3, r1, #10
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a78:	4621      	mov	r1, r4
 8003a7a:	028a      	lsls	r2, r1, #10
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a84:	2200      	movs	r2, #0
 8003a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a8e:	f7fd f8ab 	bl	8000be8 <__aeabi_uldivmod>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4613      	mov	r3, r2
 8003a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x454>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0f1b      	lsrs	r3, r3, #28
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003aaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003aae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003aba:	e003      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ac2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	37b8      	adds	r7, #184	; 0xb8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	00f42400 	.word	0x00f42400

08003adc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e28d      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8083 	beq.w	8003c02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003afc:	4b94      	ldr	r3, [pc, #592]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d019      	beq.n	8003b3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b08:	4b91      	ldr	r3, [pc, #580]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b14:	4b8e      	ldr	r3, [pc, #568]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b20:	d00c      	beq.n	8003b3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b22:	4b8b      	ldr	r3, [pc, #556]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d112      	bne.n	8003b54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2e:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	4b84      	ldr	r3, [pc, #528]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05b      	beq.n	8003c00 <HAL_RCC_OscConfig+0x124>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d157      	bne.n	8003c00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e25a      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCC_OscConfig+0x90>
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7b      	ldr	r2, [pc, #492]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e01d      	b.n	8003ba8 <HAL_RCC_OscConfig+0xcc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0xb4>
 8003b76:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a75      	ldr	r2, [pc, #468]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b73      	ldr	r3, [pc, #460]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a72      	ldr	r2, [pc, #456]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0xcc>
 8003b90:	4b6f      	ldr	r3, [pc, #444]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6e      	ldr	r2, [pc, #440]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6b      	ldr	r2, [pc, #428]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe f9dc 	bl	8001f6c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe f9d8 	bl	8001f6c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e21f      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xdc>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fe f9c8 	bl	8001f6c <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fe f9c4 	bl	8001f6c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e20b      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x104>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d06f      	beq.n	8003cee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c0e:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d017      	beq.n	8003c4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c1a:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d105      	bne.n	8003c32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b44      	ldr	r3, [pc, #272]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RCC_OscConfig+0x186>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e1d3      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4937      	ldr	r1, [pc, #220]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	e03a      	b.n	8003cee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <HAL_RCC_OscConfig+0x278>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fe f971 	bl	8001f6c <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c8e:	f7fe f96d 	bl	8001f6c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e1b4      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4925      	ldr	r1, [pc, #148]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
 8003cc0:	e015      	b.n	8003cee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_RCC_OscConfig+0x278>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f950 	bl	8001f6c <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fe f94c 	bl	8001f6c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e193      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d036      	beq.n	8003d68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_RCC_OscConfig+0x27c>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe f930 	bl	8001f6c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fe f92c 	bl	8001f6c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e173      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_OscConfig+0x274>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x234>
 8003d2e:	e01b      	b.n	8003d68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_RCC_OscConfig+0x27c>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fe f919 	bl	8001f6c <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	e00e      	b.n	8003d5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fe f915 	bl	8001f6c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d907      	bls.n	8003d5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e15c      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
 8003d50:	40023800 	.word	0x40023800
 8003d54:	42470000 	.word	0x42470000
 8003d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	4b8a      	ldr	r3, [pc, #552]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ea      	bne.n	8003d3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8097 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b83      	ldr	r3, [pc, #524]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	4b7f      	ldr	r3, [pc, #508]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a7e      	ldr	r2, [pc, #504]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
 8003d96:	4b7c      	ldr	r3, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b79      	ldr	r3, [pc, #484]	; (8003f8c <HAL_RCC_OscConfig+0x4b0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d118      	bne.n	8003de4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db2:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x4b0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a75      	ldr	r2, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x4b0>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe f8d5 	bl	8001f6c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fe f8d1 	bl	8001f6c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e118      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCC_OscConfig+0x4b0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x31e>
 8003dec:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
 8003df8:	e01c      	b.n	8003e34 <HAL_RCC_OscConfig+0x358>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x340>
 8003e02:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a60      	ldr	r2, [pc, #384]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0e:	4b5e      	ldr	r3, [pc, #376]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a5d      	ldr	r2, [pc, #372]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_OscConfig+0x358>
 8003e1c:	4b5a      	ldr	r3, [pc, #360]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a59      	ldr	r2, [pc, #356]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
 8003e28:	4b57      	ldr	r3, [pc, #348]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	4a56      	ldr	r2, [pc, #344]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fe f896 	bl	8001f6c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fe f892 	bl	8001f6c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0d7      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ee      	beq.n	8003e44 <HAL_RCC_OscConfig+0x368>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fe f880 	bl	8001f6c <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fe f87c 	bl	8001f6c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0c1      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e86:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1ee      	bne.n	8003e70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e98:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	4a3a      	ldr	r2, [pc, #232]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80ad 	beq.w	8004008 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eae:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d060      	beq.n	8003f7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d145      	bne.n	8003f4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_RCC_OscConfig+0x4b4>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe f850 	bl	8001f6c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe f84c 	bl	8001f6c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e093      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	3b01      	subs	r3, #1
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	071b      	lsls	r3, r3, #28
 8003f1a:	491b      	ldr	r1, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x4b4>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fe f821 	bl	8001f6c <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2e:	f7fe f81d 	bl	8001f6c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e064      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x452>
 8003f4c:	e05c      	b.n	8004008 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_RCC_OscConfig+0x4b4>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fe f80a 	bl	8001f6c <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fe f806 	bl	8001f6c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e04d      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x480>
 8003f7a:	e045      	b.n	8004008 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e040      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f94:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <HAL_RCC_OscConfig+0x538>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d030      	beq.n	8004004 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d129      	bne.n	8004004 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d122      	bne.n	8004004 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d119      	bne.n	8004004 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d10f      	bne.n	8004004 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800

08004018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07b      	b.n	8004122 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d009      	beq.n	8004050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	61da      	str	r2, [r3, #28]
 8004042:	e005      	b.n	8004050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd fcdc 	bl	8001a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	ea42 0103 	orr.w	r1, r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0104 	and.w	r1, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0210 	and.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b088      	sub	sp, #32
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_SPI_Transmit+0x22>
 8004148:	2302      	movs	r3, #2
 800414a:	e12d      	b.n	80043a8 <HAL_SPI_Transmit+0x27e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004154:	f7fd ff0a 	bl	8001f6c <HAL_GetTick>
 8004158:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b01      	cmp	r3, #1
 8004168:	d002      	beq.n	8004170 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800416e:	e116      	b.n	800439e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_SPI_Transmit+0x52>
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004180:	e10d      	b.n	800439e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2203      	movs	r2, #3
 8004186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d10f      	bne.n	80041ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d007      	beq.n	8004208 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004210:	d14f      	bne.n	80042b2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_SPI_Transmit+0xf6>
 800421a:	8afb      	ldrh	r3, [r7, #22]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d142      	bne.n	80042a6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	881a      	ldrh	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	1c9a      	adds	r2, r3, #2
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004244:	e02f      	b.n	80042a6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b02      	cmp	r3, #2
 8004252:	d112      	bne.n	800427a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	881a      	ldrh	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	1c9a      	adds	r2, r3, #2
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	86da      	strh	r2, [r3, #54]	; 0x36
 8004278:	e015      	b.n	80042a6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800427a:	f7fd fe77 	bl	8001f6c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d803      	bhi.n	8004292 <HAL_SPI_Transmit+0x168>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d102      	bne.n	8004298 <HAL_SPI_Transmit+0x16e>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042a4:	e07b      	b.n	800439e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1ca      	bne.n	8004246 <HAL_SPI_Transmit+0x11c>
 80042b0:	e050      	b.n	8004354 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_SPI_Transmit+0x196>
 80042ba:	8afb      	ldrh	r3, [r7, #22]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d144      	bne.n	800434a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	7812      	ldrb	r2, [r2, #0]
 80042cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042e6:	e030      	b.n	800434a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d113      	bne.n	800431e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	7812      	ldrb	r2, [r2, #0]
 8004302:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	86da      	strh	r2, [r3, #54]	; 0x36
 800431c:	e015      	b.n	800434a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800431e:	f7fd fe25 	bl	8001f6c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d803      	bhi.n	8004336 <HAL_SPI_Transmit+0x20c>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d102      	bne.n	800433c <HAL_SPI_Transmit+0x212>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004348:	e029      	b.n	800439e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1c9      	bne.n	80042e8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	6839      	ldr	r1, [r7, #0]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fbdf 	bl	8004b1c <SPI_EndRxTxTransaction>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e003      	b.n	800439e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d002      	beq.n	80043d6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043d4:	e0fb      	b.n	80045ce <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043de:	d112      	bne.n	8004406 <HAL_SPI_Receive+0x56>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10e      	bne.n	8004406 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2204      	movs	r2, #4
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f8ef 	bl	80045e0 <HAL_SPI_TransmitReceive>
 8004402:	4603      	mov	r3, r0
 8004404:	e0e8      	b.n	80045d8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_SPI_Receive+0x64>
 8004410:	2302      	movs	r3, #2
 8004412:	e0e1      	b.n	80045d8 <HAL_SPI_Receive+0x228>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800441c:	f7fd fda6 	bl	8001f6c <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_SPI_Receive+0x7e>
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004432:	e0cc      	b.n	80045ce <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2204      	movs	r2, #4
 8004438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	88fa      	ldrh	r2, [r7, #6]
 8004452:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447a:	d10f      	bne.n	800449c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800449a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d007      	beq.n	80044ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d16a      	bne.n	8004598 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044c2:	e032      	b.n	800452a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d115      	bne.n	80044fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f103 020c 	add.w	r2, r3, #12
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fc:	e015      	b.n	800452a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fe:	f7fd fd35 	bl	8001f6c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d803      	bhi.n	8004516 <HAL_SPI_Receive+0x166>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d102      	bne.n	800451c <HAL_SPI_Receive+0x16c>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004528:	e051      	b.n	80045ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1c7      	bne.n	80044c4 <HAL_SPI_Receive+0x114>
 8004534:	e035      	b.n	80045a2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d113      	bne.n	800456c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	b292      	uxth	r2, r2
 8004550:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	1c9a      	adds	r2, r3, #2
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800456a:	e015      	b.n	8004598 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800456c:	f7fd fcfe 	bl	8001f6c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d803      	bhi.n	8004584 <HAL_SPI_Receive+0x1d4>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d102      	bne.n	800458a <HAL_SPI_Receive+0x1da>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004596:	e01a      	b.n	80045ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1c9      	bne.n	8004536 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fa52 	bl	8004a50 <SPI_EndRxTransaction>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
 80045c4:	e003      	b.n	80045ce <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	; 0x30
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045ee:	2301      	movs	r3, #1
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x26>
 8004602:	2302      	movs	r3, #2
 8004604:	e198      	b.n	8004938 <HAL_SPI_TransmitReceive+0x358>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800460e:	f7fd fcad 	bl	8001f6c <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800462c:	2b01      	cmp	r3, #1
 800462e:	d00f      	beq.n	8004650 <HAL_SPI_TransmitReceive+0x70>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004636:	d107      	bne.n	8004648 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <HAL_SPI_TransmitReceive+0x68>
 8004640:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004644:	2b04      	cmp	r3, #4
 8004646:	d003      	beq.n	8004650 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004648:	2302      	movs	r3, #2
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800464e:	e16d      	b.n	800492c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_SPI_TransmitReceive+0x82>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SPI_TransmitReceive+0x82>
 800465c:	887b      	ldrh	r3, [r7, #2]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004668:	e160      	b.n	800492c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b04      	cmp	r3, #4
 8004674:	d003      	beq.n	800467e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2205      	movs	r2, #5
 800467a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	887a      	ldrh	r2, [r7, #2]
 800468e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	887a      	ldrh	r2, [r7, #2]
 80046a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d007      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046da:	d17c      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_SPI_TransmitReceive+0x10a>
 80046e4:	8b7b      	ldrh	r3, [r7, #26]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d16a      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	881a      	ldrh	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800470e:	e057      	b.n	80047c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d11b      	bne.n	8004756 <HAL_SPI_TransmitReceive+0x176>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d016      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x176>
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d113      	bne.n	8004756 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	1c9a      	adds	r2, r3, #2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	d119      	bne.n	8004798 <HAL_SPI_TransmitReceive+0x1b8>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d014      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	b292      	uxth	r2, r2
 800477a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	1c9a      	adds	r2, r3, #2
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004794:	2301      	movs	r3, #1
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004798:	f7fd fbe8 	bl	8001f6c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d80b      	bhi.n	80047c0 <HAL_SPI_TransmitReceive+0x1e0>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d007      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80047be:	e0b5      	b.n	800492c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1a2      	bne.n	8004710 <HAL_SPI_TransmitReceive+0x130>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d19d      	bne.n	8004710 <HAL_SPI_TransmitReceive+0x130>
 80047d4:	e080      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x204>
 80047de:	8b7b      	ldrh	r3, [r7, #26]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d16f      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330c      	adds	r3, #12
 80047ee:	7812      	ldrb	r2, [r2, #0]
 80047f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480a:	e05b      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d11c      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x274>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d017      	beq.n	8004854 <HAL_SPI_TransmitReceive+0x274>
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d114      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d119      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x2b6>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d014      	beq.n	8004896 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004892:	2301      	movs	r3, #1
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004896:	f7fd fb69 	bl	8001f6c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d803      	bhi.n	80048ae <HAL_SPI_TransmitReceive+0x2ce>
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d102      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x2d4>
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80048c2:	e033      	b.n	800492c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d19e      	bne.n	800480c <HAL_SPI_TransmitReceive+0x22c>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d199      	bne.n	800480c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f91d 	bl	8004b1c <SPI_EndRxTxTransaction>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048f4:	e01a      	b.n	800492c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004922:	e003      	b.n	800492c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004934:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004938:	4618      	mov	r0, r3
 800493a:	3730      	adds	r7, #48	; 0x30
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004950:	f7fd fb0c 	bl	8001f6c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	4413      	add	r3, r2
 800495e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004960:	f7fd fb04 	bl	8001f6c <HAL_GetTick>
 8004964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004966:	4b39      	ldr	r3, [pc, #228]	; (8004a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	015b      	lsls	r3, r3, #5
 800496c:	0d1b      	lsrs	r3, r3, #20
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	fb02 f303 	mul.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004976:	e054      	b.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d050      	beq.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004980:	f7fd faf4 	bl	8001f6c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	429a      	cmp	r2, r3
 800498e:	d902      	bls.n	8004996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d13d      	bne.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ae:	d111      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b8:	d004      	beq.n	80049c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c2:	d107      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049dc:	d10f      	bne.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e017      	b.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d19b      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000000 	.word	0x20000000

08004a50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a64:	d111      	bne.n	8004a8a <SPI_EndRxTransaction+0x3a>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6e:	d004      	beq.n	8004a7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a78:	d107      	bne.n	8004a8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a92:	d12a      	bne.n	8004aea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9c:	d012      	beq.n	8004ac4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff ff49 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02d      	beq.n	8004b10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e026      	b.n	8004b12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2101      	movs	r1, #1
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff36 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01a      	beq.n	8004b10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e013      	b.n	8004b12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2101      	movs	r1, #1
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff ff23 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	f043 0220 	orr.w	r2, r3, #32
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e000      	b.n	8004b12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	2102      	movs	r1, #2
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff ff04 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	f043 0220 	orr.w	r2, r3, #32
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e032      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <SPI_EndRxTxTransaction+0xa0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <SPI_EndRxTxTransaction+0xa4>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	0d5b      	lsrs	r3, r3, #21
 8004b5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6c:	d112      	bne.n	8004b94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2180      	movs	r1, #128	; 0x80
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff fee1 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d016      	beq.n	8004bb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e00f      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d0f2      	beq.n	8004b94 <SPI_EndRxTxTransaction+0x78>
 8004bae:	e000      	b.n	8004bb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004bb0:	bf00      	nop
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	165e9f81 	.word	0x165e9f81

08004bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e041      	b.n	8004c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc ff64 	bl	8001ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f000 fc62 	bl	80054cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d001      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e04e      	b.n	8004d1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d022      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d018      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00e      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d111      	bne.n	8004d08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b06      	cmp	r3, #6
 8004cf4:	d010      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d06:	e007      	b.n	8004d18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40010400 	.word	0x40010400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40001800 	.word	0x40001800

08004d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e041      	b.n	8004dda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f839 	bl	8004de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f000 fba2 	bl	80054cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <HAL_TIM_PWM_Start+0x24>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e022      	b.n	8004e62 <HAL_TIM_PWM_Start+0x6a>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d109      	bne.n	8004e36 <HAL_TIM_PWM_Start+0x3e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	bf14      	ite	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	2300      	moveq	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	e015      	b.n	8004e62 <HAL_TIM_PWM_Start+0x6a>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d109      	bne.n	8004e50 <HAL_TIM_PWM_Start+0x58>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e008      	b.n	8004e62 <HAL_TIM_PWM_Start+0x6a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07c      	b.n	8004f64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start+0x82>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e78:	e013      	b.n	8004ea2 <HAL_TIM_PWM_Start+0xaa>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x92>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e88:	e00b      	b.n	8004ea2 <HAL_TIM_PWM_Start+0xaa>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_PWM_Start+0xa2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e98:	e003      	b.n	8004ea2 <HAL_TIM_PWM_Start+0xaa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fe04 	bl	8005ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2d      	ldr	r2, [pc, #180]	; (8004f6c <HAL_TIM_PWM_Start+0x174>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_TIM_PWM_Start+0xcc>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2c      	ldr	r2, [pc, #176]	; (8004f70 <HAL_TIM_PWM_Start+0x178>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIM_PWM_Start+0xd0>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_TIM_PWM_Start+0xd2>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <HAL_TIM_PWM_Start+0x174>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef0:	d01d      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <HAL_TIM_PWM_Start+0x17c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d018      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1d      	ldr	r2, [pc, #116]	; (8004f78 <HAL_TIM_PWM_Start+0x180>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <HAL_TIM_PWM_Start+0x184>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <HAL_TIM_PWM_Start+0x178>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_TIM_PWM_Start+0x188>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_TIM_PWM_Start+0x18c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d010      	beq.n	8004f62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	e007      	b.n	8004f62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40001800 	.word	0x40001800

08004f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d020      	beq.n	8004fec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01b      	beq.n	8004fec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0202 	mvn.w	r2, #2
 8004fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa5b 	bl	800548e <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa4d 	bl	800547a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fa5e 	bl	80054a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d020      	beq.n	8005038 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01b      	beq.n	8005038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0204 	mvn.w	r2, #4
 8005008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa35 	bl	800548e <HAL_TIM_IC_CaptureCallback>
 8005024:	e005      	b.n	8005032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa27 	bl	800547a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fa38 	bl	80054a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d020      	beq.n	8005084 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01b      	beq.n	8005084 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0208 	mvn.w	r2, #8
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2204      	movs	r2, #4
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa0f 	bl	800548e <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa01 	bl	800547a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fa12 	bl	80054a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d020      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01b      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0210 	mvn.w	r2, #16
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2208      	movs	r2, #8
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9e9 	bl	800548e <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9db 	bl	800547a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f9ec 	bl	80054a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0201 	mvn.w	r2, #1
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc f870 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fd7c 	bl	8005c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9bd 	bl	80054b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00c      	beq.n	8005160 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0220 	mvn.w	r2, #32
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fd4e 	bl	8005bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e0ae      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	f200 809f 	bhi.w	80052d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080052d5 	.word	0x080052d5
 80051a4:	080052d5 	.word	0x080052d5
 80051a8:	080052d5 	.word	0x080052d5
 80051ac:	08005211 	.word	0x08005211
 80051b0:	080052d5 	.word	0x080052d5
 80051b4:	080052d5 	.word	0x080052d5
 80051b8:	080052d5 	.word	0x080052d5
 80051bc:	08005253 	.word	0x08005253
 80051c0:	080052d5 	.word	0x080052d5
 80051c4:	080052d5 	.word	0x080052d5
 80051c8:	080052d5 	.word	0x080052d5
 80051cc:	08005293 	.word	0x08005293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fa24 	bl	8005624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0208 	orr.w	r2, r2, #8
 80051ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6999      	ldr	r1, [r3, #24]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	619a      	str	r2, [r3, #24]
      break;
 800520e:	e064      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fa74 	bl	8005704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6999      	ldr	r1, [r3, #24]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	619a      	str	r2, [r3, #24]
      break;
 8005250:	e043      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fac9 	bl	80057f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0208 	orr.w	r2, r2, #8
 800526c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0204 	bic.w	r2, r2, #4
 800527c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69d9      	ldr	r1, [r3, #28]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	61da      	str	r2, [r3, #28]
      break;
 8005290:	e023      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fb1d 	bl	80058d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69d9      	ldr	r1, [r3, #28]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	021a      	lsls	r2, r3, #8
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	61da      	str	r2, [r3, #28]
      break;
 80052d2:	e002      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
      break;
 80052d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIM_ConfigClockSource+0x1c>
 8005304:	2302      	movs	r3, #2
 8005306:	e0b4      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x186>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005340:	d03e      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005346:	f200 8087 	bhi.w	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534e:	f000 8086 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x172>
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005356:	d87f      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b70      	cmp	r3, #112	; 0x70
 800535a:	d01a      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0xa6>
 800535c:	2b70      	cmp	r3, #112	; 0x70
 800535e:	d87b      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b60      	cmp	r3, #96	; 0x60
 8005362:	d050      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x11a>
 8005364:	2b60      	cmp	r3, #96	; 0x60
 8005366:	d877      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b50      	cmp	r3, #80	; 0x50
 800536a:	d03c      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0xfa>
 800536c:	2b50      	cmp	r3, #80	; 0x50
 800536e:	d873      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d058      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x13a>
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d86f      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b30      	cmp	r3, #48	; 0x30
 800537a:	d064      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	2b30      	cmp	r3, #48	; 0x30
 800537e:	d86b      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b20      	cmp	r3, #32
 8005382:	d060      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 8005384:	2b20      	cmp	r3, #32
 8005386:	d867      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d05c      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 800538c:	2b10      	cmp	r3, #16
 800538e:	d05a      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 8005390:	e062      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053a2:	f000 fb69 	bl	8005a78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	609a      	str	r2, [r3, #8]
      break;
 80053be:	e04f      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053d0:	f000 fb52 	bl	8005a78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e2:	609a      	str	r2, [r3, #8]
      break;
 80053e4:	e03c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f2:	461a      	mov	r2, r3
 80053f4:	f000 fac6 	bl	8005984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2150      	movs	r1, #80	; 0x50
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fb1f 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005404:	e02c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005412:	461a      	mov	r2, r3
 8005414:	f000 fae5 	bl	80059e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2160      	movs	r1, #96	; 0x60
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fb0f 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005424:	e01c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005432:	461a      	mov	r2, r3
 8005434:	f000 faa6 	bl	8005984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2140      	movs	r1, #64	; 0x40
 800543e:	4618      	mov	r0, r3
 8005440:	f000 faff 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005444:	e00c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f000 faf6 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005456:	e003      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
      break;
 800545c:	e000      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800545e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
	...

080054cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a46      	ldr	r2, [pc, #280]	; (80055f8 <TIM_Base_SetConfig+0x12c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <TIM_Base_SetConfig+0x40>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ea:	d00f      	beq.n	800550c <TIM_Base_SetConfig+0x40>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a43      	ldr	r2, [pc, #268]	; (80055fc <TIM_Base_SetConfig+0x130>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00b      	beq.n	800550c <TIM_Base_SetConfig+0x40>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a42      	ldr	r2, [pc, #264]	; (8005600 <TIM_Base_SetConfig+0x134>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d007      	beq.n	800550c <TIM_Base_SetConfig+0x40>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a41      	ldr	r2, [pc, #260]	; (8005604 <TIM_Base_SetConfig+0x138>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a40      	ldr	r2, [pc, #256]	; (8005608 <TIM_Base_SetConfig+0x13c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d108      	bne.n	800551e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a35      	ldr	r2, [pc, #212]	; (80055f8 <TIM_Base_SetConfig+0x12c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d02b      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d027      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a32      	ldr	r2, [pc, #200]	; (80055fc <TIM_Base_SetConfig+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d023      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a31      	ldr	r2, [pc, #196]	; (8005600 <TIM_Base_SetConfig+0x134>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01f      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a30      	ldr	r2, [pc, #192]	; (8005604 <TIM_Base_SetConfig+0x138>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01b      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <TIM_Base_SetConfig+0x13c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d017      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2e      	ldr	r2, [pc, #184]	; (800560c <TIM_Base_SetConfig+0x140>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2d      	ldr	r2, [pc, #180]	; (8005610 <TIM_Base_SetConfig+0x144>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2c      	ldr	r2, [pc, #176]	; (8005614 <TIM_Base_SetConfig+0x148>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00b      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <TIM_Base_SetConfig+0x14c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <TIM_Base_SetConfig+0x150>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a29      	ldr	r2, [pc, #164]	; (8005620 <TIM_Base_SetConfig+0x154>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <TIM_Base_SetConfig+0x12c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0xf8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a12      	ldr	r2, [pc, #72]	; (8005608 <TIM_Base_SetConfig+0x13c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d105      	bne.n	80055ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	611a      	str	r2, [r3, #16]
  }
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800
 8005618:	40001800 	.word	0x40001800
 800561c:	40001c00 	.word	0x40001c00
 8005620:	40002000 	.word	0x40002000

08005624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f023 0201 	bic.w	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0302 	bic.w	r3, r3, #2
 800566c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a20      	ldr	r2, [pc, #128]	; (80056fc <TIM_OC1_SetConfig+0xd8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_OC1_SetConfig+0x64>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <TIM_OC1_SetConfig+0xdc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d10c      	bne.n	80056a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0308 	bic.w	r3, r3, #8
 800568e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 0304 	bic.w	r3, r3, #4
 80056a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <TIM_OC1_SetConfig+0xd8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_OC1_SetConfig+0x8e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a14      	ldr	r2, [pc, #80]	; (8005700 <TIM_OC1_SetConfig+0xdc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d111      	bne.n	80056d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	621a      	str	r2, [r3, #32]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40010000 	.word	0x40010000
 8005700:	40010400 	.word	0x40010400

08005704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f023 0210 	bic.w	r2, r3, #16
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <TIM_OC2_SetConfig+0xe4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC2_SetConfig+0x68>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a21      	ldr	r2, [pc, #132]	; (80057ec <TIM_OC2_SetConfig+0xe8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d10d      	bne.n	8005788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005786:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <TIM_OC2_SetConfig+0xe4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC2_SetConfig+0x94>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <TIM_OC2_SetConfig+0xe8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d113      	bne.n	80057c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40010000 	.word	0x40010000
 80057ec:	40010400 	.word	0x40010400

080057f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0303 	bic.w	r3, r3, #3
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <TIM_OC3_SetConfig+0xe0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC3_SetConfig+0x66>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a20      	ldr	r2, [pc, #128]	; (80058d4 <TIM_OC3_SetConfig+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10d      	bne.n	8005872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a16      	ldr	r2, [pc, #88]	; (80058d0 <TIM_OC3_SetConfig+0xe0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_OC3_SetConfig+0x92>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <TIM_OC3_SetConfig+0xe4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d113      	bne.n	80058aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	621a      	str	r2, [r3, #32]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40010000 	.word	0x40010000
 80058d4:	40010400 	.word	0x40010400

080058d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	031b      	lsls	r3, r3, #12
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a12      	ldr	r2, [pc, #72]	; (800597c <TIM_OC4_SetConfig+0xa4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC4_SetConfig+0x68>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a11      	ldr	r2, [pc, #68]	; (8005980 <TIM_OC4_SetConfig+0xa8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d109      	bne.n	8005954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	019b      	lsls	r3, r3, #6
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000
 8005980:	40010400 	.word	0x40010400

08005984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0201 	bic.w	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f023 030a 	bic.w	r3, r3, #10
 80059c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 0210 	bic.w	r2, r3, #16
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	031b      	lsls	r3, r3, #12
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f043 0307 	orr.w	r3, r3, #7
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2201      	movs	r2, #1
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1a      	ldr	r2, [r3, #32]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	401a      	ands	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	431a      	orrs	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e05a      	b.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d022      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b68:	d01d      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1a      	ldr	r2, [pc, #104]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00e      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40010400 	.word	0x40010400
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40001800 	.word	0x40001800

08005bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <__cvt>:
 8005c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	ec55 4b10 	vmov	r4, r5, d0
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	460e      	mov	r6, r1
 8005c30:	4619      	mov	r1, r3
 8005c32:	462b      	mov	r3, r5
 8005c34:	bfbb      	ittet	lt
 8005c36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c3a:	461d      	movlt	r5, r3
 8005c3c:	2300      	movge	r3, #0
 8005c3e:	232d      	movlt	r3, #45	; 0x2d
 8005c40:	700b      	strb	r3, [r1, #0]
 8005c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c48:	4691      	mov	r9, r2
 8005c4a:	f023 0820 	bic.w	r8, r3, #32
 8005c4e:	bfbc      	itt	lt
 8005c50:	4622      	movlt	r2, r4
 8005c52:	4614      	movlt	r4, r2
 8005c54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c58:	d005      	beq.n	8005c66 <__cvt+0x42>
 8005c5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c5e:	d100      	bne.n	8005c62 <__cvt+0x3e>
 8005c60:	3601      	adds	r6, #1
 8005c62:	2102      	movs	r1, #2
 8005c64:	e000      	b.n	8005c68 <__cvt+0x44>
 8005c66:	2103      	movs	r1, #3
 8005c68:	ab03      	add	r3, sp, #12
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	ab02      	add	r3, sp, #8
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	ec45 4b10 	vmov	d0, r4, r5
 8005c74:	4653      	mov	r3, sl
 8005c76:	4632      	mov	r2, r6
 8005c78:	f000 fe4a 	bl	8006910 <_dtoa_r>
 8005c7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c80:	4607      	mov	r7, r0
 8005c82:	d102      	bne.n	8005c8a <__cvt+0x66>
 8005c84:	f019 0f01 	tst.w	r9, #1
 8005c88:	d022      	beq.n	8005cd0 <__cvt+0xac>
 8005c8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c8e:	eb07 0906 	add.w	r9, r7, r6
 8005c92:	d110      	bne.n	8005cb6 <__cvt+0x92>
 8005c94:	783b      	ldrb	r3, [r7, #0]
 8005c96:	2b30      	cmp	r3, #48	; 0x30
 8005c98:	d10a      	bne.n	8005cb0 <__cvt+0x8c>
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7fa ff31 	bl	8000b08 <__aeabi_dcmpeq>
 8005ca6:	b918      	cbnz	r0, 8005cb0 <__cvt+0x8c>
 8005ca8:	f1c6 0601 	rsb	r6, r6, #1
 8005cac:	f8ca 6000 	str.w	r6, [sl]
 8005cb0:	f8da 3000 	ldr.w	r3, [sl]
 8005cb4:	4499      	add	r9, r3
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	f7fa ff23 	bl	8000b08 <__aeabi_dcmpeq>
 8005cc2:	b108      	cbz	r0, 8005cc8 <__cvt+0xa4>
 8005cc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cc8:	2230      	movs	r2, #48	; 0x30
 8005cca:	9b03      	ldr	r3, [sp, #12]
 8005ccc:	454b      	cmp	r3, r9
 8005cce:	d307      	bcc.n	8005ce0 <__cvt+0xbc>
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cd4:	1bdb      	subs	r3, r3, r7
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	b004      	add	sp, #16
 8005cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce0:	1c59      	adds	r1, r3, #1
 8005ce2:	9103      	str	r1, [sp, #12]
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e7f0      	b.n	8005cca <__cvt+0xa6>

08005ce8 <__exponent>:
 8005ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cea:	4603      	mov	r3, r0
 8005cec:	2900      	cmp	r1, #0
 8005cee:	bfb8      	it	lt
 8005cf0:	4249      	neglt	r1, r1
 8005cf2:	f803 2b02 	strb.w	r2, [r3], #2
 8005cf6:	bfb4      	ite	lt
 8005cf8:	222d      	movlt	r2, #45	; 0x2d
 8005cfa:	222b      	movge	r2, #43	; 0x2b
 8005cfc:	2909      	cmp	r1, #9
 8005cfe:	7042      	strb	r2, [r0, #1]
 8005d00:	dd2a      	ble.n	8005d58 <__exponent+0x70>
 8005d02:	f10d 0207 	add.w	r2, sp, #7
 8005d06:	4617      	mov	r7, r2
 8005d08:	260a      	movs	r6, #10
 8005d0a:	4694      	mov	ip, r2
 8005d0c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d10:	fb06 1415 	mls	r4, r6, r5, r1
 8005d14:	3430      	adds	r4, #48	; 0x30
 8005d16:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	2c63      	cmp	r4, #99	; 0x63
 8005d1e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d22:	4629      	mov	r1, r5
 8005d24:	dcf1      	bgt.n	8005d0a <__exponent+0x22>
 8005d26:	3130      	adds	r1, #48	; 0x30
 8005d28:	f1ac 0402 	sub.w	r4, ip, #2
 8005d2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d30:	1c41      	adds	r1, r0, #1
 8005d32:	4622      	mov	r2, r4
 8005d34:	42ba      	cmp	r2, r7
 8005d36:	d30a      	bcc.n	8005d4e <__exponent+0x66>
 8005d38:	f10d 0209 	add.w	r2, sp, #9
 8005d3c:	eba2 020c 	sub.w	r2, r2, ip
 8005d40:	42bc      	cmp	r4, r7
 8005d42:	bf88      	it	hi
 8005d44:	2200      	movhi	r2, #0
 8005d46:	4413      	add	r3, r2
 8005d48:	1a18      	subs	r0, r3, r0
 8005d4a:	b003      	add	sp, #12
 8005d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d4e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005d52:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005d56:	e7ed      	b.n	8005d34 <__exponent+0x4c>
 8005d58:	2330      	movs	r3, #48	; 0x30
 8005d5a:	3130      	adds	r1, #48	; 0x30
 8005d5c:	7083      	strb	r3, [r0, #2]
 8005d5e:	70c1      	strb	r1, [r0, #3]
 8005d60:	1d03      	adds	r3, r0, #4
 8005d62:	e7f1      	b.n	8005d48 <__exponent+0x60>

08005d64 <_printf_float>:
 8005d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d68:	ed2d 8b02 	vpush	{d8}
 8005d6c:	b08d      	sub	sp, #52	; 0x34
 8005d6e:	460c      	mov	r4, r1
 8005d70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d74:	4616      	mov	r6, r2
 8005d76:	461f      	mov	r7, r3
 8005d78:	4605      	mov	r5, r0
 8005d7a:	f000 fcc7 	bl	800670c <_localeconv_r>
 8005d7e:	f8d0 a000 	ldr.w	sl, [r0]
 8005d82:	4650      	mov	r0, sl
 8005d84:	f7fa fa94 	bl	80002b0 <strlen>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	9305      	str	r3, [sp, #20]
 8005d90:	f8d8 3000 	ldr.w	r3, [r8]
 8005d94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d98:	3307      	adds	r3, #7
 8005d9a:	f023 0307 	bic.w	r3, r3, #7
 8005d9e:	f103 0208 	add.w	r2, r3, #8
 8005da2:	f8c8 2000 	str.w	r2, [r8]
 8005da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005daa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dae:	9307      	str	r3, [sp, #28]
 8005db0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005db4:	ee08 0a10 	vmov	s16, r0
 8005db8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005dbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc0:	4b9e      	ldr	r3, [pc, #632]	; (800603c <_printf_float+0x2d8>)
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	f7fa fed1 	bl	8000b6c <__aeabi_dcmpun>
 8005dca:	bb88      	cbnz	r0, 8005e30 <_printf_float+0xcc>
 8005dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd0:	4b9a      	ldr	r3, [pc, #616]	; (800603c <_printf_float+0x2d8>)
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	f7fa feab 	bl	8000b30 <__aeabi_dcmple>
 8005dda:	bb48      	cbnz	r0, 8005e30 <_printf_float+0xcc>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2300      	movs	r3, #0
 8005de0:	4640      	mov	r0, r8
 8005de2:	4649      	mov	r1, r9
 8005de4:	f7fa fe9a 	bl	8000b1c <__aeabi_dcmplt>
 8005de8:	b110      	cbz	r0, 8005df0 <_printf_float+0x8c>
 8005dea:	232d      	movs	r3, #45	; 0x2d
 8005dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df0:	4a93      	ldr	r2, [pc, #588]	; (8006040 <_printf_float+0x2dc>)
 8005df2:	4b94      	ldr	r3, [pc, #592]	; (8006044 <_printf_float+0x2e0>)
 8005df4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005df8:	bf94      	ite	ls
 8005dfa:	4690      	movls	r8, r2
 8005dfc:	4698      	movhi	r8, r3
 8005dfe:	2303      	movs	r3, #3
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	9b05      	ldr	r3, [sp, #20]
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	f04f 0900 	mov.w	r9, #0
 8005e0e:	9700      	str	r7, [sp, #0]
 8005e10:	4633      	mov	r3, r6
 8005e12:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 f9da 	bl	80061d0 <_printf_common>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f040 8090 	bne.w	8005f42 <_printf_float+0x1de>
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	b00d      	add	sp, #52	; 0x34
 8005e28:	ecbd 8b02 	vpop	{d8}
 8005e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	f7fa fe98 	bl	8000b6c <__aeabi_dcmpun>
 8005e3c:	b140      	cbz	r0, 8005e50 <_printf_float+0xec>
 8005e3e:	464b      	mov	r3, r9
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bfbc      	itt	lt
 8005e44:	232d      	movlt	r3, #45	; 0x2d
 8005e46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e4a:	4a7f      	ldr	r2, [pc, #508]	; (8006048 <_printf_float+0x2e4>)
 8005e4c:	4b7f      	ldr	r3, [pc, #508]	; (800604c <_printf_float+0x2e8>)
 8005e4e:	e7d1      	b.n	8005df4 <_printf_float+0x90>
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e56:	9206      	str	r2, [sp, #24]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	d13f      	bne.n	8005edc <_printf_float+0x178>
 8005e5c:	2306      	movs	r3, #6
 8005e5e:	6063      	str	r3, [r4, #4]
 8005e60:	9b05      	ldr	r3, [sp, #20]
 8005e62:	6861      	ldr	r1, [r4, #4]
 8005e64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9303      	str	r3, [sp, #12]
 8005e6c:	ab0a      	add	r3, sp, #40	; 0x28
 8005e6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e72:	ab09      	add	r3, sp, #36	; 0x24
 8005e74:	ec49 8b10 	vmov	d0, r8, r9
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	6022      	str	r2, [r4, #0]
 8005e7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e80:	4628      	mov	r0, r5
 8005e82:	f7ff fecf 	bl	8005c24 <__cvt>
 8005e86:	9b06      	ldr	r3, [sp, #24]
 8005e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e8a:	2b47      	cmp	r3, #71	; 0x47
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	d108      	bne.n	8005ea2 <_printf_float+0x13e>
 8005e90:	1cc8      	adds	r0, r1, #3
 8005e92:	db02      	blt.n	8005e9a <_printf_float+0x136>
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	4299      	cmp	r1, r3
 8005e98:	dd41      	ble.n	8005f1e <_printf_float+0x1ba>
 8005e9a:	f1ab 0302 	sub.w	r3, fp, #2
 8005e9e:	fa5f fb83 	uxtb.w	fp, r3
 8005ea2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ea6:	d820      	bhi.n	8005eea <_printf_float+0x186>
 8005ea8:	3901      	subs	r1, #1
 8005eaa:	465a      	mov	r2, fp
 8005eac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8005eb2:	f7ff ff19 	bl	8005ce8 <__exponent>
 8005eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eb8:	1813      	adds	r3, r2, r0
 8005eba:	2a01      	cmp	r2, #1
 8005ebc:	4681      	mov	r9, r0
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	dc02      	bgt.n	8005ec8 <_printf_float+0x164>
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	07d2      	lsls	r2, r2, #31
 8005ec6:	d501      	bpl.n	8005ecc <_printf_float+0x168>
 8005ec8:	3301      	adds	r3, #1
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d09c      	beq.n	8005e0e <_printf_float+0xaa>
 8005ed4:	232d      	movs	r3, #45	; 0x2d
 8005ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eda:	e798      	b.n	8005e0e <_printf_float+0xaa>
 8005edc:	9a06      	ldr	r2, [sp, #24]
 8005ede:	2a47      	cmp	r2, #71	; 0x47
 8005ee0:	d1be      	bne.n	8005e60 <_printf_float+0xfc>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1bc      	bne.n	8005e60 <_printf_float+0xfc>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e7b9      	b.n	8005e5e <_printf_float+0xfa>
 8005eea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005eee:	d118      	bne.n	8005f22 <_printf_float+0x1be>
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	dd0b      	ble.n	8005f0e <_printf_float+0x1aa>
 8005ef6:	6121      	str	r1, [r4, #16]
 8005ef8:	b913      	cbnz	r3, 8005f00 <_printf_float+0x19c>
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	07d0      	lsls	r0, r2, #31
 8005efe:	d502      	bpl.n	8005f06 <_printf_float+0x1a2>
 8005f00:	3301      	adds	r3, #1
 8005f02:	440b      	add	r3, r1
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f08:	f04f 0900 	mov.w	r9, #0
 8005f0c:	e7de      	b.n	8005ecc <_printf_float+0x168>
 8005f0e:	b913      	cbnz	r3, 8005f16 <_printf_float+0x1b2>
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	07d2      	lsls	r2, r2, #31
 8005f14:	d501      	bpl.n	8005f1a <_printf_float+0x1b6>
 8005f16:	3302      	adds	r3, #2
 8005f18:	e7f4      	b.n	8005f04 <_printf_float+0x1a0>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e7f2      	b.n	8005f04 <_printf_float+0x1a0>
 8005f1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f24:	4299      	cmp	r1, r3
 8005f26:	db05      	blt.n	8005f34 <_printf_float+0x1d0>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	6121      	str	r1, [r4, #16]
 8005f2c:	07d8      	lsls	r0, r3, #31
 8005f2e:	d5ea      	bpl.n	8005f06 <_printf_float+0x1a2>
 8005f30:	1c4b      	adds	r3, r1, #1
 8005f32:	e7e7      	b.n	8005f04 <_printf_float+0x1a0>
 8005f34:	2900      	cmp	r1, #0
 8005f36:	bfd4      	ite	le
 8005f38:	f1c1 0202 	rsble	r2, r1, #2
 8005f3c:	2201      	movgt	r2, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	e7e0      	b.n	8005f04 <_printf_float+0x1a0>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	055a      	lsls	r2, r3, #21
 8005f46:	d407      	bmi.n	8005f58 <_printf_float+0x1f4>
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	4642      	mov	r2, r8
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	d12c      	bne.n	8005fb0 <_printf_float+0x24c>
 8005f56:	e764      	b.n	8005e22 <_printf_float+0xbe>
 8005f58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f5c:	f240 80e0 	bls.w	8006120 <_printf_float+0x3bc>
 8005f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f64:	2200      	movs	r2, #0
 8005f66:	2300      	movs	r3, #0
 8005f68:	f7fa fdce 	bl	8000b08 <__aeabi_dcmpeq>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d034      	beq.n	8005fda <_printf_float+0x276>
 8005f70:	4a37      	ldr	r2, [pc, #220]	; (8006050 <_printf_float+0x2ec>)
 8005f72:	2301      	movs	r3, #1
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f af51 	beq.w	8005e22 <_printf_float+0xbe>
 8005f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f84:	429a      	cmp	r2, r3
 8005f86:	db02      	blt.n	8005f8e <_printf_float+0x22a>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	07d8      	lsls	r0, r3, #31
 8005f8c:	d510      	bpl.n	8005fb0 <_printf_float+0x24c>
 8005f8e:	ee18 3a10 	vmov	r3, s16
 8005f92:	4652      	mov	r2, sl
 8005f94:	4631      	mov	r1, r6
 8005f96:	4628      	mov	r0, r5
 8005f98:	47b8      	blx	r7
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f43f af41 	beq.w	8005e22 <_printf_float+0xbe>
 8005fa0:	f04f 0800 	mov.w	r8, #0
 8005fa4:	f104 091a 	add.w	r9, r4, #26
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	4543      	cmp	r3, r8
 8005fae:	dc09      	bgt.n	8005fc4 <_printf_float+0x260>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	079b      	lsls	r3, r3, #30
 8005fb4:	f100 8107 	bmi.w	80061c6 <_printf_float+0x462>
 8005fb8:	68e0      	ldr	r0, [r4, #12]
 8005fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fbc:	4298      	cmp	r0, r3
 8005fbe:	bfb8      	it	lt
 8005fc0:	4618      	movlt	r0, r3
 8005fc2:	e730      	b.n	8005e26 <_printf_float+0xc2>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	464a      	mov	r2, r9
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f af27 	beq.w	8005e22 <_printf_float+0xbe>
 8005fd4:	f108 0801 	add.w	r8, r8, #1
 8005fd8:	e7e6      	b.n	8005fa8 <_printf_float+0x244>
 8005fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	dc39      	bgt.n	8006054 <_printf_float+0x2f0>
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <_printf_float+0x2ec>)
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	f43f af19 	beq.w	8005e22 <_printf_float+0xbe>
 8005ff0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d102      	bne.n	8005ffe <_printf_float+0x29a>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	07d9      	lsls	r1, r3, #31
 8005ffc:	d5d8      	bpl.n	8005fb0 <_printf_float+0x24c>
 8005ffe:	ee18 3a10 	vmov	r3, s16
 8006002:	4652      	mov	r2, sl
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	f43f af09 	beq.w	8005e22 <_printf_float+0xbe>
 8006010:	f04f 0900 	mov.w	r9, #0
 8006014:	f104 0a1a 	add.w	sl, r4, #26
 8006018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601a:	425b      	negs	r3, r3
 800601c:	454b      	cmp	r3, r9
 800601e:	dc01      	bgt.n	8006024 <_printf_float+0x2c0>
 8006020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006022:	e792      	b.n	8005f4a <_printf_float+0x1e6>
 8006024:	2301      	movs	r3, #1
 8006026:	4652      	mov	r2, sl
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	f43f aef7 	beq.w	8005e22 <_printf_float+0xbe>
 8006034:	f109 0901 	add.w	r9, r9, #1
 8006038:	e7ee      	b.n	8006018 <_printf_float+0x2b4>
 800603a:	bf00      	nop
 800603c:	7fefffff 	.word	0x7fefffff
 8006040:	080085d0 	.word	0x080085d0
 8006044:	080085d4 	.word	0x080085d4
 8006048:	080085d8 	.word	0x080085d8
 800604c:	080085dc 	.word	0x080085dc
 8006050:	080085e0 	.word	0x080085e0
 8006054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006058:	429a      	cmp	r2, r3
 800605a:	bfa8      	it	ge
 800605c:	461a      	movge	r2, r3
 800605e:	2a00      	cmp	r2, #0
 8006060:	4691      	mov	r9, r2
 8006062:	dc37      	bgt.n	80060d4 <_printf_float+0x370>
 8006064:	f04f 0b00 	mov.w	fp, #0
 8006068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800606c:	f104 021a 	add.w	r2, r4, #26
 8006070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	eba3 0309 	sub.w	r3, r3, r9
 8006078:	455b      	cmp	r3, fp
 800607a:	dc33      	bgt.n	80060e4 <_printf_float+0x380>
 800607c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006080:	429a      	cmp	r2, r3
 8006082:	db3b      	blt.n	80060fc <_printf_float+0x398>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07da      	lsls	r2, r3, #31
 8006088:	d438      	bmi.n	80060fc <_printf_float+0x398>
 800608a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800608e:	eba2 0903 	sub.w	r9, r2, r3
 8006092:	9b05      	ldr	r3, [sp, #20]
 8006094:	1ad2      	subs	r2, r2, r3
 8006096:	4591      	cmp	r9, r2
 8006098:	bfa8      	it	ge
 800609a:	4691      	movge	r9, r2
 800609c:	f1b9 0f00 	cmp.w	r9, #0
 80060a0:	dc35      	bgt.n	800610e <_printf_float+0x3aa>
 80060a2:	f04f 0800 	mov.w	r8, #0
 80060a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060aa:	f104 0a1a 	add.w	sl, r4, #26
 80060ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	eba3 0309 	sub.w	r3, r3, r9
 80060b8:	4543      	cmp	r3, r8
 80060ba:	f77f af79 	ble.w	8005fb0 <_printf_float+0x24c>
 80060be:	2301      	movs	r3, #1
 80060c0:	4652      	mov	r2, sl
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	f43f aeaa 	beq.w	8005e22 <_printf_float+0xbe>
 80060ce:	f108 0801 	add.w	r8, r8, #1
 80060d2:	e7ec      	b.n	80060ae <_printf_float+0x34a>
 80060d4:	4613      	mov	r3, r2
 80060d6:	4631      	mov	r1, r6
 80060d8:	4642      	mov	r2, r8
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	d1c0      	bne.n	8006064 <_printf_float+0x300>
 80060e2:	e69e      	b.n	8005e22 <_printf_float+0xbe>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	9205      	str	r2, [sp, #20]
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	f43f ae97 	beq.w	8005e22 <_printf_float+0xbe>
 80060f4:	9a05      	ldr	r2, [sp, #20]
 80060f6:	f10b 0b01 	add.w	fp, fp, #1
 80060fa:	e7b9      	b.n	8006070 <_printf_float+0x30c>
 80060fc:	ee18 3a10 	vmov	r3, s16
 8006100:	4652      	mov	r2, sl
 8006102:	4631      	mov	r1, r6
 8006104:	4628      	mov	r0, r5
 8006106:	47b8      	blx	r7
 8006108:	3001      	adds	r0, #1
 800610a:	d1be      	bne.n	800608a <_printf_float+0x326>
 800610c:	e689      	b.n	8005e22 <_printf_float+0xbe>
 800610e:	9a05      	ldr	r2, [sp, #20]
 8006110:	464b      	mov	r3, r9
 8006112:	4442      	add	r2, r8
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	d1c1      	bne.n	80060a2 <_printf_float+0x33e>
 800611e:	e680      	b.n	8005e22 <_printf_float+0xbe>
 8006120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006122:	2a01      	cmp	r2, #1
 8006124:	dc01      	bgt.n	800612a <_printf_float+0x3c6>
 8006126:	07db      	lsls	r3, r3, #31
 8006128:	d53a      	bpl.n	80061a0 <_printf_float+0x43c>
 800612a:	2301      	movs	r3, #1
 800612c:	4642      	mov	r2, r8
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	f43f ae74 	beq.w	8005e22 <_printf_float+0xbe>
 800613a:	ee18 3a10 	vmov	r3, s16
 800613e:	4652      	mov	r2, sl
 8006140:	4631      	mov	r1, r6
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	f43f ae6b 	beq.w	8005e22 <_printf_float+0xbe>
 800614c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006150:	2200      	movs	r2, #0
 8006152:	2300      	movs	r3, #0
 8006154:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006158:	f7fa fcd6 	bl	8000b08 <__aeabi_dcmpeq>
 800615c:	b9d8      	cbnz	r0, 8006196 <_printf_float+0x432>
 800615e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006162:	f108 0201 	add.w	r2, r8, #1
 8006166:	4631      	mov	r1, r6
 8006168:	4628      	mov	r0, r5
 800616a:	47b8      	blx	r7
 800616c:	3001      	adds	r0, #1
 800616e:	d10e      	bne.n	800618e <_printf_float+0x42a>
 8006170:	e657      	b.n	8005e22 <_printf_float+0xbe>
 8006172:	2301      	movs	r3, #1
 8006174:	4652      	mov	r2, sl
 8006176:	4631      	mov	r1, r6
 8006178:	4628      	mov	r0, r5
 800617a:	47b8      	blx	r7
 800617c:	3001      	adds	r0, #1
 800617e:	f43f ae50 	beq.w	8005e22 <_printf_float+0xbe>
 8006182:	f108 0801 	add.w	r8, r8, #1
 8006186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006188:	3b01      	subs	r3, #1
 800618a:	4543      	cmp	r3, r8
 800618c:	dcf1      	bgt.n	8006172 <_printf_float+0x40e>
 800618e:	464b      	mov	r3, r9
 8006190:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006194:	e6da      	b.n	8005f4c <_printf_float+0x1e8>
 8006196:	f04f 0800 	mov.w	r8, #0
 800619a:	f104 0a1a 	add.w	sl, r4, #26
 800619e:	e7f2      	b.n	8006186 <_printf_float+0x422>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4642      	mov	r2, r8
 80061a4:	e7df      	b.n	8006166 <_printf_float+0x402>
 80061a6:	2301      	movs	r3, #1
 80061a8:	464a      	mov	r2, r9
 80061aa:	4631      	mov	r1, r6
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	f43f ae36 	beq.w	8005e22 <_printf_float+0xbe>
 80061b6:	f108 0801 	add.w	r8, r8, #1
 80061ba:	68e3      	ldr	r3, [r4, #12]
 80061bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061be:	1a5b      	subs	r3, r3, r1
 80061c0:	4543      	cmp	r3, r8
 80061c2:	dcf0      	bgt.n	80061a6 <_printf_float+0x442>
 80061c4:	e6f8      	b.n	8005fb8 <_printf_float+0x254>
 80061c6:	f04f 0800 	mov.w	r8, #0
 80061ca:	f104 0919 	add.w	r9, r4, #25
 80061ce:	e7f4      	b.n	80061ba <_printf_float+0x456>

080061d0 <_printf_common>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	4616      	mov	r6, r2
 80061d6:	4699      	mov	r9, r3
 80061d8:	688a      	ldr	r2, [r1, #8]
 80061da:	690b      	ldr	r3, [r1, #16]
 80061dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	bfb8      	it	lt
 80061e4:	4613      	movlt	r3, r2
 80061e6:	6033      	str	r3, [r6, #0]
 80061e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ec:	4607      	mov	r7, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	b10a      	cbz	r2, 80061f6 <_printf_common+0x26>
 80061f2:	3301      	adds	r3, #1
 80061f4:	6033      	str	r3, [r6, #0]
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	0699      	lsls	r1, r3, #26
 80061fa:	bf42      	ittt	mi
 80061fc:	6833      	ldrmi	r3, [r6, #0]
 80061fe:	3302      	addmi	r3, #2
 8006200:	6033      	strmi	r3, [r6, #0]
 8006202:	6825      	ldr	r5, [r4, #0]
 8006204:	f015 0506 	ands.w	r5, r5, #6
 8006208:	d106      	bne.n	8006218 <_printf_common+0x48>
 800620a:	f104 0a19 	add.w	sl, r4, #25
 800620e:	68e3      	ldr	r3, [r4, #12]
 8006210:	6832      	ldr	r2, [r6, #0]
 8006212:	1a9b      	subs	r3, r3, r2
 8006214:	42ab      	cmp	r3, r5
 8006216:	dc26      	bgt.n	8006266 <_printf_common+0x96>
 8006218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800621c:	1e13      	subs	r3, r2, #0
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	bf18      	it	ne
 8006222:	2301      	movne	r3, #1
 8006224:	0692      	lsls	r2, r2, #26
 8006226:	d42b      	bmi.n	8006280 <_printf_common+0xb0>
 8006228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800622c:	4649      	mov	r1, r9
 800622e:	4638      	mov	r0, r7
 8006230:	47c0      	blx	r8
 8006232:	3001      	adds	r0, #1
 8006234:	d01e      	beq.n	8006274 <_printf_common+0xa4>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	6922      	ldr	r2, [r4, #16]
 800623a:	f003 0306 	and.w	r3, r3, #6
 800623e:	2b04      	cmp	r3, #4
 8006240:	bf02      	ittt	eq
 8006242:	68e5      	ldreq	r5, [r4, #12]
 8006244:	6833      	ldreq	r3, [r6, #0]
 8006246:	1aed      	subeq	r5, r5, r3
 8006248:	68a3      	ldr	r3, [r4, #8]
 800624a:	bf0c      	ite	eq
 800624c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006250:	2500      	movne	r5, #0
 8006252:	4293      	cmp	r3, r2
 8006254:	bfc4      	itt	gt
 8006256:	1a9b      	subgt	r3, r3, r2
 8006258:	18ed      	addgt	r5, r5, r3
 800625a:	2600      	movs	r6, #0
 800625c:	341a      	adds	r4, #26
 800625e:	42b5      	cmp	r5, r6
 8006260:	d11a      	bne.n	8006298 <_printf_common+0xc8>
 8006262:	2000      	movs	r0, #0
 8006264:	e008      	b.n	8006278 <_printf_common+0xa8>
 8006266:	2301      	movs	r3, #1
 8006268:	4652      	mov	r2, sl
 800626a:	4649      	mov	r1, r9
 800626c:	4638      	mov	r0, r7
 800626e:	47c0      	blx	r8
 8006270:	3001      	adds	r0, #1
 8006272:	d103      	bne.n	800627c <_printf_common+0xac>
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627c:	3501      	adds	r5, #1
 800627e:	e7c6      	b.n	800620e <_printf_common+0x3e>
 8006280:	18e1      	adds	r1, r4, r3
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	2030      	movs	r0, #48	; 0x30
 8006286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800628a:	4422      	add	r2, r4
 800628c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006294:	3302      	adds	r3, #2
 8006296:	e7c7      	b.n	8006228 <_printf_common+0x58>
 8006298:	2301      	movs	r3, #1
 800629a:	4622      	mov	r2, r4
 800629c:	4649      	mov	r1, r9
 800629e:	4638      	mov	r0, r7
 80062a0:	47c0      	blx	r8
 80062a2:	3001      	adds	r0, #1
 80062a4:	d0e6      	beq.n	8006274 <_printf_common+0xa4>
 80062a6:	3601      	adds	r6, #1
 80062a8:	e7d9      	b.n	800625e <_printf_common+0x8e>
	...

080062ac <_printf_i>:
 80062ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	7e0f      	ldrb	r7, [r1, #24]
 80062b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062b4:	2f78      	cmp	r7, #120	; 0x78
 80062b6:	4691      	mov	r9, r2
 80062b8:	4680      	mov	r8, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	469a      	mov	sl, r3
 80062be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062c2:	d807      	bhi.n	80062d4 <_printf_i+0x28>
 80062c4:	2f62      	cmp	r7, #98	; 0x62
 80062c6:	d80a      	bhi.n	80062de <_printf_i+0x32>
 80062c8:	2f00      	cmp	r7, #0
 80062ca:	f000 80d4 	beq.w	8006476 <_printf_i+0x1ca>
 80062ce:	2f58      	cmp	r7, #88	; 0x58
 80062d0:	f000 80c0 	beq.w	8006454 <_printf_i+0x1a8>
 80062d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062dc:	e03a      	b.n	8006354 <_printf_i+0xa8>
 80062de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062e2:	2b15      	cmp	r3, #21
 80062e4:	d8f6      	bhi.n	80062d4 <_printf_i+0x28>
 80062e6:	a101      	add	r1, pc, #4	; (adr r1, 80062ec <_printf_i+0x40>)
 80062e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062ec:	08006345 	.word	0x08006345
 80062f0:	08006359 	.word	0x08006359
 80062f4:	080062d5 	.word	0x080062d5
 80062f8:	080062d5 	.word	0x080062d5
 80062fc:	080062d5 	.word	0x080062d5
 8006300:	080062d5 	.word	0x080062d5
 8006304:	08006359 	.word	0x08006359
 8006308:	080062d5 	.word	0x080062d5
 800630c:	080062d5 	.word	0x080062d5
 8006310:	080062d5 	.word	0x080062d5
 8006314:	080062d5 	.word	0x080062d5
 8006318:	0800645d 	.word	0x0800645d
 800631c:	08006385 	.word	0x08006385
 8006320:	08006417 	.word	0x08006417
 8006324:	080062d5 	.word	0x080062d5
 8006328:	080062d5 	.word	0x080062d5
 800632c:	0800647f 	.word	0x0800647f
 8006330:	080062d5 	.word	0x080062d5
 8006334:	08006385 	.word	0x08006385
 8006338:	080062d5 	.word	0x080062d5
 800633c:	080062d5 	.word	0x080062d5
 8006340:	0800641f 	.word	0x0800641f
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	1d1a      	adds	r2, r3, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	602a      	str	r2, [r5, #0]
 800634c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006354:	2301      	movs	r3, #1
 8006356:	e09f      	b.n	8006498 <_printf_i+0x1ec>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	682b      	ldr	r3, [r5, #0]
 800635c:	0607      	lsls	r7, r0, #24
 800635e:	f103 0104 	add.w	r1, r3, #4
 8006362:	6029      	str	r1, [r5, #0]
 8006364:	d501      	bpl.n	800636a <_printf_i+0xbe>
 8006366:	681e      	ldr	r6, [r3, #0]
 8006368:	e003      	b.n	8006372 <_printf_i+0xc6>
 800636a:	0646      	lsls	r6, r0, #25
 800636c:	d5fb      	bpl.n	8006366 <_printf_i+0xba>
 800636e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006372:	2e00      	cmp	r6, #0
 8006374:	da03      	bge.n	800637e <_printf_i+0xd2>
 8006376:	232d      	movs	r3, #45	; 0x2d
 8006378:	4276      	negs	r6, r6
 800637a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637e:	485a      	ldr	r0, [pc, #360]	; (80064e8 <_printf_i+0x23c>)
 8006380:	230a      	movs	r3, #10
 8006382:	e012      	b.n	80063aa <_printf_i+0xfe>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	1d19      	adds	r1, r3, #4
 800638a:	6029      	str	r1, [r5, #0]
 800638c:	0605      	lsls	r5, r0, #24
 800638e:	d501      	bpl.n	8006394 <_printf_i+0xe8>
 8006390:	681e      	ldr	r6, [r3, #0]
 8006392:	e002      	b.n	800639a <_printf_i+0xee>
 8006394:	0641      	lsls	r1, r0, #25
 8006396:	d5fb      	bpl.n	8006390 <_printf_i+0xe4>
 8006398:	881e      	ldrh	r6, [r3, #0]
 800639a:	4853      	ldr	r0, [pc, #332]	; (80064e8 <_printf_i+0x23c>)
 800639c:	2f6f      	cmp	r7, #111	; 0x6f
 800639e:	bf0c      	ite	eq
 80063a0:	2308      	moveq	r3, #8
 80063a2:	230a      	movne	r3, #10
 80063a4:	2100      	movs	r1, #0
 80063a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063aa:	6865      	ldr	r5, [r4, #4]
 80063ac:	60a5      	str	r5, [r4, #8]
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	bfa2      	ittt	ge
 80063b2:	6821      	ldrge	r1, [r4, #0]
 80063b4:	f021 0104 	bicge.w	r1, r1, #4
 80063b8:	6021      	strge	r1, [r4, #0]
 80063ba:	b90e      	cbnz	r6, 80063c0 <_printf_i+0x114>
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d04b      	beq.n	8006458 <_printf_i+0x1ac>
 80063c0:	4615      	mov	r5, r2
 80063c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063c6:	fb03 6711 	mls	r7, r3, r1, r6
 80063ca:	5dc7      	ldrb	r7, [r0, r7]
 80063cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063d0:	4637      	mov	r7, r6
 80063d2:	42bb      	cmp	r3, r7
 80063d4:	460e      	mov	r6, r1
 80063d6:	d9f4      	bls.n	80063c2 <_printf_i+0x116>
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d10b      	bne.n	80063f4 <_printf_i+0x148>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	07de      	lsls	r6, r3, #31
 80063e0:	d508      	bpl.n	80063f4 <_printf_i+0x148>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	6861      	ldr	r1, [r4, #4]
 80063e6:	4299      	cmp	r1, r3
 80063e8:	bfde      	ittt	le
 80063ea:	2330      	movle	r3, #48	; 0x30
 80063ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063f4:	1b52      	subs	r2, r2, r5
 80063f6:	6122      	str	r2, [r4, #16]
 80063f8:	f8cd a000 	str.w	sl, [sp]
 80063fc:	464b      	mov	r3, r9
 80063fe:	aa03      	add	r2, sp, #12
 8006400:	4621      	mov	r1, r4
 8006402:	4640      	mov	r0, r8
 8006404:	f7ff fee4 	bl	80061d0 <_printf_common>
 8006408:	3001      	adds	r0, #1
 800640a:	d14a      	bne.n	80064a2 <_printf_i+0x1f6>
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	b004      	add	sp, #16
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	f043 0320 	orr.w	r3, r3, #32
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	4833      	ldr	r0, [pc, #204]	; (80064ec <_printf_i+0x240>)
 8006420:	2778      	movs	r7, #120	; 0x78
 8006422:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	6829      	ldr	r1, [r5, #0]
 800642a:	061f      	lsls	r7, r3, #24
 800642c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006430:	d402      	bmi.n	8006438 <_printf_i+0x18c>
 8006432:	065f      	lsls	r7, r3, #25
 8006434:	bf48      	it	mi
 8006436:	b2b6      	uxthmi	r6, r6
 8006438:	07df      	lsls	r7, r3, #31
 800643a:	bf48      	it	mi
 800643c:	f043 0320 	orrmi.w	r3, r3, #32
 8006440:	6029      	str	r1, [r5, #0]
 8006442:	bf48      	it	mi
 8006444:	6023      	strmi	r3, [r4, #0]
 8006446:	b91e      	cbnz	r6, 8006450 <_printf_i+0x1a4>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	f023 0320 	bic.w	r3, r3, #32
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	2310      	movs	r3, #16
 8006452:	e7a7      	b.n	80063a4 <_printf_i+0xf8>
 8006454:	4824      	ldr	r0, [pc, #144]	; (80064e8 <_printf_i+0x23c>)
 8006456:	e7e4      	b.n	8006422 <_printf_i+0x176>
 8006458:	4615      	mov	r5, r2
 800645a:	e7bd      	b.n	80063d8 <_printf_i+0x12c>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	6826      	ldr	r6, [r4, #0]
 8006460:	6961      	ldr	r1, [r4, #20]
 8006462:	1d18      	adds	r0, r3, #4
 8006464:	6028      	str	r0, [r5, #0]
 8006466:	0635      	lsls	r5, r6, #24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	d501      	bpl.n	8006470 <_printf_i+0x1c4>
 800646c:	6019      	str	r1, [r3, #0]
 800646e:	e002      	b.n	8006476 <_printf_i+0x1ca>
 8006470:	0670      	lsls	r0, r6, #25
 8006472:	d5fb      	bpl.n	800646c <_printf_i+0x1c0>
 8006474:	8019      	strh	r1, [r3, #0]
 8006476:	2300      	movs	r3, #0
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	4615      	mov	r5, r2
 800647c:	e7bc      	b.n	80063f8 <_printf_i+0x14c>
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	602a      	str	r2, [r5, #0]
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	6862      	ldr	r2, [r4, #4]
 8006488:	2100      	movs	r1, #0
 800648a:	4628      	mov	r0, r5
 800648c:	f7f9 fec0 	bl	8000210 <memchr>
 8006490:	b108      	cbz	r0, 8006496 <_printf_i+0x1ea>
 8006492:	1b40      	subs	r0, r0, r5
 8006494:	6060      	str	r0, [r4, #4]
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	2300      	movs	r3, #0
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a0:	e7aa      	b.n	80063f8 <_printf_i+0x14c>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	462a      	mov	r2, r5
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d0ad      	beq.n	800640c <_printf_i+0x160>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	079b      	lsls	r3, r3, #30
 80064b4:	d413      	bmi.n	80064de <_printf_i+0x232>
 80064b6:	68e0      	ldr	r0, [r4, #12]
 80064b8:	9b03      	ldr	r3, [sp, #12]
 80064ba:	4298      	cmp	r0, r3
 80064bc:	bfb8      	it	lt
 80064be:	4618      	movlt	r0, r3
 80064c0:	e7a6      	b.n	8006410 <_printf_i+0x164>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4632      	mov	r2, r6
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	47d0      	blx	sl
 80064cc:	3001      	adds	r0, #1
 80064ce:	d09d      	beq.n	800640c <_printf_i+0x160>
 80064d0:	3501      	adds	r5, #1
 80064d2:	68e3      	ldr	r3, [r4, #12]
 80064d4:	9903      	ldr	r1, [sp, #12]
 80064d6:	1a5b      	subs	r3, r3, r1
 80064d8:	42ab      	cmp	r3, r5
 80064da:	dcf2      	bgt.n	80064c2 <_printf_i+0x216>
 80064dc:	e7eb      	b.n	80064b6 <_printf_i+0x20a>
 80064de:	2500      	movs	r5, #0
 80064e0:	f104 0619 	add.w	r6, r4, #25
 80064e4:	e7f5      	b.n	80064d2 <_printf_i+0x226>
 80064e6:	bf00      	nop
 80064e8:	080085e2 	.word	0x080085e2
 80064ec:	080085f3 	.word	0x080085f3

080064f0 <std>:
 80064f0:	2300      	movs	r3, #0
 80064f2:	b510      	push	{r4, lr}
 80064f4:	4604      	mov	r4, r0
 80064f6:	e9c0 3300 	strd	r3, r3, [r0]
 80064fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064fe:	6083      	str	r3, [r0, #8]
 8006500:	8181      	strh	r1, [r0, #12]
 8006502:	6643      	str	r3, [r0, #100]	; 0x64
 8006504:	81c2      	strh	r2, [r0, #14]
 8006506:	6183      	str	r3, [r0, #24]
 8006508:	4619      	mov	r1, r3
 800650a:	2208      	movs	r2, #8
 800650c:	305c      	adds	r0, #92	; 0x5c
 800650e:	f000 f8f4 	bl	80066fa <memset>
 8006512:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <std+0x58>)
 8006514:	6263      	str	r3, [r4, #36]	; 0x24
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <std+0x5c>)
 8006518:	62a3      	str	r3, [r4, #40]	; 0x28
 800651a:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <std+0x60>)
 800651c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800651e:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <std+0x64>)
 8006520:	6323      	str	r3, [r4, #48]	; 0x30
 8006522:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <std+0x68>)
 8006524:	6224      	str	r4, [r4, #32]
 8006526:	429c      	cmp	r4, r3
 8006528:	d006      	beq.n	8006538 <std+0x48>
 800652a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800652e:	4294      	cmp	r4, r2
 8006530:	d002      	beq.n	8006538 <std+0x48>
 8006532:	33d0      	adds	r3, #208	; 0xd0
 8006534:	429c      	cmp	r4, r3
 8006536:	d105      	bne.n	8006544 <std+0x54>
 8006538:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800653c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006540:	f000 b958 	b.w	80067f4 <__retarget_lock_init_recursive>
 8006544:	bd10      	pop	{r4, pc}
 8006546:	bf00      	nop
 8006548:	08006675 	.word	0x08006675
 800654c:	08006697 	.word	0x08006697
 8006550:	080066cf 	.word	0x080066cf
 8006554:	080066f3 	.word	0x080066f3
 8006558:	2000040c 	.word	0x2000040c

0800655c <stdio_exit_handler>:
 800655c:	4a02      	ldr	r2, [pc, #8]	; (8006568 <stdio_exit_handler+0xc>)
 800655e:	4903      	ldr	r1, [pc, #12]	; (800656c <stdio_exit_handler+0x10>)
 8006560:	4803      	ldr	r0, [pc, #12]	; (8006570 <stdio_exit_handler+0x14>)
 8006562:	f000 b869 	b.w	8006638 <_fwalk_sglue>
 8006566:	bf00      	nop
 8006568:	2000000c 	.word	0x2000000c
 800656c:	08007ef9 	.word	0x08007ef9
 8006570:	20000018 	.word	0x20000018

08006574 <cleanup_stdio>:
 8006574:	6841      	ldr	r1, [r0, #4]
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <cleanup_stdio+0x34>)
 8006578:	4299      	cmp	r1, r3
 800657a:	b510      	push	{r4, lr}
 800657c:	4604      	mov	r4, r0
 800657e:	d001      	beq.n	8006584 <cleanup_stdio+0x10>
 8006580:	f001 fcba 	bl	8007ef8 <_fflush_r>
 8006584:	68a1      	ldr	r1, [r4, #8]
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <cleanup_stdio+0x38>)
 8006588:	4299      	cmp	r1, r3
 800658a:	d002      	beq.n	8006592 <cleanup_stdio+0x1e>
 800658c:	4620      	mov	r0, r4
 800658e:	f001 fcb3 	bl	8007ef8 <_fflush_r>
 8006592:	68e1      	ldr	r1, [r4, #12]
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <cleanup_stdio+0x3c>)
 8006596:	4299      	cmp	r1, r3
 8006598:	d004      	beq.n	80065a4 <cleanup_stdio+0x30>
 800659a:	4620      	mov	r0, r4
 800659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a0:	f001 bcaa 	b.w	8007ef8 <_fflush_r>
 80065a4:	bd10      	pop	{r4, pc}
 80065a6:	bf00      	nop
 80065a8:	2000040c 	.word	0x2000040c
 80065ac:	20000474 	.word	0x20000474
 80065b0:	200004dc 	.word	0x200004dc

080065b4 <global_stdio_init.part.0>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <global_stdio_init.part.0+0x30>)
 80065b8:	4c0b      	ldr	r4, [pc, #44]	; (80065e8 <global_stdio_init.part.0+0x34>)
 80065ba:	4a0c      	ldr	r2, [pc, #48]	; (80065ec <global_stdio_init.part.0+0x38>)
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	4620      	mov	r0, r4
 80065c0:	2200      	movs	r2, #0
 80065c2:	2104      	movs	r1, #4
 80065c4:	f7ff ff94 	bl	80064f0 <std>
 80065c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065cc:	2201      	movs	r2, #1
 80065ce:	2109      	movs	r1, #9
 80065d0:	f7ff ff8e 	bl	80064f0 <std>
 80065d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065d8:	2202      	movs	r2, #2
 80065da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065de:	2112      	movs	r1, #18
 80065e0:	f7ff bf86 	b.w	80064f0 <std>
 80065e4:	20000544 	.word	0x20000544
 80065e8:	2000040c 	.word	0x2000040c
 80065ec:	0800655d 	.word	0x0800655d

080065f0 <__sfp_lock_acquire>:
 80065f0:	4801      	ldr	r0, [pc, #4]	; (80065f8 <__sfp_lock_acquire+0x8>)
 80065f2:	f000 b900 	b.w	80067f6 <__retarget_lock_acquire_recursive>
 80065f6:	bf00      	nop
 80065f8:	2000054d 	.word	0x2000054d

080065fc <__sfp_lock_release>:
 80065fc:	4801      	ldr	r0, [pc, #4]	; (8006604 <__sfp_lock_release+0x8>)
 80065fe:	f000 b8fb 	b.w	80067f8 <__retarget_lock_release_recursive>
 8006602:	bf00      	nop
 8006604:	2000054d 	.word	0x2000054d

08006608 <__sinit>:
 8006608:	b510      	push	{r4, lr}
 800660a:	4604      	mov	r4, r0
 800660c:	f7ff fff0 	bl	80065f0 <__sfp_lock_acquire>
 8006610:	6a23      	ldr	r3, [r4, #32]
 8006612:	b11b      	cbz	r3, 800661c <__sinit+0x14>
 8006614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006618:	f7ff bff0 	b.w	80065fc <__sfp_lock_release>
 800661c:	4b04      	ldr	r3, [pc, #16]	; (8006630 <__sinit+0x28>)
 800661e:	6223      	str	r3, [r4, #32]
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <__sinit+0x2c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f5      	bne.n	8006614 <__sinit+0xc>
 8006628:	f7ff ffc4 	bl	80065b4 <global_stdio_init.part.0>
 800662c:	e7f2      	b.n	8006614 <__sinit+0xc>
 800662e:	bf00      	nop
 8006630:	08006575 	.word	0x08006575
 8006634:	20000544 	.word	0x20000544

08006638 <_fwalk_sglue>:
 8006638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800663c:	4607      	mov	r7, r0
 800663e:	4688      	mov	r8, r1
 8006640:	4614      	mov	r4, r2
 8006642:	2600      	movs	r6, #0
 8006644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006648:	f1b9 0901 	subs.w	r9, r9, #1
 800664c:	d505      	bpl.n	800665a <_fwalk_sglue+0x22>
 800664e:	6824      	ldr	r4, [r4, #0]
 8006650:	2c00      	cmp	r4, #0
 8006652:	d1f7      	bne.n	8006644 <_fwalk_sglue+0xc>
 8006654:	4630      	mov	r0, r6
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	89ab      	ldrh	r3, [r5, #12]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d907      	bls.n	8006670 <_fwalk_sglue+0x38>
 8006660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006664:	3301      	adds	r3, #1
 8006666:	d003      	beq.n	8006670 <_fwalk_sglue+0x38>
 8006668:	4629      	mov	r1, r5
 800666a:	4638      	mov	r0, r7
 800666c:	47c0      	blx	r8
 800666e:	4306      	orrs	r6, r0
 8006670:	3568      	adds	r5, #104	; 0x68
 8006672:	e7e9      	b.n	8006648 <_fwalk_sglue+0x10>

08006674 <__sread>:
 8006674:	b510      	push	{r4, lr}
 8006676:	460c      	mov	r4, r1
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	f000 f86c 	bl	8006758 <_read_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	bfab      	itete	ge
 8006684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006686:	89a3      	ldrhlt	r3, [r4, #12]
 8006688:	181b      	addge	r3, r3, r0
 800668a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800668e:	bfac      	ite	ge
 8006690:	6563      	strge	r3, [r4, #84]	; 0x54
 8006692:	81a3      	strhlt	r3, [r4, #12]
 8006694:	bd10      	pop	{r4, pc}

08006696 <__swrite>:
 8006696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669a:	461f      	mov	r7, r3
 800669c:	898b      	ldrh	r3, [r1, #12]
 800669e:	05db      	lsls	r3, r3, #23
 80066a0:	4605      	mov	r5, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	4616      	mov	r6, r2
 80066a6:	d505      	bpl.n	80066b4 <__swrite+0x1e>
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	2302      	movs	r3, #2
 80066ae:	2200      	movs	r2, #0
 80066b0:	f000 f840 	bl	8006734 <_lseek_r>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	4628      	mov	r0, r5
 80066c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	f000 b857 	b.w	800677c <_write_r>

080066ce <__sseek>:
 80066ce:	b510      	push	{r4, lr}
 80066d0:	460c      	mov	r4, r1
 80066d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d6:	f000 f82d 	bl	8006734 <_lseek_r>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	bf15      	itete	ne
 80066e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80066e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066ea:	81a3      	strheq	r3, [r4, #12]
 80066ec:	bf18      	it	ne
 80066ee:	81a3      	strhne	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__sclose>:
 80066f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f6:	f000 b80d 	b.w	8006714 <_close_r>

080066fa <memset>:
 80066fa:	4402      	add	r2, r0
 80066fc:	4603      	mov	r3, r0
 80066fe:	4293      	cmp	r3, r2
 8006700:	d100      	bne.n	8006704 <memset+0xa>
 8006702:	4770      	bx	lr
 8006704:	f803 1b01 	strb.w	r1, [r3], #1
 8006708:	e7f9      	b.n	80066fe <memset+0x4>
	...

0800670c <_localeconv_r>:
 800670c:	4800      	ldr	r0, [pc, #0]	; (8006710 <_localeconv_r+0x4>)
 800670e:	4770      	bx	lr
 8006710:	20000158 	.word	0x20000158

08006714 <_close_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d06      	ldr	r5, [pc, #24]	; (8006730 <_close_r+0x1c>)
 8006718:	2300      	movs	r3, #0
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	602b      	str	r3, [r5, #0]
 8006720:	f7fb fb17 	bl	8001d52 <_close>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_close_r+0x1a>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_close_r+0x1a>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20000548 	.word	0x20000548

08006734 <_lseek_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	; (8006754 <_lseek_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fb fb2c 	bl	8001da0 <_lseek>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_lseek_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_lseek_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20000548 	.word	0x20000548

08006758 <_read_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d07      	ldr	r5, [pc, #28]	; (8006778 <_read_r+0x20>)
 800675c:	4604      	mov	r4, r0
 800675e:	4608      	mov	r0, r1
 8006760:	4611      	mov	r1, r2
 8006762:	2200      	movs	r2, #0
 8006764:	602a      	str	r2, [r5, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f7fb faba 	bl	8001ce0 <_read>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_read_r+0x1e>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_read_r+0x1e>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000548 	.word	0x20000548

0800677c <_write_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d07      	ldr	r5, [pc, #28]	; (800679c <_write_r+0x20>)
 8006780:	4604      	mov	r4, r0
 8006782:	4608      	mov	r0, r1
 8006784:	4611      	mov	r1, r2
 8006786:	2200      	movs	r2, #0
 8006788:	602a      	str	r2, [r5, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	f7fb fac5 	bl	8001d1a <_write>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_write_r+0x1e>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_write_r+0x1e>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	20000548 	.word	0x20000548

080067a0 <__errno>:
 80067a0:	4b01      	ldr	r3, [pc, #4]	; (80067a8 <__errno+0x8>)
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000064 	.word	0x20000064

080067ac <__libc_init_array>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4d0d      	ldr	r5, [pc, #52]	; (80067e4 <__libc_init_array+0x38>)
 80067b0:	4c0d      	ldr	r4, [pc, #52]	; (80067e8 <__libc_init_array+0x3c>)
 80067b2:	1b64      	subs	r4, r4, r5
 80067b4:	10a4      	asrs	r4, r4, #2
 80067b6:	2600      	movs	r6, #0
 80067b8:	42a6      	cmp	r6, r4
 80067ba:	d109      	bne.n	80067d0 <__libc_init_array+0x24>
 80067bc:	4d0b      	ldr	r5, [pc, #44]	; (80067ec <__libc_init_array+0x40>)
 80067be:	4c0c      	ldr	r4, [pc, #48]	; (80067f0 <__libc_init_array+0x44>)
 80067c0:	f001 feee 	bl	80085a0 <_init>
 80067c4:	1b64      	subs	r4, r4, r5
 80067c6:	10a4      	asrs	r4, r4, #2
 80067c8:	2600      	movs	r6, #0
 80067ca:	42a6      	cmp	r6, r4
 80067cc:	d105      	bne.n	80067da <__libc_init_array+0x2e>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d4:	4798      	blx	r3
 80067d6:	3601      	adds	r6, #1
 80067d8:	e7ee      	b.n	80067b8 <__libc_init_array+0xc>
 80067da:	f855 3b04 	ldr.w	r3, [r5], #4
 80067de:	4798      	blx	r3
 80067e0:	3601      	adds	r6, #1
 80067e2:	e7f2      	b.n	80067ca <__libc_init_array+0x1e>
 80067e4:	0800894c 	.word	0x0800894c
 80067e8:	0800894c 	.word	0x0800894c
 80067ec:	0800894c 	.word	0x0800894c
 80067f0:	08008950 	.word	0x08008950

080067f4 <__retarget_lock_init_recursive>:
 80067f4:	4770      	bx	lr

080067f6 <__retarget_lock_acquire_recursive>:
 80067f6:	4770      	bx	lr

080067f8 <__retarget_lock_release_recursive>:
 80067f8:	4770      	bx	lr

080067fa <quorem>:
 80067fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fe:	6903      	ldr	r3, [r0, #16]
 8006800:	690c      	ldr	r4, [r1, #16]
 8006802:	42a3      	cmp	r3, r4
 8006804:	4607      	mov	r7, r0
 8006806:	db7e      	blt.n	8006906 <quorem+0x10c>
 8006808:	3c01      	subs	r4, #1
 800680a:	f101 0814 	add.w	r8, r1, #20
 800680e:	f100 0514 	add.w	r5, r0, #20
 8006812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800681c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006820:	3301      	adds	r3, #1
 8006822:	429a      	cmp	r2, r3
 8006824:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800682c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006830:	d331      	bcc.n	8006896 <quorem+0x9c>
 8006832:	f04f 0e00 	mov.w	lr, #0
 8006836:	4640      	mov	r0, r8
 8006838:	46ac      	mov	ip, r5
 800683a:	46f2      	mov	sl, lr
 800683c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006840:	b293      	uxth	r3, r2
 8006842:	fb06 e303 	mla	r3, r6, r3, lr
 8006846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800684a:	0c1a      	lsrs	r2, r3, #16
 800684c:	b29b      	uxth	r3, r3
 800684e:	ebaa 0303 	sub.w	r3, sl, r3
 8006852:	f8dc a000 	ldr.w	sl, [ip]
 8006856:	fa13 f38a 	uxtah	r3, r3, sl
 800685a:	fb06 220e 	mla	r2, r6, lr, r2
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	9b00      	ldr	r3, [sp, #0]
 8006862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006866:	b292      	uxth	r2, r2
 8006868:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800686c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006870:	f8bd 3000 	ldrh.w	r3, [sp]
 8006874:	4581      	cmp	r9, r0
 8006876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800687a:	f84c 3b04 	str.w	r3, [ip], #4
 800687e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006882:	d2db      	bcs.n	800683c <quorem+0x42>
 8006884:	f855 300b 	ldr.w	r3, [r5, fp]
 8006888:	b92b      	cbnz	r3, 8006896 <quorem+0x9c>
 800688a:	9b01      	ldr	r3, [sp, #4]
 800688c:	3b04      	subs	r3, #4
 800688e:	429d      	cmp	r5, r3
 8006890:	461a      	mov	r2, r3
 8006892:	d32c      	bcc.n	80068ee <quorem+0xf4>
 8006894:	613c      	str	r4, [r7, #16]
 8006896:	4638      	mov	r0, r7
 8006898:	f001 f9a8 	bl	8007bec <__mcmp>
 800689c:	2800      	cmp	r0, #0
 800689e:	db22      	blt.n	80068e6 <quorem+0xec>
 80068a0:	3601      	adds	r6, #1
 80068a2:	4629      	mov	r1, r5
 80068a4:	2000      	movs	r0, #0
 80068a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80068aa:	f8d1 c000 	ldr.w	ip, [r1]
 80068ae:	b293      	uxth	r3, r2
 80068b0:	1ac3      	subs	r3, r0, r3
 80068b2:	0c12      	lsrs	r2, r2, #16
 80068b4:	fa13 f38c 	uxtah	r3, r3, ip
 80068b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80068bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c6:	45c1      	cmp	r9, r8
 80068c8:	f841 3b04 	str.w	r3, [r1], #4
 80068cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068d0:	d2e9      	bcs.n	80068a6 <quorem+0xac>
 80068d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068da:	b922      	cbnz	r2, 80068e6 <quorem+0xec>
 80068dc:	3b04      	subs	r3, #4
 80068de:	429d      	cmp	r5, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	d30a      	bcc.n	80068fa <quorem+0x100>
 80068e4:	613c      	str	r4, [r7, #16]
 80068e6:	4630      	mov	r0, r6
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d1ce      	bne.n	8006894 <quorem+0x9a>
 80068f6:	3c01      	subs	r4, #1
 80068f8:	e7c9      	b.n	800688e <quorem+0x94>
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d1f0      	bne.n	80068e4 <quorem+0xea>
 8006902:	3c01      	subs	r4, #1
 8006904:	e7eb      	b.n	80068de <quorem+0xe4>
 8006906:	2000      	movs	r0, #0
 8006908:	e7ee      	b.n	80068e8 <quorem+0xee>
 800690a:	0000      	movs	r0, r0
 800690c:	0000      	movs	r0, r0
	...

08006910 <_dtoa_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	ed2d 8b04 	vpush	{d8-d9}
 8006918:	69c5      	ldr	r5, [r0, #28]
 800691a:	b093      	sub	sp, #76	; 0x4c
 800691c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006920:	ec57 6b10 	vmov	r6, r7, d0
 8006924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006928:	9107      	str	r1, [sp, #28]
 800692a:	4604      	mov	r4, r0
 800692c:	920a      	str	r2, [sp, #40]	; 0x28
 800692e:	930d      	str	r3, [sp, #52]	; 0x34
 8006930:	b975      	cbnz	r5, 8006950 <_dtoa_r+0x40>
 8006932:	2010      	movs	r0, #16
 8006934:	f000 fe2a 	bl	800758c <malloc>
 8006938:	4602      	mov	r2, r0
 800693a:	61e0      	str	r0, [r4, #28]
 800693c:	b920      	cbnz	r0, 8006948 <_dtoa_r+0x38>
 800693e:	4bae      	ldr	r3, [pc, #696]	; (8006bf8 <_dtoa_r+0x2e8>)
 8006940:	21ef      	movs	r1, #239	; 0xef
 8006942:	48ae      	ldr	r0, [pc, #696]	; (8006bfc <_dtoa_r+0x2ec>)
 8006944:	f001 fb1e 	bl	8007f84 <__assert_func>
 8006948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800694c:	6005      	str	r5, [r0, #0]
 800694e:	60c5      	str	r5, [r0, #12]
 8006950:	69e3      	ldr	r3, [r4, #28]
 8006952:	6819      	ldr	r1, [r3, #0]
 8006954:	b151      	cbz	r1, 800696c <_dtoa_r+0x5c>
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	604a      	str	r2, [r1, #4]
 800695a:	2301      	movs	r3, #1
 800695c:	4093      	lsls	r3, r2
 800695e:	608b      	str	r3, [r1, #8]
 8006960:	4620      	mov	r0, r4
 8006962:	f000 ff07 	bl	8007774 <_Bfree>
 8006966:	69e3      	ldr	r3, [r4, #28]
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	1e3b      	subs	r3, r7, #0
 800696e:	bfbb      	ittet	lt
 8006970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006974:	9303      	strlt	r3, [sp, #12]
 8006976:	2300      	movge	r3, #0
 8006978:	2201      	movlt	r2, #1
 800697a:	bfac      	ite	ge
 800697c:	f8c8 3000 	strge.w	r3, [r8]
 8006980:	f8c8 2000 	strlt.w	r2, [r8]
 8006984:	4b9e      	ldr	r3, [pc, #632]	; (8006c00 <_dtoa_r+0x2f0>)
 8006986:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800698a:	ea33 0308 	bics.w	r3, r3, r8
 800698e:	d11b      	bne.n	80069c8 <_dtoa_r+0xb8>
 8006990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006992:	f242 730f 	movw	r3, #9999	; 0x270f
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800699c:	4333      	orrs	r3, r6
 800699e:	f000 8593 	beq.w	80074c8 <_dtoa_r+0xbb8>
 80069a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069a4:	b963      	cbnz	r3, 80069c0 <_dtoa_r+0xb0>
 80069a6:	4b97      	ldr	r3, [pc, #604]	; (8006c04 <_dtoa_r+0x2f4>)
 80069a8:	e027      	b.n	80069fa <_dtoa_r+0xea>
 80069aa:	4b97      	ldr	r3, [pc, #604]	; (8006c08 <_dtoa_r+0x2f8>)
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	9800      	ldr	r0, [sp, #0]
 80069b6:	b013      	add	sp, #76	; 0x4c
 80069b8:	ecbd 8b04 	vpop	{d8-d9}
 80069bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c0:	4b90      	ldr	r3, [pc, #576]	; (8006c04 <_dtoa_r+0x2f4>)
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	3303      	adds	r3, #3
 80069c6:	e7f3      	b.n	80069b0 <_dtoa_r+0xa0>
 80069c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	ec51 0b17 	vmov	r0, r1, d7
 80069d2:	eeb0 8a47 	vmov.f32	s16, s14
 80069d6:	eef0 8a67 	vmov.f32	s17, s15
 80069da:	2300      	movs	r3, #0
 80069dc:	f7fa f894 	bl	8000b08 <__aeabi_dcmpeq>
 80069e0:	4681      	mov	r9, r0
 80069e2:	b160      	cbz	r0, 80069fe <_dtoa_r+0xee>
 80069e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069e6:	2301      	movs	r3, #1
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8568 	beq.w	80074c2 <_dtoa_r+0xbb2>
 80069f2:	4b86      	ldr	r3, [pc, #536]	; (8006c0c <_dtoa_r+0x2fc>)
 80069f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	e7da      	b.n	80069b4 <_dtoa_r+0xa4>
 80069fe:	aa10      	add	r2, sp, #64	; 0x40
 8006a00:	a911      	add	r1, sp, #68	; 0x44
 8006a02:	4620      	mov	r0, r4
 8006a04:	eeb0 0a48 	vmov.f32	s0, s16
 8006a08:	eef0 0a68 	vmov.f32	s1, s17
 8006a0c:	f001 f994 	bl	8007d38 <__d2b>
 8006a10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a14:	4682      	mov	sl, r0
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	d07f      	beq.n	8006b1a <_dtoa_r+0x20a>
 8006a1a:	ee18 3a90 	vmov	r3, s17
 8006a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006a26:	ec51 0b18 	vmov	r0, r1, d8
 8006a2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006a36:	4619      	mov	r1, r3
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4b75      	ldr	r3, [pc, #468]	; (8006c10 <_dtoa_r+0x300>)
 8006a3c:	f7f9 fc44 	bl	80002c8 <__aeabi_dsub>
 8006a40:	a367      	add	r3, pc, #412	; (adr r3, 8006be0 <_dtoa_r+0x2d0>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fdf7 	bl	8000638 <__aeabi_dmul>
 8006a4a:	a367      	add	r3, pc, #412	; (adr r3, 8006be8 <_dtoa_r+0x2d8>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7f9 fc3c 	bl	80002cc <__adddf3>
 8006a54:	4606      	mov	r6, r0
 8006a56:	4628      	mov	r0, r5
 8006a58:	460f      	mov	r7, r1
 8006a5a:	f7f9 fd83 	bl	8000564 <__aeabi_i2d>
 8006a5e:	a364      	add	r3, pc, #400	; (adr r3, 8006bf0 <_dtoa_r+0x2e0>)
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f7f9 fde8 	bl	8000638 <__aeabi_dmul>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 fc2c 	bl	80002cc <__adddf3>
 8006a74:	4606      	mov	r6, r0
 8006a76:	460f      	mov	r7, r1
 8006a78:	f7fa f88e 	bl	8000b98 <__aeabi_d2iz>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4683      	mov	fp, r0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7fa f849 	bl	8000b1c <__aeabi_dcmplt>
 8006a8a:	b148      	cbz	r0, 8006aa0 <_dtoa_r+0x190>
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	f7f9 fd69 	bl	8000564 <__aeabi_i2d>
 8006a92:	4632      	mov	r2, r6
 8006a94:	463b      	mov	r3, r7
 8006a96:	f7fa f837 	bl	8000b08 <__aeabi_dcmpeq>
 8006a9a:	b908      	cbnz	r0, 8006aa0 <_dtoa_r+0x190>
 8006a9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006aa0:	f1bb 0f16 	cmp.w	fp, #22
 8006aa4:	d857      	bhi.n	8006b56 <_dtoa_r+0x246>
 8006aa6:	4b5b      	ldr	r3, [pc, #364]	; (8006c14 <_dtoa_r+0x304>)
 8006aa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	ec51 0b18 	vmov	r0, r1, d8
 8006ab4:	f7fa f832 	bl	8000b1c <__aeabi_dcmplt>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d04e      	beq.n	8006b5a <_dtoa_r+0x24a>
 8006abc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ac6:	1b5b      	subs	r3, r3, r5
 8006ac8:	1e5a      	subs	r2, r3, #1
 8006aca:	bf45      	ittet	mi
 8006acc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ad0:	9305      	strmi	r3, [sp, #20]
 8006ad2:	2300      	movpl	r3, #0
 8006ad4:	2300      	movmi	r3, #0
 8006ad6:	9206      	str	r2, [sp, #24]
 8006ad8:	bf54      	ite	pl
 8006ada:	9305      	strpl	r3, [sp, #20]
 8006adc:	9306      	strmi	r3, [sp, #24]
 8006ade:	f1bb 0f00 	cmp.w	fp, #0
 8006ae2:	db3c      	blt.n	8006b5e <_dtoa_r+0x24e>
 8006ae4:	9b06      	ldr	r3, [sp, #24]
 8006ae6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006aea:	445b      	add	r3, fp
 8006aec:	9306      	str	r3, [sp, #24]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	9b07      	ldr	r3, [sp, #28]
 8006af4:	2b09      	cmp	r3, #9
 8006af6:	d868      	bhi.n	8006bca <_dtoa_r+0x2ba>
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	bfc4      	itt	gt
 8006afc:	3b04      	subgt	r3, #4
 8006afe:	9307      	strgt	r3, [sp, #28]
 8006b00:	9b07      	ldr	r3, [sp, #28]
 8006b02:	f1a3 0302 	sub.w	r3, r3, #2
 8006b06:	bfcc      	ite	gt
 8006b08:	2500      	movgt	r5, #0
 8006b0a:	2501      	movle	r5, #1
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	f200 8085 	bhi.w	8006c1c <_dtoa_r+0x30c>
 8006b12:	e8df f003 	tbb	[pc, r3]
 8006b16:	3b2e      	.short	0x3b2e
 8006b18:	5839      	.short	0x5839
 8006b1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b1e:	441d      	add	r5, r3
 8006b20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	bfc1      	itttt	gt
 8006b28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006b30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006b34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006b38:	bfd6      	itet	le
 8006b3a:	f1c3 0320 	rsble	r3, r3, #32
 8006b3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b42:	fa06 f003 	lslle.w	r0, r6, r3
 8006b46:	f7f9 fcfd 	bl	8000544 <__aeabi_ui2d>
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006b50:	3d01      	subs	r5, #1
 8006b52:	920e      	str	r2, [sp, #56]	; 0x38
 8006b54:	e76f      	b.n	8006a36 <_dtoa_r+0x126>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e7b3      	b.n	8006ac2 <_dtoa_r+0x1b2>
 8006b5a:	900c      	str	r0, [sp, #48]	; 0x30
 8006b5c:	e7b2      	b.n	8006ac4 <_dtoa_r+0x1b4>
 8006b5e:	9b05      	ldr	r3, [sp, #20]
 8006b60:	eba3 030b 	sub.w	r3, r3, fp
 8006b64:	9305      	str	r3, [sp, #20]
 8006b66:	f1cb 0300 	rsb	r3, fp, #0
 8006b6a:	9308      	str	r3, [sp, #32]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b70:	e7bf      	b.n	8006af2 <_dtoa_r+0x1e2>
 8006b72:	2300      	movs	r3, #0
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dc52      	bgt.n	8006c22 <_dtoa_r+0x312>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	461a      	mov	r2, r3
 8006b84:	920a      	str	r2, [sp, #40]	; 0x28
 8006b86:	e00b      	b.n	8006ba0 <_dtoa_r+0x290>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e7f3      	b.n	8006b74 <_dtoa_r+0x264>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b92:	445b      	add	r3, fp
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	3301      	adds	r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	9304      	str	r3, [sp, #16]
 8006b9c:	bfb8      	it	lt
 8006b9e:	2301      	movlt	r3, #1
 8006ba0:	69e0      	ldr	r0, [r4, #28]
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	f102 0614 	add.w	r6, r2, #20
 8006baa:	429e      	cmp	r6, r3
 8006bac:	d93d      	bls.n	8006c2a <_dtoa_r+0x31a>
 8006bae:	6041      	str	r1, [r0, #4]
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fd9f 	bl	80076f4 <_Balloc>
 8006bb6:	9000      	str	r0, [sp, #0]
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d139      	bne.n	8006c30 <_dtoa_r+0x320>
 8006bbc:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <_dtoa_r+0x308>)
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	f240 11af 	movw	r1, #431	; 0x1af
 8006bc4:	e6bd      	b.n	8006942 <_dtoa_r+0x32>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e7e1      	b.n	8006b8e <_dtoa_r+0x27e>
 8006bca:	2501      	movs	r5, #1
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	9509      	str	r5, [sp, #36]	; 0x24
 8006bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2312      	movs	r3, #18
 8006bde:	e7d1      	b.n	8006b84 <_dtoa_r+0x274>
 8006be0:	636f4361 	.word	0x636f4361
 8006be4:	3fd287a7 	.word	0x3fd287a7
 8006be8:	8b60c8b3 	.word	0x8b60c8b3
 8006bec:	3fc68a28 	.word	0x3fc68a28
 8006bf0:	509f79fb 	.word	0x509f79fb
 8006bf4:	3fd34413 	.word	0x3fd34413
 8006bf8:	08008611 	.word	0x08008611
 8006bfc:	08008628 	.word	0x08008628
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	0800860d 	.word	0x0800860d
 8006c08:	08008604 	.word	0x08008604
 8006c0c:	080085e1 	.word	0x080085e1
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	08008718 	.word	0x08008718
 8006c18:	08008680 	.word	0x08008680
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c20:	e7d7      	b.n	8006bd2 <_dtoa_r+0x2c2>
 8006c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	e7ba      	b.n	8006ba0 <_dtoa_r+0x290>
 8006c2a:	3101      	adds	r1, #1
 8006c2c:	0052      	lsls	r2, r2, #1
 8006c2e:	e7ba      	b.n	8006ba6 <_dtoa_r+0x296>
 8006c30:	69e3      	ldr	r3, [r4, #28]
 8006c32:	9a00      	ldr	r2, [sp, #0]
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	9b04      	ldr	r3, [sp, #16]
 8006c38:	2b0e      	cmp	r3, #14
 8006c3a:	f200 80a8 	bhi.w	8006d8e <_dtoa_r+0x47e>
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	f000 80a5 	beq.w	8006d8e <_dtoa_r+0x47e>
 8006c44:	f1bb 0f00 	cmp.w	fp, #0
 8006c48:	dd38      	ble.n	8006cbc <_dtoa_r+0x3ac>
 8006c4a:	4bc0      	ldr	r3, [pc, #768]	; (8006f4c <_dtoa_r+0x63c>)
 8006c4c:	f00b 020f 	and.w	r2, fp, #15
 8006c50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006c58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006c5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006c60:	d019      	beq.n	8006c96 <_dtoa_r+0x386>
 8006c62:	4bbb      	ldr	r3, [pc, #748]	; (8006f50 <_dtoa_r+0x640>)
 8006c64:	ec51 0b18 	vmov	r0, r1, d8
 8006c68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c6c:	f7f9 fe0e 	bl	800088c <__aeabi_ddiv>
 8006c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c74:	f008 080f 	and.w	r8, r8, #15
 8006c78:	2503      	movs	r5, #3
 8006c7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006f50 <_dtoa_r+0x640>
 8006c7e:	f1b8 0f00 	cmp.w	r8, #0
 8006c82:	d10a      	bne.n	8006c9a <_dtoa_r+0x38a>
 8006c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c88:	4632      	mov	r2, r6
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	f7f9 fdfe 	bl	800088c <__aeabi_ddiv>
 8006c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c94:	e02b      	b.n	8006cee <_dtoa_r+0x3de>
 8006c96:	2502      	movs	r5, #2
 8006c98:	e7ef      	b.n	8006c7a <_dtoa_r+0x36a>
 8006c9a:	f018 0f01 	tst.w	r8, #1
 8006c9e:	d008      	beq.n	8006cb2 <_dtoa_r+0x3a2>
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ca8:	f7f9 fcc6 	bl	8000638 <__aeabi_dmul>
 8006cac:	3501      	adds	r5, #1
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006cb6:	f109 0908 	add.w	r9, r9, #8
 8006cba:	e7e0      	b.n	8006c7e <_dtoa_r+0x36e>
 8006cbc:	f000 809f 	beq.w	8006dfe <_dtoa_r+0x4ee>
 8006cc0:	f1cb 0600 	rsb	r6, fp, #0
 8006cc4:	4ba1      	ldr	r3, [pc, #644]	; (8006f4c <_dtoa_r+0x63c>)
 8006cc6:	4fa2      	ldr	r7, [pc, #648]	; (8006f50 <_dtoa_r+0x640>)
 8006cc8:	f006 020f 	and.w	r2, r6, #15
 8006ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	ec51 0b18 	vmov	r0, r1, d8
 8006cd8:	f7f9 fcae 	bl	8000638 <__aeabi_dmul>
 8006cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce0:	1136      	asrs	r6, r6, #4
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2502      	movs	r5, #2
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	d17e      	bne.n	8006de8 <_dtoa_r+0x4d8>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1d0      	bne.n	8006c90 <_dtoa_r+0x380>
 8006cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cf0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 8084 	beq.w	8006e02 <_dtoa_r+0x4f2>
 8006cfa:	4b96      	ldr	r3, [pc, #600]	; (8006f54 <_dtoa_r+0x644>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4649      	mov	r1, r9
 8006d02:	f7f9 ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d07b      	beq.n	8006e02 <_dtoa_r+0x4f2>
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d078      	beq.n	8006e02 <_dtoa_r+0x4f2>
 8006d10:	9b01      	ldr	r3, [sp, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	dd39      	ble.n	8006d8a <_dtoa_r+0x47a>
 8006d16:	4b90      	ldr	r3, [pc, #576]	; (8006f58 <_dtoa_r+0x648>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	f7f9 fc8b 	bl	8000638 <__aeabi_dmul>
 8006d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d26:	9e01      	ldr	r6, [sp, #4]
 8006d28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7f9 fc16 	bl	8000564 <__aeabi_i2d>
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	f7f9 fc7c 	bl	8000638 <__aeabi_dmul>
 8006d40:	4b86      	ldr	r3, [pc, #536]	; (8006f5c <_dtoa_r+0x64c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f7f9 fac2 	bl	80002cc <__adddf3>
 8006d48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	2e00      	cmp	r6, #0
 8006d54:	d158      	bne.n	8006e08 <_dtoa_r+0x4f8>
 8006d56:	4b82      	ldr	r3, [pc, #520]	; (8006f60 <_dtoa_r+0x650>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 fab3 	bl	80002c8 <__aeabi_dsub>
 8006d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d66:	4680      	mov	r8, r0
 8006d68:	4689      	mov	r9, r1
 8006d6a:	f7f9 fef5 	bl	8000b58 <__aeabi_dcmpgt>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f040 8296 	bne.w	80072a0 <_dtoa_r+0x990>
 8006d74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d78:	4640      	mov	r0, r8
 8006d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d7e:	4649      	mov	r1, r9
 8006d80:	f7f9 fecc 	bl	8000b1c <__aeabi_dcmplt>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f040 8289 	bne.w	800729c <_dtoa_r+0x98c>
 8006d8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f2c0 814e 	blt.w	8007032 <_dtoa_r+0x722>
 8006d96:	f1bb 0f0e 	cmp.w	fp, #14
 8006d9a:	f300 814a 	bgt.w	8007032 <_dtoa_r+0x722>
 8006d9e:	4b6b      	ldr	r3, [pc, #428]	; (8006f4c <_dtoa_r+0x63c>)
 8006da0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f280 80dc 	bge.w	8006f68 <_dtoa_r+0x658>
 8006db0:	9b04      	ldr	r3, [sp, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f300 80d8 	bgt.w	8006f68 <_dtoa_r+0x658>
 8006db8:	f040 826f 	bne.w	800729a <_dtoa_r+0x98a>
 8006dbc:	4b68      	ldr	r3, [pc, #416]	; (8006f60 <_dtoa_r+0x650>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	f7f9 fc38 	bl	8000638 <__aeabi_dmul>
 8006dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dcc:	f7f9 feba 	bl	8000b44 <__aeabi_dcmpge>
 8006dd0:	9e04      	ldr	r6, [sp, #16]
 8006dd2:	4637      	mov	r7, r6
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f040 8245 	bne.w	8007264 <_dtoa_r+0x954>
 8006dda:	9d00      	ldr	r5, [sp, #0]
 8006ddc:	2331      	movs	r3, #49	; 0x31
 8006dde:	f805 3b01 	strb.w	r3, [r5], #1
 8006de2:	f10b 0b01 	add.w	fp, fp, #1
 8006de6:	e241      	b.n	800726c <_dtoa_r+0x95c>
 8006de8:	07f2      	lsls	r2, r6, #31
 8006dea:	d505      	bpl.n	8006df8 <_dtoa_r+0x4e8>
 8006dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df0:	f7f9 fc22 	bl	8000638 <__aeabi_dmul>
 8006df4:	3501      	adds	r5, #1
 8006df6:	2301      	movs	r3, #1
 8006df8:	1076      	asrs	r6, r6, #1
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	e773      	b.n	8006ce6 <_dtoa_r+0x3d6>
 8006dfe:	2502      	movs	r5, #2
 8006e00:	e775      	b.n	8006cee <_dtoa_r+0x3de>
 8006e02:	9e04      	ldr	r6, [sp, #16]
 8006e04:	465f      	mov	r7, fp
 8006e06:	e792      	b.n	8006d2e <_dtoa_r+0x41e>
 8006e08:	9900      	ldr	r1, [sp, #0]
 8006e0a:	4b50      	ldr	r3, [pc, #320]	; (8006f4c <_dtoa_r+0x63c>)
 8006e0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e10:	4431      	add	r1, r6
 8006e12:	9102      	str	r1, [sp, #8]
 8006e14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e16:	eeb0 9a47 	vmov.f32	s18, s14
 8006e1a:	eef0 9a67 	vmov.f32	s19, s15
 8006e1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e26:	2900      	cmp	r1, #0
 8006e28:	d044      	beq.n	8006eb4 <_dtoa_r+0x5a4>
 8006e2a:	494e      	ldr	r1, [pc, #312]	; (8006f64 <_dtoa_r+0x654>)
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7f9 fd2d 	bl	800088c <__aeabi_ddiv>
 8006e32:	ec53 2b19 	vmov	r2, r3, d9
 8006e36:	f7f9 fa47 	bl	80002c8 <__aeabi_dsub>
 8006e3a:	9d00      	ldr	r5, [sp, #0]
 8006e3c:	ec41 0b19 	vmov	d9, r0, r1
 8006e40:	4649      	mov	r1, r9
 8006e42:	4640      	mov	r0, r8
 8006e44:	f7f9 fea8 	bl	8000b98 <__aeabi_d2iz>
 8006e48:	4606      	mov	r6, r0
 8006e4a:	f7f9 fb8b 	bl	8000564 <__aeabi_i2d>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	f7f9 fa37 	bl	80002c8 <__aeabi_dsub>
 8006e5a:	3630      	adds	r6, #48	; 0x30
 8006e5c:	f805 6b01 	strb.w	r6, [r5], #1
 8006e60:	ec53 2b19 	vmov	r2, r3, d9
 8006e64:	4680      	mov	r8, r0
 8006e66:	4689      	mov	r9, r1
 8006e68:	f7f9 fe58 	bl	8000b1c <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d164      	bne.n	8006f3a <_dtoa_r+0x62a>
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	4937      	ldr	r1, [pc, #220]	; (8006f54 <_dtoa_r+0x644>)
 8006e76:	2000      	movs	r0, #0
 8006e78:	f7f9 fa26 	bl	80002c8 <__aeabi_dsub>
 8006e7c:	ec53 2b19 	vmov	r2, r3, d9
 8006e80:	f7f9 fe4c 	bl	8000b1c <__aeabi_dcmplt>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f040 80b6 	bne.w	8006ff6 <_dtoa_r+0x6e6>
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	429d      	cmp	r5, r3
 8006e8e:	f43f af7c 	beq.w	8006d8a <_dtoa_r+0x47a>
 8006e92:	4b31      	ldr	r3, [pc, #196]	; (8006f58 <_dtoa_r+0x648>)
 8006e94:	ec51 0b19 	vmov	r0, r1, d9
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f7f9 fbcd 	bl	8000638 <__aeabi_dmul>
 8006e9e:	4b2e      	ldr	r3, [pc, #184]	; (8006f58 <_dtoa_r+0x648>)
 8006ea0:	ec41 0b19 	vmov	d9, r0, r1
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	f7f9 fbc5 	bl	8000638 <__aeabi_dmul>
 8006eae:	4680      	mov	r8, r0
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	e7c5      	b.n	8006e40 <_dtoa_r+0x530>
 8006eb4:	ec51 0b17 	vmov	r0, r1, d7
 8006eb8:	f7f9 fbbe 	bl	8000638 <__aeabi_dmul>
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	9d00      	ldr	r5, [sp, #0]
 8006ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ec2:	ec41 0b19 	vmov	d9, r0, r1
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	f7f9 fe65 	bl	8000b98 <__aeabi_d2iz>
 8006ece:	4606      	mov	r6, r0
 8006ed0:	f7f9 fb48 	bl	8000564 <__aeabi_i2d>
 8006ed4:	3630      	adds	r6, #48	; 0x30
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 f9f3 	bl	80002c8 <__aeabi_dsub>
 8006ee2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ee6:	9b02      	ldr	r3, [sp, #8]
 8006ee8:	429d      	cmp	r5, r3
 8006eea:	4680      	mov	r8, r0
 8006eec:	4689      	mov	r9, r1
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	d124      	bne.n	8006f3e <_dtoa_r+0x62e>
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <_dtoa_r+0x654>)
 8006ef6:	ec51 0b19 	vmov	r0, r1, d9
 8006efa:	f7f9 f9e7 	bl	80002cc <__adddf3>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4640      	mov	r0, r8
 8006f04:	4649      	mov	r1, r9
 8006f06:	f7f9 fe27 	bl	8000b58 <__aeabi_dcmpgt>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d173      	bne.n	8006ff6 <_dtoa_r+0x6e6>
 8006f0e:	ec53 2b19 	vmov	r2, r3, d9
 8006f12:	4914      	ldr	r1, [pc, #80]	; (8006f64 <_dtoa_r+0x654>)
 8006f14:	2000      	movs	r0, #0
 8006f16:	f7f9 f9d7 	bl	80002c8 <__aeabi_dsub>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 fdfb 	bl	8000b1c <__aeabi_dcmplt>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f43f af2f 	beq.w	8006d8a <_dtoa_r+0x47a>
 8006f2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f2e:	1e6b      	subs	r3, r5, #1
 8006f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f36:	2b30      	cmp	r3, #48	; 0x30
 8006f38:	d0f8      	beq.n	8006f2c <_dtoa_r+0x61c>
 8006f3a:	46bb      	mov	fp, r7
 8006f3c:	e04a      	b.n	8006fd4 <_dtoa_r+0x6c4>
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <_dtoa_r+0x648>)
 8006f40:	f7f9 fb7a 	bl	8000638 <__aeabi_dmul>
 8006f44:	4680      	mov	r8, r0
 8006f46:	4689      	mov	r9, r1
 8006f48:	e7bd      	b.n	8006ec6 <_dtoa_r+0x5b6>
 8006f4a:	bf00      	nop
 8006f4c:	08008718 	.word	0x08008718
 8006f50:	080086f0 	.word	0x080086f0
 8006f54:	3ff00000 	.word	0x3ff00000
 8006f58:	40240000 	.word	0x40240000
 8006f5c:	401c0000 	.word	0x401c0000
 8006f60:	40140000 	.word	0x40140000
 8006f64:	3fe00000 	.word	0x3fe00000
 8006f68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f6c:	9d00      	ldr	r5, [sp, #0]
 8006f6e:	4642      	mov	r2, r8
 8006f70:	464b      	mov	r3, r9
 8006f72:	4630      	mov	r0, r6
 8006f74:	4639      	mov	r1, r7
 8006f76:	f7f9 fc89 	bl	800088c <__aeabi_ddiv>
 8006f7a:	f7f9 fe0d 	bl	8000b98 <__aeabi_d2iz>
 8006f7e:	9001      	str	r0, [sp, #4]
 8006f80:	f7f9 faf0 	bl	8000564 <__aeabi_i2d>
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	f7f9 fb56 	bl	8000638 <__aeabi_dmul>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4630      	mov	r0, r6
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 f998 	bl	80002c8 <__aeabi_dsub>
 8006f98:	9e01      	ldr	r6, [sp, #4]
 8006f9a:	9f04      	ldr	r7, [sp, #16]
 8006f9c:	3630      	adds	r6, #48	; 0x30
 8006f9e:	f805 6b01 	strb.w	r6, [r5], #1
 8006fa2:	9e00      	ldr	r6, [sp, #0]
 8006fa4:	1bae      	subs	r6, r5, r6
 8006fa6:	42b7      	cmp	r7, r6
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	d134      	bne.n	8007018 <_dtoa_r+0x708>
 8006fae:	f7f9 f98d 	bl	80002cc <__adddf3>
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	f7f9 fdcd 	bl	8000b58 <__aeabi_dcmpgt>
 8006fbe:	b9c8      	cbnz	r0, 8006ff4 <_dtoa_r+0x6e4>
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 fd9e 	bl	8000b08 <__aeabi_dcmpeq>
 8006fcc:	b110      	cbz	r0, 8006fd4 <_dtoa_r+0x6c4>
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	07db      	lsls	r3, r3, #31
 8006fd2:	d40f      	bmi.n	8006ff4 <_dtoa_r+0x6e4>
 8006fd4:	4651      	mov	r1, sl
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 fbcc 	bl	8007774 <_Bfree>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fe0:	702b      	strb	r3, [r5, #0]
 8006fe2:	f10b 0301 	add.w	r3, fp, #1
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f43f ace2 	beq.w	80069b4 <_dtoa_r+0xa4>
 8006ff0:	601d      	str	r5, [r3, #0]
 8006ff2:	e4df      	b.n	80069b4 <_dtoa_r+0xa4>
 8006ff4:	465f      	mov	r7, fp
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffe:	2a39      	cmp	r2, #57	; 0x39
 8007000:	d106      	bne.n	8007010 <_dtoa_r+0x700>
 8007002:	9a00      	ldr	r2, [sp, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d1f7      	bne.n	8006ff8 <_dtoa_r+0x6e8>
 8007008:	9900      	ldr	r1, [sp, #0]
 800700a:	2230      	movs	r2, #48	; 0x30
 800700c:	3701      	adds	r7, #1
 800700e:	700a      	strb	r2, [r1, #0]
 8007010:	781a      	ldrb	r2, [r3, #0]
 8007012:	3201      	adds	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e790      	b.n	8006f3a <_dtoa_r+0x62a>
 8007018:	4ba3      	ldr	r3, [pc, #652]	; (80072a8 <_dtoa_r+0x998>)
 800701a:	2200      	movs	r2, #0
 800701c:	f7f9 fb0c 	bl	8000638 <__aeabi_dmul>
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4606      	mov	r6, r0
 8007026:	460f      	mov	r7, r1
 8007028:	f7f9 fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800702c:	2800      	cmp	r0, #0
 800702e:	d09e      	beq.n	8006f6e <_dtoa_r+0x65e>
 8007030:	e7d0      	b.n	8006fd4 <_dtoa_r+0x6c4>
 8007032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007034:	2a00      	cmp	r2, #0
 8007036:	f000 80ca 	beq.w	80071ce <_dtoa_r+0x8be>
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	2a01      	cmp	r2, #1
 800703e:	f300 80ad 	bgt.w	800719c <_dtoa_r+0x88c>
 8007042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007044:	2a00      	cmp	r2, #0
 8007046:	f000 80a5 	beq.w	8007194 <_dtoa_r+0x884>
 800704a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800704e:	9e08      	ldr	r6, [sp, #32]
 8007050:	9d05      	ldr	r5, [sp, #20]
 8007052:	9a05      	ldr	r2, [sp, #20]
 8007054:	441a      	add	r2, r3
 8007056:	9205      	str	r2, [sp, #20]
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	2101      	movs	r1, #1
 800705c:	441a      	add	r2, r3
 800705e:	4620      	mov	r0, r4
 8007060:	9206      	str	r2, [sp, #24]
 8007062:	f000 fc3d 	bl	80078e0 <__i2b>
 8007066:	4607      	mov	r7, r0
 8007068:	b165      	cbz	r5, 8007084 <_dtoa_r+0x774>
 800706a:	9b06      	ldr	r3, [sp, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd09      	ble.n	8007084 <_dtoa_r+0x774>
 8007070:	42ab      	cmp	r3, r5
 8007072:	9a05      	ldr	r2, [sp, #20]
 8007074:	bfa8      	it	ge
 8007076:	462b      	movge	r3, r5
 8007078:	1ad2      	subs	r2, r2, r3
 800707a:	9205      	str	r2, [sp, #20]
 800707c:	9a06      	ldr	r2, [sp, #24]
 800707e:	1aed      	subs	r5, r5, r3
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	9306      	str	r3, [sp, #24]
 8007084:	9b08      	ldr	r3, [sp, #32]
 8007086:	b1f3      	cbz	r3, 80070c6 <_dtoa_r+0x7b6>
 8007088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80a3 	beq.w	80071d6 <_dtoa_r+0x8c6>
 8007090:	2e00      	cmp	r6, #0
 8007092:	dd10      	ble.n	80070b6 <_dtoa_r+0x7a6>
 8007094:	4639      	mov	r1, r7
 8007096:	4632      	mov	r2, r6
 8007098:	4620      	mov	r0, r4
 800709a:	f000 fce1 	bl	8007a60 <__pow5mult>
 800709e:	4652      	mov	r2, sl
 80070a0:	4601      	mov	r1, r0
 80070a2:	4607      	mov	r7, r0
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fc31 	bl	800790c <__multiply>
 80070aa:	4651      	mov	r1, sl
 80070ac:	4680      	mov	r8, r0
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fb60 	bl	8007774 <_Bfree>
 80070b4:	46c2      	mov	sl, r8
 80070b6:	9b08      	ldr	r3, [sp, #32]
 80070b8:	1b9a      	subs	r2, r3, r6
 80070ba:	d004      	beq.n	80070c6 <_dtoa_r+0x7b6>
 80070bc:	4651      	mov	r1, sl
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fcce 	bl	8007a60 <__pow5mult>
 80070c4:	4682      	mov	sl, r0
 80070c6:	2101      	movs	r1, #1
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 fc09 	bl	80078e0 <__i2b>
 80070ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	4606      	mov	r6, r0
 80070d4:	f340 8081 	ble.w	80071da <_dtoa_r+0x8ca>
 80070d8:	461a      	mov	r2, r3
 80070da:	4601      	mov	r1, r0
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fcbf 	bl	8007a60 <__pow5mult>
 80070e2:	9b07      	ldr	r3, [sp, #28]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	4606      	mov	r6, r0
 80070e8:	dd7a      	ble.n	80071e0 <_dtoa_r+0x8d0>
 80070ea:	f04f 0800 	mov.w	r8, #0
 80070ee:	6933      	ldr	r3, [r6, #16]
 80070f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070f4:	6918      	ldr	r0, [r3, #16]
 80070f6:	f000 fba5 	bl	8007844 <__hi0bits>
 80070fa:	f1c0 0020 	rsb	r0, r0, #32
 80070fe:	9b06      	ldr	r3, [sp, #24]
 8007100:	4418      	add	r0, r3
 8007102:	f010 001f 	ands.w	r0, r0, #31
 8007106:	f000 8094 	beq.w	8007232 <_dtoa_r+0x922>
 800710a:	f1c0 0320 	rsb	r3, r0, #32
 800710e:	2b04      	cmp	r3, #4
 8007110:	f340 8085 	ble.w	800721e <_dtoa_r+0x90e>
 8007114:	9b05      	ldr	r3, [sp, #20]
 8007116:	f1c0 001c 	rsb	r0, r0, #28
 800711a:	4403      	add	r3, r0
 800711c:	9305      	str	r3, [sp, #20]
 800711e:	9b06      	ldr	r3, [sp, #24]
 8007120:	4403      	add	r3, r0
 8007122:	4405      	add	r5, r0
 8007124:	9306      	str	r3, [sp, #24]
 8007126:	9b05      	ldr	r3, [sp, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	dd05      	ble.n	8007138 <_dtoa_r+0x828>
 800712c:	4651      	mov	r1, sl
 800712e:	461a      	mov	r2, r3
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fcef 	bl	8007b14 <__lshift>
 8007136:	4682      	mov	sl, r0
 8007138:	9b06      	ldr	r3, [sp, #24]
 800713a:	2b00      	cmp	r3, #0
 800713c:	dd05      	ble.n	800714a <_dtoa_r+0x83a>
 800713e:	4631      	mov	r1, r6
 8007140:	461a      	mov	r2, r3
 8007142:	4620      	mov	r0, r4
 8007144:	f000 fce6 	bl	8007b14 <__lshift>
 8007148:	4606      	mov	r6, r0
 800714a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	d072      	beq.n	8007236 <_dtoa_r+0x926>
 8007150:	4631      	mov	r1, r6
 8007152:	4650      	mov	r0, sl
 8007154:	f000 fd4a 	bl	8007bec <__mcmp>
 8007158:	2800      	cmp	r0, #0
 800715a:	da6c      	bge.n	8007236 <_dtoa_r+0x926>
 800715c:	2300      	movs	r3, #0
 800715e:	4651      	mov	r1, sl
 8007160:	220a      	movs	r2, #10
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fb28 	bl	80077b8 <__multadd>
 8007168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800716e:	4682      	mov	sl, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 81b0 	beq.w	80074d6 <_dtoa_r+0xbc6>
 8007176:	2300      	movs	r3, #0
 8007178:	4639      	mov	r1, r7
 800717a:	220a      	movs	r2, #10
 800717c:	4620      	mov	r0, r4
 800717e:	f000 fb1b 	bl	80077b8 <__multadd>
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	4607      	mov	r7, r0
 8007188:	f300 8096 	bgt.w	80072b8 <_dtoa_r+0x9a8>
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	2b02      	cmp	r3, #2
 8007190:	dc59      	bgt.n	8007246 <_dtoa_r+0x936>
 8007192:	e091      	b.n	80072b8 <_dtoa_r+0x9a8>
 8007194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800719a:	e758      	b.n	800704e <_dtoa_r+0x73e>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	1e5e      	subs	r6, r3, #1
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	42b3      	cmp	r3, r6
 80071a4:	bfbf      	itttt	lt
 80071a6:	9b08      	ldrlt	r3, [sp, #32]
 80071a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80071aa:	9608      	strlt	r6, [sp, #32]
 80071ac:	1af3      	sublt	r3, r6, r3
 80071ae:	bfb4      	ite	lt
 80071b0:	18d2      	addlt	r2, r2, r3
 80071b2:	1b9e      	subge	r6, r3, r6
 80071b4:	9b04      	ldr	r3, [sp, #16]
 80071b6:	bfbc      	itt	lt
 80071b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80071ba:	2600      	movlt	r6, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bfb7      	itett	lt
 80071c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80071c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80071c8:	1a9d      	sublt	r5, r3, r2
 80071ca:	2300      	movlt	r3, #0
 80071cc:	e741      	b.n	8007052 <_dtoa_r+0x742>
 80071ce:	9e08      	ldr	r6, [sp, #32]
 80071d0:	9d05      	ldr	r5, [sp, #20]
 80071d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80071d4:	e748      	b.n	8007068 <_dtoa_r+0x758>
 80071d6:	9a08      	ldr	r2, [sp, #32]
 80071d8:	e770      	b.n	80070bc <_dtoa_r+0x7ac>
 80071da:	9b07      	ldr	r3, [sp, #28]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	dc19      	bgt.n	8007214 <_dtoa_r+0x904>
 80071e0:	9b02      	ldr	r3, [sp, #8]
 80071e2:	b9bb      	cbnz	r3, 8007214 <_dtoa_r+0x904>
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ea:	b99b      	cbnz	r3, 8007214 <_dtoa_r+0x904>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f2:	0d1b      	lsrs	r3, r3, #20
 80071f4:	051b      	lsls	r3, r3, #20
 80071f6:	b183      	cbz	r3, 800721a <_dtoa_r+0x90a>
 80071f8:	9b05      	ldr	r3, [sp, #20]
 80071fa:	3301      	adds	r3, #1
 80071fc:	9305      	str	r3, [sp, #20]
 80071fe:	9b06      	ldr	r3, [sp, #24]
 8007200:	3301      	adds	r3, #1
 8007202:	9306      	str	r3, [sp, #24]
 8007204:	f04f 0801 	mov.w	r8, #1
 8007208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800720a:	2b00      	cmp	r3, #0
 800720c:	f47f af6f 	bne.w	80070ee <_dtoa_r+0x7de>
 8007210:	2001      	movs	r0, #1
 8007212:	e774      	b.n	80070fe <_dtoa_r+0x7ee>
 8007214:	f04f 0800 	mov.w	r8, #0
 8007218:	e7f6      	b.n	8007208 <_dtoa_r+0x8f8>
 800721a:	4698      	mov	r8, r3
 800721c:	e7f4      	b.n	8007208 <_dtoa_r+0x8f8>
 800721e:	d082      	beq.n	8007126 <_dtoa_r+0x816>
 8007220:	9a05      	ldr	r2, [sp, #20]
 8007222:	331c      	adds	r3, #28
 8007224:	441a      	add	r2, r3
 8007226:	9205      	str	r2, [sp, #20]
 8007228:	9a06      	ldr	r2, [sp, #24]
 800722a:	441a      	add	r2, r3
 800722c:	441d      	add	r5, r3
 800722e:	9206      	str	r2, [sp, #24]
 8007230:	e779      	b.n	8007126 <_dtoa_r+0x816>
 8007232:	4603      	mov	r3, r0
 8007234:	e7f4      	b.n	8007220 <_dtoa_r+0x910>
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc37      	bgt.n	80072ac <_dtoa_r+0x99c>
 800723c:	9b07      	ldr	r3, [sp, #28]
 800723e:	2b02      	cmp	r3, #2
 8007240:	dd34      	ble.n	80072ac <_dtoa_r+0x99c>
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	9b01      	ldr	r3, [sp, #4]
 8007248:	b963      	cbnz	r3, 8007264 <_dtoa_r+0x954>
 800724a:	4631      	mov	r1, r6
 800724c:	2205      	movs	r2, #5
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fab2 	bl	80077b8 <__multadd>
 8007254:	4601      	mov	r1, r0
 8007256:	4606      	mov	r6, r0
 8007258:	4650      	mov	r0, sl
 800725a:	f000 fcc7 	bl	8007bec <__mcmp>
 800725e:	2800      	cmp	r0, #0
 8007260:	f73f adbb 	bgt.w	8006dda <_dtoa_r+0x4ca>
 8007264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007266:	9d00      	ldr	r5, [sp, #0]
 8007268:	ea6f 0b03 	mvn.w	fp, r3
 800726c:	f04f 0800 	mov.w	r8, #0
 8007270:	4631      	mov	r1, r6
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fa7e 	bl	8007774 <_Bfree>
 8007278:	2f00      	cmp	r7, #0
 800727a:	f43f aeab 	beq.w	8006fd4 <_dtoa_r+0x6c4>
 800727e:	f1b8 0f00 	cmp.w	r8, #0
 8007282:	d005      	beq.n	8007290 <_dtoa_r+0x980>
 8007284:	45b8      	cmp	r8, r7
 8007286:	d003      	beq.n	8007290 <_dtoa_r+0x980>
 8007288:	4641      	mov	r1, r8
 800728a:	4620      	mov	r0, r4
 800728c:	f000 fa72 	bl	8007774 <_Bfree>
 8007290:	4639      	mov	r1, r7
 8007292:	4620      	mov	r0, r4
 8007294:	f000 fa6e 	bl	8007774 <_Bfree>
 8007298:	e69c      	b.n	8006fd4 <_dtoa_r+0x6c4>
 800729a:	2600      	movs	r6, #0
 800729c:	4637      	mov	r7, r6
 800729e:	e7e1      	b.n	8007264 <_dtoa_r+0x954>
 80072a0:	46bb      	mov	fp, r7
 80072a2:	4637      	mov	r7, r6
 80072a4:	e599      	b.n	8006dda <_dtoa_r+0x4ca>
 80072a6:	bf00      	nop
 80072a8:	40240000 	.word	0x40240000
 80072ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80c8 	beq.w	8007444 <_dtoa_r+0xb34>
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	dd05      	ble.n	80072c8 <_dtoa_r+0x9b8>
 80072bc:	4639      	mov	r1, r7
 80072be:	462a      	mov	r2, r5
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fc27 	bl	8007b14 <__lshift>
 80072c6:	4607      	mov	r7, r0
 80072c8:	f1b8 0f00 	cmp.w	r8, #0
 80072cc:	d05b      	beq.n	8007386 <_dtoa_r+0xa76>
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fa0f 	bl	80076f4 <_Balloc>
 80072d6:	4605      	mov	r5, r0
 80072d8:	b928      	cbnz	r0, 80072e6 <_dtoa_r+0x9d6>
 80072da:	4b83      	ldr	r3, [pc, #524]	; (80074e8 <_dtoa_r+0xbd8>)
 80072dc:	4602      	mov	r2, r0
 80072de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80072e2:	f7ff bb2e 	b.w	8006942 <_dtoa_r+0x32>
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	3202      	adds	r2, #2
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	f107 010c 	add.w	r1, r7, #12
 80072f0:	300c      	adds	r0, #12
 80072f2:	f000 fe39 	bl	8007f68 <memcpy>
 80072f6:	2201      	movs	r2, #1
 80072f8:	4629      	mov	r1, r5
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fc0a 	bl	8007b14 <__lshift>
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800730a:	4413      	add	r3, r2
 800730c:	9308      	str	r3, [sp, #32]
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	46b8      	mov	r8, r7
 8007316:	9306      	str	r3, [sp, #24]
 8007318:	4607      	mov	r7, r0
 800731a:	9b04      	ldr	r3, [sp, #16]
 800731c:	4631      	mov	r1, r6
 800731e:	3b01      	subs	r3, #1
 8007320:	4650      	mov	r0, sl
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	f7ff fa69 	bl	80067fa <quorem>
 8007328:	4641      	mov	r1, r8
 800732a:	9002      	str	r0, [sp, #8]
 800732c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007330:	4650      	mov	r0, sl
 8007332:	f000 fc5b 	bl	8007bec <__mcmp>
 8007336:	463a      	mov	r2, r7
 8007338:	9005      	str	r0, [sp, #20]
 800733a:	4631      	mov	r1, r6
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fc71 	bl	8007c24 <__mdiff>
 8007342:	68c2      	ldr	r2, [r0, #12]
 8007344:	4605      	mov	r5, r0
 8007346:	bb02      	cbnz	r2, 800738a <_dtoa_r+0xa7a>
 8007348:	4601      	mov	r1, r0
 800734a:	4650      	mov	r0, sl
 800734c:	f000 fc4e 	bl	8007bec <__mcmp>
 8007350:	4602      	mov	r2, r0
 8007352:	4629      	mov	r1, r5
 8007354:	4620      	mov	r0, r4
 8007356:	9209      	str	r2, [sp, #36]	; 0x24
 8007358:	f000 fa0c 	bl	8007774 <_Bfree>
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007360:	9d04      	ldr	r5, [sp, #16]
 8007362:	ea43 0102 	orr.w	r1, r3, r2
 8007366:	9b06      	ldr	r3, [sp, #24]
 8007368:	4319      	orrs	r1, r3
 800736a:	d110      	bne.n	800738e <_dtoa_r+0xa7e>
 800736c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007370:	d029      	beq.n	80073c6 <_dtoa_r+0xab6>
 8007372:	9b05      	ldr	r3, [sp, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dd02      	ble.n	800737e <_dtoa_r+0xa6e>
 8007378:	9b02      	ldr	r3, [sp, #8]
 800737a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	f883 9000 	strb.w	r9, [r3]
 8007384:	e774      	b.n	8007270 <_dtoa_r+0x960>
 8007386:	4638      	mov	r0, r7
 8007388:	e7ba      	b.n	8007300 <_dtoa_r+0x9f0>
 800738a:	2201      	movs	r2, #1
 800738c:	e7e1      	b.n	8007352 <_dtoa_r+0xa42>
 800738e:	9b05      	ldr	r3, [sp, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	db04      	blt.n	800739e <_dtoa_r+0xa8e>
 8007394:	9907      	ldr	r1, [sp, #28]
 8007396:	430b      	orrs	r3, r1
 8007398:	9906      	ldr	r1, [sp, #24]
 800739a:	430b      	orrs	r3, r1
 800739c:	d120      	bne.n	80073e0 <_dtoa_r+0xad0>
 800739e:	2a00      	cmp	r2, #0
 80073a0:	dded      	ble.n	800737e <_dtoa_r+0xa6e>
 80073a2:	4651      	mov	r1, sl
 80073a4:	2201      	movs	r2, #1
 80073a6:	4620      	mov	r0, r4
 80073a8:	f000 fbb4 	bl	8007b14 <__lshift>
 80073ac:	4631      	mov	r1, r6
 80073ae:	4682      	mov	sl, r0
 80073b0:	f000 fc1c 	bl	8007bec <__mcmp>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	dc03      	bgt.n	80073c0 <_dtoa_r+0xab0>
 80073b8:	d1e1      	bne.n	800737e <_dtoa_r+0xa6e>
 80073ba:	f019 0f01 	tst.w	r9, #1
 80073be:	d0de      	beq.n	800737e <_dtoa_r+0xa6e>
 80073c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073c4:	d1d8      	bne.n	8007378 <_dtoa_r+0xa68>
 80073c6:	9a01      	ldr	r2, [sp, #4]
 80073c8:	2339      	movs	r3, #57	; 0x39
 80073ca:	7013      	strb	r3, [r2, #0]
 80073cc:	462b      	mov	r3, r5
 80073ce:	461d      	mov	r5, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073d6:	2a39      	cmp	r2, #57	; 0x39
 80073d8:	d06c      	beq.n	80074b4 <_dtoa_r+0xba4>
 80073da:	3201      	adds	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e747      	b.n	8007270 <_dtoa_r+0x960>
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	dd07      	ble.n	80073f4 <_dtoa_r+0xae4>
 80073e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073e8:	d0ed      	beq.n	80073c6 <_dtoa_r+0xab6>
 80073ea:	9a01      	ldr	r2, [sp, #4]
 80073ec:	f109 0301 	add.w	r3, r9, #1
 80073f0:	7013      	strb	r3, [r2, #0]
 80073f2:	e73d      	b.n	8007270 <_dtoa_r+0x960>
 80073f4:	9b04      	ldr	r3, [sp, #16]
 80073f6:	9a08      	ldr	r2, [sp, #32]
 80073f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d043      	beq.n	8007488 <_dtoa_r+0xb78>
 8007400:	4651      	mov	r1, sl
 8007402:	2300      	movs	r3, #0
 8007404:	220a      	movs	r2, #10
 8007406:	4620      	mov	r0, r4
 8007408:	f000 f9d6 	bl	80077b8 <__multadd>
 800740c:	45b8      	cmp	r8, r7
 800740e:	4682      	mov	sl, r0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	f04f 020a 	mov.w	r2, #10
 8007418:	4641      	mov	r1, r8
 800741a:	4620      	mov	r0, r4
 800741c:	d107      	bne.n	800742e <_dtoa_r+0xb1e>
 800741e:	f000 f9cb 	bl	80077b8 <__multadd>
 8007422:	4680      	mov	r8, r0
 8007424:	4607      	mov	r7, r0
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	e775      	b.n	800731a <_dtoa_r+0xa0a>
 800742e:	f000 f9c3 	bl	80077b8 <__multadd>
 8007432:	4639      	mov	r1, r7
 8007434:	4680      	mov	r8, r0
 8007436:	2300      	movs	r3, #0
 8007438:	220a      	movs	r2, #10
 800743a:	4620      	mov	r0, r4
 800743c:	f000 f9bc 	bl	80077b8 <__multadd>
 8007440:	4607      	mov	r7, r0
 8007442:	e7f0      	b.n	8007426 <_dtoa_r+0xb16>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	9d00      	ldr	r5, [sp, #0]
 800744a:	4631      	mov	r1, r6
 800744c:	4650      	mov	r0, sl
 800744e:	f7ff f9d4 	bl	80067fa <quorem>
 8007452:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007456:	9b00      	ldr	r3, [sp, #0]
 8007458:	f805 9b01 	strb.w	r9, [r5], #1
 800745c:	1aea      	subs	r2, r5, r3
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	4293      	cmp	r3, r2
 8007462:	dd07      	ble.n	8007474 <_dtoa_r+0xb64>
 8007464:	4651      	mov	r1, sl
 8007466:	2300      	movs	r3, #0
 8007468:	220a      	movs	r2, #10
 800746a:	4620      	mov	r0, r4
 800746c:	f000 f9a4 	bl	80077b8 <__multadd>
 8007470:	4682      	mov	sl, r0
 8007472:	e7ea      	b.n	800744a <_dtoa_r+0xb3a>
 8007474:	9b01      	ldr	r3, [sp, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfc8      	it	gt
 800747a:	461d      	movgt	r5, r3
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	bfd8      	it	le
 8007480:	2501      	movle	r5, #1
 8007482:	441d      	add	r5, r3
 8007484:	f04f 0800 	mov.w	r8, #0
 8007488:	4651      	mov	r1, sl
 800748a:	2201      	movs	r2, #1
 800748c:	4620      	mov	r0, r4
 800748e:	f000 fb41 	bl	8007b14 <__lshift>
 8007492:	4631      	mov	r1, r6
 8007494:	4682      	mov	sl, r0
 8007496:	f000 fba9 	bl	8007bec <__mcmp>
 800749a:	2800      	cmp	r0, #0
 800749c:	dc96      	bgt.n	80073cc <_dtoa_r+0xabc>
 800749e:	d102      	bne.n	80074a6 <_dtoa_r+0xb96>
 80074a0:	f019 0f01 	tst.w	r9, #1
 80074a4:	d192      	bne.n	80073cc <_dtoa_r+0xabc>
 80074a6:	462b      	mov	r3, r5
 80074a8:	461d      	mov	r5, r3
 80074aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ae:	2a30      	cmp	r2, #48	; 0x30
 80074b0:	d0fa      	beq.n	80074a8 <_dtoa_r+0xb98>
 80074b2:	e6dd      	b.n	8007270 <_dtoa_r+0x960>
 80074b4:	9a00      	ldr	r2, [sp, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d189      	bne.n	80073ce <_dtoa_r+0xabe>
 80074ba:	f10b 0b01 	add.w	fp, fp, #1
 80074be:	2331      	movs	r3, #49	; 0x31
 80074c0:	e796      	b.n	80073f0 <_dtoa_r+0xae0>
 80074c2:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <_dtoa_r+0xbdc>)
 80074c4:	f7ff ba99 	b.w	80069fa <_dtoa_r+0xea>
 80074c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f47f aa6d 	bne.w	80069aa <_dtoa_r+0x9a>
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <_dtoa_r+0xbe0>)
 80074d2:	f7ff ba92 	b.w	80069fa <_dtoa_r+0xea>
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	dcb5      	bgt.n	8007448 <_dtoa_r+0xb38>
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	f73f aeb1 	bgt.w	8007246 <_dtoa_r+0x936>
 80074e4:	e7b0      	b.n	8007448 <_dtoa_r+0xb38>
 80074e6:	bf00      	nop
 80074e8:	08008680 	.word	0x08008680
 80074ec:	080085e0 	.word	0x080085e0
 80074f0:	08008604 	.word	0x08008604

080074f4 <_free_r>:
 80074f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d044      	beq.n	8007584 <_free_r+0x90>
 80074fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074fe:	9001      	str	r0, [sp, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f1a1 0404 	sub.w	r4, r1, #4
 8007506:	bfb8      	it	lt
 8007508:	18e4      	addlt	r4, r4, r3
 800750a:	f000 f8e7 	bl	80076dc <__malloc_lock>
 800750e:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <_free_r+0x94>)
 8007510:	9801      	ldr	r0, [sp, #4]
 8007512:	6813      	ldr	r3, [r2, #0]
 8007514:	b933      	cbnz	r3, 8007524 <_free_r+0x30>
 8007516:	6063      	str	r3, [r4, #4]
 8007518:	6014      	str	r4, [r2, #0]
 800751a:	b003      	add	sp, #12
 800751c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007520:	f000 b8e2 	b.w	80076e8 <__malloc_unlock>
 8007524:	42a3      	cmp	r3, r4
 8007526:	d908      	bls.n	800753a <_free_r+0x46>
 8007528:	6825      	ldr	r5, [r4, #0]
 800752a:	1961      	adds	r1, r4, r5
 800752c:	428b      	cmp	r3, r1
 800752e:	bf01      	itttt	eq
 8007530:	6819      	ldreq	r1, [r3, #0]
 8007532:	685b      	ldreq	r3, [r3, #4]
 8007534:	1949      	addeq	r1, r1, r5
 8007536:	6021      	streq	r1, [r4, #0]
 8007538:	e7ed      	b.n	8007516 <_free_r+0x22>
 800753a:	461a      	mov	r2, r3
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	b10b      	cbz	r3, 8007544 <_free_r+0x50>
 8007540:	42a3      	cmp	r3, r4
 8007542:	d9fa      	bls.n	800753a <_free_r+0x46>
 8007544:	6811      	ldr	r1, [r2, #0]
 8007546:	1855      	adds	r5, r2, r1
 8007548:	42a5      	cmp	r5, r4
 800754a:	d10b      	bne.n	8007564 <_free_r+0x70>
 800754c:	6824      	ldr	r4, [r4, #0]
 800754e:	4421      	add	r1, r4
 8007550:	1854      	adds	r4, r2, r1
 8007552:	42a3      	cmp	r3, r4
 8007554:	6011      	str	r1, [r2, #0]
 8007556:	d1e0      	bne.n	800751a <_free_r+0x26>
 8007558:	681c      	ldr	r4, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	6053      	str	r3, [r2, #4]
 800755e:	440c      	add	r4, r1
 8007560:	6014      	str	r4, [r2, #0]
 8007562:	e7da      	b.n	800751a <_free_r+0x26>
 8007564:	d902      	bls.n	800756c <_free_r+0x78>
 8007566:	230c      	movs	r3, #12
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	e7d6      	b.n	800751a <_free_r+0x26>
 800756c:	6825      	ldr	r5, [r4, #0]
 800756e:	1961      	adds	r1, r4, r5
 8007570:	428b      	cmp	r3, r1
 8007572:	bf04      	itt	eq
 8007574:	6819      	ldreq	r1, [r3, #0]
 8007576:	685b      	ldreq	r3, [r3, #4]
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	bf04      	itt	eq
 800757c:	1949      	addeq	r1, r1, r5
 800757e:	6021      	streq	r1, [r4, #0]
 8007580:	6054      	str	r4, [r2, #4]
 8007582:	e7ca      	b.n	800751a <_free_r+0x26>
 8007584:	b003      	add	sp, #12
 8007586:	bd30      	pop	{r4, r5, pc}
 8007588:	20000550 	.word	0x20000550

0800758c <malloc>:
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <malloc+0xc>)
 800758e:	4601      	mov	r1, r0
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	f000 b823 	b.w	80075dc <_malloc_r>
 8007596:	bf00      	nop
 8007598:	20000064 	.word	0x20000064

0800759c <sbrk_aligned>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	4e0e      	ldr	r6, [pc, #56]	; (80075d8 <sbrk_aligned+0x3c>)
 80075a0:	460c      	mov	r4, r1
 80075a2:	6831      	ldr	r1, [r6, #0]
 80075a4:	4605      	mov	r5, r0
 80075a6:	b911      	cbnz	r1, 80075ae <sbrk_aligned+0x12>
 80075a8:	f000 fcce 	bl	8007f48 <_sbrk_r>
 80075ac:	6030      	str	r0, [r6, #0]
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	f000 fcc9 	bl	8007f48 <_sbrk_r>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	d00a      	beq.n	80075d0 <sbrk_aligned+0x34>
 80075ba:	1cc4      	adds	r4, r0, #3
 80075bc:	f024 0403 	bic.w	r4, r4, #3
 80075c0:	42a0      	cmp	r0, r4
 80075c2:	d007      	beq.n	80075d4 <sbrk_aligned+0x38>
 80075c4:	1a21      	subs	r1, r4, r0
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 fcbe 	bl	8007f48 <_sbrk_r>
 80075cc:	3001      	adds	r0, #1
 80075ce:	d101      	bne.n	80075d4 <sbrk_aligned+0x38>
 80075d0:	f04f 34ff 	mov.w	r4, #4294967295
 80075d4:	4620      	mov	r0, r4
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	20000554 	.word	0x20000554

080075dc <_malloc_r>:
 80075dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e0:	1ccd      	adds	r5, r1, #3
 80075e2:	f025 0503 	bic.w	r5, r5, #3
 80075e6:	3508      	adds	r5, #8
 80075e8:	2d0c      	cmp	r5, #12
 80075ea:	bf38      	it	cc
 80075ec:	250c      	movcc	r5, #12
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	4607      	mov	r7, r0
 80075f2:	db01      	blt.n	80075f8 <_malloc_r+0x1c>
 80075f4:	42a9      	cmp	r1, r5
 80075f6:	d905      	bls.n	8007604 <_malloc_r+0x28>
 80075f8:	230c      	movs	r3, #12
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	2600      	movs	r6, #0
 80075fe:	4630      	mov	r0, r6
 8007600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076d8 <_malloc_r+0xfc>
 8007608:	f000 f868 	bl	80076dc <__malloc_lock>
 800760c:	f8d8 3000 	ldr.w	r3, [r8]
 8007610:	461c      	mov	r4, r3
 8007612:	bb5c      	cbnz	r4, 800766c <_malloc_r+0x90>
 8007614:	4629      	mov	r1, r5
 8007616:	4638      	mov	r0, r7
 8007618:	f7ff ffc0 	bl	800759c <sbrk_aligned>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	4604      	mov	r4, r0
 8007620:	d155      	bne.n	80076ce <_malloc_r+0xf2>
 8007622:	f8d8 4000 	ldr.w	r4, [r8]
 8007626:	4626      	mov	r6, r4
 8007628:	2e00      	cmp	r6, #0
 800762a:	d145      	bne.n	80076b8 <_malloc_r+0xdc>
 800762c:	2c00      	cmp	r4, #0
 800762e:	d048      	beq.n	80076c2 <_malloc_r+0xe6>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	4631      	mov	r1, r6
 8007634:	4638      	mov	r0, r7
 8007636:	eb04 0903 	add.w	r9, r4, r3
 800763a:	f000 fc85 	bl	8007f48 <_sbrk_r>
 800763e:	4581      	cmp	r9, r0
 8007640:	d13f      	bne.n	80076c2 <_malloc_r+0xe6>
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	1a6d      	subs	r5, r5, r1
 8007646:	4629      	mov	r1, r5
 8007648:	4638      	mov	r0, r7
 800764a:	f7ff ffa7 	bl	800759c <sbrk_aligned>
 800764e:	3001      	adds	r0, #1
 8007650:	d037      	beq.n	80076c2 <_malloc_r+0xe6>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	442b      	add	r3, r5
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	f8d8 3000 	ldr.w	r3, [r8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d038      	beq.n	80076d2 <_malloc_r+0xf6>
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	42a2      	cmp	r2, r4
 8007664:	d12b      	bne.n	80076be <_malloc_r+0xe2>
 8007666:	2200      	movs	r2, #0
 8007668:	605a      	str	r2, [r3, #4]
 800766a:	e00f      	b.n	800768c <_malloc_r+0xb0>
 800766c:	6822      	ldr	r2, [r4, #0]
 800766e:	1b52      	subs	r2, r2, r5
 8007670:	d41f      	bmi.n	80076b2 <_malloc_r+0xd6>
 8007672:	2a0b      	cmp	r2, #11
 8007674:	d917      	bls.n	80076a6 <_malloc_r+0xca>
 8007676:	1961      	adds	r1, r4, r5
 8007678:	42a3      	cmp	r3, r4
 800767a:	6025      	str	r5, [r4, #0]
 800767c:	bf18      	it	ne
 800767e:	6059      	strne	r1, [r3, #4]
 8007680:	6863      	ldr	r3, [r4, #4]
 8007682:	bf08      	it	eq
 8007684:	f8c8 1000 	streq.w	r1, [r8]
 8007688:	5162      	str	r2, [r4, r5]
 800768a:	604b      	str	r3, [r1, #4]
 800768c:	4638      	mov	r0, r7
 800768e:	f104 060b 	add.w	r6, r4, #11
 8007692:	f000 f829 	bl	80076e8 <__malloc_unlock>
 8007696:	f026 0607 	bic.w	r6, r6, #7
 800769a:	1d23      	adds	r3, r4, #4
 800769c:	1af2      	subs	r2, r6, r3
 800769e:	d0ae      	beq.n	80075fe <_malloc_r+0x22>
 80076a0:	1b9b      	subs	r3, r3, r6
 80076a2:	50a3      	str	r3, [r4, r2]
 80076a4:	e7ab      	b.n	80075fe <_malloc_r+0x22>
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	6862      	ldr	r2, [r4, #4]
 80076aa:	d1dd      	bne.n	8007668 <_malloc_r+0x8c>
 80076ac:	f8c8 2000 	str.w	r2, [r8]
 80076b0:	e7ec      	b.n	800768c <_malloc_r+0xb0>
 80076b2:	4623      	mov	r3, r4
 80076b4:	6864      	ldr	r4, [r4, #4]
 80076b6:	e7ac      	b.n	8007612 <_malloc_r+0x36>
 80076b8:	4634      	mov	r4, r6
 80076ba:	6876      	ldr	r6, [r6, #4]
 80076bc:	e7b4      	b.n	8007628 <_malloc_r+0x4c>
 80076be:	4613      	mov	r3, r2
 80076c0:	e7cc      	b.n	800765c <_malloc_r+0x80>
 80076c2:	230c      	movs	r3, #12
 80076c4:	603b      	str	r3, [r7, #0]
 80076c6:	4638      	mov	r0, r7
 80076c8:	f000 f80e 	bl	80076e8 <__malloc_unlock>
 80076cc:	e797      	b.n	80075fe <_malloc_r+0x22>
 80076ce:	6025      	str	r5, [r4, #0]
 80076d0:	e7dc      	b.n	800768c <_malloc_r+0xb0>
 80076d2:	605b      	str	r3, [r3, #4]
 80076d4:	deff      	udf	#255	; 0xff
 80076d6:	bf00      	nop
 80076d8:	20000550 	.word	0x20000550

080076dc <__malloc_lock>:
 80076dc:	4801      	ldr	r0, [pc, #4]	; (80076e4 <__malloc_lock+0x8>)
 80076de:	f7ff b88a 	b.w	80067f6 <__retarget_lock_acquire_recursive>
 80076e2:	bf00      	nop
 80076e4:	2000054c 	.word	0x2000054c

080076e8 <__malloc_unlock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__malloc_unlock+0x8>)
 80076ea:	f7ff b885 	b.w	80067f8 <__retarget_lock_release_recursive>
 80076ee:	bf00      	nop
 80076f0:	2000054c 	.word	0x2000054c

080076f4 <_Balloc>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	69c6      	ldr	r6, [r0, #28]
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	b976      	cbnz	r6, 800771c <_Balloc+0x28>
 80076fe:	2010      	movs	r0, #16
 8007700:	f7ff ff44 	bl	800758c <malloc>
 8007704:	4602      	mov	r2, r0
 8007706:	61e0      	str	r0, [r4, #28]
 8007708:	b920      	cbnz	r0, 8007714 <_Balloc+0x20>
 800770a:	4b18      	ldr	r3, [pc, #96]	; (800776c <_Balloc+0x78>)
 800770c:	4818      	ldr	r0, [pc, #96]	; (8007770 <_Balloc+0x7c>)
 800770e:	216b      	movs	r1, #107	; 0x6b
 8007710:	f000 fc38 	bl	8007f84 <__assert_func>
 8007714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007718:	6006      	str	r6, [r0, #0]
 800771a:	60c6      	str	r6, [r0, #12]
 800771c:	69e6      	ldr	r6, [r4, #28]
 800771e:	68f3      	ldr	r3, [r6, #12]
 8007720:	b183      	cbz	r3, 8007744 <_Balloc+0x50>
 8007722:	69e3      	ldr	r3, [r4, #28]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800772a:	b9b8      	cbnz	r0, 800775c <_Balloc+0x68>
 800772c:	2101      	movs	r1, #1
 800772e:	fa01 f605 	lsl.w	r6, r1, r5
 8007732:	1d72      	adds	r2, r6, #5
 8007734:	0092      	lsls	r2, r2, #2
 8007736:	4620      	mov	r0, r4
 8007738:	f000 fc42 	bl	8007fc0 <_calloc_r>
 800773c:	b160      	cbz	r0, 8007758 <_Balloc+0x64>
 800773e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007742:	e00e      	b.n	8007762 <_Balloc+0x6e>
 8007744:	2221      	movs	r2, #33	; 0x21
 8007746:	2104      	movs	r1, #4
 8007748:	4620      	mov	r0, r4
 800774a:	f000 fc39 	bl	8007fc0 <_calloc_r>
 800774e:	69e3      	ldr	r3, [r4, #28]
 8007750:	60f0      	str	r0, [r6, #12]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e4      	bne.n	8007722 <_Balloc+0x2e>
 8007758:	2000      	movs	r0, #0
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	6802      	ldr	r2, [r0, #0]
 800775e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007762:	2300      	movs	r3, #0
 8007764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007768:	e7f7      	b.n	800775a <_Balloc+0x66>
 800776a:	bf00      	nop
 800776c:	08008611 	.word	0x08008611
 8007770:	08008691 	.word	0x08008691

08007774 <_Bfree>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	69c6      	ldr	r6, [r0, #28]
 8007778:	4605      	mov	r5, r0
 800777a:	460c      	mov	r4, r1
 800777c:	b976      	cbnz	r6, 800779c <_Bfree+0x28>
 800777e:	2010      	movs	r0, #16
 8007780:	f7ff ff04 	bl	800758c <malloc>
 8007784:	4602      	mov	r2, r0
 8007786:	61e8      	str	r0, [r5, #28]
 8007788:	b920      	cbnz	r0, 8007794 <_Bfree+0x20>
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <_Bfree+0x3c>)
 800778c:	4809      	ldr	r0, [pc, #36]	; (80077b4 <_Bfree+0x40>)
 800778e:	218f      	movs	r1, #143	; 0x8f
 8007790:	f000 fbf8 	bl	8007f84 <__assert_func>
 8007794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007798:	6006      	str	r6, [r0, #0]
 800779a:	60c6      	str	r6, [r0, #12]
 800779c:	b13c      	cbz	r4, 80077ae <_Bfree+0x3a>
 800779e:	69eb      	ldr	r3, [r5, #28]
 80077a0:	6862      	ldr	r2, [r4, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077a8:	6021      	str	r1, [r4, #0]
 80077aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	08008611 	.word	0x08008611
 80077b4:	08008691 	.word	0x08008691

080077b8 <__multadd>:
 80077b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077bc:	690d      	ldr	r5, [r1, #16]
 80077be:	4607      	mov	r7, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	461e      	mov	r6, r3
 80077c4:	f101 0c14 	add.w	ip, r1, #20
 80077c8:	2000      	movs	r0, #0
 80077ca:	f8dc 3000 	ldr.w	r3, [ip]
 80077ce:	b299      	uxth	r1, r3
 80077d0:	fb02 6101 	mla	r1, r2, r1, r6
 80077d4:	0c1e      	lsrs	r6, r3, #16
 80077d6:	0c0b      	lsrs	r3, r1, #16
 80077d8:	fb02 3306 	mla	r3, r2, r6, r3
 80077dc:	b289      	uxth	r1, r1
 80077de:	3001      	adds	r0, #1
 80077e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077e4:	4285      	cmp	r5, r0
 80077e6:	f84c 1b04 	str.w	r1, [ip], #4
 80077ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ee:	dcec      	bgt.n	80077ca <__multadd+0x12>
 80077f0:	b30e      	cbz	r6, 8007836 <__multadd+0x7e>
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	42ab      	cmp	r3, r5
 80077f6:	dc19      	bgt.n	800782c <__multadd+0x74>
 80077f8:	6861      	ldr	r1, [r4, #4]
 80077fa:	4638      	mov	r0, r7
 80077fc:	3101      	adds	r1, #1
 80077fe:	f7ff ff79 	bl	80076f4 <_Balloc>
 8007802:	4680      	mov	r8, r0
 8007804:	b928      	cbnz	r0, 8007812 <__multadd+0x5a>
 8007806:	4602      	mov	r2, r0
 8007808:	4b0c      	ldr	r3, [pc, #48]	; (800783c <__multadd+0x84>)
 800780a:	480d      	ldr	r0, [pc, #52]	; (8007840 <__multadd+0x88>)
 800780c:	21ba      	movs	r1, #186	; 0xba
 800780e:	f000 fbb9 	bl	8007f84 <__assert_func>
 8007812:	6922      	ldr	r2, [r4, #16]
 8007814:	3202      	adds	r2, #2
 8007816:	f104 010c 	add.w	r1, r4, #12
 800781a:	0092      	lsls	r2, r2, #2
 800781c:	300c      	adds	r0, #12
 800781e:	f000 fba3 	bl	8007f68 <memcpy>
 8007822:	4621      	mov	r1, r4
 8007824:	4638      	mov	r0, r7
 8007826:	f7ff ffa5 	bl	8007774 <_Bfree>
 800782a:	4644      	mov	r4, r8
 800782c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007830:	3501      	adds	r5, #1
 8007832:	615e      	str	r6, [r3, #20]
 8007834:	6125      	str	r5, [r4, #16]
 8007836:	4620      	mov	r0, r4
 8007838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783c:	08008680 	.word	0x08008680
 8007840:	08008691 	.word	0x08008691

08007844 <__hi0bits>:
 8007844:	0c03      	lsrs	r3, r0, #16
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	b9d3      	cbnz	r3, 8007880 <__hi0bits+0x3c>
 800784a:	0400      	lsls	r0, r0, #16
 800784c:	2310      	movs	r3, #16
 800784e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007852:	bf04      	itt	eq
 8007854:	0200      	lsleq	r0, r0, #8
 8007856:	3308      	addeq	r3, #8
 8007858:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800785c:	bf04      	itt	eq
 800785e:	0100      	lsleq	r0, r0, #4
 8007860:	3304      	addeq	r3, #4
 8007862:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007866:	bf04      	itt	eq
 8007868:	0080      	lsleq	r0, r0, #2
 800786a:	3302      	addeq	r3, #2
 800786c:	2800      	cmp	r0, #0
 800786e:	db05      	blt.n	800787c <__hi0bits+0x38>
 8007870:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007874:	f103 0301 	add.w	r3, r3, #1
 8007878:	bf08      	it	eq
 800787a:	2320      	moveq	r3, #32
 800787c:	4618      	mov	r0, r3
 800787e:	4770      	bx	lr
 8007880:	2300      	movs	r3, #0
 8007882:	e7e4      	b.n	800784e <__hi0bits+0xa>

08007884 <__lo0bits>:
 8007884:	6803      	ldr	r3, [r0, #0]
 8007886:	f013 0207 	ands.w	r2, r3, #7
 800788a:	d00c      	beq.n	80078a6 <__lo0bits+0x22>
 800788c:	07d9      	lsls	r1, r3, #31
 800788e:	d422      	bmi.n	80078d6 <__lo0bits+0x52>
 8007890:	079a      	lsls	r2, r3, #30
 8007892:	bf49      	itett	mi
 8007894:	085b      	lsrmi	r3, r3, #1
 8007896:	089b      	lsrpl	r3, r3, #2
 8007898:	6003      	strmi	r3, [r0, #0]
 800789a:	2201      	movmi	r2, #1
 800789c:	bf5c      	itt	pl
 800789e:	6003      	strpl	r3, [r0, #0]
 80078a0:	2202      	movpl	r2, #2
 80078a2:	4610      	mov	r0, r2
 80078a4:	4770      	bx	lr
 80078a6:	b299      	uxth	r1, r3
 80078a8:	b909      	cbnz	r1, 80078ae <__lo0bits+0x2a>
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	2210      	movs	r2, #16
 80078ae:	b2d9      	uxtb	r1, r3
 80078b0:	b909      	cbnz	r1, 80078b6 <__lo0bits+0x32>
 80078b2:	3208      	adds	r2, #8
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	0719      	lsls	r1, r3, #28
 80078b8:	bf04      	itt	eq
 80078ba:	091b      	lsreq	r3, r3, #4
 80078bc:	3204      	addeq	r2, #4
 80078be:	0799      	lsls	r1, r3, #30
 80078c0:	bf04      	itt	eq
 80078c2:	089b      	lsreq	r3, r3, #2
 80078c4:	3202      	addeq	r2, #2
 80078c6:	07d9      	lsls	r1, r3, #31
 80078c8:	d403      	bmi.n	80078d2 <__lo0bits+0x4e>
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	f102 0201 	add.w	r2, r2, #1
 80078d0:	d003      	beq.n	80078da <__lo0bits+0x56>
 80078d2:	6003      	str	r3, [r0, #0]
 80078d4:	e7e5      	b.n	80078a2 <__lo0bits+0x1e>
 80078d6:	2200      	movs	r2, #0
 80078d8:	e7e3      	b.n	80078a2 <__lo0bits+0x1e>
 80078da:	2220      	movs	r2, #32
 80078dc:	e7e1      	b.n	80078a2 <__lo0bits+0x1e>
	...

080078e0 <__i2b>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	460c      	mov	r4, r1
 80078e4:	2101      	movs	r1, #1
 80078e6:	f7ff ff05 	bl	80076f4 <_Balloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	b928      	cbnz	r0, 80078fa <__i2b+0x1a>
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <__i2b+0x24>)
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <__i2b+0x28>)
 80078f2:	f240 1145 	movw	r1, #325	; 0x145
 80078f6:	f000 fb45 	bl	8007f84 <__assert_func>
 80078fa:	2301      	movs	r3, #1
 80078fc:	6144      	str	r4, [r0, #20]
 80078fe:	6103      	str	r3, [r0, #16]
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	08008680 	.word	0x08008680
 8007908:	08008691 	.word	0x08008691

0800790c <__multiply>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	4691      	mov	r9, r2
 8007912:	690a      	ldr	r2, [r1, #16]
 8007914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007918:	429a      	cmp	r2, r3
 800791a:	bfb8      	it	lt
 800791c:	460b      	movlt	r3, r1
 800791e:	460c      	mov	r4, r1
 8007920:	bfbc      	itt	lt
 8007922:	464c      	movlt	r4, r9
 8007924:	4699      	movlt	r9, r3
 8007926:	6927      	ldr	r7, [r4, #16]
 8007928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	6861      	ldr	r1, [r4, #4]
 8007930:	eb07 060a 	add.w	r6, r7, sl
 8007934:	42b3      	cmp	r3, r6
 8007936:	b085      	sub	sp, #20
 8007938:	bfb8      	it	lt
 800793a:	3101      	addlt	r1, #1
 800793c:	f7ff feda 	bl	80076f4 <_Balloc>
 8007940:	b930      	cbnz	r0, 8007950 <__multiply+0x44>
 8007942:	4602      	mov	r2, r0
 8007944:	4b44      	ldr	r3, [pc, #272]	; (8007a58 <__multiply+0x14c>)
 8007946:	4845      	ldr	r0, [pc, #276]	; (8007a5c <__multiply+0x150>)
 8007948:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800794c:	f000 fb1a 	bl	8007f84 <__assert_func>
 8007950:	f100 0514 	add.w	r5, r0, #20
 8007954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007958:	462b      	mov	r3, r5
 800795a:	2200      	movs	r2, #0
 800795c:	4543      	cmp	r3, r8
 800795e:	d321      	bcc.n	80079a4 <__multiply+0x98>
 8007960:	f104 0314 	add.w	r3, r4, #20
 8007964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007968:	f109 0314 	add.w	r3, r9, #20
 800796c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007970:	9202      	str	r2, [sp, #8]
 8007972:	1b3a      	subs	r2, r7, r4
 8007974:	3a15      	subs	r2, #21
 8007976:	f022 0203 	bic.w	r2, r2, #3
 800797a:	3204      	adds	r2, #4
 800797c:	f104 0115 	add.w	r1, r4, #21
 8007980:	428f      	cmp	r7, r1
 8007982:	bf38      	it	cc
 8007984:	2204      	movcc	r2, #4
 8007986:	9201      	str	r2, [sp, #4]
 8007988:	9a02      	ldr	r2, [sp, #8]
 800798a:	9303      	str	r3, [sp, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d80c      	bhi.n	80079aa <__multiply+0x9e>
 8007990:	2e00      	cmp	r6, #0
 8007992:	dd03      	ble.n	800799c <__multiply+0x90>
 8007994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05b      	beq.n	8007a54 <__multiply+0x148>
 800799c:	6106      	str	r6, [r0, #16]
 800799e:	b005      	add	sp, #20
 80079a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a4:	f843 2b04 	str.w	r2, [r3], #4
 80079a8:	e7d8      	b.n	800795c <__multiply+0x50>
 80079aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80079ae:	f1ba 0f00 	cmp.w	sl, #0
 80079b2:	d024      	beq.n	80079fe <__multiply+0xf2>
 80079b4:	f104 0e14 	add.w	lr, r4, #20
 80079b8:	46a9      	mov	r9, r5
 80079ba:	f04f 0c00 	mov.w	ip, #0
 80079be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80079c2:	f8d9 1000 	ldr.w	r1, [r9]
 80079c6:	fa1f fb82 	uxth.w	fp, r2
 80079ca:	b289      	uxth	r1, r1
 80079cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80079d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80079d4:	f8d9 2000 	ldr.w	r2, [r9]
 80079d8:	4461      	add	r1, ip
 80079da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079de:	fb0a c20b 	mla	r2, sl, fp, ip
 80079e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079e6:	b289      	uxth	r1, r1
 80079e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079ec:	4577      	cmp	r7, lr
 80079ee:	f849 1b04 	str.w	r1, [r9], #4
 80079f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079f6:	d8e2      	bhi.n	80079be <__multiply+0xb2>
 80079f8:	9a01      	ldr	r2, [sp, #4]
 80079fa:	f845 c002 	str.w	ip, [r5, r2]
 80079fe:	9a03      	ldr	r2, [sp, #12]
 8007a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a04:	3304      	adds	r3, #4
 8007a06:	f1b9 0f00 	cmp.w	r9, #0
 8007a0a:	d021      	beq.n	8007a50 <__multiply+0x144>
 8007a0c:	6829      	ldr	r1, [r5, #0]
 8007a0e:	f104 0c14 	add.w	ip, r4, #20
 8007a12:	46ae      	mov	lr, r5
 8007a14:	f04f 0a00 	mov.w	sl, #0
 8007a18:	f8bc b000 	ldrh.w	fp, [ip]
 8007a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a20:	fb09 220b 	mla	r2, r9, fp, r2
 8007a24:	4452      	add	r2, sl
 8007a26:	b289      	uxth	r1, r1
 8007a28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8007a30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a38:	f8be 1000 	ldrh.w	r1, [lr]
 8007a3c:	fb09 110a 	mla	r1, r9, sl, r1
 8007a40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a44:	4567      	cmp	r7, ip
 8007a46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a4a:	d8e5      	bhi.n	8007a18 <__multiply+0x10c>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	50a9      	str	r1, [r5, r2]
 8007a50:	3504      	adds	r5, #4
 8007a52:	e799      	b.n	8007988 <__multiply+0x7c>
 8007a54:	3e01      	subs	r6, #1
 8007a56:	e79b      	b.n	8007990 <__multiply+0x84>
 8007a58:	08008680 	.word	0x08008680
 8007a5c:	08008691 	.word	0x08008691

08007a60 <__pow5mult>:
 8007a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a64:	4615      	mov	r5, r2
 8007a66:	f012 0203 	ands.w	r2, r2, #3
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	d007      	beq.n	8007a80 <__pow5mult+0x20>
 8007a70:	4c25      	ldr	r4, [pc, #148]	; (8007b08 <__pow5mult+0xa8>)
 8007a72:	3a01      	subs	r2, #1
 8007a74:	2300      	movs	r3, #0
 8007a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a7a:	f7ff fe9d 	bl	80077b8 <__multadd>
 8007a7e:	4607      	mov	r7, r0
 8007a80:	10ad      	asrs	r5, r5, #2
 8007a82:	d03d      	beq.n	8007b00 <__pow5mult+0xa0>
 8007a84:	69f4      	ldr	r4, [r6, #28]
 8007a86:	b97c      	cbnz	r4, 8007aa8 <__pow5mult+0x48>
 8007a88:	2010      	movs	r0, #16
 8007a8a:	f7ff fd7f 	bl	800758c <malloc>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	61f0      	str	r0, [r6, #28]
 8007a92:	b928      	cbnz	r0, 8007aa0 <__pow5mult+0x40>
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <__pow5mult+0xac>)
 8007a96:	481e      	ldr	r0, [pc, #120]	; (8007b10 <__pow5mult+0xb0>)
 8007a98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007a9c:	f000 fa72 	bl	8007f84 <__assert_func>
 8007aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007aa4:	6004      	str	r4, [r0, #0]
 8007aa6:	60c4      	str	r4, [r0, #12]
 8007aa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ab0:	b94c      	cbnz	r4, 8007ac6 <__pow5mult+0x66>
 8007ab2:	f240 2171 	movw	r1, #625	; 0x271
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7ff ff12 	bl	80078e0 <__i2b>
 8007abc:	2300      	movs	r3, #0
 8007abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	f04f 0900 	mov.w	r9, #0
 8007aca:	07eb      	lsls	r3, r5, #31
 8007acc:	d50a      	bpl.n	8007ae4 <__pow5mult+0x84>
 8007ace:	4639      	mov	r1, r7
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff ff1a 	bl	800790c <__multiply>
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4680      	mov	r8, r0
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff fe49 	bl	8007774 <_Bfree>
 8007ae2:	4647      	mov	r7, r8
 8007ae4:	106d      	asrs	r5, r5, #1
 8007ae6:	d00b      	beq.n	8007b00 <__pow5mult+0xa0>
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	b938      	cbnz	r0, 8007afc <__pow5mult+0x9c>
 8007aec:	4622      	mov	r2, r4
 8007aee:	4621      	mov	r1, r4
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff ff0b 	bl	800790c <__multiply>
 8007af6:	6020      	str	r0, [r4, #0]
 8007af8:	f8c0 9000 	str.w	r9, [r0]
 8007afc:	4604      	mov	r4, r0
 8007afe:	e7e4      	b.n	8007aca <__pow5mult+0x6a>
 8007b00:	4638      	mov	r0, r7
 8007b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b06:	bf00      	nop
 8007b08:	080087e0 	.word	0x080087e0
 8007b0c:	08008611 	.word	0x08008611
 8007b10:	08008691 	.word	0x08008691

08007b14 <__lshift>:
 8007b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	6849      	ldr	r1, [r1, #4]
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b22:	68a3      	ldr	r3, [r4, #8]
 8007b24:	4607      	mov	r7, r0
 8007b26:	4691      	mov	r9, r2
 8007b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b2c:	f108 0601 	add.w	r6, r8, #1
 8007b30:	42b3      	cmp	r3, r6
 8007b32:	db0b      	blt.n	8007b4c <__lshift+0x38>
 8007b34:	4638      	mov	r0, r7
 8007b36:	f7ff fddd 	bl	80076f4 <_Balloc>
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	b948      	cbnz	r0, 8007b52 <__lshift+0x3e>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <__lshift+0xd0>)
 8007b42:	4829      	ldr	r0, [pc, #164]	; (8007be8 <__lshift+0xd4>)
 8007b44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b48:	f000 fa1c 	bl	8007f84 <__assert_func>
 8007b4c:	3101      	adds	r1, #1
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	e7ee      	b.n	8007b30 <__lshift+0x1c>
 8007b52:	2300      	movs	r3, #0
 8007b54:	f100 0114 	add.w	r1, r0, #20
 8007b58:	f100 0210 	add.w	r2, r0, #16
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	4553      	cmp	r3, sl
 8007b60:	db33      	blt.n	8007bca <__lshift+0xb6>
 8007b62:	6920      	ldr	r0, [r4, #16]
 8007b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b68:	f104 0314 	add.w	r3, r4, #20
 8007b6c:	f019 091f 	ands.w	r9, r9, #31
 8007b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b78:	d02b      	beq.n	8007bd2 <__lshift+0xbe>
 8007b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b7e:	468a      	mov	sl, r1
 8007b80:	2200      	movs	r2, #0
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	fa00 f009 	lsl.w	r0, r0, r9
 8007b88:	4310      	orrs	r0, r2
 8007b8a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b92:	459c      	cmp	ip, r3
 8007b94:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b98:	d8f3      	bhi.n	8007b82 <__lshift+0x6e>
 8007b9a:	ebac 0304 	sub.w	r3, ip, r4
 8007b9e:	3b15      	subs	r3, #21
 8007ba0:	f023 0303 	bic.w	r3, r3, #3
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	f104 0015 	add.w	r0, r4, #21
 8007baa:	4584      	cmp	ip, r0
 8007bac:	bf38      	it	cc
 8007bae:	2304      	movcc	r3, #4
 8007bb0:	50ca      	str	r2, [r1, r3]
 8007bb2:	b10a      	cbz	r2, 8007bb8 <__lshift+0xa4>
 8007bb4:	f108 0602 	add.w	r6, r8, #2
 8007bb8:	3e01      	subs	r6, #1
 8007bba:	4638      	mov	r0, r7
 8007bbc:	612e      	str	r6, [r5, #16]
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	f7ff fdd8 	bl	8007774 <_Bfree>
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bce:	3301      	adds	r3, #1
 8007bd0:	e7c5      	b.n	8007b5e <__lshift+0x4a>
 8007bd2:	3904      	subs	r1, #4
 8007bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bdc:	459c      	cmp	ip, r3
 8007bde:	d8f9      	bhi.n	8007bd4 <__lshift+0xc0>
 8007be0:	e7ea      	b.n	8007bb8 <__lshift+0xa4>
 8007be2:	bf00      	nop
 8007be4:	08008680 	.word	0x08008680
 8007be8:	08008691 	.word	0x08008691

08007bec <__mcmp>:
 8007bec:	b530      	push	{r4, r5, lr}
 8007bee:	6902      	ldr	r2, [r0, #16]
 8007bf0:	690c      	ldr	r4, [r1, #16]
 8007bf2:	1b12      	subs	r2, r2, r4
 8007bf4:	d10e      	bne.n	8007c14 <__mcmp+0x28>
 8007bf6:	f100 0314 	add.w	r3, r0, #20
 8007bfa:	3114      	adds	r1, #20
 8007bfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c0c:	42a5      	cmp	r5, r4
 8007c0e:	d003      	beq.n	8007c18 <__mcmp+0x2c>
 8007c10:	d305      	bcc.n	8007c1e <__mcmp+0x32>
 8007c12:	2201      	movs	r2, #1
 8007c14:	4610      	mov	r0, r2
 8007c16:	bd30      	pop	{r4, r5, pc}
 8007c18:	4283      	cmp	r3, r0
 8007c1a:	d3f3      	bcc.n	8007c04 <__mcmp+0x18>
 8007c1c:	e7fa      	b.n	8007c14 <__mcmp+0x28>
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	e7f7      	b.n	8007c14 <__mcmp+0x28>

08007c24 <__mdiff>:
 8007c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4690      	mov	r8, r2
 8007c32:	f7ff ffdb 	bl	8007bec <__mcmp>
 8007c36:	1e05      	subs	r5, r0, #0
 8007c38:	d110      	bne.n	8007c5c <__mdiff+0x38>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff fd59 	bl	80076f4 <_Balloc>
 8007c42:	b930      	cbnz	r0, 8007c52 <__mdiff+0x2e>
 8007c44:	4b3a      	ldr	r3, [pc, #232]	; (8007d30 <__mdiff+0x10c>)
 8007c46:	4602      	mov	r2, r0
 8007c48:	f240 2137 	movw	r1, #567	; 0x237
 8007c4c:	4839      	ldr	r0, [pc, #228]	; (8007d34 <__mdiff+0x110>)
 8007c4e:	f000 f999 	bl	8007f84 <__assert_func>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	bfa4      	itt	ge
 8007c5e:	4643      	movge	r3, r8
 8007c60:	46a0      	movge	r8, r4
 8007c62:	4630      	mov	r0, r6
 8007c64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c68:	bfa6      	itte	ge
 8007c6a:	461c      	movge	r4, r3
 8007c6c:	2500      	movge	r5, #0
 8007c6e:	2501      	movlt	r5, #1
 8007c70:	f7ff fd40 	bl	80076f4 <_Balloc>
 8007c74:	b920      	cbnz	r0, 8007c80 <__mdiff+0x5c>
 8007c76:	4b2e      	ldr	r3, [pc, #184]	; (8007d30 <__mdiff+0x10c>)
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f240 2145 	movw	r1, #581	; 0x245
 8007c7e:	e7e5      	b.n	8007c4c <__mdiff+0x28>
 8007c80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c84:	6926      	ldr	r6, [r4, #16]
 8007c86:	60c5      	str	r5, [r0, #12]
 8007c88:	f104 0914 	add.w	r9, r4, #20
 8007c8c:	f108 0514 	add.w	r5, r8, #20
 8007c90:	f100 0e14 	add.w	lr, r0, #20
 8007c94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c9c:	f108 0210 	add.w	r2, r8, #16
 8007ca0:	46f2      	mov	sl, lr
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007cac:	fa11 f88b 	uxtah	r8, r1, fp
 8007cb0:	b299      	uxth	r1, r3
 8007cb2:	0c1b      	lsrs	r3, r3, #16
 8007cb4:	eba8 0801 	sub.w	r8, r8, r1
 8007cb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007cbc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007cc0:	fa1f f888 	uxth.w	r8, r8
 8007cc4:	1419      	asrs	r1, r3, #16
 8007cc6:	454e      	cmp	r6, r9
 8007cc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ccc:	f84a 3b04 	str.w	r3, [sl], #4
 8007cd0:	d8e8      	bhi.n	8007ca4 <__mdiff+0x80>
 8007cd2:	1b33      	subs	r3, r6, r4
 8007cd4:	3b15      	subs	r3, #21
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	3304      	adds	r3, #4
 8007cdc:	3415      	adds	r4, #21
 8007cde:	42a6      	cmp	r6, r4
 8007ce0:	bf38      	it	cc
 8007ce2:	2304      	movcc	r3, #4
 8007ce4:	441d      	add	r5, r3
 8007ce6:	4473      	add	r3, lr
 8007ce8:	469e      	mov	lr, r3
 8007cea:	462e      	mov	r6, r5
 8007cec:	4566      	cmp	r6, ip
 8007cee:	d30e      	bcc.n	8007d0e <__mdiff+0xea>
 8007cf0:	f10c 0203 	add.w	r2, ip, #3
 8007cf4:	1b52      	subs	r2, r2, r5
 8007cf6:	f022 0203 	bic.w	r2, r2, #3
 8007cfa:	3d03      	subs	r5, #3
 8007cfc:	45ac      	cmp	ip, r5
 8007cfe:	bf38      	it	cc
 8007d00:	2200      	movcc	r2, #0
 8007d02:	4413      	add	r3, r2
 8007d04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d08:	b17a      	cbz	r2, 8007d2a <__mdiff+0x106>
 8007d0a:	6107      	str	r7, [r0, #16]
 8007d0c:	e7a4      	b.n	8007c58 <__mdiff+0x34>
 8007d0e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d12:	fa11 f288 	uxtah	r2, r1, r8
 8007d16:	1414      	asrs	r4, r2, #16
 8007d18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d1c:	b292      	uxth	r2, r2
 8007d1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d22:	f84e 2b04 	str.w	r2, [lr], #4
 8007d26:	1421      	asrs	r1, r4, #16
 8007d28:	e7e0      	b.n	8007cec <__mdiff+0xc8>
 8007d2a:	3f01      	subs	r7, #1
 8007d2c:	e7ea      	b.n	8007d04 <__mdiff+0xe0>
 8007d2e:	bf00      	nop
 8007d30:	08008680 	.word	0x08008680
 8007d34:	08008691 	.word	0x08008691

08007d38 <__d2b>:
 8007d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	2101      	movs	r1, #1
 8007d40:	ec59 8b10 	vmov	r8, r9, d0
 8007d44:	4616      	mov	r6, r2
 8007d46:	f7ff fcd5 	bl	80076f4 <_Balloc>
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	b930      	cbnz	r0, 8007d5c <__d2b+0x24>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b24      	ldr	r3, [pc, #144]	; (8007de4 <__d2b+0xac>)
 8007d52:	4825      	ldr	r0, [pc, #148]	; (8007de8 <__d2b+0xb0>)
 8007d54:	f240 310f 	movw	r1, #783	; 0x30f
 8007d58:	f000 f914 	bl	8007f84 <__assert_func>
 8007d5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d64:	bb2d      	cbnz	r5, 8007db2 <__d2b+0x7a>
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	f1b8 0300 	subs.w	r3, r8, #0
 8007d6c:	d026      	beq.n	8007dbc <__d2b+0x84>
 8007d6e:	4668      	mov	r0, sp
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	f7ff fd87 	bl	8007884 <__lo0bits>
 8007d76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d7a:	b1e8      	cbz	r0, 8007db8 <__d2b+0x80>
 8007d7c:	f1c0 0320 	rsb	r3, r0, #32
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	430b      	orrs	r3, r1
 8007d86:	40c2      	lsrs	r2, r0
 8007d88:	6163      	str	r3, [r4, #20]
 8007d8a:	9201      	str	r2, [sp, #4]
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	61a3      	str	r3, [r4, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	bf14      	ite	ne
 8007d94:	2202      	movne	r2, #2
 8007d96:	2201      	moveq	r2, #1
 8007d98:	6122      	str	r2, [r4, #16]
 8007d9a:	b1bd      	cbz	r5, 8007dcc <__d2b+0x94>
 8007d9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007da0:	4405      	add	r5, r0
 8007da2:	603d      	str	r5, [r7, #0]
 8007da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007da8:	6030      	str	r0, [r6, #0]
 8007daa:	4620      	mov	r0, r4
 8007dac:	b003      	add	sp, #12
 8007dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007db6:	e7d6      	b.n	8007d66 <__d2b+0x2e>
 8007db8:	6161      	str	r1, [r4, #20]
 8007dba:	e7e7      	b.n	8007d8c <__d2b+0x54>
 8007dbc:	a801      	add	r0, sp, #4
 8007dbe:	f7ff fd61 	bl	8007884 <__lo0bits>
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	6163      	str	r3, [r4, #20]
 8007dc6:	3020      	adds	r0, #32
 8007dc8:	2201      	movs	r2, #1
 8007dca:	e7e5      	b.n	8007d98 <__d2b+0x60>
 8007dcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dd4:	6038      	str	r0, [r7, #0]
 8007dd6:	6918      	ldr	r0, [r3, #16]
 8007dd8:	f7ff fd34 	bl	8007844 <__hi0bits>
 8007ddc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007de0:	e7e2      	b.n	8007da8 <__d2b+0x70>
 8007de2:	bf00      	nop
 8007de4:	08008680 	.word	0x08008680
 8007de8:	08008691 	.word	0x08008691

08007dec <__sflush_r>:
 8007dec:	898a      	ldrh	r2, [r1, #12]
 8007dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	4605      	mov	r5, r0
 8007df4:	0710      	lsls	r0, r2, #28
 8007df6:	460c      	mov	r4, r1
 8007df8:	d458      	bmi.n	8007eac <__sflush_r+0xc0>
 8007dfa:	684b      	ldr	r3, [r1, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dc05      	bgt.n	8007e0c <__sflush_r+0x20>
 8007e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	dc02      	bgt.n	8007e0c <__sflush_r+0x20>
 8007e06:	2000      	movs	r0, #0
 8007e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	d0f9      	beq.n	8007e06 <__sflush_r+0x1a>
 8007e12:	2300      	movs	r3, #0
 8007e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e18:	682f      	ldr	r7, [r5, #0]
 8007e1a:	6a21      	ldr	r1, [r4, #32]
 8007e1c:	602b      	str	r3, [r5, #0]
 8007e1e:	d032      	beq.n	8007e86 <__sflush_r+0x9a>
 8007e20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	075a      	lsls	r2, r3, #29
 8007e26:	d505      	bpl.n	8007e34 <__sflush_r+0x48>
 8007e28:	6863      	ldr	r3, [r4, #4]
 8007e2a:	1ac0      	subs	r0, r0, r3
 8007e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e2e:	b10b      	cbz	r3, 8007e34 <__sflush_r+0x48>
 8007e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e32:	1ac0      	subs	r0, r0, r3
 8007e34:	2300      	movs	r3, #0
 8007e36:	4602      	mov	r2, r0
 8007e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e3a:	6a21      	ldr	r1, [r4, #32]
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b0      	blx	r6
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	d106      	bne.n	8007e54 <__sflush_r+0x68>
 8007e46:	6829      	ldr	r1, [r5, #0]
 8007e48:	291d      	cmp	r1, #29
 8007e4a:	d82b      	bhi.n	8007ea4 <__sflush_r+0xb8>
 8007e4c:	4a29      	ldr	r2, [pc, #164]	; (8007ef4 <__sflush_r+0x108>)
 8007e4e:	410a      	asrs	r2, r1
 8007e50:	07d6      	lsls	r6, r2, #31
 8007e52:	d427      	bmi.n	8007ea4 <__sflush_r+0xb8>
 8007e54:	2200      	movs	r2, #0
 8007e56:	6062      	str	r2, [r4, #4]
 8007e58:	04d9      	lsls	r1, r3, #19
 8007e5a:	6922      	ldr	r2, [r4, #16]
 8007e5c:	6022      	str	r2, [r4, #0]
 8007e5e:	d504      	bpl.n	8007e6a <__sflush_r+0x7e>
 8007e60:	1c42      	adds	r2, r0, #1
 8007e62:	d101      	bne.n	8007e68 <__sflush_r+0x7c>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	b903      	cbnz	r3, 8007e6a <__sflush_r+0x7e>
 8007e68:	6560      	str	r0, [r4, #84]	; 0x54
 8007e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e6c:	602f      	str	r7, [r5, #0]
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	d0c9      	beq.n	8007e06 <__sflush_r+0x1a>
 8007e72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e76:	4299      	cmp	r1, r3
 8007e78:	d002      	beq.n	8007e80 <__sflush_r+0x94>
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f7ff fb3a 	bl	80074f4 <_free_r>
 8007e80:	2000      	movs	r0, #0
 8007e82:	6360      	str	r0, [r4, #52]	; 0x34
 8007e84:	e7c0      	b.n	8007e08 <__sflush_r+0x1c>
 8007e86:	2301      	movs	r3, #1
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b0      	blx	r6
 8007e8c:	1c41      	adds	r1, r0, #1
 8007e8e:	d1c8      	bne.n	8007e22 <__sflush_r+0x36>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0c5      	beq.n	8007e22 <__sflush_r+0x36>
 8007e96:	2b1d      	cmp	r3, #29
 8007e98:	d001      	beq.n	8007e9e <__sflush_r+0xb2>
 8007e9a:	2b16      	cmp	r3, #22
 8007e9c:	d101      	bne.n	8007ea2 <__sflush_r+0xb6>
 8007e9e:	602f      	str	r7, [r5, #0]
 8007ea0:	e7b1      	b.n	8007e06 <__sflush_r+0x1a>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea8:	81a3      	strh	r3, [r4, #12]
 8007eaa:	e7ad      	b.n	8007e08 <__sflush_r+0x1c>
 8007eac:	690f      	ldr	r7, [r1, #16]
 8007eae:	2f00      	cmp	r7, #0
 8007eb0:	d0a9      	beq.n	8007e06 <__sflush_r+0x1a>
 8007eb2:	0793      	lsls	r3, r2, #30
 8007eb4:	680e      	ldr	r6, [r1, #0]
 8007eb6:	bf08      	it	eq
 8007eb8:	694b      	ldreq	r3, [r1, #20]
 8007eba:	600f      	str	r7, [r1, #0]
 8007ebc:	bf18      	it	ne
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	eba6 0807 	sub.w	r8, r6, r7
 8007ec4:	608b      	str	r3, [r1, #8]
 8007ec6:	f1b8 0f00 	cmp.w	r8, #0
 8007eca:	dd9c      	ble.n	8007e06 <__sflush_r+0x1a>
 8007ecc:	6a21      	ldr	r1, [r4, #32]
 8007ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ed0:	4643      	mov	r3, r8
 8007ed2:	463a      	mov	r2, r7
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b0      	blx	r6
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	dc06      	bgt.n	8007eea <__sflush_r+0xfe>
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	e78e      	b.n	8007e08 <__sflush_r+0x1c>
 8007eea:	4407      	add	r7, r0
 8007eec:	eba8 0800 	sub.w	r8, r8, r0
 8007ef0:	e7e9      	b.n	8007ec6 <__sflush_r+0xda>
 8007ef2:	bf00      	nop
 8007ef4:	dfbffffe 	.word	0xdfbffffe

08007ef8 <_fflush_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	690b      	ldr	r3, [r1, #16]
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	b913      	cbnz	r3, 8007f08 <_fflush_r+0x10>
 8007f02:	2500      	movs	r5, #0
 8007f04:	4628      	mov	r0, r5
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	b118      	cbz	r0, 8007f12 <_fflush_r+0x1a>
 8007f0a:	6a03      	ldr	r3, [r0, #32]
 8007f0c:	b90b      	cbnz	r3, 8007f12 <_fflush_r+0x1a>
 8007f0e:	f7fe fb7b 	bl	8006608 <__sinit>
 8007f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f3      	beq.n	8007f02 <_fflush_r+0xa>
 8007f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f1c:	07d0      	lsls	r0, r2, #31
 8007f1e:	d404      	bmi.n	8007f2a <_fflush_r+0x32>
 8007f20:	0599      	lsls	r1, r3, #22
 8007f22:	d402      	bmi.n	8007f2a <_fflush_r+0x32>
 8007f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f26:	f7fe fc66 	bl	80067f6 <__retarget_lock_acquire_recursive>
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	f7ff ff5d 	bl	8007dec <__sflush_r>
 8007f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f34:	07da      	lsls	r2, r3, #31
 8007f36:	4605      	mov	r5, r0
 8007f38:	d4e4      	bmi.n	8007f04 <_fflush_r+0xc>
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	059b      	lsls	r3, r3, #22
 8007f3e:	d4e1      	bmi.n	8007f04 <_fflush_r+0xc>
 8007f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f42:	f7fe fc59 	bl	80067f8 <__retarget_lock_release_recursive>
 8007f46:	e7dd      	b.n	8007f04 <_fflush_r+0xc>

08007f48 <_sbrk_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4d06      	ldr	r5, [pc, #24]	; (8007f64 <_sbrk_r+0x1c>)
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	4604      	mov	r4, r0
 8007f50:	4608      	mov	r0, r1
 8007f52:	602b      	str	r3, [r5, #0]
 8007f54:	f7f9 ff32 	bl	8001dbc <_sbrk>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_sbrk_r+0x1a>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_sbrk_r+0x1a>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	20000548 	.word	0x20000548

08007f68 <memcpy>:
 8007f68:	440a      	add	r2, r1
 8007f6a:	4291      	cmp	r1, r2
 8007f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f70:	d100      	bne.n	8007f74 <memcpy+0xc>
 8007f72:	4770      	bx	lr
 8007f74:	b510      	push	{r4, lr}
 8007f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f7e:	4291      	cmp	r1, r2
 8007f80:	d1f9      	bne.n	8007f76 <memcpy+0xe>
 8007f82:	bd10      	pop	{r4, pc}

08007f84 <__assert_func>:
 8007f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f86:	4614      	mov	r4, r2
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <__assert_func+0x2c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4605      	mov	r5, r0
 8007f90:	68d8      	ldr	r0, [r3, #12]
 8007f92:	b14c      	cbz	r4, 8007fa8 <__assert_func+0x24>
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <__assert_func+0x30>)
 8007f96:	9100      	str	r1, [sp, #0]
 8007f98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f9c:	4906      	ldr	r1, [pc, #24]	; (8007fb8 <__assert_func+0x34>)
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	f000 f844 	bl	800802c <fiprintf>
 8007fa4:	f000 f854 	bl	8008050 <abort>
 8007fa8:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <__assert_func+0x38>)
 8007faa:	461c      	mov	r4, r3
 8007fac:	e7f3      	b.n	8007f96 <__assert_func+0x12>
 8007fae:	bf00      	nop
 8007fb0:	20000064 	.word	0x20000064
 8007fb4:	080087f6 	.word	0x080087f6
 8007fb8:	08008803 	.word	0x08008803
 8007fbc:	08008831 	.word	0x08008831

08007fc0 <_calloc_r>:
 8007fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fc2:	fba1 2402 	umull	r2, r4, r1, r2
 8007fc6:	b94c      	cbnz	r4, 8007fdc <_calloc_r+0x1c>
 8007fc8:	4611      	mov	r1, r2
 8007fca:	9201      	str	r2, [sp, #4]
 8007fcc:	f7ff fb06 	bl	80075dc <_malloc_r>
 8007fd0:	9a01      	ldr	r2, [sp, #4]
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	b930      	cbnz	r0, 8007fe4 <_calloc_r+0x24>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	b003      	add	sp, #12
 8007fda:	bd30      	pop	{r4, r5, pc}
 8007fdc:	220c      	movs	r2, #12
 8007fde:	6002      	str	r2, [r0, #0]
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	e7f8      	b.n	8007fd6 <_calloc_r+0x16>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	f7fe fb88 	bl	80066fa <memset>
 8007fea:	e7f4      	b.n	8007fd6 <_calloc_r+0x16>

08007fec <__ascii_mbtowc>:
 8007fec:	b082      	sub	sp, #8
 8007fee:	b901      	cbnz	r1, 8007ff2 <__ascii_mbtowc+0x6>
 8007ff0:	a901      	add	r1, sp, #4
 8007ff2:	b142      	cbz	r2, 8008006 <__ascii_mbtowc+0x1a>
 8007ff4:	b14b      	cbz	r3, 800800a <__ascii_mbtowc+0x1e>
 8007ff6:	7813      	ldrb	r3, [r2, #0]
 8007ff8:	600b      	str	r3, [r1, #0]
 8007ffa:	7812      	ldrb	r2, [r2, #0]
 8007ffc:	1e10      	subs	r0, r2, #0
 8007ffe:	bf18      	it	ne
 8008000:	2001      	movne	r0, #1
 8008002:	b002      	add	sp, #8
 8008004:	4770      	bx	lr
 8008006:	4610      	mov	r0, r2
 8008008:	e7fb      	b.n	8008002 <__ascii_mbtowc+0x16>
 800800a:	f06f 0001 	mvn.w	r0, #1
 800800e:	e7f8      	b.n	8008002 <__ascii_mbtowc+0x16>

08008010 <__ascii_wctomb>:
 8008010:	b149      	cbz	r1, 8008026 <__ascii_wctomb+0x16>
 8008012:	2aff      	cmp	r2, #255	; 0xff
 8008014:	bf85      	ittet	hi
 8008016:	238a      	movhi	r3, #138	; 0x8a
 8008018:	6003      	strhi	r3, [r0, #0]
 800801a:	700a      	strbls	r2, [r1, #0]
 800801c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008020:	bf98      	it	ls
 8008022:	2001      	movls	r0, #1
 8008024:	4770      	bx	lr
 8008026:	4608      	mov	r0, r1
 8008028:	4770      	bx	lr
	...

0800802c <fiprintf>:
 800802c:	b40e      	push	{r1, r2, r3}
 800802e:	b503      	push	{r0, r1, lr}
 8008030:	4601      	mov	r1, r0
 8008032:	ab03      	add	r3, sp, #12
 8008034:	4805      	ldr	r0, [pc, #20]	; (800804c <fiprintf+0x20>)
 8008036:	f853 2b04 	ldr.w	r2, [r3], #4
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	f000 f837 	bl	80080b0 <_vfiprintf_r>
 8008042:	b002      	add	sp, #8
 8008044:	f85d eb04 	ldr.w	lr, [sp], #4
 8008048:	b003      	add	sp, #12
 800804a:	4770      	bx	lr
 800804c:	20000064 	.word	0x20000064

08008050 <abort>:
 8008050:	b508      	push	{r3, lr}
 8008052:	2006      	movs	r0, #6
 8008054:	f000 fa04 	bl	8008460 <raise>
 8008058:	2001      	movs	r0, #1
 800805a:	f7f9 fe37 	bl	8001ccc <_exit>

0800805e <__sfputc_r>:
 800805e:	6893      	ldr	r3, [r2, #8]
 8008060:	3b01      	subs	r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	b410      	push	{r4}
 8008066:	6093      	str	r3, [r2, #8]
 8008068:	da08      	bge.n	800807c <__sfputc_r+0x1e>
 800806a:	6994      	ldr	r4, [r2, #24]
 800806c:	42a3      	cmp	r3, r4
 800806e:	db01      	blt.n	8008074 <__sfputc_r+0x16>
 8008070:	290a      	cmp	r1, #10
 8008072:	d103      	bne.n	800807c <__sfputc_r+0x1e>
 8008074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008078:	f000 b934 	b.w	80082e4 <__swbuf_r>
 800807c:	6813      	ldr	r3, [r2, #0]
 800807e:	1c58      	adds	r0, r3, #1
 8008080:	6010      	str	r0, [r2, #0]
 8008082:	7019      	strb	r1, [r3, #0]
 8008084:	4608      	mov	r0, r1
 8008086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800808a:	4770      	bx	lr

0800808c <__sfputs_r>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	4614      	mov	r4, r2
 8008094:	18d5      	adds	r5, r2, r3
 8008096:	42ac      	cmp	r4, r5
 8008098:	d101      	bne.n	800809e <__sfputs_r+0x12>
 800809a:	2000      	movs	r0, #0
 800809c:	e007      	b.n	80080ae <__sfputs_r+0x22>
 800809e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a2:	463a      	mov	r2, r7
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7ff ffda 	bl	800805e <__sfputc_r>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	d1f3      	bne.n	8008096 <__sfputs_r+0xa>
 80080ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080b0 <_vfiprintf_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	460d      	mov	r5, r1
 80080b6:	b09d      	sub	sp, #116	; 0x74
 80080b8:	4614      	mov	r4, r2
 80080ba:	4698      	mov	r8, r3
 80080bc:	4606      	mov	r6, r0
 80080be:	b118      	cbz	r0, 80080c8 <_vfiprintf_r+0x18>
 80080c0:	6a03      	ldr	r3, [r0, #32]
 80080c2:	b90b      	cbnz	r3, 80080c8 <_vfiprintf_r+0x18>
 80080c4:	f7fe faa0 	bl	8006608 <__sinit>
 80080c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ca:	07d9      	lsls	r1, r3, #31
 80080cc:	d405      	bmi.n	80080da <_vfiprintf_r+0x2a>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	059a      	lsls	r2, r3, #22
 80080d2:	d402      	bmi.n	80080da <_vfiprintf_r+0x2a>
 80080d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d6:	f7fe fb8e 	bl	80067f6 <__retarget_lock_acquire_recursive>
 80080da:	89ab      	ldrh	r3, [r5, #12]
 80080dc:	071b      	lsls	r3, r3, #28
 80080de:	d501      	bpl.n	80080e4 <_vfiprintf_r+0x34>
 80080e0:	692b      	ldr	r3, [r5, #16]
 80080e2:	b99b      	cbnz	r3, 800810c <_vfiprintf_r+0x5c>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4630      	mov	r0, r6
 80080e8:	f000 f93a 	bl	8008360 <__swsetup_r>
 80080ec:	b170      	cbz	r0, 800810c <_vfiprintf_r+0x5c>
 80080ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f0:	07dc      	lsls	r4, r3, #31
 80080f2:	d504      	bpl.n	80080fe <_vfiprintf_r+0x4e>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b01d      	add	sp, #116	; 0x74
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	89ab      	ldrh	r3, [r5, #12]
 8008100:	0598      	lsls	r0, r3, #22
 8008102:	d4f7      	bmi.n	80080f4 <_vfiprintf_r+0x44>
 8008104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008106:	f7fe fb77 	bl	80067f8 <__retarget_lock_release_recursive>
 800810a:	e7f3      	b.n	80080f4 <_vfiprintf_r+0x44>
 800810c:	2300      	movs	r3, #0
 800810e:	9309      	str	r3, [sp, #36]	; 0x24
 8008110:	2320      	movs	r3, #32
 8008112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008116:	f8cd 800c 	str.w	r8, [sp, #12]
 800811a:	2330      	movs	r3, #48	; 0x30
 800811c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80082d0 <_vfiprintf_r+0x220>
 8008120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008124:	f04f 0901 	mov.w	r9, #1
 8008128:	4623      	mov	r3, r4
 800812a:	469a      	mov	sl, r3
 800812c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008130:	b10a      	cbz	r2, 8008136 <_vfiprintf_r+0x86>
 8008132:	2a25      	cmp	r2, #37	; 0x25
 8008134:	d1f9      	bne.n	800812a <_vfiprintf_r+0x7a>
 8008136:	ebba 0b04 	subs.w	fp, sl, r4
 800813a:	d00b      	beq.n	8008154 <_vfiprintf_r+0xa4>
 800813c:	465b      	mov	r3, fp
 800813e:	4622      	mov	r2, r4
 8008140:	4629      	mov	r1, r5
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff ffa2 	bl	800808c <__sfputs_r>
 8008148:	3001      	adds	r0, #1
 800814a:	f000 80a9 	beq.w	80082a0 <_vfiprintf_r+0x1f0>
 800814e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008150:	445a      	add	r2, fp
 8008152:	9209      	str	r2, [sp, #36]	; 0x24
 8008154:	f89a 3000 	ldrb.w	r3, [sl]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80a1 	beq.w	80082a0 <_vfiprintf_r+0x1f0>
 800815e:	2300      	movs	r3, #0
 8008160:	f04f 32ff 	mov.w	r2, #4294967295
 8008164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008168:	f10a 0a01 	add.w	sl, sl, #1
 800816c:	9304      	str	r3, [sp, #16]
 800816e:	9307      	str	r3, [sp, #28]
 8008170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008174:	931a      	str	r3, [sp, #104]	; 0x68
 8008176:	4654      	mov	r4, sl
 8008178:	2205      	movs	r2, #5
 800817a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817e:	4854      	ldr	r0, [pc, #336]	; (80082d0 <_vfiprintf_r+0x220>)
 8008180:	f7f8 f846 	bl	8000210 <memchr>
 8008184:	9a04      	ldr	r2, [sp, #16]
 8008186:	b9d8      	cbnz	r0, 80081c0 <_vfiprintf_r+0x110>
 8008188:	06d1      	lsls	r1, r2, #27
 800818a:	bf44      	itt	mi
 800818c:	2320      	movmi	r3, #32
 800818e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008192:	0713      	lsls	r3, r2, #28
 8008194:	bf44      	itt	mi
 8008196:	232b      	movmi	r3, #43	; 0x2b
 8008198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800819c:	f89a 3000 	ldrb.w	r3, [sl]
 80081a0:	2b2a      	cmp	r3, #42	; 0x2a
 80081a2:	d015      	beq.n	80081d0 <_vfiprintf_r+0x120>
 80081a4:	9a07      	ldr	r2, [sp, #28]
 80081a6:	4654      	mov	r4, sl
 80081a8:	2000      	movs	r0, #0
 80081aa:	f04f 0c0a 	mov.w	ip, #10
 80081ae:	4621      	mov	r1, r4
 80081b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b4:	3b30      	subs	r3, #48	; 0x30
 80081b6:	2b09      	cmp	r3, #9
 80081b8:	d94d      	bls.n	8008256 <_vfiprintf_r+0x1a6>
 80081ba:	b1b0      	cbz	r0, 80081ea <_vfiprintf_r+0x13a>
 80081bc:	9207      	str	r2, [sp, #28]
 80081be:	e014      	b.n	80081ea <_vfiprintf_r+0x13a>
 80081c0:	eba0 0308 	sub.w	r3, r0, r8
 80081c4:	fa09 f303 	lsl.w	r3, r9, r3
 80081c8:	4313      	orrs	r3, r2
 80081ca:	9304      	str	r3, [sp, #16]
 80081cc:	46a2      	mov	sl, r4
 80081ce:	e7d2      	b.n	8008176 <_vfiprintf_r+0xc6>
 80081d0:	9b03      	ldr	r3, [sp, #12]
 80081d2:	1d19      	adds	r1, r3, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	9103      	str	r1, [sp, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bfbb      	ittet	lt
 80081dc:	425b      	neglt	r3, r3
 80081de:	f042 0202 	orrlt.w	r2, r2, #2
 80081e2:	9307      	strge	r3, [sp, #28]
 80081e4:	9307      	strlt	r3, [sp, #28]
 80081e6:	bfb8      	it	lt
 80081e8:	9204      	strlt	r2, [sp, #16]
 80081ea:	7823      	ldrb	r3, [r4, #0]
 80081ec:	2b2e      	cmp	r3, #46	; 0x2e
 80081ee:	d10c      	bne.n	800820a <_vfiprintf_r+0x15a>
 80081f0:	7863      	ldrb	r3, [r4, #1]
 80081f2:	2b2a      	cmp	r3, #42	; 0x2a
 80081f4:	d134      	bne.n	8008260 <_vfiprintf_r+0x1b0>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9203      	str	r2, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfb8      	it	lt
 8008202:	f04f 33ff 	movlt.w	r3, #4294967295
 8008206:	3402      	adds	r4, #2
 8008208:	9305      	str	r3, [sp, #20]
 800820a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80082e0 <_vfiprintf_r+0x230>
 800820e:	7821      	ldrb	r1, [r4, #0]
 8008210:	2203      	movs	r2, #3
 8008212:	4650      	mov	r0, sl
 8008214:	f7f7 fffc 	bl	8000210 <memchr>
 8008218:	b138      	cbz	r0, 800822a <_vfiprintf_r+0x17a>
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	eba0 000a 	sub.w	r0, r0, sl
 8008220:	2240      	movs	r2, #64	; 0x40
 8008222:	4082      	lsls	r2, r0
 8008224:	4313      	orrs	r3, r2
 8008226:	3401      	adds	r4, #1
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4829      	ldr	r0, [pc, #164]	; (80082d4 <_vfiprintf_r+0x224>)
 8008230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008234:	2206      	movs	r2, #6
 8008236:	f7f7 ffeb 	bl	8000210 <memchr>
 800823a:	2800      	cmp	r0, #0
 800823c:	d03f      	beq.n	80082be <_vfiprintf_r+0x20e>
 800823e:	4b26      	ldr	r3, [pc, #152]	; (80082d8 <_vfiprintf_r+0x228>)
 8008240:	bb1b      	cbnz	r3, 800828a <_vfiprintf_r+0x1da>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	3307      	adds	r3, #7
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	3308      	adds	r3, #8
 800824c:	9303      	str	r3, [sp, #12]
 800824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008250:	443b      	add	r3, r7
 8008252:	9309      	str	r3, [sp, #36]	; 0x24
 8008254:	e768      	b.n	8008128 <_vfiprintf_r+0x78>
 8008256:	fb0c 3202 	mla	r2, ip, r2, r3
 800825a:	460c      	mov	r4, r1
 800825c:	2001      	movs	r0, #1
 800825e:	e7a6      	b.n	80081ae <_vfiprintf_r+0xfe>
 8008260:	2300      	movs	r3, #0
 8008262:	3401      	adds	r4, #1
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	4619      	mov	r1, r3
 8008268:	f04f 0c0a 	mov.w	ip, #10
 800826c:	4620      	mov	r0, r4
 800826e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008272:	3a30      	subs	r2, #48	; 0x30
 8008274:	2a09      	cmp	r2, #9
 8008276:	d903      	bls.n	8008280 <_vfiprintf_r+0x1d0>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0c6      	beq.n	800820a <_vfiprintf_r+0x15a>
 800827c:	9105      	str	r1, [sp, #20]
 800827e:	e7c4      	b.n	800820a <_vfiprintf_r+0x15a>
 8008280:	fb0c 2101 	mla	r1, ip, r1, r2
 8008284:	4604      	mov	r4, r0
 8008286:	2301      	movs	r3, #1
 8008288:	e7f0      	b.n	800826c <_vfiprintf_r+0x1bc>
 800828a:	ab03      	add	r3, sp, #12
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	462a      	mov	r2, r5
 8008290:	4b12      	ldr	r3, [pc, #72]	; (80082dc <_vfiprintf_r+0x22c>)
 8008292:	a904      	add	r1, sp, #16
 8008294:	4630      	mov	r0, r6
 8008296:	f7fd fd65 	bl	8005d64 <_printf_float>
 800829a:	4607      	mov	r7, r0
 800829c:	1c78      	adds	r0, r7, #1
 800829e:	d1d6      	bne.n	800824e <_vfiprintf_r+0x19e>
 80082a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082a2:	07d9      	lsls	r1, r3, #31
 80082a4:	d405      	bmi.n	80082b2 <_vfiprintf_r+0x202>
 80082a6:	89ab      	ldrh	r3, [r5, #12]
 80082a8:	059a      	lsls	r2, r3, #22
 80082aa:	d402      	bmi.n	80082b2 <_vfiprintf_r+0x202>
 80082ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ae:	f7fe faa3 	bl	80067f8 <__retarget_lock_release_recursive>
 80082b2:	89ab      	ldrh	r3, [r5, #12]
 80082b4:	065b      	lsls	r3, r3, #25
 80082b6:	f53f af1d 	bmi.w	80080f4 <_vfiprintf_r+0x44>
 80082ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082bc:	e71c      	b.n	80080f8 <_vfiprintf_r+0x48>
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <_vfiprintf_r+0x22c>)
 80082c6:	a904      	add	r1, sp, #16
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7fd ffef 	bl	80062ac <_printf_i>
 80082ce:	e7e4      	b.n	800829a <_vfiprintf_r+0x1ea>
 80082d0:	08008933 	.word	0x08008933
 80082d4:	0800893d 	.word	0x0800893d
 80082d8:	08005d65 	.word	0x08005d65
 80082dc:	0800808d 	.word	0x0800808d
 80082e0:	08008939 	.word	0x08008939

080082e4 <__swbuf_r>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	460e      	mov	r6, r1
 80082e8:	4614      	mov	r4, r2
 80082ea:	4605      	mov	r5, r0
 80082ec:	b118      	cbz	r0, 80082f6 <__swbuf_r+0x12>
 80082ee:	6a03      	ldr	r3, [r0, #32]
 80082f0:	b90b      	cbnz	r3, 80082f6 <__swbuf_r+0x12>
 80082f2:	f7fe f989 	bl	8006608 <__sinit>
 80082f6:	69a3      	ldr	r3, [r4, #24]
 80082f8:	60a3      	str	r3, [r4, #8]
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	071a      	lsls	r2, r3, #28
 80082fe:	d525      	bpl.n	800834c <__swbuf_r+0x68>
 8008300:	6923      	ldr	r3, [r4, #16]
 8008302:	b31b      	cbz	r3, 800834c <__swbuf_r+0x68>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	6922      	ldr	r2, [r4, #16]
 8008308:	1a98      	subs	r0, r3, r2
 800830a:	6963      	ldr	r3, [r4, #20]
 800830c:	b2f6      	uxtb	r6, r6
 800830e:	4283      	cmp	r3, r0
 8008310:	4637      	mov	r7, r6
 8008312:	dc04      	bgt.n	800831e <__swbuf_r+0x3a>
 8008314:	4621      	mov	r1, r4
 8008316:	4628      	mov	r0, r5
 8008318:	f7ff fdee 	bl	8007ef8 <_fflush_r>
 800831c:	b9e0      	cbnz	r0, 8008358 <__swbuf_r+0x74>
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	3b01      	subs	r3, #1
 8008322:	60a3      	str	r3, [r4, #8]
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	6022      	str	r2, [r4, #0]
 800832a:	701e      	strb	r6, [r3, #0]
 800832c:	6962      	ldr	r2, [r4, #20]
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	429a      	cmp	r2, r3
 8008332:	d004      	beq.n	800833e <__swbuf_r+0x5a>
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	07db      	lsls	r3, r3, #31
 8008338:	d506      	bpl.n	8008348 <__swbuf_r+0x64>
 800833a:	2e0a      	cmp	r6, #10
 800833c:	d104      	bne.n	8008348 <__swbuf_r+0x64>
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f7ff fdd9 	bl	8007ef8 <_fflush_r>
 8008346:	b938      	cbnz	r0, 8008358 <__swbuf_r+0x74>
 8008348:	4638      	mov	r0, r7
 800834a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800834c:	4621      	mov	r1, r4
 800834e:	4628      	mov	r0, r5
 8008350:	f000 f806 	bl	8008360 <__swsetup_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	d0d5      	beq.n	8008304 <__swbuf_r+0x20>
 8008358:	f04f 37ff 	mov.w	r7, #4294967295
 800835c:	e7f4      	b.n	8008348 <__swbuf_r+0x64>
	...

08008360 <__swsetup_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4b2a      	ldr	r3, [pc, #168]	; (800840c <__swsetup_r+0xac>)
 8008364:	4605      	mov	r5, r0
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	460c      	mov	r4, r1
 800836a:	b118      	cbz	r0, 8008374 <__swsetup_r+0x14>
 800836c:	6a03      	ldr	r3, [r0, #32]
 800836e:	b90b      	cbnz	r3, 8008374 <__swsetup_r+0x14>
 8008370:	f7fe f94a 	bl	8006608 <__sinit>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800837a:	0718      	lsls	r0, r3, #28
 800837c:	d422      	bmi.n	80083c4 <__swsetup_r+0x64>
 800837e:	06d9      	lsls	r1, r3, #27
 8008380:	d407      	bmi.n	8008392 <__swsetup_r+0x32>
 8008382:	2309      	movs	r3, #9
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800838a:	81a3      	strh	r3, [r4, #12]
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	e034      	b.n	80083fc <__swsetup_r+0x9c>
 8008392:	0758      	lsls	r0, r3, #29
 8008394:	d512      	bpl.n	80083bc <__swsetup_r+0x5c>
 8008396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008398:	b141      	cbz	r1, 80083ac <__swsetup_r+0x4c>
 800839a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800839e:	4299      	cmp	r1, r3
 80083a0:	d002      	beq.n	80083a8 <__swsetup_r+0x48>
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7ff f8a6 	bl	80074f4 <_free_r>
 80083a8:	2300      	movs	r3, #0
 80083aa:	6363      	str	r3, [r4, #52]	; 0x34
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083b2:	81a3      	strh	r3, [r4, #12]
 80083b4:	2300      	movs	r3, #0
 80083b6:	6063      	str	r3, [r4, #4]
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f043 0308 	orr.w	r3, r3, #8
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	b94b      	cbnz	r3, 80083dc <__swsetup_r+0x7c>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d2:	d003      	beq.n	80083dc <__swsetup_r+0x7c>
 80083d4:	4621      	mov	r1, r4
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 f884 	bl	80084e4 <__smakebuf_r>
 80083dc:	89a0      	ldrh	r0, [r4, #12]
 80083de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083e2:	f010 0301 	ands.w	r3, r0, #1
 80083e6:	d00a      	beq.n	80083fe <__swsetup_r+0x9e>
 80083e8:	2300      	movs	r3, #0
 80083ea:	60a3      	str	r3, [r4, #8]
 80083ec:	6963      	ldr	r3, [r4, #20]
 80083ee:	425b      	negs	r3, r3
 80083f0:	61a3      	str	r3, [r4, #24]
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	b943      	cbnz	r3, 8008408 <__swsetup_r+0xa8>
 80083f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083fa:	d1c4      	bne.n	8008386 <__swsetup_r+0x26>
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	0781      	lsls	r1, r0, #30
 8008400:	bf58      	it	pl
 8008402:	6963      	ldrpl	r3, [r4, #20]
 8008404:	60a3      	str	r3, [r4, #8]
 8008406:	e7f4      	b.n	80083f2 <__swsetup_r+0x92>
 8008408:	2000      	movs	r0, #0
 800840a:	e7f7      	b.n	80083fc <__swsetup_r+0x9c>
 800840c:	20000064 	.word	0x20000064

08008410 <_raise_r>:
 8008410:	291f      	cmp	r1, #31
 8008412:	b538      	push	{r3, r4, r5, lr}
 8008414:	4604      	mov	r4, r0
 8008416:	460d      	mov	r5, r1
 8008418:	d904      	bls.n	8008424 <_raise_r+0x14>
 800841a:	2316      	movs	r3, #22
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008426:	b112      	cbz	r2, 800842e <_raise_r+0x1e>
 8008428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800842c:	b94b      	cbnz	r3, 8008442 <_raise_r+0x32>
 800842e:	4620      	mov	r0, r4
 8008430:	f000 f830 	bl	8008494 <_getpid_r>
 8008434:	462a      	mov	r2, r5
 8008436:	4601      	mov	r1, r0
 8008438:	4620      	mov	r0, r4
 800843a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800843e:	f000 b817 	b.w	8008470 <_kill_r>
 8008442:	2b01      	cmp	r3, #1
 8008444:	d00a      	beq.n	800845c <_raise_r+0x4c>
 8008446:	1c59      	adds	r1, r3, #1
 8008448:	d103      	bne.n	8008452 <_raise_r+0x42>
 800844a:	2316      	movs	r3, #22
 800844c:	6003      	str	r3, [r0, #0]
 800844e:	2001      	movs	r0, #1
 8008450:	e7e7      	b.n	8008422 <_raise_r+0x12>
 8008452:	2400      	movs	r4, #0
 8008454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008458:	4628      	mov	r0, r5
 800845a:	4798      	blx	r3
 800845c:	2000      	movs	r0, #0
 800845e:	e7e0      	b.n	8008422 <_raise_r+0x12>

08008460 <raise>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <raise+0xc>)
 8008462:	4601      	mov	r1, r0
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	f7ff bfd3 	b.w	8008410 <_raise_r>
 800846a:	bf00      	nop
 800846c:	20000064 	.word	0x20000064

08008470 <_kill_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	; (8008490 <_kill_r+0x20>)
 8008474:	2300      	movs	r3, #0
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	f7f9 fc15 	bl	8001cac <_kill>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d102      	bne.n	800848c <_kill_r+0x1c>
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	b103      	cbz	r3, 800848c <_kill_r+0x1c>
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	bd38      	pop	{r3, r4, r5, pc}
 800848e:	bf00      	nop
 8008490:	20000548 	.word	0x20000548

08008494 <_getpid_r>:
 8008494:	f7f9 bc02 	b.w	8001c9c <_getpid>

08008498 <__swhatbuf_r>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	2900      	cmp	r1, #0
 80084a2:	b096      	sub	sp, #88	; 0x58
 80084a4:	4615      	mov	r5, r2
 80084a6:	461e      	mov	r6, r3
 80084a8:	da0d      	bge.n	80084c6 <__swhatbuf_r+0x2e>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084b0:	f04f 0100 	mov.w	r1, #0
 80084b4:	bf0c      	ite	eq
 80084b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80084ba:	2340      	movne	r3, #64	; 0x40
 80084bc:	2000      	movs	r0, #0
 80084be:	6031      	str	r1, [r6, #0]
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	b016      	add	sp, #88	; 0x58
 80084c4:	bd70      	pop	{r4, r5, r6, pc}
 80084c6:	466a      	mov	r2, sp
 80084c8:	f000 f848 	bl	800855c <_fstat_r>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	dbec      	blt.n	80084aa <__swhatbuf_r+0x12>
 80084d0:	9901      	ldr	r1, [sp, #4]
 80084d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80084da:	4259      	negs	r1, r3
 80084dc:	4159      	adcs	r1, r3
 80084de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e2:	e7eb      	b.n	80084bc <__swhatbuf_r+0x24>

080084e4 <__smakebuf_r>:
 80084e4:	898b      	ldrh	r3, [r1, #12]
 80084e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084e8:	079d      	lsls	r5, r3, #30
 80084ea:	4606      	mov	r6, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	d507      	bpl.n	8008500 <__smakebuf_r+0x1c>
 80084f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	2301      	movs	r3, #1
 80084fa:	6163      	str	r3, [r4, #20]
 80084fc:	b002      	add	sp, #8
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	ab01      	add	r3, sp, #4
 8008502:	466a      	mov	r2, sp
 8008504:	f7ff ffc8 	bl	8008498 <__swhatbuf_r>
 8008508:	9900      	ldr	r1, [sp, #0]
 800850a:	4605      	mov	r5, r0
 800850c:	4630      	mov	r0, r6
 800850e:	f7ff f865 	bl	80075dc <_malloc_r>
 8008512:	b948      	cbnz	r0, 8008528 <__smakebuf_r+0x44>
 8008514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008518:	059a      	lsls	r2, r3, #22
 800851a:	d4ef      	bmi.n	80084fc <__smakebuf_r+0x18>
 800851c:	f023 0303 	bic.w	r3, r3, #3
 8008520:	f043 0302 	orr.w	r3, r3, #2
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	e7e3      	b.n	80084f0 <__smakebuf_r+0xc>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	6020      	str	r0, [r4, #0]
 800852c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	9b00      	ldr	r3, [sp, #0]
 8008534:	6163      	str	r3, [r4, #20]
 8008536:	9b01      	ldr	r3, [sp, #4]
 8008538:	6120      	str	r0, [r4, #16]
 800853a:	b15b      	cbz	r3, 8008554 <__smakebuf_r+0x70>
 800853c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008540:	4630      	mov	r0, r6
 8008542:	f000 f81d 	bl	8008580 <_isatty_r>
 8008546:	b128      	cbz	r0, 8008554 <__smakebuf_r+0x70>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	431d      	orrs	r5, r3
 8008558:	81a5      	strh	r5, [r4, #12]
 800855a:	e7cf      	b.n	80084fc <__smakebuf_r+0x18>

0800855c <_fstat_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d07      	ldr	r5, [pc, #28]	; (800857c <_fstat_r+0x20>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	f7f9 fbfe 	bl	8001d6a <_fstat>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d102      	bne.n	8008578 <_fstat_r+0x1c>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	b103      	cbz	r3, 8008578 <_fstat_r+0x1c>
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	20000548 	.word	0x20000548

08008580 <_isatty_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4d06      	ldr	r5, [pc, #24]	; (800859c <_isatty_r+0x1c>)
 8008584:	2300      	movs	r3, #0
 8008586:	4604      	mov	r4, r0
 8008588:	4608      	mov	r0, r1
 800858a:	602b      	str	r3, [r5, #0]
 800858c:	f7f9 fbfd 	bl	8001d8a <_isatty>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_isatty_r+0x1a>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_isatty_r+0x1a>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000548 	.word	0x20000548

080085a0 <_init>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr

080085ac <_fini>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	bf00      	nop
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr
