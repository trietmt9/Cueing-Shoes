
Cueing-Laser-IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08007ee8  08007ee8  00017ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e0  080082e0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080082e0  080082e0  000182e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082e8  080082e8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082e8  080082e8  000182e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080082f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001e8  080084d8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  080084d8  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e73  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000292f  00000000  00000000  000360ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00038a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4d  00000000  00000000  000398d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004fa3  00000000  00000000  0003a41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013513  00000000  00000000  0003f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8b1f  00000000  00000000  000528d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d60  00000000  00000000  0014b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00150154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ecc 	.word	0x08007ecc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08007ecc 	.word	0x08007ecc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <Filter_init>:
#include "FIR_Filter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.3 ,0.2,0.1,0.09,0.08,0.07,0.09,0.08, 0.3, 0.2,0.1,0.09,0.08,0.07,0.09,0.08}; // Impulse response h(j)

void Filter_init(FIR_Filter *fir)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    /* Clear filter buffer */
    for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e009      	b.n	8000fa6 <Filter_init+0x22>
    {
        fir->buffer[n] = 0.0f;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
    for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d9f2      	bls.n	8000f92 <Filter_init+0xe>
    }

    /* Reset buffer index */
    fir->buffer_index = 0; // input index of the buffer x(n)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Clear filter output */

    fir->output = 0.0f; // output y(n)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <CS_SELECT>:
 * @brief Activates the chip select pin.
 *
 * This function Activates the chip select pin (GPIOA4) by setting it to GPIO_PIN_RESET.
 */
inline static void CS_SELECT()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000fcc:	2064      	movs	r0, #100	; 0x64
 8000fce:	f001 f89d 	bl	800210c <HAL_Delay>
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <CS_SELECT+0x18>)
 8000fd8:	f001 fda8 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <CS_UNSELECT>:
 * @brief Deactivates the chip select pin.
 *
 * This function deactivates the chip select pin (GPIOA4) by setting it to GPIO_PIN_SET.
 */
inline static void CS_UNSELECT(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2120      	movs	r1, #32
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <CS_UNSELECT+0x14>)
 8000fee:	f001 fd9d 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <SPI_WriteByte>:
 * then writes the data from the provided pointer.
 *
 * @note The SPI handle must be initialized and configured before calling this function.
 */
void SPI_WriteByte(SPI_HandleTypeDef *SPIx, uint8_t Register, uint8_t* pData, uint8_t Data_length)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	461a      	mov	r2, r3
 8001008:	460b      	mov	r3, r1
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	4613      	mov	r3, r2
 800100e:	72bb      	strb	r3, [r7, #10]
    CS_SELECT();
 8001010:	f7ff ffda 	bl	8000fc8 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 8001014:	f107 010b 	add.w	r1, r7, #11
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	2201      	movs	r2, #1
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f002 fc2c 	bl	800387a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pData, Data_length, SPI_TIMEOUT);
 8001022:	7abb      	ldrb	r3, [r7, #10]
 8001024:	b29a      	uxth	r2, r3
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f002 fc25 	bl	800387a <HAL_SPI_Transmit>
    CS_UNSELECT();
 8001030:	f7ff ffd8 	bl	8000fe4 <CS_UNSELECT>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <USER_BANK_SELECTION>:
 * 
 * @param user_bank The user bank to select.
 * @param SPIx The SPI handle.
 */
void USER_BANK_SELECTION(SPI_HandleTypeDef *SPIx, uint8_t USER_BANK_SELECT)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
    uint8_t user_bank_options = 0; 
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
    user_bank_options = (USER_BANK_SELECT << USER_BANK); // select the user bank 
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	b2db      	uxtb	r3, r3
 8001052:	73fb      	strb	r3, [r7, #15]
    CS_SELECT();
 8001054:	f7ff ffb8 	bl	8000fc8 <CS_SELECT>
    SPI_WriteByte(SPIx, ICM20948_REG_BANK_SEL, &user_bank_options, 1);
 8001058:	f107 020f 	add.w	r2, r7, #15
 800105c:	2301      	movs	r3, #1
 800105e:	217f      	movs	r1, #127	; 0x7f
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffcb 	bl	8000ffc <SPI_WriteByte>
    CS_UNSELECT();
 8001066:	f7ff ffbd 	bl	8000fe4 <CS_UNSELECT>
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <SPI_WriteRegisters>:
 * @param Register The register to write to.
 * @param Data The data to write.
 * @param Data_length The length of the data to write.
 */
void SPI_WriteRegisters(usrbank_sel user_bank, SPI_HandleTypeDef *SPIx, uint8_t Register, uint8_t* Data, uint8_t Data_length)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	4613      	mov	r3, r2
 8001082:	73bb      	strb	r3, [r7, #14]
    USER_BANK_SELECTION(SPIx, user_bank);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4619      	mov	r1, r3
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f7ff ffd7 	bl	800103c <USER_BANK_SELECTION>
    CS_SELECT();
 800108e:	f7ff ff9b 	bl	8000fc8 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &Register, sizeof(Register), SPI_TIMEOUT);
 8001092:	f107 010e 	add.w	r1, r7, #14
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2201      	movs	r2, #1
 800109a:	68b8      	ldr	r0, [r7, #8]
 800109c:	f002 fbed 	bl	800387a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, Data, Data_length, SPI_TIMEOUT);
 80010a0:	7e3b      	ldrb	r3, [r7, #24]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f002 fbe6 	bl	800387a <HAL_SPI_Transmit>
    CS_UNSELECT();
 80010ae:	f7ff ff99 	bl	8000fe4 <CS_UNSELECT>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <SPI_ReadRegisters>:
 * @param Register The register to read from.
 * @param pData The data to read into.
 * @param Data_length The length of the data to read.
 */
void SPI_ReadRegisters(usrbank_sel user_bank, SPI_HandleTypeDef *SPIx, uint8_t reg, uint8_t* pData, uint8_t Data_length) 
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4603      	mov	r3, r0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	4613      	mov	r3, r2
 80010ca:	73bb      	strb	r3, [r7, #14]
    reg |= 0x80;
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73bb      	strb	r3, [r7, #14]
    USER_BANK_SELECTION(SPIx, user_bank);
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	4619      	mov	r1, r3
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f7ff ffae 	bl	800103c <USER_BANK_SELECTION>
    CS_SELECT();
 80010e0:	f7ff ff72 	bl	8000fc8 <CS_SELECT>
    HAL_SPI_Transmit(SPIx, &reg, 1, SPI_TIMEOUT);
 80010e4:	f107 010e 	add.w	r1, r7, #14
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2201      	movs	r2, #1
 80010ec:	68b8      	ldr	r0, [r7, #8]
 80010ee:	f002 fbc4 	bl	800387a <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pData, Data_length, SPI_TIMEOUT);
 80010f2:	7e3b      	ldrb	r3, [r7, #24]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	68b8      	ldr	r0, [r7, #8]
 80010fc:	f002 fd00 	bl	8003b00 <HAL_SPI_Receive>
    CS_UNSELECT();
 8001100:	f7ff ff70 	bl	8000fe4 <CS_UNSELECT>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <WHO_AM_I_CHECK>:
 *
 * @param[in] SPIx The SPI handle to use for communication.
 * @param[out] who_am_i The pointer to the byte of data to be read.
 */
void WHO_AM_I_CHECK(SPI_HandleTypeDef *SPIx, uint8_t* who_am_i)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_WHO_AM_I, who_am_i, 1);
 8001116:	2301      	movs	r3, #1
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ffca 	bl	80010ba <SPI_ReadRegisters>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <ICM20948_Read>:
 *
 * @param[in] SPIx The SPI handle to use for communication.
 * @param[out] data A pointer to a struct containing the accelerometer and gyroscope data.
 */
void ICM20948_Read(SPI_HandleTypeDef* SPIx, gyro_accel_data_t* data)
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    // Read accelerometer data
    uint8_t accel_data[6];
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_ACCEL_XOUT_H, accel_data, 6);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2206      	movs	r2, #6
 8001140:	9200      	str	r2, [sp, #0]
 8001142:	222d      	movs	r2, #45	; 0x2d
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff ffb7 	bl	80010ba <SPI_ReadRegisters>
    data->RAW_Ax = (int16_t)(accel_data[0]<<8|accel_data[1]);
 800114c:	7c3b      	ldrb	r3, [r7, #16]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7c7b      	ldrb	r3, [r7, #17]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21a      	sxth	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	80da      	strh	r2, [r3, #6]
    data->RAW_Ay = (int16_t)(accel_data[2]<<8|accel_data[3]);
 800115e:	7cbb      	ldrb	r3, [r7, #18]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21a      	sxth	r2, r3
 8001164:	7cfb      	ldrb	r3, [r7, #19]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21a      	sxth	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	811a      	strh	r2, [r3, #8]
    data->RAW_Az = (int16_t)(accel_data[4]<<8|accel_data[5]);
 8001170:	7d3b      	ldrb	r3, [r7, #20]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7d7b      	ldrb	r3, [r7, #21]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	815a      	strh	r2, [r3, #10]

    // Convert accelerometer raw data to true accelerometer data
    data->Ax = (double)data->RAW_Ax / 8;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9eb 	bl	8000564 <__aeabi_i2d>
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b99      	ldr	r3, [pc, #612]	; (80013f8 <ICM20948_Read+0x2c8>)
 8001194:	f7ff fb7a 	bl	800088c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fd22 	bl	8000be8 <__aeabi_d2f>
 80011a4:	4602      	mov	r2, r0
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	619a      	str	r2, [r3, #24]
    data->Ay = (double)data->RAW_Ay / 8;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9d7 	bl	8000564 <__aeabi_i2d>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b8f      	ldr	r3, [pc, #572]	; (80013f8 <ICM20948_Read+0x2c8>)
 80011bc:	f7ff fb66 	bl	800088c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fd0e 	bl	8000be8 <__aeabi_d2f>
 80011cc:	4602      	mov	r2, r0
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	61da      	str	r2, [r3, #28]
    data->Az = (double)data->RAW_Az / 8;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9c3 	bl	8000564 <__aeabi_i2d>
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b85      	ldr	r3, [pc, #532]	; (80013f8 <ICM20948_Read+0x2c8>)
 80011e4:	f7ff fb52 	bl	800088c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcfa 	bl	8000be8 <__aeabi_d2f>
 80011f4:	4602      	mov	r2, r0
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	621a      	str	r2, [r3, #32]

    // Read gyroscope data
    uint8_t gyro_data[6];
    SPI_ReadRegisters(BANK_0, SPIx, ICM20948_REG_GYRO_XOUT_H, gyro_data, 6);
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2206      	movs	r2, #6
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	2233      	movs	r2, #51	; 0x33
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff ff57 	bl	80010ba <SPI_ReadRegisters>
    data->RAW_Gx = (int16_t)(gyro_data[0]<<8|gyro_data[1]);
 800120c:	7a3b      	ldrb	r3, [r7, #8]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	7a7b      	ldrb	r3, [r7, #9]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21a      	sxth	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	801a      	strh	r2, [r3, #0]
    data->RAW_Gy = (int16_t)(gyro_data[2]<<8|gyro_data[3]);
 800121e:	7abb      	ldrb	r3, [r7, #10]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	805a      	strh	r2, [r3, #2]
    data->RAW_Gz = (int16_t)(gyro_data[4]<<8|gyro_data[5]);
 8001230:	7b3b      	ldrb	r3, [r7, #12]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21a      	sxth	r2, r3
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	b21b      	sxth	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b21a      	sxth	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	809a      	strh	r2, [r3, #4]

    // Convert gyroscope raw data to true gyroscope data
    data->Gx = (double)data->RAW_Gx / 250;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f98b 	bl	8000564 <__aeabi_i2d>
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <ICM20948_Read+0x2cc>)
 8001254:	f7ff fb1a 	bl	800088c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fcc2 	bl	8000be8 <__aeabi_d2f>
 8001264:	4602      	mov	r2, r0
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	60da      	str	r2, [r3, #12]
    data->Gy = (double)data->RAW_Gy / 250;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f977 	bl	8000564 <__aeabi_i2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b60      	ldr	r3, [pc, #384]	; (80013fc <ICM20948_Read+0x2cc>)
 800127c:	f7ff fb06 	bl	800088c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fcae 	bl	8000be8 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	611a      	str	r2, [r3, #16]
    data->Gz = (double)data->RAW_Gz / 250;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f963 	bl	8000564 <__aeabi_i2d>
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b56      	ldr	r3, [pc, #344]	; (80013fc <ICM20948_Read+0x2cc>)
 80012a4:	f7ff faf2 	bl	800088c <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc9a 	bl	8000be8 <__aeabi_d2f>
 80012b4:	4602      	mov	r2, r0
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	615a      	str	r2, [r3, #20]

    // compute Roll Pitch angle
    data->Roll = atan2(data->Ay, sqrt((data->Ax*data->Ax) + (data->Az*data->Az))) * 180 / M_PI;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f962 	bl	8000588 <__aeabi_f2d>
 80012c4:	4604      	mov	r4, r0
 80012c6:	460d      	mov	r5, r1
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80012d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	edd3 6a08 	vldr	s13, [r3, #32]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	ee17 0a90 	vmov	r0, s15
 80012f0:	f7ff f94a 	bl	8000588 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	ec43 2b10 	vmov	d0, r2, r3
 80012fc:	f006 fa6e 	bl	80077dc <sqrt>
 8001300:	eeb0 7a40 	vmov.f32	s14, s0
 8001304:	eef0 7a60 	vmov.f32	s15, s1
 8001308:	eeb0 1a47 	vmov.f32	s2, s14
 800130c:	eef0 1a67 	vmov.f32	s3, s15
 8001310:	ec45 4b10 	vmov	d0, r4, r5
 8001314:	f006 fa60 	bl	80077d8 <atan2>
 8001318:	ec51 0b10 	vmov	r0, r1, d0
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <ICM20948_Read+0x2d0>)
 8001322:	f7ff f989 	bl	8000638 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	a330      	add	r3, pc, #192	; (adr r3, 80013f0 <ICM20948_Read+0x2c0>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff faaa 	bl	800088c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc52 	bl	8000be8 <__aeabi_d2f>
 8001344:	4602      	mov	r2, r0
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
    data->Pitch = atan2(-data->Ax, sqrt((data->Ay*data->Ay) + (data->Az*data->Az))) * 180 / M_PI;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001350:	eef1 7a67 	vneg.f32	s15, s15
 8001354:	ee17 3a90 	vmov	r3, s15
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f915 	bl	8000588 <__aeabi_f2d>
 800135e:	4604      	mov	r4, r0
 8001360:	460d      	mov	r5, r1
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	edd3 7a07 	vldr	s15, [r3, #28]
 800136e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	edd3 6a08 	vldr	s13, [r3, #32]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	edd3 7a08 	vldr	s15, [r3, #32]
 800137e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001386:	ee17 0a90 	vmov	r0, s15
 800138a:	f7ff f8fd 	bl	8000588 <__aeabi_f2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	ec43 2b10 	vmov	d0, r2, r3
 8001396:	f006 fa21 	bl	80077dc <sqrt>
 800139a:	eeb0 7a40 	vmov.f32	s14, s0
 800139e:	eef0 7a60 	vmov.f32	s15, s1
 80013a2:	eeb0 1a47 	vmov.f32	s2, s14
 80013a6:	eef0 1a67 	vmov.f32	s3, s15
 80013aa:	ec45 4b10 	vmov	d0, r4, r5
 80013ae:	f006 fa13 	bl	80077d8 <atan2>
 80013b2:	ec51 0b10 	vmov	r0, r1, d0
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <ICM20948_Read+0x2d0>)
 80013bc:	f7ff f93c 	bl	8000638 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	a309      	add	r3, pc, #36	; (adr r3, 80013f0 <ICM20948_Read+0x2c0>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff fa5d 	bl	800088c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc05 	bl	8000be8 <__aeabi_d2f>
 80013de:	4602      	mov	r2, r0
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28

}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bdb0      	pop	{r4, r5, r7, pc}
 80013ec:	f3af 8000 	nop.w
 80013f0:	54442d18 	.word	0x54442d18
 80013f4:	400921fb 	.word	0x400921fb
 80013f8:	40200000 	.word	0x40200000
 80013fc:	406f4000 	.word	0x406f4000
 8001400:	40668000 	.word	0x40668000

08001404 <ICM20948_Init>:
 * @brief Initial setting for the accelerometer and gyroscope data of the ICM20948 sensor.
 *
 * @param[in] SPIx The SPI handle to use for communication.
 */
void ICM20948_Init(SPI_HandleTypeDef *SPIx)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
    uint8_t temp_data = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
    uint8_t who_am_i = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	73bb      	strb	r3, [r7, #14]
    WHO_AM_I_CHECK(SPIx, &who_am_i);
 8001414:	f107 030e 	add.w	r3, r7, #14
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fe76 	bl	800110c <WHO_AM_I_CHECK>
    if(who_am_i == ICM20948_AVAILABLE)
 8001420:	7bbb      	ldrb	r3, [r7, #14]
 8001422:	2bea      	cmp	r3, #234	; 0xea
 8001424:	d17c      	bne.n	8001520 <ICM20948_Init+0x11c>
    {
        // Disable I2C slave module
        temp_data = (I2C_DISABLE<< I2C_IF_DIS);
 8001426:	2310      	movs	r3, #16
 8001428:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_USER_CTRL, &temp_data, sizeof(temp_data));
 800142a:	f107 030f 	add.w	r3, r7, #15
 800142e:	2201      	movs	r2, #1
 8001430:	9200      	str	r2, [sp, #0]
 8001432:	2203      	movs	r2, #3
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fe1b 	bl	8001072 <SPI_WriteRegisters>

        // Reset the IMU, in this configuration temp will equal to 0xC1u 
        temp_data = 0; 
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (BEST_CLK_SRC << CLKSEL)|( SLEEP_EN << SLEEP)|(DEVICE_RST << DEVICE_RESET);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8001446:	b2db      	uxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_PWR_MGMT_1, &temp_data, sizeof(temp_data));
 800144a:	f107 030f 	add.w	r3, r7, #15
 800144e:	2201      	movs	r2, #1
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	2206      	movs	r2, #6
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fe0b 	bl	8001072 <SPI_WriteRegisters>

        // Exit sleep mode
        temp_data = 0; 
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (BEST_CLK_SRC << CLKSEL);
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_0, SPIx, ICM20948_REG_PWR_MGMT_1, &temp_data, sizeof(temp_data));
 800146a:	f107 030f 	add.w	r3, r7, #15
 800146e:	2201      	movs	r2, #1
 8001470:	9200      	str	r2, [sp, #0]
 8001472:	2206      	movs	r2, #6
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fdfb 	bl	8001072 <SPI_WriteRegisters>

        // Bias cancellation

        // GYRO_BIAS_CANCELLATION(SPIx);
        // Choose sample rate divider at 100, temp = 0x64u
        temp_data = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (GYRO_SMPLRT_DIV_100 << GYRO_SMPLRT_DIV);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	f043 0364 	orr.w	r3, r3, #100	; 0x64
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, GYRO_SMPLRT_DIV, &temp_data, sizeof(temp_data));
 800148a:	f107 030f 	add.w	r3, r7, #15
 800148e:	2201      	movs	r2, #1
 8001490:	9200      	str	r2, [sp, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff fdeb 	bl	8001072 <SPI_WriteRegisters>

        // Enable low-pass filter  
        // Choose full scale rate at 500 dps with 3 decibels band-with is 51.2Hz and Noise band-with is 73.3Hz
        temp_data = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
        temp_data |= (DLPF_ENABLED << GYRO_FCHOICE)|(GYRO_FS_500DPS << GYRO_FS_SEL)|(GYRO_11_6Hz_17_8Hz << GYRO_DLPFCFG);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_GYRO_CONFIG_1, &temp_data, sizeof(temp_data));
 80014aa:	f107 030f 	add.w	r3, r7, #15
 80014ae:	2201      	movs	r2, #1
 80014b0:	9200      	str	r2, [sp, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	2002      	movs	r0, #2
 80014b8:	f7ff fddb 	bl	8001072 <SPI_WriteRegisters>

        // Enable output data rate alignment 
        temp_data = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
        temp_data |= (ODR_ALGIN_ON << ODR_ALIGN_EN);
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ODR_ALIGN_EN, &temp_data, sizeof(temp_data));
 80014ca:	f107 030f 	add.w	r3, r7, #15
 80014ce:	2201      	movs	r2, #1
 80014d0:	9200      	str	r2, [sp, #0]
 80014d2:	2200      	movs	r2, #0
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	2002      	movs	r0, #2
 80014d8:	f7ff fdcb 	bl	8001072 <SPI_WriteRegisters>

        // Select sample rate divider for Accelerometer 
        temp_data = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
        temp_data |= (ACCEL_SMPLRT_DIV_1000<<ACCEL_SMPLRT_DIV_2);
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f063 0317 	orn	r3, r3, #23
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_ACCEL_SMPLRT_DIV_2, &temp_data, sizeof(temp_data));
 80014ee:	f107 030f 	add.w	r3, r7, #15
 80014f2:	2201      	movs	r2, #1
 80014f4:	9200      	str	r2, [sp, #0]
 80014f6:	2211      	movs	r2, #17
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff fdb9 	bl	8001072 <SPI_WriteRegisters>

        // Select accelerometer at 8g 
        // Enable low-pass filter 
        temp_data = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
        temp_data |= (DLPF_ENABLED << ACCEL_FCHOICE)|(ACCEL_FS_8G << ACCEL_FS_SEL)|(ACCEL_111_4Hz_136Hz << ACCEL_DLPFCFG);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	f043 0315 	orr.w	r3, r3, #21
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
        SPI_WriteRegisters(BANK_2, SPIx, ICM20948_REG_ACCEL_CONFIG_1, &temp_data, sizeof(temp_data));
 800150e:	f107 030f 	add.w	r3, r7, #15
 8001512:	2201      	movs	r2, #1
 8001514:	9200      	str	r2, [sp, #0]
 8001516:	2214      	movs	r2, #20
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	2002      	movs	r0, #2
 800151c:	f7ff fda9 	bl	8001072 <SPI_WriteRegisters>

    }
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <MX_ADC1_Init+0x98>)
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <MX_ADC1_Init+0x9c>)
 800153e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_ADC1_Init+0x98>)
 8001542:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001546:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <MX_ADC1_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <MX_ADC1_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_ADC1_Init+0x98>)
 8001556:	2200      	movs	r2, #0
 8001558:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <MX_ADC1_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <MX_ADC1_Init+0x98>)
 8001564:	2200      	movs	r2, #0
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <MX_ADC1_Init+0x98>)
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <MX_ADC1_Init+0xa0>)
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_ADC1_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_ADC1_Init+0x98>)
 8001576:	2201      	movs	r2, #1
 8001578:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_ADC1_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_ADC1_Init+0x98>)
 8001584:	2201      	movs	r2, #1
 8001586:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <MX_ADC1_Init+0x98>)
 800158a:	f000 fde3 	bl	8002154 <HAL_ADC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001594:	f000 f9a6 	bl	80018e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001598:	230d      	movs	r3, #13
 800159a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_ADC1_Init+0x98>)
 80015aa:	f000 fe17 	bl	80021dc <HAL_ADC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015b4:	f000 f996 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000204 	.word	0x20000204
 80015c4:	40012000 	.word	0x40012000
 80015c8:	0f000001 	.word	0x0f000001

080015cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_ADC_MspInit+0x7c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d127      	bne.n	800163e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_ADC_MspInit+0x80>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <HAL_ADC_MspInit+0x80>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_ADC_MspInit+0x80>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_ADC_MspInit+0x80>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_ADC_MspInit+0x80>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_ADC_MspInit+0x80>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001626:	230c      	movs	r3, #12
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_ADC_MspInit+0x84>)
 800163a:	f001 f8e3 	bl	8002804 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40012000 	.word	0x40012000
 800164c:	40023800 	.word	0x40023800
 8001650:	40020800 	.word	0x40020800

08001654 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC0   ------> USB_OTG_HS_ULPI_STP
*/
void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b48      	ldr	r3, [pc, #288]	; (8001790 <MX_GPIO_Init+0x13c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a47      	ldr	r2, [pc, #284]	; (8001790 <MX_GPIO_Init+0x13c>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b45      	ldr	r3, [pc, #276]	; (8001790 <MX_GPIO_Init+0x13c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <MX_GPIO_Init+0x13c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a40      	ldr	r2, [pc, #256]	; (8001790 <MX_GPIO_Init+0x13c>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <MX_GPIO_Init+0x13c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <MX_GPIO_Init+0x13c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a39      	ldr	r2, [pc, #228]	; (8001790 <MX_GPIO_Init+0x13c>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <MX_GPIO_Init+0x13c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <MX_GPIO_Init+0x13c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <MX_GPIO_Init+0x13c>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <MX_GPIO_Init+0x13c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CE_Pin|NRF24_CS_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2118      	movs	r1, #24
 80016de:	482d      	ldr	r0, [pc, #180]	; (8001794 <MX_GPIO_Init+0x140>)
 80016e0:	f001 fa24 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2120      	movs	r1, #32
 80016e8:	482b      	ldr	r0, [pc, #172]	; (8001798 <MX_GPIO_Init+0x144>)
 80016ea:	f001 fa1f 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2101      	movs	r1, #1
 80016f2:	482a      	ldr	r0, [pc, #168]	; (800179c <MX_GPIO_Init+0x148>)
 80016f4:	f001 fa1a 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f8:	2301      	movs	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001708:	230a      	movs	r3, #10
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	4821      	ldr	r0, [pc, #132]	; (8001798 <MX_GPIO_Init+0x144>)
 8001714:	f001 f876 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CS_Pin;
 8001718:	2318      	movs	r3, #24
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4819      	ldr	r0, [pc, #100]	; (8001794 <MX_GPIO_Init+0x140>)
 8001730:	f001 f868 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_INT_Pin;
 8001734:	2310      	movs	r3, #16
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001738:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_INT_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <MX_GPIO_Init+0x144>)
 800174a:	f001 f85b 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800174e:	2320      	movs	r3, #32
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <MX_GPIO_Init+0x144>)
 8001766:	f001 f84d 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800176a:	2301      	movs	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <MX_GPIO_Init+0x148>)
 8001782:	f001 f83f 	bl	8002804 <HAL_GPIO_Init>

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40020000 	.word	0x40020000
 8001798:	40020800 	.word	0x40020800
 800179c:	40020400 	.word	0x40020400

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a4:	f000 fc40 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a8:	f000 f828 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ac:	f7ff ff52 	bl	8001654 <MX_GPIO_Init>
  MX_SPI1_Init();
 80017b0:	f000 f89e 	bl	80018f0 <MX_SPI1_Init>
  MX_TIM3_Init();
 80017b4:	f000 fa44 	bl	8001c40 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017b8:	f000 fad8 	bl	8001d6c <MX_TIM4_Init>
  MX_ADC1_Init();
 80017bc:	f7ff feb4 	bl	8001528 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  
  ICM20948_Init(&hspi1);
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <main+0x48>)
 80017c2:	f7ff fe1f 	bl	8001404 <ICM20948_Init>
  Filter_init(&low_pass_filter);
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <main+0x4c>)
 80017c8:	f7ff fbdc 	bl	8000f84 <Filter_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  ICM20948_Read(&hspi1, &data);
 80017cc:	4908      	ldr	r1, [pc, #32]	; (80017f0 <main+0x50>)
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <main+0x48>)
 80017d0:	f7ff fcae 	bl	8001130 <ICM20948_Read>
  ax = data.Roll;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <main+0x50>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <main+0x54>)
 80017da:	6013      	str	r3, [r2, #0]
  ay = data.Pitch;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <main+0x50>)
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <main+0x58>)
 80017e2:	6013      	str	r3, [r2, #0]
  ICM20948_Read(&hspi1, &data);
 80017e4:	e7f2      	b.n	80017cc <main+0x2c>
 80017e6:	bf00      	nop
 80017e8:	200002cc 	.word	0x200002cc
 80017ec:	2000027c 	.word	0x2000027c
 80017f0:	2000024c 	.word	0x2000024c
 80017f4:	200002c4 	.word	0x200002c4
 80017f8:	200002c8 	.word	0x200002c8

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b094      	sub	sp, #80	; 0x50
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	2234      	movs	r2, #52	; 0x34
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f004 f891 	bl	8005932 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <SystemClock_Config+0xe0>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	4a2c      	ldr	r2, [pc, #176]	; (80018dc <SystemClock_Config+0xe0>)
 800182a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182e:	6413      	str	r3, [r2, #64]	; 0x40
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <SystemClock_Config+0xe0>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183c:	2300      	movs	r3, #0
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <SystemClock_Config+0xe4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <SystemClock_Config+0xe4>)
 8001846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <SystemClock_Config+0xe4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001858:	2301      	movs	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001860:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001862:	2302      	movs	r3, #2
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800186c:	2308      	movs	r3, #8
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001870:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001876:	2302      	movs	r3, #2
 8001878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800187a:	2307      	movs	r3, #7
 800187c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800187e:	2302      	movs	r3, #2
 8001880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fcd0 	bl	800322c <HAL_RCC_OscConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001892:	f000 f827 	bl	80018e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001896:	f001 f963 	bl	8002b60 <HAL_PWREx_EnableOverDrive>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80018a0:	f000 f820 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a4:	230f      	movs	r3, #15
 80018a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a8:	2302      	movs	r3, #2
 80018aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	2105      	movs	r1, #5
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 f99c 	bl	8002c00 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80018ce:	f000 f809 	bl	80018e4 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3750      	adds	r7, #80	; 0x50
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>
	...

080018f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_SPI1_Init+0x64>)
 80018f6:	4a18      	ldr	r2, [pc, #96]	; (8001958 <MX_SPI1_Init+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_SPI1_Init+0x64>)
 80018fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_SPI1_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_SPI1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_SPI1_Init+0x64>)
 8001910:	2202      	movs	r2, #2
 8001912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_SPI1_Init+0x64>)
 8001916:	2201      	movs	r2, #1
 8001918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_SPI1_Init+0x64>)
 800191c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_SPI1_Init+0x64>)
 8001924:	2218      	movs	r2, #24
 8001926:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_SPI1_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_SPI1_Init+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_SPI1_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_SPI1_Init+0x64>)
 800193c:	220a      	movs	r2, #10
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_SPI1_Init+0x64>)
 8001942:	f001 ff11 	bl	8003768 <HAL_SPI_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800194c:	f7ff ffca 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200002cc 	.word	0x200002cc
 8001958:	40013000 	.word	0x40013000

0800195c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_SPI_MspInit+0x84>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12b      	bne.n	80019d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 8001988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019b6:	23e0      	movs	r3, #224	; 0xe0
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019c6:	2305      	movs	r3, #5
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <HAL_SPI_MspInit+0x8c>)
 80019d2:	f000 ff17 	bl	8002804 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40013000 	.word	0x40013000
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_MspInit+0x4c>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a2a:	2007      	movs	r0, #7
 8001a2c:	f000 feb6 	bl	800279c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a40:	e7fe      	b.n	8001a40 <NMI_Handler+0x4>

08001a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <MemManage_Handler+0x4>

08001a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a88:	f000 fb20 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return 1;
 8001a94:	2301      	movs	r3, #1
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_kill>:

int _kill(int pid, int sig)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aaa:	f003 ff95 	bl	80059d8 <__errno>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2216      	movs	r2, #22
 8001ab2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_exit>:

void _exit (int status)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffe7 	bl	8001aa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad2:	e7fe      	b.n	8001ad2 <_exit+0x12>

08001ad4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e00a      	b.n	8001afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae6:	f3af 8000 	nop.w
 8001aea:	4601      	mov	r1, r0
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60ba      	str	r2, [r7, #8]
 8001af2:	b2ca      	uxtb	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbf0      	blt.n	8001ae6 <_read+0x12>
  }

  return len;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e009      	b.n	8001b34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf1      	blt.n	8001b20 <_write+0x12>
  }
  return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_close>:

int _close(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_isatty>:

int _isatty(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f003 fefa 	bl	80059d8 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20020000 	.word	0x20020000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	20000324 	.word	0x20000324
 8001c18:	20000508 	.word	0x20000508

08001c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <SystemInit+0x20>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <SystemInit+0x20>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	; 0x38
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c70:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <MX_TIM3_Init+0x128>)
 8001c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001c76:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001c78:	2259      	movs	r2, #89	; 0x59
 8001c7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001c84:	2263      	movs	r2, #99	; 0x63
 8001c86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c94:	4833      	ldr	r0, [pc, #204]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001c96:	f002 fb3d 	bl	8004314 <HAL_TIM_Base_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001ca0:	f7ff fe20 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	482c      	ldr	r0, [pc, #176]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001cb2:	f002 fc99 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001cbc:	f7ff fe12 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cc0:	4828      	ldr	r0, [pc, #160]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001cc2:	f002 fb76 	bl	80043b2 <HAL_TIM_PWM_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001ccc:	f7ff fe0a 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd8:	f107 0320 	add.w	r3, r7, #32
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4821      	ldr	r0, [pc, #132]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001ce0:	f003 f840 	bl	8004d64 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001cea:	f7ff fdfb 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cee:	2360      	movs	r3, #96	; 0x60
 8001cf0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2200      	movs	r2, #0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4817      	ldr	r0, [pc, #92]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001d06:	f002 fbad 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001d10:	f7ff fde8 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2204      	movs	r2, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4812      	ldr	r0, [pc, #72]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001d1c:	f002 fba2 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001d26:	f7ff fddd 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001d32:	f002 fb97 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001d3c:	f7ff fdd2 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	220c      	movs	r2, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001d48:	f002 fb8c 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001d52:	f7ff fdc7 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <MX_TIM3_Init+0x124>)
 8001d58:	f000 f8d8 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001d5c:	bf00      	nop
 8001d5e:	3738      	adds	r7, #56	; 0x38
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000328 	.word	0x20000328
 8001d68:	40000400 	.word	0x40000400

08001d6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	; 0x38
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	615a      	str	r2, [r3, #20]
 8001d9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001d9e:	4a3e      	ldr	r2, [pc, #248]	; (8001e98 <MX_TIM4_Init+0x12c>)
 8001da0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001da4:	f242 3227 	movw	r2, #8999	; 0x2327
 8001da8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8001db0:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001db2:	22c7      	movs	r2, #199	; 0xc7
 8001db4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db6:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dc2:	4834      	ldr	r0, [pc, #208]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001dc4:	f002 faa6 	bl	8004314 <HAL_TIM_Base_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001dce:	f7ff fd89 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	482d      	ldr	r0, [pc, #180]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001de0:	f002 fc02 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001dea:	f7ff fd7b 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dee:	4829      	ldr	r0, [pc, #164]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001df0:	f002 fadf 	bl	80043b2 <HAL_TIM_PWM_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001dfa:	f7ff fd73 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4821      	ldr	r0, [pc, #132]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001e0e:	f002 ffa9 	bl	8004d64 <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e18:	f7ff fd64 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1c:	2360      	movs	r3, #96	; 0x60
 8001e1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4619      	mov	r1, r3
 8001e32:	4818      	ldr	r0, [pc, #96]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001e34:	f002 fb16 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e3e:	f7ff fd51 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2204      	movs	r2, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4812      	ldr	r0, [pc, #72]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001e4a:	f002 fb0b 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001e54:	f7ff fd46 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480d      	ldr	r0, [pc, #52]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001e60:	f002 fb00 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001e6a:	f7ff fd3b 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	220c      	movs	r2, #12
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001e76:	f002 faf5 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001e80:	f7ff fd30 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <MX_TIM4_Init+0x128>)
 8001e86:	f000 f841 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001e8a:	bf00      	nop
 8001e8c:	3738      	adds	r7, #56	; 0x38
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000370 	.word	0x20000370
 8001e98:	40000800 	.word	0x40000800

08001e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <HAL_TIM_Base_MspInit+0x64>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001eca:	e012      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <HAL_TIM_Base_MspInit+0x6c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40000800 	.word	0x40000800

08001f0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <HAL_TIM_MspPostInit+0xb4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d11f      	bne.n	8001f6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_TIM_MspPostInit+0xb8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <HAL_TIM_MspPostInit+0xb8>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_TIM_MspPostInit+0xb8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f4a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <HAL_TIM_MspPostInit+0xbc>)
 8001f68:	f000 fc4c 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f6c:	e023      	b.n	8001fb6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <HAL_TIM_MspPostInit+0xc0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d11e      	bne.n	8001fb6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_TIM_MspPostInit+0xb8>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_TIM_MspPostInit+0xb8>)
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	6313      	str	r3, [r2, #48]	; 0x30
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_TIM_MspPostInit+0xb8>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f94:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <HAL_TIM_MspPostInit+0xc4>)
 8001fb2:	f000 fc27 	bl	8002804 <HAL_GPIO_Init>
}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800200c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fd8:	f7ff fe20 	bl	8001c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	; (8002014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	; (8002020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002002:	f003 fcef 	bl	80059e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002006:	f7ff fbcb 	bl	80017a0 <main>
  bx  lr    
 800200a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800200c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002018:	080082f0 	.word	0x080082f0
  ldr r2, =_sbss
 800201c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002020:	20000508 	.word	0x20000508

08002024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC_IRQHandler>
	...

08002028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_Init+0x40>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_Init+0x40>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_Init+0x40>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 fba3 	bl	800279c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7ff fcc6 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fbad 	bl	80027ea <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 fb83 	bl	80027b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000008 	.word	0x20000008
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008
 80020f0:	200003b8 	.word	0x200003b8

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	200003b8 	.word	0x200003b8

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008

08002154 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e033      	b.n	80021d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fa2a 	bl	80015cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800219a:	f023 0302 	bic.w	r3, r3, #2
 800219e:	f043 0202 	orr.w	r2, r3, #2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f94a 	bl	8002440 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
 80021c2:	e001      	b.n	80021c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1c>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e113      	b.n	8002420 <HAL_ADC_ConfigChannel+0x244>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b09      	cmp	r3, #9
 8002206:	d925      	bls.n	8002254 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68d9      	ldr	r1, [r3, #12]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	3b1e      	subs	r3, #30
 800221e:	2207      	movs	r2, #7
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43da      	mvns	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	400a      	ands	r2, r1
 800222c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68d9      	ldr	r1, [r3, #12]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	4618      	mov	r0, r3
 8002240:	4603      	mov	r3, r0
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4403      	add	r3, r0
 8002246:	3b1e      	subs	r3, #30
 8002248:	409a      	lsls	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	e022      	b.n	800229a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	2207      	movs	r2, #7
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	400a      	ands	r2, r1
 8002276:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6919      	ldr	r1, [r3, #16]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	4603      	mov	r3, r0
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4403      	add	r3, r0
 8002290:	409a      	lsls	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d824      	bhi.n	80022ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	3b05      	subs	r3, #5
 80022b4:	221f      	movs	r2, #31
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3b05      	subs	r3, #5
 80022de:	fa00 f203 	lsl.w	r2, r0, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34
 80022ea:	e04c      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b0c      	cmp	r3, #12
 80022f2:	d824      	bhi.n	800233e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	3b23      	subs	r3, #35	; 0x23
 8002306:	221f      	movs	r2, #31
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43da      	mvns	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	400a      	ands	r2, r1
 8002314:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	3b23      	subs	r3, #35	; 0x23
 8002330:	fa00 f203 	lsl.w	r2, r0, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
 800233c:	e023      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	3b41      	subs	r3, #65	; 0x41
 8002350:	221f      	movs	r2, #31
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	400a      	ands	r2, r1
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b41      	subs	r3, #65	; 0x41
 800237a:	fa00 f203 	lsl.w	r2, r0, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_ADC_ConfigChannel+0x250>)
 8002388:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a28      	ldr	r2, [pc, #160]	; (8002430 <HAL_ADC_ConfigChannel+0x254>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d10f      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1d8>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b12      	cmp	r3, #18
 800239a:	d10b      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_ADC_ConfigChannel+0x254>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d12b      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x23a>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_ADC_ConfigChannel+0x258>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x1f4>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b11      	cmp	r3, #17
 80023ce:	d122      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <HAL_ADC_ConfigChannel+0x258>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d111      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_ADC_ConfigChannel+0x25c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a11      	ldr	r2, [pc, #68]	; (800243c <HAL_ADC_ConfigChannel+0x260>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	0c9a      	lsrs	r2, r3, #18
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002408:	e002      	b.n	8002410 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3b01      	subs	r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f9      	bne.n	800240a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40012300 	.word	0x40012300
 8002430:	40012000 	.word	0x40012000
 8002434:	10000012 	.word	0x10000012
 8002438:	20000000 	.word	0x20000000
 800243c:	431bde83 	.word	0x431bde83

08002440 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002448:	4b79      	ldr	r3, [pc, #484]	; (8002630 <ADC_Init+0x1f0>)
 800244a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	431a      	orrs	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	021a      	lsls	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	4a58      	ldr	r2, [pc, #352]	; (8002634 <ADC_Init+0x1f4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d022      	beq.n	800251e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6899      	ldr	r1, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e00f      	b.n	800253e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800252c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800253c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0202 	bic.w	r2, r2, #2
 800254c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e1b      	ldrb	r3, [r3, #24]
 8002558:	005a      	lsls	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800258a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	3b01      	subs	r3, #1
 8002598:	035a      	lsls	r2, r3, #13
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	e007      	b.n	80025b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	051a      	lsls	r2, r3, #20
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f6:	025a      	lsls	r2, r3, #9
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	029a      	lsls	r2, r3, #10
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40012300 	.word	0x40012300
 8002634:	0f000001 	.word	0x0f000001

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002768:	d301      	bcc.n	800276e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276a:	2301      	movs	r3, #1
 800276c:	e00f      	b.n	800278e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <SysTick_Config+0x40>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002776:	210f      	movs	r1, #15
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f7ff ff8e 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <SysTick_Config+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <SysTick_Config+0x40>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff47 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c4:	f7ff ff5c 	bl	8002680 <__NVIC_GetPriorityGrouping>
 80027c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	6978      	ldr	r0, [r7, #20]
 80027d0:	f7ff ff8e 	bl	80026f0 <NVIC_EncodePriority>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff5d 	bl	800269c <__NVIC_SetPriority>
}
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffb0 	bl	8002758 <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e165      	b.n	8002aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 8154 	bne.w	8002ae6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d005      	beq.n	8002856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	2b02      	cmp	r3, #2
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80ae 	beq.w	8002ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a5c      	ldr	r2, [pc, #368]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b5a      	ldr	r3, [pc, #360]	; (8002b04 <HAL_GPIO_Init+0x300>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a58      	ldr	r2, [pc, #352]	; (8002b08 <HAL_GPIO_Init+0x304>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4f      	ldr	r2, [pc, #316]	; (8002b0c <HAL_GPIO_Init+0x308>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d025      	beq.n	8002a1e <HAL_GPIO_Init+0x21a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_GPIO_Init+0x30c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01f      	beq.n	8002a1a <HAL_GPIO_Init+0x216>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4d      	ldr	r2, [pc, #308]	; (8002b14 <HAL_GPIO_Init+0x310>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d019      	beq.n	8002a16 <HAL_GPIO_Init+0x212>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4c      	ldr	r2, [pc, #304]	; (8002b18 <HAL_GPIO_Init+0x314>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_GPIO_Init+0x20e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4b      	ldr	r2, [pc, #300]	; (8002b1c <HAL_GPIO_Init+0x318>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00d      	beq.n	8002a0e <HAL_GPIO_Init+0x20a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4a      	ldr	r2, [pc, #296]	; (8002b20 <HAL_GPIO_Init+0x31c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d007      	beq.n	8002a0a <HAL_GPIO_Init+0x206>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <HAL_GPIO_Init+0x320>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_GPIO_Init+0x202>
 8002a02:	2306      	movs	r3, #6
 8002a04:	e00c      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a06:	2307      	movs	r3, #7
 8002a08:	e00a      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	e008      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e004      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f002 0203 	and.w	r2, r2, #3
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3e:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a62:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a68:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a8c:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a92:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae0:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b0f      	cmp	r3, #15
 8002af0:	f67f ae96 	bls.w	8002820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40021400 	.word	0x40021400
 8002b24:	40021800 	.word	0x40021800
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b8c:	f7ff fab2 	bl	80020f4 <HAL_GetTick>
 8002b90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b92:	e009      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b94:	f7ff faae 	bl	80020f4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba2:	d901      	bls.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e01f      	b.n	8002be8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d1ee      	bne.n	8002b94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bbc:	f7ff fa9a 	bl	80020f4 <HAL_GetTick>
 8002bc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bc2:	e009      	b.n	8002bd8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bc4:	f7ff fa96 	bl	80020f4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd2:	d901      	bls.n	8002bd8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e007      	b.n	8002be8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002be4:	d1ee      	bne.n	8002bc4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	420e0040 	.word	0x420e0040
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	420e0044 	.word	0x420e0044

08002c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0cc      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c14:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d90c      	bls.n	8002c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0b8      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	494d      	ldr	r1, [pc, #308]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d044      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d119      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e067      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cde:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f023 0203 	bic.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4934      	ldr	r1, [pc, #208]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf0:	f7ff fa00 	bl	80020f4 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf8:	f7ff f9fc 	bl	80020f4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e04f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 020c 	and.w	r2, r3, #12
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d1eb      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d20:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d20c      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e032      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4916      	ldr	r1, [pc, #88]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	490e      	ldr	r1, [pc, #56]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d86:	f000 f821 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	490a      	ldr	r1, [pc, #40]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	5ccb      	ldrb	r3, [r1, r3]
 8002d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f960 	bl	800206c <HAL_InitTick>

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023c00 	.word	0x40023c00
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	08007ee8 	.word	0x08007ee8
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000004 	.word	0x20000004

08002dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd0:	b0ae      	sub	sp, #184	; 0xb8
 8002dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df2:	4bcb      	ldr	r3, [pc, #812]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	f200 8206 	bhi.w	800320c <HAL_RCC_GetSysClockFreq+0x440>
 8002e00:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e3d 	.word	0x08002e3d
 8002e0c:	0800320d 	.word	0x0800320d
 8002e10:	0800320d 	.word	0x0800320d
 8002e14:	0800320d 	.word	0x0800320d
 8002e18:	08002e45 	.word	0x08002e45
 8002e1c:	0800320d 	.word	0x0800320d
 8002e20:	0800320d 	.word	0x0800320d
 8002e24:	0800320d 	.word	0x0800320d
 8002e28:	08002e4d 	.word	0x08002e4d
 8002e2c:	0800320d 	.word	0x0800320d
 8002e30:	0800320d 	.word	0x0800320d
 8002e34:	0800320d 	.word	0x0800320d
 8002e38:	0800303d 	.word	0x0800303d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4bb9      	ldr	r3, [pc, #740]	; (8003124 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e42:	e1e7      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e44:	4bb8      	ldr	r3, [pc, #736]	; (8003128 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e4a:	e1e3      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e4c:	4bb4      	ldr	r3, [pc, #720]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e58:	4bb1      	ldr	r3, [pc, #708]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d071      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e64:	4bae      	ldr	r3, [pc, #696]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e70:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	462b      	mov	r3, r5
 8002e8e:	f04f 0000 	mov.w	r0, #0
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	0159      	lsls	r1, r3, #5
 8002e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e9c:	0150      	lsls	r0, r2, #5
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	1a51      	subs	r1, r2, r1
 8002ea6:	6439      	str	r1, [r7, #64]	; 0x40
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002eae:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	018b      	lsls	r3, r1, #6
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	018a      	lsls	r2, r1, #6
 8002eca:	4641      	mov	r1, r8
 8002ecc:	1a51      	subs	r1, r2, r1
 8002ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	00cb      	lsls	r3, r1, #3
 8002ee8:	4641      	mov	r1, r8
 8002eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eee:	4641      	mov	r1, r8
 8002ef0:	00ca      	lsls	r2, r1, #3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4622      	mov	r2, r4
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
 8002efe:	462b      	mov	r3, r5
 8002f00:	460a      	mov	r2, r1
 8002f02:	eb42 0303 	adc.w	r3, r2, r3
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f14:	4629      	mov	r1, r5
 8002f16:	024b      	lsls	r3, r1, #9
 8002f18:	4621      	mov	r1, r4
 8002f1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f1e:	4621      	mov	r1, r4
 8002f20:	024a      	lsls	r2, r1, #9
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f38:	f7fd fea6 	bl	8000c88 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f46:	e067      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f48:	4b75      	ldr	r3, [pc, #468]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f62:	2300      	movs	r3, #0
 8002f64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	f04f 0000 	mov.w	r0, #0
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7c:	0150      	lsls	r0, r2, #5
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4621      	mov	r1, r4
 8002f84:	1a51      	subs	r1, r2, r1
 8002f86:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f88:	4629      	mov	r1, r5
 8002f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	018b      	lsls	r3, r1, #6
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	018a      	lsls	r2, r1, #6
 8002faa:	4641      	mov	r1, r8
 8002fac:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fca:	4692      	mov	sl, r2
 8002fcc:	469b      	mov	fp, r3
 8002fce:	4623      	mov	r3, r4
 8002fd0:	eb1a 0303 	adds.w	r3, sl, r3
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fea:	4629      	mov	r1, r5
 8002fec:	028b      	lsls	r3, r1, #10
 8002fee:	4621      	mov	r1, r4
 8002ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	028a      	lsls	r2, r1, #10
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003000:	2200      	movs	r2, #0
 8003002:	673b      	str	r3, [r7, #112]	; 0x70
 8003004:	677a      	str	r2, [r7, #116]	; 0x74
 8003006:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800300a:	f7fd fe3d 	bl	8000c88 <__aeabi_uldivmod>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4613      	mov	r3, r2
 8003014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800302a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800302e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800303a:	e0eb      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d06b      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCC_GetSysClockFreq+0x354>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	2200      	movs	r2, #0
 800305c:	66bb      	str	r3, [r7, #104]	; 0x68
 800305e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	663b      	str	r3, [r7, #96]	; 0x60
 8003068:	2300      	movs	r3, #0
 800306a:	667b      	str	r3, [r7, #100]	; 0x64
 800306c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003070:	4622      	mov	r2, r4
 8003072:	462b      	mov	r3, r5
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	f04f 0100 	mov.w	r1, #0
 800307c:	0159      	lsls	r1, r3, #5
 800307e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003082:	0150      	lsls	r0, r2, #5
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4621      	mov	r1, r4
 800308a:	1a51      	subs	r1, r2, r1
 800308c:	61b9      	str	r1, [r7, #24]
 800308e:	4629      	mov	r1, r5
 8003090:	eb63 0301 	sbc.w	r3, r3, r1
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030a2:	4659      	mov	r1, fp
 80030a4:	018b      	lsls	r3, r1, #6
 80030a6:	4651      	mov	r1, sl
 80030a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ac:	4651      	mov	r1, sl
 80030ae:	018a      	lsls	r2, r1, #6
 80030b0:	4651      	mov	r1, sl
 80030b2:	ebb2 0801 	subs.w	r8, r2, r1
 80030b6:	4659      	mov	r1, fp
 80030b8:	eb63 0901 	sbc.w	r9, r3, r1
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030d0:	4690      	mov	r8, r2
 80030d2:	4699      	mov	r9, r3
 80030d4:	4623      	mov	r3, r4
 80030d6:	eb18 0303 	adds.w	r3, r8, r3
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	462b      	mov	r3, r5
 80030de:	eb49 0303 	adc.w	r3, r9, r3
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030f0:	4629      	mov	r1, r5
 80030f2:	024b      	lsls	r3, r1, #9
 80030f4:	4621      	mov	r1, r4
 80030f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030fa:	4621      	mov	r1, r4
 80030fc:	024a      	lsls	r2, r1, #9
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003106:	2200      	movs	r2, #0
 8003108:	65bb      	str	r3, [r7, #88]	; 0x58
 800310a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800310c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003110:	f7fd fdba 	bl	8000c88 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4613      	mov	r3, r2
 800311a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800311e:	e065      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x420>
 8003120:	40023800 	.word	0x40023800
 8003124:	00f42400 	.word	0x00f42400
 8003128:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312c:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_RCC_GetSysClockFreq+0x458>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	2200      	movs	r2, #0
 8003134:	4618      	mov	r0, r3
 8003136:	4611      	mov	r1, r2
 8003138:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800313c:	653b      	str	r3, [r7, #80]	; 0x50
 800313e:	2300      	movs	r3, #0
 8003140:	657b      	str	r3, [r7, #84]	; 0x54
 8003142:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003146:	4642      	mov	r2, r8
 8003148:	464b      	mov	r3, r9
 800314a:	f04f 0000 	mov.w	r0, #0
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	0159      	lsls	r1, r3, #5
 8003154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003158:	0150      	lsls	r0, r2, #5
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4641      	mov	r1, r8
 8003160:	1a51      	subs	r1, r2, r1
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	4649      	mov	r1, r9
 8003166:	eb63 0301 	sbc.w	r3, r3, r1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003178:	4659      	mov	r1, fp
 800317a:	018b      	lsls	r3, r1, #6
 800317c:	4651      	mov	r1, sl
 800317e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003182:	4651      	mov	r1, sl
 8003184:	018a      	lsls	r2, r1, #6
 8003186:	4651      	mov	r1, sl
 8003188:	1a54      	subs	r4, r2, r1
 800318a:	4659      	mov	r1, fp
 800318c:	eb63 0501 	sbc.w	r5, r3, r1
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	00eb      	lsls	r3, r5, #3
 800319a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319e:	00e2      	lsls	r2, r4, #3
 80031a0:	4614      	mov	r4, r2
 80031a2:	461d      	mov	r5, r3
 80031a4:	4643      	mov	r3, r8
 80031a6:	18e3      	adds	r3, r4, r3
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	464b      	mov	r3, r9
 80031ac:	eb45 0303 	adc.w	r3, r5, r3
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031be:	4629      	mov	r1, r5
 80031c0:	028b      	lsls	r3, r1, #10
 80031c2:	4621      	mov	r1, r4
 80031c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c8:	4621      	mov	r1, r4
 80031ca:	028a      	lsls	r2, r1, #10
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031d4:	2200      	movs	r2, #0
 80031d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031de:	f7fd fd53 	bl	8000c88 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4613      	mov	r3, r2
 80031e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCC_GetSysClockFreq+0x458>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	0f1b      	lsrs	r3, r3, #28
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80031fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800320a:	e003      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_RCC_GetSysClockFreq+0x45c>)
 800320e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003212:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003218:	4618      	mov	r0, r3
 800321a:	37b8      	adds	r7, #184	; 0xb8
 800321c:	46bd      	mov	sp, r7
 800321e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	00f42400 	.word	0x00f42400

0800322c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e28d      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8083 	beq.w	8003352 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800324c:	4b94      	ldr	r3, [pc, #592]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b04      	cmp	r3, #4
 8003256:	d019      	beq.n	800328c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003258:	4b91      	ldr	r3, [pc, #580]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003260:	2b08      	cmp	r3, #8
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003264:	4b8e      	ldr	r3, [pc, #568]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003270:	d00c      	beq.n	800328c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003272:	4b8b      	ldr	r3, [pc, #556]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d112      	bne.n	80032a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327e:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800328a:	d10b      	bne.n	80032a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	4b84      	ldr	r3, [pc, #528]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d05b      	beq.n	8003350 <HAL_RCC_OscConfig+0x124>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d157      	bne.n	8003350 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e25a      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d106      	bne.n	80032bc <HAL_RCC_OscConfig+0x90>
 80032ae:	4b7c      	ldr	r3, [pc, #496]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a7b      	ldr	r2, [pc, #492]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e01d      	b.n	80032f8 <HAL_RCC_OscConfig+0xcc>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0xb4>
 80032c6:	4b76      	ldr	r3, [pc, #472]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a75      	ldr	r2, [pc, #468]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a72      	ldr	r2, [pc, #456]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0xcc>
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6e      	ldr	r2, [pc, #440]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b6c      	ldr	r3, [pc, #432]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6b      	ldr	r2, [pc, #428]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe fef8 	bl	80020f4 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe fef4 	bl	80020f4 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e21f      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0xdc>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fee4 	bl	80020f4 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe fee0 	bl	80020f4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e20b      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	4b57      	ldr	r3, [pc, #348]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x104>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d06f      	beq.n	800343e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800335e:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b00      	cmp	r3, #0
 8003368:	d017      	beq.n	800339a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800336a:	4b4d      	ldr	r3, [pc, #308]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003372:	2b08      	cmp	r3, #8
 8003374:	d105      	bne.n	8003382 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003376:	4b4a      	ldr	r3, [pc, #296]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00b      	beq.n	800339a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003382:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d11c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338e:	4b44      	ldr	r3, [pc, #272]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d116      	bne.n	80033c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_RCC_OscConfig+0x186>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d001      	beq.n	80033b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e1d3      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b2:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4937      	ldr	r1, [pc, #220]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	e03a      	b.n	800343e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d0:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <HAL_RCC_OscConfig+0x278>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe fe8d 	bl	80020f4 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033de:	f7fe fe89 	bl	80020f4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e1b4      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4925      	ldr	r1, [pc, #148]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]
 8003410:	e015      	b.n	800343e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCC_OscConfig+0x278>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe fe6c 	bl	80020f4 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003420:	f7fe fe68 	bl	80020f4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e193      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003432:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d036      	beq.n	80034b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d016      	beq.n	8003480 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <HAL_RCC_OscConfig+0x27c>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fe fe4c 	bl	80020f4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003460:	f7fe fe48 	bl	80020f4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e173      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x234>
 800347e:	e01b      	b.n	80034b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_OscConfig+0x27c>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe fe35 	bl	80020f4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348c:	e00e      	b.n	80034ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348e:	f7fe fe31 	bl	80020f4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d907      	bls.n	80034ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e15c      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
 80034a0:	40023800 	.word	0x40023800
 80034a4:	42470000 	.word	0x42470000
 80034a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	4b8a      	ldr	r3, [pc, #552]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80034ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ea      	bne.n	800348e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8097 	beq.w	80035f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b83      	ldr	r3, [pc, #524]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	4b7f      	ldr	r3, [pc, #508]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	4a7e      	ldr	r2, [pc, #504]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b7c      	ldr	r3, [pc, #496]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f6:	4b79      	ldr	r3, [pc, #484]	; (80036dc <HAL_RCC_OscConfig+0x4b0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d118      	bne.n	8003534 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x4b0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a75      	ldr	r2, [pc, #468]	; (80036dc <HAL_RCC_OscConfig+0x4b0>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350e:	f7fe fdf1 	bl	80020f4 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003516:	f7fe fded 	bl	80020f4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e118      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <HAL_RCC_OscConfig+0x4b0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x31e>
 800353c:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6713      	str	r3, [r2, #112]	; 0x70
 8003548:	e01c      	b.n	8003584 <HAL_RCC_OscConfig+0x358>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b05      	cmp	r3, #5
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x340>
 8003552:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	6713      	str	r3, [r2, #112]	; 0x70
 800355e:	4b5e      	ldr	r3, [pc, #376]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	4a5d      	ldr	r2, [pc, #372]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6713      	str	r3, [r2, #112]	; 0x70
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0x358>
 800356c:	4b5a      	ldr	r3, [pc, #360]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4a59      	ldr	r2, [pc, #356]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	4b57      	ldr	r3, [pc, #348]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a56      	ldr	r2, [pc, #344]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 800357e:	f023 0304 	bic.w	r3, r3, #4
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d015      	beq.n	80035b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fe fdb2 	bl	80020f4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003592:	e00a      	b.n	80035aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fe fdae 	bl	80020f4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e0d7      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035aa:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ee      	beq.n	8003594 <HAL_RCC_OscConfig+0x368>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fe fd9c 	bl	80020f4 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fe fd98 	bl	80020f4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0c1      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d6:	4b40      	ldr	r3, [pc, #256]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ee      	bne.n	80035c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e8:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	4a3a      	ldr	r2, [pc, #232]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80035ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80ad 	beq.w	8003758 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035fe:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b08      	cmp	r3, #8
 8003608:	d060      	beq.n	80036cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d145      	bne.n	800369e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003612:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <HAL_RCC_OscConfig+0x4b4>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fd6c 	bl	80020f4 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003620:	f7fe fd68 	bl	80020f4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e093      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	019b      	lsls	r3, r3, #6
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	3b01      	subs	r3, #1
 8003658:	041b      	lsls	r3, r3, #16
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	071b      	lsls	r3, r3, #28
 800366a:	491b      	ldr	r1, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x4b4>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fe fd3d 	bl	80020f4 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367e:	f7fe fd39 	bl	80020f4 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e064      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x452>
 800369c:	e05c      	b.n	8003758 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCC_OscConfig+0x4b4>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fd26 	bl	80020f4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe fd22 	bl	80020f4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e04d      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCC_OscConfig+0x4ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x480>
 80036ca:	e045      	b.n	8003758 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e040      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40007000 	.word	0x40007000
 80036e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036e4:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <HAL_RCC_OscConfig+0x538>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d030      	beq.n	8003754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d129      	bne.n	8003754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d122      	bne.n	8003754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003714:	4013      	ands	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800371a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800371c:	4293      	cmp	r3, r2
 800371e:	d119      	bne.n	8003754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	3b01      	subs	r3, #1
 800372e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d10f      	bne.n	8003754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800

08003768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e07b      	b.n	8003872 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378a:	d009      	beq.n	80037a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	61da      	str	r2, [r3, #28]
 8003792:	e005      	b.n	80037a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe f8ce 	bl	800195c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003824:	ea42 0103 	orr.w	r1, r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0104 	and.w	r1, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f003 0210 	and.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003860:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b088      	sub	sp, #32
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_SPI_Transmit+0x22>
 8003898:	2302      	movs	r3, #2
 800389a:	e12d      	b.n	8003af8 <HAL_SPI_Transmit+0x27e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a4:	f7fe fc26 	bl	80020f4 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d002      	beq.n	80038c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038be:	e116      	b.n	8003aee <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Transmit+0x52>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d0:	e10d      	b.n	8003aee <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2203      	movs	r2, #3
 80038d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003918:	d10f      	bne.n	800393a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003928:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003938:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d007      	beq.n	8003958 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003960:	d14f      	bne.n	8003a02 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Transmit+0xf6>
 800396a:	8afb      	ldrh	r3, [r7, #22]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d142      	bne.n	80039f6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	881a      	ldrh	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003994:	e02f      	b.n	80039f6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d112      	bne.n	80039ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	881a      	ldrh	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	1c9a      	adds	r2, r3, #2
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c8:	e015      	b.n	80039f6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ca:	f7fe fb93 	bl	80020f4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d803      	bhi.n	80039e2 <HAL_SPI_Transmit+0x168>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d102      	bne.n	80039e8 <HAL_SPI_Transmit+0x16e>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80039f4:	e07b      	b.n	8003aee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ca      	bne.n	8003996 <HAL_SPI_Transmit+0x11c>
 8003a00:	e050      	b.n	8003aa4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_Transmit+0x196>
 8003a0a:	8afb      	ldrh	r3, [r7, #22]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d144      	bne.n	8003a9a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a36:	e030      	b.n	8003a9a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d113      	bne.n	8003a6e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a6c:	e015      	b.n	8003a9a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6e:	f7fe fb41 	bl	80020f4 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d803      	bhi.n	8003a86 <HAL_SPI_Transmit+0x20c>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_Transmit+0x212>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003a98:	e029      	b.n	8003aee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1c9      	bne.n	8003a38 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	6839      	ldr	r1, [r7, #0]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fbdf 	bl	800426c <SPI_EndRxTxTransaction>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e003      	b.n	8003aee <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d002      	beq.n	8003b26 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
 8003b22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b24:	e0fb      	b.n	8003d1e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2e:	d112      	bne.n	8003b56 <HAL_SPI_Receive+0x56>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10e      	bne.n	8003b56 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f8ef 	bl	8003d30 <HAL_SPI_TransmitReceive>
 8003b52:	4603      	mov	r3, r0
 8003b54:	e0e8      	b.n	8003d28 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_SPI_Receive+0x64>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e0e1      	b.n	8003d28 <HAL_SPI_Receive+0x228>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6c:	f7fe fac2 	bl	80020f4 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_SPI_Receive+0x7e>
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b82:	e0cc      	b.n	8003d1e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2204      	movs	r2, #4
 8003b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bca:	d10f      	bne.n	8003bec <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d007      	beq.n	8003c0a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d16a      	bne.n	8003ce8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c12:	e032      	b.n	8003c7a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d115      	bne.n	8003c4e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f103 020c 	add.w	r2, r3, #12
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c4c:	e015      	b.n	8003c7a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c4e:	f7fe fa51 	bl	80020f4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d803      	bhi.n	8003c66 <HAL_SPI_Receive+0x166>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d102      	bne.n	8003c6c <HAL_SPI_Receive+0x16c>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c78:	e051      	b.n	8003d1e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1c7      	bne.n	8003c14 <HAL_SPI_Receive+0x114>
 8003c84:	e035      	b.n	8003cf2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d113      	bne.n	8003cbc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cba:	e015      	b.n	8003ce8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cbc:	f7fe fa1a 	bl	80020f4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d803      	bhi.n	8003cd4 <HAL_SPI_Receive+0x1d4>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d102      	bne.n	8003cda <HAL_SPI_Receive+0x1da>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ce6:	e01a      	b.n	8003d1e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1c9      	bne.n	8003c86 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fa52 	bl	80041a0 <SPI_EndRxTransaction>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
 8003d14:	e003      	b.n	8003d1e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x26>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e198      	b.n	8004088 <HAL_SPI_TransmitReceive+0x358>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d5e:	f7fe f9c9 	bl	80020f4 <HAL_GetTick>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d74:	887b      	ldrh	r3, [r7, #2]
 8003d76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d00f      	beq.n	8003da0 <HAL_SPI_TransmitReceive+0x70>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d86:	d107      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x68>
 8003d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d003      	beq.n	8003da0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d9e:	e16d      	b.n	800407c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x82>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x82>
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003db8:	e160      	b.n	800407c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d003      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2205      	movs	r2, #5
 8003dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	887a      	ldrh	r2, [r7, #2]
 8003dde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	887a      	ldrh	r2, [r7, #2]
 8003df6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d007      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2a:	d17c      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_TransmitReceive+0x10a>
 8003e34:	8b7b      	ldrh	r3, [r7, #26]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d16a      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	1c9a      	adds	r2, r3, #2
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e5e:	e057      	b.n	8003f10 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x176>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d016      	beq.n	8003ea6 <HAL_SPI_TransmitReceive+0x176>
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d113      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	881a      	ldrh	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	1c9a      	adds	r2, r3, #2
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d119      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x1b8>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d014      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	1c9a      	adds	r2, r3, #2
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ee8:	f7fe f904 	bl	80020f4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d80b      	bhi.n	8003f10 <HAL_SPI_TransmitReceive+0x1e0>
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d007      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003f0e:	e0b5      	b.n	800407c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1a2      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x130>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d19d      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x130>
 8003f24:	e080      	b.n	8004028 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x204>
 8003f2e:	8b7b      	ldrh	r3, [r7, #26]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d16f      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	7812      	ldrb	r2, [r2, #0]
 8003f40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f5a:	e05b      	b.n	8004014 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d11c      	bne.n	8003fa4 <HAL_SPI_TransmitReceive+0x274>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d017      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x274>
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d114      	bne.n	8003fa4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d119      	bne.n	8003fe6 <HAL_SPI_TransmitReceive+0x2b6>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d014      	beq.n	8003fe6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fe6:	f7fe f885 	bl	80020f4 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d803      	bhi.n	8003ffe <HAL_SPI_TransmitReceive+0x2ce>
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d102      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x2d4>
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004012:	e033      	b.n	800407c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d19e      	bne.n	8003f5c <HAL_SPI_TransmitReceive+0x22c>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d199      	bne.n	8003f5c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f91d 	bl	800426c <SPI_EndRxTxTransaction>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d006      	beq.n	8004046 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004044:	e01a      	b.n	800407c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004072:	e003      	b.n	800407c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004084:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004088:	4618      	mov	r0, r3
 800408a:	3730      	adds	r7, #48	; 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040a0:	f7fe f828 	bl	80020f4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040b0:	f7fe f820 	bl	80020f4 <HAL_GetTick>
 80040b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040b6:	4b39      	ldr	r3, [pc, #228]	; (800419c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	015b      	lsls	r3, r3, #5
 80040bc:	0d1b      	lsrs	r3, r3, #20
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c6:	e054      	b.n	8004172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d050      	beq.n	8004172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040d0:	f7fe f810 	bl	80020f4 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d902      	bls.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d13d      	bne.n	8004162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fe:	d111      	bne.n	8004124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004108:	d004      	beq.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004112:	d107      	bne.n	8004124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412c:	d10f      	bne.n	800414e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800414c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e017      	b.n	8004192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3b01      	subs	r3, #1
 8004170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d19b      	bne.n	80040c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000000 	.word	0x20000000

080041a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b4:	d111      	bne.n	80041da <SPI_EndRxTransaction+0x3a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041be:	d004      	beq.n	80041ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c8:	d107      	bne.n	80041da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e2:	d12a      	bne.n	800423a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ec:	d012      	beq.n	8004214 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff ff49 	bl	8004090 <SPI_WaitFlagStateUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d02d      	beq.n	8004260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e026      	b.n	8004262 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	2101      	movs	r1, #1
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff ff36 	bl	8004090 <SPI_WaitFlagStateUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01a      	beq.n	8004260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e013      	b.n	8004262 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	2101      	movs	r1, #1
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7ff ff23 	bl	8004090 <SPI_WaitFlagStateUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e000      	b.n	8004262 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2201      	movs	r2, #1
 8004280:	2102      	movs	r1, #2
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff ff04 	bl	8004090 <SPI_WaitFlagStateUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e032      	b.n	8004304 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800429e:	4b1b      	ldr	r3, [pc, #108]	; (800430c <SPI_EndRxTxTransaction+0xa0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <SPI_EndRxTxTransaction+0xa4>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	0d5b      	lsrs	r3, r3, #21
 80042aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042bc:	d112      	bne.n	80042e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff fee1 	bl	8004090 <SPI_WaitFlagStateUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d016      	beq.n	8004302 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f043 0220 	orr.w	r2, r3, #32
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e00f      	b.n	8004304 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d0f2      	beq.n	80042e4 <SPI_EndRxTxTransaction+0x78>
 80042fe:	e000      	b.n	8004302 <SPI_EndRxTxTransaction+0x96>
        break;
 8004300:	bf00      	nop
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000000 	.word	0x20000000
 8004310:	165e9f81 	.word	0x165e9f81

08004314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e041      	b.n	80043aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd fdae 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3304      	adds	r3, #4
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f000 fa10 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e041      	b.n	8004448 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f839 	bl	8004450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f000 f9c1 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800447e:	2302      	movs	r3, #2
 8004480:	e0ae      	b.n	80045e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	f200 809f 	bhi.w	80045d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044cd 	.word	0x080044cd
 800449c:	080045d1 	.word	0x080045d1
 80044a0:	080045d1 	.word	0x080045d1
 80044a4:	080045d1 	.word	0x080045d1
 80044a8:	0800450d 	.word	0x0800450d
 80044ac:	080045d1 	.word	0x080045d1
 80044b0:	080045d1 	.word	0x080045d1
 80044b4:	080045d1 	.word	0x080045d1
 80044b8:	0800454f 	.word	0x0800454f
 80044bc:	080045d1 	.word	0x080045d1
 80044c0:	080045d1 	.word	0x080045d1
 80044c4:	080045d1 	.word	0x080045d1
 80044c8:	0800458f 	.word	0x0800458f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f9fc 	bl	80048d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0208 	orr.w	r2, r2, #8
 80044e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0204 	bic.w	r2, r2, #4
 80044f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	619a      	str	r2, [r3, #24]
      break;
 800450a:	e064      	b.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fa4c 	bl	80049b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6999      	ldr	r1, [r3, #24]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	619a      	str	r2, [r3, #24]
      break;
 800454c:	e043      	b.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 faa1 	bl	8004a9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0208 	orr.w	r2, r2, #8
 8004568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0204 	bic.w	r2, r2, #4
 8004578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69d9      	ldr	r1, [r3, #28]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	61da      	str	r2, [r3, #28]
      break;
 800458c:	e023      	b.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 faf5 	bl	8004b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69d9      	ldr	r1, [r3, #28]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	021a      	lsls	r2, r3, #8
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	61da      	str	r2, [r3, #28]
      break;
 80045ce:	e002      	b.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
      break;
 80045d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIM_ConfigClockSource+0x1c>
 8004600:	2302      	movs	r3, #2
 8004602:	e0b4      	b.n	800476e <HAL_TIM_ConfigClockSource+0x186>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463c:	d03e      	beq.n	80046bc <HAL_TIM_ConfigClockSource+0xd4>
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004642:	f200 8087 	bhi.w	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464a:	f000 8086 	beq.w	800475a <HAL_TIM_ConfigClockSource+0x172>
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	d87f      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004654:	2b70      	cmp	r3, #112	; 0x70
 8004656:	d01a      	beq.n	800468e <HAL_TIM_ConfigClockSource+0xa6>
 8004658:	2b70      	cmp	r3, #112	; 0x70
 800465a:	d87b      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b60      	cmp	r3, #96	; 0x60
 800465e:	d050      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x11a>
 8004660:	2b60      	cmp	r3, #96	; 0x60
 8004662:	d877      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b50      	cmp	r3, #80	; 0x50
 8004666:	d03c      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004668:	2b50      	cmp	r3, #80	; 0x50
 800466a:	d873      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d058      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x13a>
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d86f      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b30      	cmp	r3, #48	; 0x30
 8004676:	d064      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x15a>
 8004678:	2b30      	cmp	r3, #48	; 0x30
 800467a:	d86b      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b20      	cmp	r3, #32
 800467e:	d060      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x15a>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d867      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d05c      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	2b10      	cmp	r3, #16
 800468a:	d05a      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x15a>
 800468c:	e062      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800469e:	f000 fb41 	bl	8004d24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	609a      	str	r2, [r3, #8]
      break;
 80046ba:	e04f      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046cc:	f000 fb2a 	bl	8004d24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046de:	609a      	str	r2, [r3, #8]
      break;
 80046e0:	e03c      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ee:	461a      	mov	r2, r3
 80046f0:	f000 fa9e 	bl	8004c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2150      	movs	r1, #80	; 0x50
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 faf7 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 8004700:	e02c      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800470e:	461a      	mov	r2, r3
 8004710:	f000 fabd 	bl	8004c8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2160      	movs	r1, #96	; 0x60
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fae7 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 8004720:	e01c      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472e:	461a      	mov	r2, r3
 8004730:	f000 fa7e 	bl	8004c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2140      	movs	r1, #64	; 0x40
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fad7 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 8004740:	e00c      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f000 face 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 8004752:	e003      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      break;
 8004758:	e000      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800475a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800476c:	7bfb      	ldrb	r3, [r7, #15]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a46      	ldr	r2, [pc, #280]	; (80048a4 <TIM_Base_SetConfig+0x12c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d00f      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a43      	ldr	r2, [pc, #268]	; (80048a8 <TIM_Base_SetConfig+0x130>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00b      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a42      	ldr	r2, [pc, #264]	; (80048ac <TIM_Base_SetConfig+0x134>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a41      	ldr	r2, [pc, #260]	; (80048b0 <TIM_Base_SetConfig+0x138>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a40      	ldr	r2, [pc, #256]	; (80048b4 <TIM_Base_SetConfig+0x13c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d108      	bne.n	80047ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a35      	ldr	r2, [pc, #212]	; (80048a4 <TIM_Base_SetConfig+0x12c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d02b      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d8:	d027      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <TIM_Base_SetConfig+0x130>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d023      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a31      	ldr	r2, [pc, #196]	; (80048ac <TIM_Base_SetConfig+0x134>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01f      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a30      	ldr	r2, [pc, #192]	; (80048b0 <TIM_Base_SetConfig+0x138>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01b      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a2f      	ldr	r2, [pc, #188]	; (80048b4 <TIM_Base_SetConfig+0x13c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d017      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2e      	ldr	r2, [pc, #184]	; (80048b8 <TIM_Base_SetConfig+0x140>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a2d      	ldr	r2, [pc, #180]	; (80048bc <TIM_Base_SetConfig+0x144>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00f      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a2c      	ldr	r2, [pc, #176]	; (80048c0 <TIM_Base_SetConfig+0x148>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a2b      	ldr	r2, [pc, #172]	; (80048c4 <TIM_Base_SetConfig+0x14c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a2a      	ldr	r2, [pc, #168]	; (80048c8 <TIM_Base_SetConfig+0x150>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a29      	ldr	r2, [pc, #164]	; (80048cc <TIM_Base_SetConfig+0x154>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d108      	bne.n	800483c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <TIM_Base_SetConfig+0x12c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0xf8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <TIM_Base_SetConfig+0x13c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d103      	bne.n	8004878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d105      	bne.n	8004896 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f023 0201 	bic.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	611a      	str	r2, [r3, #16]
  }
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40010400 	.word	0x40010400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800
 80048c4:	40001800 	.word	0x40001800
 80048c8:	40001c00 	.word	0x40001c00
 80048cc:	40002000 	.word	0x40002000

080048d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f023 0201 	bic.w	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 0302 	bic.w	r3, r3, #2
 8004918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <TIM_OC1_SetConfig+0xd8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_OC1_SetConfig+0x64>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <TIM_OC1_SetConfig+0xdc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0308 	bic.w	r3, r3, #8
 800493a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <TIM_OC1_SetConfig+0xd8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_OC1_SetConfig+0x8e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a14      	ldr	r2, [pc, #80]	; (80049ac <TIM_OC1_SetConfig+0xdc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d111      	bne.n	8004982 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800496c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	621a      	str	r2, [r3, #32]
}
 800499c:	bf00      	nop
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40010400 	.word	0x40010400

080049b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f023 0210 	bic.w	r2, r3, #16
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0320 	bic.w	r3, r3, #32
 80049fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <TIM_OC2_SetConfig+0xe4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_OC2_SetConfig+0x68>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a21      	ldr	r2, [pc, #132]	; (8004a98 <TIM_OC2_SetConfig+0xe8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d10d      	bne.n	8004a34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <TIM_OC2_SetConfig+0xe4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_OC2_SetConfig+0x94>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <TIM_OC2_SetConfig+0xe8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d113      	bne.n	8004a6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40010400 	.word	0x40010400

08004a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <TIM_OC3_SetConfig+0xe0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC3_SetConfig+0x66>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <TIM_OC3_SetConfig+0xe4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10d      	bne.n	8004b1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <TIM_OC3_SetConfig+0xe0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d003      	beq.n	8004b2e <TIM_OC3_SetConfig+0x92>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a15      	ldr	r2, [pc, #84]	; (8004b80 <TIM_OC3_SetConfig+0xe4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d113      	bne.n	8004b56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	621a      	str	r2, [r3, #32]
}
 8004b70:	bf00      	nop
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40010400 	.word	0x40010400

08004b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	031b      	lsls	r3, r3, #12
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a12      	ldr	r2, [pc, #72]	; (8004c28 <TIM_OC4_SetConfig+0xa4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_OC4_SetConfig+0x68>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a11      	ldr	r2, [pc, #68]	; (8004c2c <TIM_OC4_SetConfig+0xa8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d109      	bne.n	8004c00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40010400 	.word	0x40010400

08004c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f023 030a 	bic.w	r3, r3, #10
 8004c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b087      	sub	sp, #28
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f023 0210 	bic.w	r2, r3, #16
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f043 0307 	orr.w	r3, r3, #7
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	021a      	lsls	r2, r3, #8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e05a      	b.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d022      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc8:	d01d      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d018      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1b      	ldr	r2, [pc, #108]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1a      	ldr	r2, [pc, #104]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10c      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40010400 	.word	0x40010400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40001800 	.word	0x40001800

08004e5c <__cvt>:
 8004e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	ec55 4b10 	vmov	r4, r5, d0
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	460e      	mov	r6, r1
 8004e68:	4619      	mov	r1, r3
 8004e6a:	462b      	mov	r3, r5
 8004e6c:	bfbb      	ittet	lt
 8004e6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e72:	461d      	movlt	r5, r3
 8004e74:	2300      	movge	r3, #0
 8004e76:	232d      	movlt	r3, #45	; 0x2d
 8004e78:	700b      	strb	r3, [r1, #0]
 8004e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e80:	4691      	mov	r9, r2
 8004e82:	f023 0820 	bic.w	r8, r3, #32
 8004e86:	bfbc      	itt	lt
 8004e88:	4622      	movlt	r2, r4
 8004e8a:	4614      	movlt	r4, r2
 8004e8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e90:	d005      	beq.n	8004e9e <__cvt+0x42>
 8004e92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e96:	d100      	bne.n	8004e9a <__cvt+0x3e>
 8004e98:	3601      	adds	r6, #1
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	e000      	b.n	8004ea0 <__cvt+0x44>
 8004e9e:	2103      	movs	r1, #3
 8004ea0:	ab03      	add	r3, sp, #12
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	ab02      	add	r3, sp, #8
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	ec45 4b10 	vmov	d0, r4, r5
 8004eac:	4653      	mov	r3, sl
 8004eae:	4632      	mov	r2, r6
 8004eb0:	f000 fe4a 	bl	8005b48 <_dtoa_r>
 8004eb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004eb8:	4607      	mov	r7, r0
 8004eba:	d102      	bne.n	8004ec2 <__cvt+0x66>
 8004ebc:	f019 0f01 	tst.w	r9, #1
 8004ec0:	d022      	beq.n	8004f08 <__cvt+0xac>
 8004ec2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ec6:	eb07 0906 	add.w	r9, r7, r6
 8004eca:	d110      	bne.n	8004eee <__cvt+0x92>
 8004ecc:	783b      	ldrb	r3, [r7, #0]
 8004ece:	2b30      	cmp	r3, #48	; 0x30
 8004ed0:	d10a      	bne.n	8004ee8 <__cvt+0x8c>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	4629      	mov	r1, r5
 8004eda:	f7fb fe15 	bl	8000b08 <__aeabi_dcmpeq>
 8004ede:	b918      	cbnz	r0, 8004ee8 <__cvt+0x8c>
 8004ee0:	f1c6 0601 	rsb	r6, r6, #1
 8004ee4:	f8ca 6000 	str.w	r6, [sl]
 8004ee8:	f8da 3000 	ldr.w	r3, [sl]
 8004eec:	4499      	add	r9, r3
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	f7fb fe07 	bl	8000b08 <__aeabi_dcmpeq>
 8004efa:	b108      	cbz	r0, 8004f00 <__cvt+0xa4>
 8004efc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f00:	2230      	movs	r2, #48	; 0x30
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	454b      	cmp	r3, r9
 8004f06:	d307      	bcc.n	8004f18 <__cvt+0xbc>
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f0c:	1bdb      	subs	r3, r3, r7
 8004f0e:	4638      	mov	r0, r7
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	b004      	add	sp, #16
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	1c59      	adds	r1, r3, #1
 8004f1a:	9103      	str	r1, [sp, #12]
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e7f0      	b.n	8004f02 <__cvt+0xa6>

08004f20 <__exponent>:
 8004f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f22:	4603      	mov	r3, r0
 8004f24:	2900      	cmp	r1, #0
 8004f26:	bfb8      	it	lt
 8004f28:	4249      	neglt	r1, r1
 8004f2a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f2e:	bfb4      	ite	lt
 8004f30:	222d      	movlt	r2, #45	; 0x2d
 8004f32:	222b      	movge	r2, #43	; 0x2b
 8004f34:	2909      	cmp	r1, #9
 8004f36:	7042      	strb	r2, [r0, #1]
 8004f38:	dd2a      	ble.n	8004f90 <__exponent+0x70>
 8004f3a:	f10d 0207 	add.w	r2, sp, #7
 8004f3e:	4617      	mov	r7, r2
 8004f40:	260a      	movs	r6, #10
 8004f42:	4694      	mov	ip, r2
 8004f44:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f48:	fb06 1415 	mls	r4, r6, r5, r1
 8004f4c:	3430      	adds	r4, #48	; 0x30
 8004f4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f52:	460c      	mov	r4, r1
 8004f54:	2c63      	cmp	r4, #99	; 0x63
 8004f56:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	dcf1      	bgt.n	8004f42 <__exponent+0x22>
 8004f5e:	3130      	adds	r1, #48	; 0x30
 8004f60:	f1ac 0402 	sub.w	r4, ip, #2
 8004f64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f68:	1c41      	adds	r1, r0, #1
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	42ba      	cmp	r2, r7
 8004f6e:	d30a      	bcc.n	8004f86 <__exponent+0x66>
 8004f70:	f10d 0209 	add.w	r2, sp, #9
 8004f74:	eba2 020c 	sub.w	r2, r2, ip
 8004f78:	42bc      	cmp	r4, r7
 8004f7a:	bf88      	it	hi
 8004f7c:	2200      	movhi	r2, #0
 8004f7e:	4413      	add	r3, r2
 8004f80:	1a18      	subs	r0, r3, r0
 8004f82:	b003      	add	sp, #12
 8004f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f8e:	e7ed      	b.n	8004f6c <__exponent+0x4c>
 8004f90:	2330      	movs	r3, #48	; 0x30
 8004f92:	3130      	adds	r1, #48	; 0x30
 8004f94:	7083      	strb	r3, [r0, #2]
 8004f96:	70c1      	strb	r1, [r0, #3]
 8004f98:	1d03      	adds	r3, r0, #4
 8004f9a:	e7f1      	b.n	8004f80 <__exponent+0x60>

08004f9c <_printf_float>:
 8004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa0:	ed2d 8b02 	vpush	{d8}
 8004fa4:	b08d      	sub	sp, #52	; 0x34
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fac:	4616      	mov	r6, r2
 8004fae:	461f      	mov	r7, r3
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	f000 fcc7 	bl	8005944 <_localeconv_r>
 8004fb6:	f8d0 a000 	ldr.w	sl, [r0]
 8004fba:	4650      	mov	r0, sl
 8004fbc:	f7fb f978 	bl	80002b0 <strlen>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	9305      	str	r3, [sp, #20]
 8004fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fd0:	3307      	adds	r3, #7
 8004fd2:	f023 0307 	bic.w	r3, r3, #7
 8004fd6:	f103 0208 	add.w	r2, r3, #8
 8004fda:	f8c8 2000 	str.w	r2, [r8]
 8004fde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fec:	ee08 0a10 	vmov	s16, r0
 8004ff0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004ff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff8:	4b9e      	ldr	r3, [pc, #632]	; (8005274 <_printf_float+0x2d8>)
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffe:	f7fb fdb5 	bl	8000b6c <__aeabi_dcmpun>
 8005002:	bb88      	cbnz	r0, 8005068 <_printf_float+0xcc>
 8005004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005008:	4b9a      	ldr	r3, [pc, #616]	; (8005274 <_printf_float+0x2d8>)
 800500a:	f04f 32ff 	mov.w	r2, #4294967295
 800500e:	f7fb fd8f 	bl	8000b30 <__aeabi_dcmple>
 8005012:	bb48      	cbnz	r0, 8005068 <_printf_float+0xcc>
 8005014:	2200      	movs	r2, #0
 8005016:	2300      	movs	r3, #0
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	f7fb fd7e 	bl	8000b1c <__aeabi_dcmplt>
 8005020:	b110      	cbz	r0, 8005028 <_printf_float+0x8c>
 8005022:	232d      	movs	r3, #45	; 0x2d
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005028:	4a93      	ldr	r2, [pc, #588]	; (8005278 <_printf_float+0x2dc>)
 800502a:	4b94      	ldr	r3, [pc, #592]	; (800527c <_printf_float+0x2e0>)
 800502c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005030:	bf94      	ite	ls
 8005032:	4690      	movls	r8, r2
 8005034:	4698      	movhi	r8, r3
 8005036:	2303      	movs	r3, #3
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	9b05      	ldr	r3, [sp, #20]
 800503c:	f023 0304 	bic.w	r3, r3, #4
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	f04f 0900 	mov.w	r9, #0
 8005046:	9700      	str	r7, [sp, #0]
 8005048:	4633      	mov	r3, r6
 800504a:	aa0b      	add	r2, sp, #44	; 0x2c
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f000 f9da 	bl	8005408 <_printf_common>
 8005054:	3001      	adds	r0, #1
 8005056:	f040 8090 	bne.w	800517a <_printf_float+0x1de>
 800505a:	f04f 30ff 	mov.w	r0, #4294967295
 800505e:	b00d      	add	sp, #52	; 0x34
 8005060:	ecbd 8b02 	vpop	{d8}
 8005064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	4640      	mov	r0, r8
 800506e:	4649      	mov	r1, r9
 8005070:	f7fb fd7c 	bl	8000b6c <__aeabi_dcmpun>
 8005074:	b140      	cbz	r0, 8005088 <_printf_float+0xec>
 8005076:	464b      	mov	r3, r9
 8005078:	2b00      	cmp	r3, #0
 800507a:	bfbc      	itt	lt
 800507c:	232d      	movlt	r3, #45	; 0x2d
 800507e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005082:	4a7f      	ldr	r2, [pc, #508]	; (8005280 <_printf_float+0x2e4>)
 8005084:	4b7f      	ldr	r3, [pc, #508]	; (8005284 <_printf_float+0x2e8>)
 8005086:	e7d1      	b.n	800502c <_printf_float+0x90>
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800508e:	9206      	str	r2, [sp, #24]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	d13f      	bne.n	8005114 <_printf_float+0x178>
 8005094:	2306      	movs	r3, #6
 8005096:	6063      	str	r3, [r4, #4]
 8005098:	9b05      	ldr	r3, [sp, #20]
 800509a:	6861      	ldr	r1, [r4, #4]
 800509c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050a0:	2300      	movs	r3, #0
 80050a2:	9303      	str	r3, [sp, #12]
 80050a4:	ab0a      	add	r3, sp, #40	; 0x28
 80050a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050aa:	ab09      	add	r3, sp, #36	; 0x24
 80050ac:	ec49 8b10 	vmov	d0, r8, r9
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6022      	str	r2, [r4, #0]
 80050b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050b8:	4628      	mov	r0, r5
 80050ba:	f7ff fecf 	bl	8004e5c <__cvt>
 80050be:	9b06      	ldr	r3, [sp, #24]
 80050c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050c2:	2b47      	cmp	r3, #71	; 0x47
 80050c4:	4680      	mov	r8, r0
 80050c6:	d108      	bne.n	80050da <_printf_float+0x13e>
 80050c8:	1cc8      	adds	r0, r1, #3
 80050ca:	db02      	blt.n	80050d2 <_printf_float+0x136>
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	4299      	cmp	r1, r3
 80050d0:	dd41      	ble.n	8005156 <_printf_float+0x1ba>
 80050d2:	f1ab 0302 	sub.w	r3, fp, #2
 80050d6:	fa5f fb83 	uxtb.w	fp, r3
 80050da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050de:	d820      	bhi.n	8005122 <_printf_float+0x186>
 80050e0:	3901      	subs	r1, #1
 80050e2:	465a      	mov	r2, fp
 80050e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050e8:	9109      	str	r1, [sp, #36]	; 0x24
 80050ea:	f7ff ff19 	bl	8004f20 <__exponent>
 80050ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050f0:	1813      	adds	r3, r2, r0
 80050f2:	2a01      	cmp	r2, #1
 80050f4:	4681      	mov	r9, r0
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	dc02      	bgt.n	8005100 <_printf_float+0x164>
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	07d2      	lsls	r2, r2, #31
 80050fe:	d501      	bpl.n	8005104 <_printf_float+0x168>
 8005100:	3301      	adds	r3, #1
 8005102:	6123      	str	r3, [r4, #16]
 8005104:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005108:	2b00      	cmp	r3, #0
 800510a:	d09c      	beq.n	8005046 <_printf_float+0xaa>
 800510c:	232d      	movs	r3, #45	; 0x2d
 800510e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005112:	e798      	b.n	8005046 <_printf_float+0xaa>
 8005114:	9a06      	ldr	r2, [sp, #24]
 8005116:	2a47      	cmp	r2, #71	; 0x47
 8005118:	d1be      	bne.n	8005098 <_printf_float+0xfc>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1bc      	bne.n	8005098 <_printf_float+0xfc>
 800511e:	2301      	movs	r3, #1
 8005120:	e7b9      	b.n	8005096 <_printf_float+0xfa>
 8005122:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005126:	d118      	bne.n	800515a <_printf_float+0x1be>
 8005128:	2900      	cmp	r1, #0
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	dd0b      	ble.n	8005146 <_printf_float+0x1aa>
 800512e:	6121      	str	r1, [r4, #16]
 8005130:	b913      	cbnz	r3, 8005138 <_printf_float+0x19c>
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	07d0      	lsls	r0, r2, #31
 8005136:	d502      	bpl.n	800513e <_printf_float+0x1a2>
 8005138:	3301      	adds	r3, #1
 800513a:	440b      	add	r3, r1
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005140:	f04f 0900 	mov.w	r9, #0
 8005144:	e7de      	b.n	8005104 <_printf_float+0x168>
 8005146:	b913      	cbnz	r3, 800514e <_printf_float+0x1b2>
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	07d2      	lsls	r2, r2, #31
 800514c:	d501      	bpl.n	8005152 <_printf_float+0x1b6>
 800514e:	3302      	adds	r3, #2
 8005150:	e7f4      	b.n	800513c <_printf_float+0x1a0>
 8005152:	2301      	movs	r3, #1
 8005154:	e7f2      	b.n	800513c <_printf_float+0x1a0>
 8005156:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800515a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515c:	4299      	cmp	r1, r3
 800515e:	db05      	blt.n	800516c <_printf_float+0x1d0>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	6121      	str	r1, [r4, #16]
 8005164:	07d8      	lsls	r0, r3, #31
 8005166:	d5ea      	bpl.n	800513e <_printf_float+0x1a2>
 8005168:	1c4b      	adds	r3, r1, #1
 800516a:	e7e7      	b.n	800513c <_printf_float+0x1a0>
 800516c:	2900      	cmp	r1, #0
 800516e:	bfd4      	ite	le
 8005170:	f1c1 0202 	rsble	r2, r1, #2
 8005174:	2201      	movgt	r2, #1
 8005176:	4413      	add	r3, r2
 8005178:	e7e0      	b.n	800513c <_printf_float+0x1a0>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	055a      	lsls	r2, r3, #21
 800517e:	d407      	bmi.n	8005190 <_printf_float+0x1f4>
 8005180:	6923      	ldr	r3, [r4, #16]
 8005182:	4642      	mov	r2, r8
 8005184:	4631      	mov	r1, r6
 8005186:	4628      	mov	r0, r5
 8005188:	47b8      	blx	r7
 800518a:	3001      	adds	r0, #1
 800518c:	d12c      	bne.n	80051e8 <_printf_float+0x24c>
 800518e:	e764      	b.n	800505a <_printf_float+0xbe>
 8005190:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005194:	f240 80e0 	bls.w	8005358 <_printf_float+0x3bc>
 8005198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800519c:	2200      	movs	r2, #0
 800519e:	2300      	movs	r3, #0
 80051a0:	f7fb fcb2 	bl	8000b08 <__aeabi_dcmpeq>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d034      	beq.n	8005212 <_printf_float+0x276>
 80051a8:	4a37      	ldr	r2, [pc, #220]	; (8005288 <_printf_float+0x2ec>)
 80051aa:	2301      	movs	r3, #1
 80051ac:	4631      	mov	r1, r6
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	f43f af51 	beq.w	800505a <_printf_float+0xbe>
 80051b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051bc:	429a      	cmp	r2, r3
 80051be:	db02      	blt.n	80051c6 <_printf_float+0x22a>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	07d8      	lsls	r0, r3, #31
 80051c4:	d510      	bpl.n	80051e8 <_printf_float+0x24c>
 80051c6:	ee18 3a10 	vmov	r3, s16
 80051ca:	4652      	mov	r2, sl
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f af41 	beq.w	800505a <_printf_float+0xbe>
 80051d8:	f04f 0800 	mov.w	r8, #0
 80051dc:	f104 091a 	add.w	r9, r4, #26
 80051e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e2:	3b01      	subs	r3, #1
 80051e4:	4543      	cmp	r3, r8
 80051e6:	dc09      	bgt.n	80051fc <_printf_float+0x260>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	079b      	lsls	r3, r3, #30
 80051ec:	f100 8107 	bmi.w	80053fe <_printf_float+0x462>
 80051f0:	68e0      	ldr	r0, [r4, #12]
 80051f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f4:	4298      	cmp	r0, r3
 80051f6:	bfb8      	it	lt
 80051f8:	4618      	movlt	r0, r3
 80051fa:	e730      	b.n	800505e <_printf_float+0xc2>
 80051fc:	2301      	movs	r3, #1
 80051fe:	464a      	mov	r2, r9
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	f43f af27 	beq.w	800505a <_printf_float+0xbe>
 800520c:	f108 0801 	add.w	r8, r8, #1
 8005210:	e7e6      	b.n	80051e0 <_printf_float+0x244>
 8005212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	dc39      	bgt.n	800528c <_printf_float+0x2f0>
 8005218:	4a1b      	ldr	r2, [pc, #108]	; (8005288 <_printf_float+0x2ec>)
 800521a:	2301      	movs	r3, #1
 800521c:	4631      	mov	r1, r6
 800521e:	4628      	mov	r0, r5
 8005220:	47b8      	blx	r7
 8005222:	3001      	adds	r0, #1
 8005224:	f43f af19 	beq.w	800505a <_printf_float+0xbe>
 8005228:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800522c:	4313      	orrs	r3, r2
 800522e:	d102      	bne.n	8005236 <_printf_float+0x29a>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	07d9      	lsls	r1, r3, #31
 8005234:	d5d8      	bpl.n	80051e8 <_printf_float+0x24c>
 8005236:	ee18 3a10 	vmov	r3, s16
 800523a:	4652      	mov	r2, sl
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	f43f af09 	beq.w	800505a <_printf_float+0xbe>
 8005248:	f04f 0900 	mov.w	r9, #0
 800524c:	f104 0a1a 	add.w	sl, r4, #26
 8005250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005252:	425b      	negs	r3, r3
 8005254:	454b      	cmp	r3, r9
 8005256:	dc01      	bgt.n	800525c <_printf_float+0x2c0>
 8005258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525a:	e792      	b.n	8005182 <_printf_float+0x1e6>
 800525c:	2301      	movs	r3, #1
 800525e:	4652      	mov	r2, sl
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f aef7 	beq.w	800505a <_printf_float+0xbe>
 800526c:	f109 0901 	add.w	r9, r9, #1
 8005270:	e7ee      	b.n	8005250 <_printf_float+0x2b4>
 8005272:	bf00      	nop
 8005274:	7fefffff 	.word	0x7fefffff
 8005278:	08007ef8 	.word	0x08007ef8
 800527c:	08007efc 	.word	0x08007efc
 8005280:	08007f00 	.word	0x08007f00
 8005284:	08007f04 	.word	0x08007f04
 8005288:	08007f08 	.word	0x08007f08
 800528c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800528e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005290:	429a      	cmp	r2, r3
 8005292:	bfa8      	it	ge
 8005294:	461a      	movge	r2, r3
 8005296:	2a00      	cmp	r2, #0
 8005298:	4691      	mov	r9, r2
 800529a:	dc37      	bgt.n	800530c <_printf_float+0x370>
 800529c:	f04f 0b00 	mov.w	fp, #0
 80052a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a4:	f104 021a 	add.w	r2, r4, #26
 80052a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052aa:	9305      	str	r3, [sp, #20]
 80052ac:	eba3 0309 	sub.w	r3, r3, r9
 80052b0:	455b      	cmp	r3, fp
 80052b2:	dc33      	bgt.n	800531c <_printf_float+0x380>
 80052b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052b8:	429a      	cmp	r2, r3
 80052ba:	db3b      	blt.n	8005334 <_printf_float+0x398>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	07da      	lsls	r2, r3, #31
 80052c0:	d438      	bmi.n	8005334 <_printf_float+0x398>
 80052c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80052c6:	eba2 0903 	sub.w	r9, r2, r3
 80052ca:	9b05      	ldr	r3, [sp, #20]
 80052cc:	1ad2      	subs	r2, r2, r3
 80052ce:	4591      	cmp	r9, r2
 80052d0:	bfa8      	it	ge
 80052d2:	4691      	movge	r9, r2
 80052d4:	f1b9 0f00 	cmp.w	r9, #0
 80052d8:	dc35      	bgt.n	8005346 <_printf_float+0x3aa>
 80052da:	f04f 0800 	mov.w	r8, #0
 80052de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052e2:	f104 0a1a 	add.w	sl, r4, #26
 80052e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	eba3 0309 	sub.w	r3, r3, r9
 80052f0:	4543      	cmp	r3, r8
 80052f2:	f77f af79 	ble.w	80051e8 <_printf_float+0x24c>
 80052f6:	2301      	movs	r3, #1
 80052f8:	4652      	mov	r2, sl
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	f43f aeaa 	beq.w	800505a <_printf_float+0xbe>
 8005306:	f108 0801 	add.w	r8, r8, #1
 800530a:	e7ec      	b.n	80052e6 <_printf_float+0x34a>
 800530c:	4613      	mov	r3, r2
 800530e:	4631      	mov	r1, r6
 8005310:	4642      	mov	r2, r8
 8005312:	4628      	mov	r0, r5
 8005314:	47b8      	blx	r7
 8005316:	3001      	adds	r0, #1
 8005318:	d1c0      	bne.n	800529c <_printf_float+0x300>
 800531a:	e69e      	b.n	800505a <_printf_float+0xbe>
 800531c:	2301      	movs	r3, #1
 800531e:	4631      	mov	r1, r6
 8005320:	4628      	mov	r0, r5
 8005322:	9205      	str	r2, [sp, #20]
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f ae97 	beq.w	800505a <_printf_float+0xbe>
 800532c:	9a05      	ldr	r2, [sp, #20]
 800532e:	f10b 0b01 	add.w	fp, fp, #1
 8005332:	e7b9      	b.n	80052a8 <_printf_float+0x30c>
 8005334:	ee18 3a10 	vmov	r3, s16
 8005338:	4652      	mov	r2, sl
 800533a:	4631      	mov	r1, r6
 800533c:	4628      	mov	r0, r5
 800533e:	47b8      	blx	r7
 8005340:	3001      	adds	r0, #1
 8005342:	d1be      	bne.n	80052c2 <_printf_float+0x326>
 8005344:	e689      	b.n	800505a <_printf_float+0xbe>
 8005346:	9a05      	ldr	r2, [sp, #20]
 8005348:	464b      	mov	r3, r9
 800534a:	4442      	add	r2, r8
 800534c:	4631      	mov	r1, r6
 800534e:	4628      	mov	r0, r5
 8005350:	47b8      	blx	r7
 8005352:	3001      	adds	r0, #1
 8005354:	d1c1      	bne.n	80052da <_printf_float+0x33e>
 8005356:	e680      	b.n	800505a <_printf_float+0xbe>
 8005358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800535a:	2a01      	cmp	r2, #1
 800535c:	dc01      	bgt.n	8005362 <_printf_float+0x3c6>
 800535e:	07db      	lsls	r3, r3, #31
 8005360:	d53a      	bpl.n	80053d8 <_printf_float+0x43c>
 8005362:	2301      	movs	r3, #1
 8005364:	4642      	mov	r2, r8
 8005366:	4631      	mov	r1, r6
 8005368:	4628      	mov	r0, r5
 800536a:	47b8      	blx	r7
 800536c:	3001      	adds	r0, #1
 800536e:	f43f ae74 	beq.w	800505a <_printf_float+0xbe>
 8005372:	ee18 3a10 	vmov	r3, s16
 8005376:	4652      	mov	r2, sl
 8005378:	4631      	mov	r1, r6
 800537a:	4628      	mov	r0, r5
 800537c:	47b8      	blx	r7
 800537e:	3001      	adds	r0, #1
 8005380:	f43f ae6b 	beq.w	800505a <_printf_float+0xbe>
 8005384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005388:	2200      	movs	r2, #0
 800538a:	2300      	movs	r3, #0
 800538c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005390:	f7fb fbba 	bl	8000b08 <__aeabi_dcmpeq>
 8005394:	b9d8      	cbnz	r0, 80053ce <_printf_float+0x432>
 8005396:	f10a 33ff 	add.w	r3, sl, #4294967295
 800539a:	f108 0201 	add.w	r2, r8, #1
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	d10e      	bne.n	80053c6 <_printf_float+0x42a>
 80053a8:	e657      	b.n	800505a <_printf_float+0xbe>
 80053aa:	2301      	movs	r3, #1
 80053ac:	4652      	mov	r2, sl
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	f43f ae50 	beq.w	800505a <_printf_float+0xbe>
 80053ba:	f108 0801 	add.w	r8, r8, #1
 80053be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c0:	3b01      	subs	r3, #1
 80053c2:	4543      	cmp	r3, r8
 80053c4:	dcf1      	bgt.n	80053aa <_printf_float+0x40e>
 80053c6:	464b      	mov	r3, r9
 80053c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053cc:	e6da      	b.n	8005184 <_printf_float+0x1e8>
 80053ce:	f04f 0800 	mov.w	r8, #0
 80053d2:	f104 0a1a 	add.w	sl, r4, #26
 80053d6:	e7f2      	b.n	80053be <_printf_float+0x422>
 80053d8:	2301      	movs	r3, #1
 80053da:	4642      	mov	r2, r8
 80053dc:	e7df      	b.n	800539e <_printf_float+0x402>
 80053de:	2301      	movs	r3, #1
 80053e0:	464a      	mov	r2, r9
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	f43f ae36 	beq.w	800505a <_printf_float+0xbe>
 80053ee:	f108 0801 	add.w	r8, r8, #1
 80053f2:	68e3      	ldr	r3, [r4, #12]
 80053f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053f6:	1a5b      	subs	r3, r3, r1
 80053f8:	4543      	cmp	r3, r8
 80053fa:	dcf0      	bgt.n	80053de <_printf_float+0x442>
 80053fc:	e6f8      	b.n	80051f0 <_printf_float+0x254>
 80053fe:	f04f 0800 	mov.w	r8, #0
 8005402:	f104 0919 	add.w	r9, r4, #25
 8005406:	e7f4      	b.n	80053f2 <_printf_float+0x456>

08005408 <_printf_common>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	4616      	mov	r6, r2
 800540e:	4699      	mov	r9, r3
 8005410:	688a      	ldr	r2, [r1, #8]
 8005412:	690b      	ldr	r3, [r1, #16]
 8005414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005418:	4293      	cmp	r3, r2
 800541a:	bfb8      	it	lt
 800541c:	4613      	movlt	r3, r2
 800541e:	6033      	str	r3, [r6, #0]
 8005420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005424:	4607      	mov	r7, r0
 8005426:	460c      	mov	r4, r1
 8005428:	b10a      	cbz	r2, 800542e <_printf_common+0x26>
 800542a:	3301      	adds	r3, #1
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	0699      	lsls	r1, r3, #26
 8005432:	bf42      	ittt	mi
 8005434:	6833      	ldrmi	r3, [r6, #0]
 8005436:	3302      	addmi	r3, #2
 8005438:	6033      	strmi	r3, [r6, #0]
 800543a:	6825      	ldr	r5, [r4, #0]
 800543c:	f015 0506 	ands.w	r5, r5, #6
 8005440:	d106      	bne.n	8005450 <_printf_common+0x48>
 8005442:	f104 0a19 	add.w	sl, r4, #25
 8005446:	68e3      	ldr	r3, [r4, #12]
 8005448:	6832      	ldr	r2, [r6, #0]
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	42ab      	cmp	r3, r5
 800544e:	dc26      	bgt.n	800549e <_printf_common+0x96>
 8005450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005454:	1e13      	subs	r3, r2, #0
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	bf18      	it	ne
 800545a:	2301      	movne	r3, #1
 800545c:	0692      	lsls	r2, r2, #26
 800545e:	d42b      	bmi.n	80054b8 <_printf_common+0xb0>
 8005460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005464:	4649      	mov	r1, r9
 8005466:	4638      	mov	r0, r7
 8005468:	47c0      	blx	r8
 800546a:	3001      	adds	r0, #1
 800546c:	d01e      	beq.n	80054ac <_printf_common+0xa4>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	6922      	ldr	r2, [r4, #16]
 8005472:	f003 0306 	and.w	r3, r3, #6
 8005476:	2b04      	cmp	r3, #4
 8005478:	bf02      	ittt	eq
 800547a:	68e5      	ldreq	r5, [r4, #12]
 800547c:	6833      	ldreq	r3, [r6, #0]
 800547e:	1aed      	subeq	r5, r5, r3
 8005480:	68a3      	ldr	r3, [r4, #8]
 8005482:	bf0c      	ite	eq
 8005484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005488:	2500      	movne	r5, #0
 800548a:	4293      	cmp	r3, r2
 800548c:	bfc4      	itt	gt
 800548e:	1a9b      	subgt	r3, r3, r2
 8005490:	18ed      	addgt	r5, r5, r3
 8005492:	2600      	movs	r6, #0
 8005494:	341a      	adds	r4, #26
 8005496:	42b5      	cmp	r5, r6
 8005498:	d11a      	bne.n	80054d0 <_printf_common+0xc8>
 800549a:	2000      	movs	r0, #0
 800549c:	e008      	b.n	80054b0 <_printf_common+0xa8>
 800549e:	2301      	movs	r3, #1
 80054a0:	4652      	mov	r2, sl
 80054a2:	4649      	mov	r1, r9
 80054a4:	4638      	mov	r0, r7
 80054a6:	47c0      	blx	r8
 80054a8:	3001      	adds	r0, #1
 80054aa:	d103      	bne.n	80054b4 <_printf_common+0xac>
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b4:	3501      	adds	r5, #1
 80054b6:	e7c6      	b.n	8005446 <_printf_common+0x3e>
 80054b8:	18e1      	adds	r1, r4, r3
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	2030      	movs	r0, #48	; 0x30
 80054be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054c2:	4422      	add	r2, r4
 80054c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054cc:	3302      	adds	r3, #2
 80054ce:	e7c7      	b.n	8005460 <_printf_common+0x58>
 80054d0:	2301      	movs	r3, #1
 80054d2:	4622      	mov	r2, r4
 80054d4:	4649      	mov	r1, r9
 80054d6:	4638      	mov	r0, r7
 80054d8:	47c0      	blx	r8
 80054da:	3001      	adds	r0, #1
 80054dc:	d0e6      	beq.n	80054ac <_printf_common+0xa4>
 80054de:	3601      	adds	r6, #1
 80054e0:	e7d9      	b.n	8005496 <_printf_common+0x8e>
	...

080054e4 <_printf_i>:
 80054e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	7e0f      	ldrb	r7, [r1, #24]
 80054ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054ec:	2f78      	cmp	r7, #120	; 0x78
 80054ee:	4691      	mov	r9, r2
 80054f0:	4680      	mov	r8, r0
 80054f2:	460c      	mov	r4, r1
 80054f4:	469a      	mov	sl, r3
 80054f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054fa:	d807      	bhi.n	800550c <_printf_i+0x28>
 80054fc:	2f62      	cmp	r7, #98	; 0x62
 80054fe:	d80a      	bhi.n	8005516 <_printf_i+0x32>
 8005500:	2f00      	cmp	r7, #0
 8005502:	f000 80d4 	beq.w	80056ae <_printf_i+0x1ca>
 8005506:	2f58      	cmp	r7, #88	; 0x58
 8005508:	f000 80c0 	beq.w	800568c <_printf_i+0x1a8>
 800550c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005514:	e03a      	b.n	800558c <_printf_i+0xa8>
 8005516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800551a:	2b15      	cmp	r3, #21
 800551c:	d8f6      	bhi.n	800550c <_printf_i+0x28>
 800551e:	a101      	add	r1, pc, #4	; (adr r1, 8005524 <_printf_i+0x40>)
 8005520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005524:	0800557d 	.word	0x0800557d
 8005528:	08005591 	.word	0x08005591
 800552c:	0800550d 	.word	0x0800550d
 8005530:	0800550d 	.word	0x0800550d
 8005534:	0800550d 	.word	0x0800550d
 8005538:	0800550d 	.word	0x0800550d
 800553c:	08005591 	.word	0x08005591
 8005540:	0800550d 	.word	0x0800550d
 8005544:	0800550d 	.word	0x0800550d
 8005548:	0800550d 	.word	0x0800550d
 800554c:	0800550d 	.word	0x0800550d
 8005550:	08005695 	.word	0x08005695
 8005554:	080055bd 	.word	0x080055bd
 8005558:	0800564f 	.word	0x0800564f
 800555c:	0800550d 	.word	0x0800550d
 8005560:	0800550d 	.word	0x0800550d
 8005564:	080056b7 	.word	0x080056b7
 8005568:	0800550d 	.word	0x0800550d
 800556c:	080055bd 	.word	0x080055bd
 8005570:	0800550d 	.word	0x0800550d
 8005574:	0800550d 	.word	0x0800550d
 8005578:	08005657 	.word	0x08005657
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	1d1a      	adds	r2, r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	602a      	str	r2, [r5, #0]
 8005584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800558c:	2301      	movs	r3, #1
 800558e:	e09f      	b.n	80056d0 <_printf_i+0x1ec>
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	0607      	lsls	r7, r0, #24
 8005596:	f103 0104 	add.w	r1, r3, #4
 800559a:	6029      	str	r1, [r5, #0]
 800559c:	d501      	bpl.n	80055a2 <_printf_i+0xbe>
 800559e:	681e      	ldr	r6, [r3, #0]
 80055a0:	e003      	b.n	80055aa <_printf_i+0xc6>
 80055a2:	0646      	lsls	r6, r0, #25
 80055a4:	d5fb      	bpl.n	800559e <_printf_i+0xba>
 80055a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	da03      	bge.n	80055b6 <_printf_i+0xd2>
 80055ae:	232d      	movs	r3, #45	; 0x2d
 80055b0:	4276      	negs	r6, r6
 80055b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b6:	485a      	ldr	r0, [pc, #360]	; (8005720 <_printf_i+0x23c>)
 80055b8:	230a      	movs	r3, #10
 80055ba:	e012      	b.n	80055e2 <_printf_i+0xfe>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1d19      	adds	r1, r3, #4
 80055c2:	6029      	str	r1, [r5, #0]
 80055c4:	0605      	lsls	r5, r0, #24
 80055c6:	d501      	bpl.n	80055cc <_printf_i+0xe8>
 80055c8:	681e      	ldr	r6, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <_printf_i+0xee>
 80055cc:	0641      	lsls	r1, r0, #25
 80055ce:	d5fb      	bpl.n	80055c8 <_printf_i+0xe4>
 80055d0:	881e      	ldrh	r6, [r3, #0]
 80055d2:	4853      	ldr	r0, [pc, #332]	; (8005720 <_printf_i+0x23c>)
 80055d4:	2f6f      	cmp	r7, #111	; 0x6f
 80055d6:	bf0c      	ite	eq
 80055d8:	2308      	moveq	r3, #8
 80055da:	230a      	movne	r3, #10
 80055dc:	2100      	movs	r1, #0
 80055de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e2:	6865      	ldr	r5, [r4, #4]
 80055e4:	60a5      	str	r5, [r4, #8]
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	bfa2      	ittt	ge
 80055ea:	6821      	ldrge	r1, [r4, #0]
 80055ec:	f021 0104 	bicge.w	r1, r1, #4
 80055f0:	6021      	strge	r1, [r4, #0]
 80055f2:	b90e      	cbnz	r6, 80055f8 <_printf_i+0x114>
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	d04b      	beq.n	8005690 <_printf_i+0x1ac>
 80055f8:	4615      	mov	r5, r2
 80055fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80055fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005602:	5dc7      	ldrb	r7, [r0, r7]
 8005604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005608:	4637      	mov	r7, r6
 800560a:	42bb      	cmp	r3, r7
 800560c:	460e      	mov	r6, r1
 800560e:	d9f4      	bls.n	80055fa <_printf_i+0x116>
 8005610:	2b08      	cmp	r3, #8
 8005612:	d10b      	bne.n	800562c <_printf_i+0x148>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07de      	lsls	r6, r3, #31
 8005618:	d508      	bpl.n	800562c <_printf_i+0x148>
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	6861      	ldr	r1, [r4, #4]
 800561e:	4299      	cmp	r1, r3
 8005620:	bfde      	ittt	le
 8005622:	2330      	movle	r3, #48	; 0x30
 8005624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800562c:	1b52      	subs	r2, r2, r5
 800562e:	6122      	str	r2, [r4, #16]
 8005630:	f8cd a000 	str.w	sl, [sp]
 8005634:	464b      	mov	r3, r9
 8005636:	aa03      	add	r2, sp, #12
 8005638:	4621      	mov	r1, r4
 800563a:	4640      	mov	r0, r8
 800563c:	f7ff fee4 	bl	8005408 <_printf_common>
 8005640:	3001      	adds	r0, #1
 8005642:	d14a      	bne.n	80056da <_printf_i+0x1f6>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	b004      	add	sp, #16
 800564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	f043 0320 	orr.w	r3, r3, #32
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	4833      	ldr	r0, [pc, #204]	; (8005724 <_printf_i+0x240>)
 8005658:	2778      	movs	r7, #120	; 0x78
 800565a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	6829      	ldr	r1, [r5, #0]
 8005662:	061f      	lsls	r7, r3, #24
 8005664:	f851 6b04 	ldr.w	r6, [r1], #4
 8005668:	d402      	bmi.n	8005670 <_printf_i+0x18c>
 800566a:	065f      	lsls	r7, r3, #25
 800566c:	bf48      	it	mi
 800566e:	b2b6      	uxthmi	r6, r6
 8005670:	07df      	lsls	r7, r3, #31
 8005672:	bf48      	it	mi
 8005674:	f043 0320 	orrmi.w	r3, r3, #32
 8005678:	6029      	str	r1, [r5, #0]
 800567a:	bf48      	it	mi
 800567c:	6023      	strmi	r3, [r4, #0]
 800567e:	b91e      	cbnz	r6, 8005688 <_printf_i+0x1a4>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	6023      	str	r3, [r4, #0]
 8005688:	2310      	movs	r3, #16
 800568a:	e7a7      	b.n	80055dc <_printf_i+0xf8>
 800568c:	4824      	ldr	r0, [pc, #144]	; (8005720 <_printf_i+0x23c>)
 800568e:	e7e4      	b.n	800565a <_printf_i+0x176>
 8005690:	4615      	mov	r5, r2
 8005692:	e7bd      	b.n	8005610 <_printf_i+0x12c>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	6826      	ldr	r6, [r4, #0]
 8005698:	6961      	ldr	r1, [r4, #20]
 800569a:	1d18      	adds	r0, r3, #4
 800569c:	6028      	str	r0, [r5, #0]
 800569e:	0635      	lsls	r5, r6, #24
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	d501      	bpl.n	80056a8 <_printf_i+0x1c4>
 80056a4:	6019      	str	r1, [r3, #0]
 80056a6:	e002      	b.n	80056ae <_printf_i+0x1ca>
 80056a8:	0670      	lsls	r0, r6, #25
 80056aa:	d5fb      	bpl.n	80056a4 <_printf_i+0x1c0>
 80056ac:	8019      	strh	r1, [r3, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	4615      	mov	r5, r2
 80056b4:	e7bc      	b.n	8005630 <_printf_i+0x14c>
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	1d1a      	adds	r2, r3, #4
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	6862      	ldr	r2, [r4, #4]
 80056c0:	2100      	movs	r1, #0
 80056c2:	4628      	mov	r0, r5
 80056c4:	f7fa fda4 	bl	8000210 <memchr>
 80056c8:	b108      	cbz	r0, 80056ce <_printf_i+0x1ea>
 80056ca:	1b40      	subs	r0, r0, r5
 80056cc:	6060      	str	r0, [r4, #4]
 80056ce:	6863      	ldr	r3, [r4, #4]
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	2300      	movs	r3, #0
 80056d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d8:	e7aa      	b.n	8005630 <_printf_i+0x14c>
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	462a      	mov	r2, r5
 80056de:	4649      	mov	r1, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	47d0      	blx	sl
 80056e4:	3001      	adds	r0, #1
 80056e6:	d0ad      	beq.n	8005644 <_printf_i+0x160>
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	079b      	lsls	r3, r3, #30
 80056ec:	d413      	bmi.n	8005716 <_printf_i+0x232>
 80056ee:	68e0      	ldr	r0, [r4, #12]
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	4298      	cmp	r0, r3
 80056f4:	bfb8      	it	lt
 80056f6:	4618      	movlt	r0, r3
 80056f8:	e7a6      	b.n	8005648 <_printf_i+0x164>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4632      	mov	r2, r6
 80056fe:	4649      	mov	r1, r9
 8005700:	4640      	mov	r0, r8
 8005702:	47d0      	blx	sl
 8005704:	3001      	adds	r0, #1
 8005706:	d09d      	beq.n	8005644 <_printf_i+0x160>
 8005708:	3501      	adds	r5, #1
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	9903      	ldr	r1, [sp, #12]
 800570e:	1a5b      	subs	r3, r3, r1
 8005710:	42ab      	cmp	r3, r5
 8005712:	dcf2      	bgt.n	80056fa <_printf_i+0x216>
 8005714:	e7eb      	b.n	80056ee <_printf_i+0x20a>
 8005716:	2500      	movs	r5, #0
 8005718:	f104 0619 	add.w	r6, r4, #25
 800571c:	e7f5      	b.n	800570a <_printf_i+0x226>
 800571e:	bf00      	nop
 8005720:	08007f0a 	.word	0x08007f0a
 8005724:	08007f1b 	.word	0x08007f1b

08005728 <std>:
 8005728:	2300      	movs	r3, #0
 800572a:	b510      	push	{r4, lr}
 800572c:	4604      	mov	r4, r0
 800572e:	e9c0 3300 	strd	r3, r3, [r0]
 8005732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005736:	6083      	str	r3, [r0, #8]
 8005738:	8181      	strh	r1, [r0, #12]
 800573a:	6643      	str	r3, [r0, #100]	; 0x64
 800573c:	81c2      	strh	r2, [r0, #14]
 800573e:	6183      	str	r3, [r0, #24]
 8005740:	4619      	mov	r1, r3
 8005742:	2208      	movs	r2, #8
 8005744:	305c      	adds	r0, #92	; 0x5c
 8005746:	f000 f8f4 	bl	8005932 <memset>
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <std+0x58>)
 800574c:	6263      	str	r3, [r4, #36]	; 0x24
 800574e:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <std+0x5c>)
 8005750:	62a3      	str	r3, [r4, #40]	; 0x28
 8005752:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <std+0x60>)
 8005754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <std+0x64>)
 8005758:	6323      	str	r3, [r4, #48]	; 0x30
 800575a:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <std+0x68>)
 800575c:	6224      	str	r4, [r4, #32]
 800575e:	429c      	cmp	r4, r3
 8005760:	d006      	beq.n	8005770 <std+0x48>
 8005762:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005766:	4294      	cmp	r4, r2
 8005768:	d002      	beq.n	8005770 <std+0x48>
 800576a:	33d0      	adds	r3, #208	; 0xd0
 800576c:	429c      	cmp	r4, r3
 800576e:	d105      	bne.n	800577c <std+0x54>
 8005770:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005778:	f000 b958 	b.w	8005a2c <__retarget_lock_init_recursive>
 800577c:	bd10      	pop	{r4, pc}
 800577e:	bf00      	nop
 8005780:	080058ad 	.word	0x080058ad
 8005784:	080058cf 	.word	0x080058cf
 8005788:	08005907 	.word	0x08005907
 800578c:	0800592b 	.word	0x0800592b
 8005790:	200003bc 	.word	0x200003bc

08005794 <stdio_exit_handler>:
 8005794:	4a02      	ldr	r2, [pc, #8]	; (80057a0 <stdio_exit_handler+0xc>)
 8005796:	4903      	ldr	r1, [pc, #12]	; (80057a4 <stdio_exit_handler+0x10>)
 8005798:	4803      	ldr	r0, [pc, #12]	; (80057a8 <stdio_exit_handler+0x14>)
 800579a:	f000 b869 	b.w	8005870 <_fwalk_sglue>
 800579e:	bf00      	nop
 80057a0:	2000000c 	.word	0x2000000c
 80057a4:	08007131 	.word	0x08007131
 80057a8:	20000018 	.word	0x20000018

080057ac <cleanup_stdio>:
 80057ac:	6841      	ldr	r1, [r0, #4]
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <cleanup_stdio+0x34>)
 80057b0:	4299      	cmp	r1, r3
 80057b2:	b510      	push	{r4, lr}
 80057b4:	4604      	mov	r4, r0
 80057b6:	d001      	beq.n	80057bc <cleanup_stdio+0x10>
 80057b8:	f001 fcba 	bl	8007130 <_fflush_r>
 80057bc:	68a1      	ldr	r1, [r4, #8]
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <cleanup_stdio+0x38>)
 80057c0:	4299      	cmp	r1, r3
 80057c2:	d002      	beq.n	80057ca <cleanup_stdio+0x1e>
 80057c4:	4620      	mov	r0, r4
 80057c6:	f001 fcb3 	bl	8007130 <_fflush_r>
 80057ca:	68e1      	ldr	r1, [r4, #12]
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <cleanup_stdio+0x3c>)
 80057ce:	4299      	cmp	r1, r3
 80057d0:	d004      	beq.n	80057dc <cleanup_stdio+0x30>
 80057d2:	4620      	mov	r0, r4
 80057d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d8:	f001 bcaa 	b.w	8007130 <_fflush_r>
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	bf00      	nop
 80057e0:	200003bc 	.word	0x200003bc
 80057e4:	20000424 	.word	0x20000424
 80057e8:	2000048c 	.word	0x2000048c

080057ec <global_stdio_init.part.0>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <global_stdio_init.part.0+0x30>)
 80057f0:	4c0b      	ldr	r4, [pc, #44]	; (8005820 <global_stdio_init.part.0+0x34>)
 80057f2:	4a0c      	ldr	r2, [pc, #48]	; (8005824 <global_stdio_init.part.0+0x38>)
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	4620      	mov	r0, r4
 80057f8:	2200      	movs	r2, #0
 80057fa:	2104      	movs	r1, #4
 80057fc:	f7ff ff94 	bl	8005728 <std>
 8005800:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005804:	2201      	movs	r2, #1
 8005806:	2109      	movs	r1, #9
 8005808:	f7ff ff8e 	bl	8005728 <std>
 800580c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005810:	2202      	movs	r2, #2
 8005812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005816:	2112      	movs	r1, #18
 8005818:	f7ff bf86 	b.w	8005728 <std>
 800581c:	200004f4 	.word	0x200004f4
 8005820:	200003bc 	.word	0x200003bc
 8005824:	08005795 	.word	0x08005795

08005828 <__sfp_lock_acquire>:
 8005828:	4801      	ldr	r0, [pc, #4]	; (8005830 <__sfp_lock_acquire+0x8>)
 800582a:	f000 b900 	b.w	8005a2e <__retarget_lock_acquire_recursive>
 800582e:	bf00      	nop
 8005830:	200004fd 	.word	0x200004fd

08005834 <__sfp_lock_release>:
 8005834:	4801      	ldr	r0, [pc, #4]	; (800583c <__sfp_lock_release+0x8>)
 8005836:	f000 b8fb 	b.w	8005a30 <__retarget_lock_release_recursive>
 800583a:	bf00      	nop
 800583c:	200004fd 	.word	0x200004fd

08005840 <__sinit>:
 8005840:	b510      	push	{r4, lr}
 8005842:	4604      	mov	r4, r0
 8005844:	f7ff fff0 	bl	8005828 <__sfp_lock_acquire>
 8005848:	6a23      	ldr	r3, [r4, #32]
 800584a:	b11b      	cbz	r3, 8005854 <__sinit+0x14>
 800584c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005850:	f7ff bff0 	b.w	8005834 <__sfp_lock_release>
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <__sinit+0x28>)
 8005856:	6223      	str	r3, [r4, #32]
 8005858:	4b04      	ldr	r3, [pc, #16]	; (800586c <__sinit+0x2c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f5      	bne.n	800584c <__sinit+0xc>
 8005860:	f7ff ffc4 	bl	80057ec <global_stdio_init.part.0>
 8005864:	e7f2      	b.n	800584c <__sinit+0xc>
 8005866:	bf00      	nop
 8005868:	080057ad 	.word	0x080057ad
 800586c:	200004f4 	.word	0x200004f4

08005870 <_fwalk_sglue>:
 8005870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005874:	4607      	mov	r7, r0
 8005876:	4688      	mov	r8, r1
 8005878:	4614      	mov	r4, r2
 800587a:	2600      	movs	r6, #0
 800587c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005880:	f1b9 0901 	subs.w	r9, r9, #1
 8005884:	d505      	bpl.n	8005892 <_fwalk_sglue+0x22>
 8005886:	6824      	ldr	r4, [r4, #0]
 8005888:	2c00      	cmp	r4, #0
 800588a:	d1f7      	bne.n	800587c <_fwalk_sglue+0xc>
 800588c:	4630      	mov	r0, r6
 800588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005892:	89ab      	ldrh	r3, [r5, #12]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d907      	bls.n	80058a8 <_fwalk_sglue+0x38>
 8005898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800589c:	3301      	adds	r3, #1
 800589e:	d003      	beq.n	80058a8 <_fwalk_sglue+0x38>
 80058a0:	4629      	mov	r1, r5
 80058a2:	4638      	mov	r0, r7
 80058a4:	47c0      	blx	r8
 80058a6:	4306      	orrs	r6, r0
 80058a8:	3568      	adds	r5, #104	; 0x68
 80058aa:	e7e9      	b.n	8005880 <_fwalk_sglue+0x10>

080058ac <__sread>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	460c      	mov	r4, r1
 80058b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b4:	f000 f86c 	bl	8005990 <_read_r>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	bfab      	itete	ge
 80058bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058be:	89a3      	ldrhlt	r3, [r4, #12]
 80058c0:	181b      	addge	r3, r3, r0
 80058c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058c6:	bfac      	ite	ge
 80058c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ca:	81a3      	strhlt	r3, [r4, #12]
 80058cc:	bd10      	pop	{r4, pc}

080058ce <__swrite>:
 80058ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	461f      	mov	r7, r3
 80058d4:	898b      	ldrh	r3, [r1, #12]
 80058d6:	05db      	lsls	r3, r3, #23
 80058d8:	4605      	mov	r5, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4616      	mov	r6, r2
 80058de:	d505      	bpl.n	80058ec <__swrite+0x1e>
 80058e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e4:	2302      	movs	r3, #2
 80058e6:	2200      	movs	r2, #0
 80058e8:	f000 f840 	bl	800596c <_lseek_r>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	4632      	mov	r2, r6
 80058fa:	463b      	mov	r3, r7
 80058fc:	4628      	mov	r0, r5
 80058fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005902:	f000 b857 	b.w	80059b4 <_write_r>

08005906 <__sseek>:
 8005906:	b510      	push	{r4, lr}
 8005908:	460c      	mov	r4, r1
 800590a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590e:	f000 f82d 	bl	800596c <_lseek_r>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	bf15      	itete	ne
 8005918:	6560      	strne	r0, [r4, #84]	; 0x54
 800591a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800591e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005922:	81a3      	strheq	r3, [r4, #12]
 8005924:	bf18      	it	ne
 8005926:	81a3      	strhne	r3, [r4, #12]
 8005928:	bd10      	pop	{r4, pc}

0800592a <__sclose>:
 800592a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592e:	f000 b80d 	b.w	800594c <_close_r>

08005932 <memset>:
 8005932:	4402      	add	r2, r0
 8005934:	4603      	mov	r3, r0
 8005936:	4293      	cmp	r3, r2
 8005938:	d100      	bne.n	800593c <memset+0xa>
 800593a:	4770      	bx	lr
 800593c:	f803 1b01 	strb.w	r1, [r3], #1
 8005940:	e7f9      	b.n	8005936 <memset+0x4>
	...

08005944 <_localeconv_r>:
 8005944:	4800      	ldr	r0, [pc, #0]	; (8005948 <_localeconv_r+0x4>)
 8005946:	4770      	bx	lr
 8005948:	20000158 	.word	0x20000158

0800594c <_close_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d06      	ldr	r5, [pc, #24]	; (8005968 <_close_r+0x1c>)
 8005950:	2300      	movs	r3, #0
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	602b      	str	r3, [r5, #0]
 8005958:	f7fc f8f5 	bl	8001b46 <_close>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d102      	bne.n	8005966 <_close_r+0x1a>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	b103      	cbz	r3, 8005966 <_close_r+0x1a>
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	200004f8 	.word	0x200004f8

0800596c <_lseek_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4d07      	ldr	r5, [pc, #28]	; (800598c <_lseek_r+0x20>)
 8005970:	4604      	mov	r4, r0
 8005972:	4608      	mov	r0, r1
 8005974:	4611      	mov	r1, r2
 8005976:	2200      	movs	r2, #0
 8005978:	602a      	str	r2, [r5, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	f7fc f90a 	bl	8001b94 <_lseek>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_lseek_r+0x1e>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_lseek_r+0x1e>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	200004f8 	.word	0x200004f8

08005990 <_read_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	; (80059b0 <_read_r+0x20>)
 8005994:	4604      	mov	r4, r0
 8005996:	4608      	mov	r0, r1
 8005998:	4611      	mov	r1, r2
 800599a:	2200      	movs	r2, #0
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fc f898 	bl	8001ad4 <_read>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_read_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_read_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	200004f8 	.word	0x200004f8

080059b4 <_write_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	; (80059d4 <_write_r+0x20>)
 80059b8:	4604      	mov	r4, r0
 80059ba:	4608      	mov	r0, r1
 80059bc:	4611      	mov	r1, r2
 80059be:	2200      	movs	r2, #0
 80059c0:	602a      	str	r2, [r5, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f7fc f8a3 	bl	8001b0e <_write>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_write_r+0x1e>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_write_r+0x1e>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	200004f8 	.word	0x200004f8

080059d8 <__errno>:
 80059d8:	4b01      	ldr	r3, [pc, #4]	; (80059e0 <__errno+0x8>)
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000064 	.word	0x20000064

080059e4 <__libc_init_array>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	4d0d      	ldr	r5, [pc, #52]	; (8005a1c <__libc_init_array+0x38>)
 80059e8:	4c0d      	ldr	r4, [pc, #52]	; (8005a20 <__libc_init_array+0x3c>)
 80059ea:	1b64      	subs	r4, r4, r5
 80059ec:	10a4      	asrs	r4, r4, #2
 80059ee:	2600      	movs	r6, #0
 80059f0:	42a6      	cmp	r6, r4
 80059f2:	d109      	bne.n	8005a08 <__libc_init_array+0x24>
 80059f4:	4d0b      	ldr	r5, [pc, #44]	; (8005a24 <__libc_init_array+0x40>)
 80059f6:	4c0c      	ldr	r4, [pc, #48]	; (8005a28 <__libc_init_array+0x44>)
 80059f8:	f002 fa68 	bl	8007ecc <_init>
 80059fc:	1b64      	subs	r4, r4, r5
 80059fe:	10a4      	asrs	r4, r4, #2
 8005a00:	2600      	movs	r6, #0
 8005a02:	42a6      	cmp	r6, r4
 8005a04:	d105      	bne.n	8005a12 <__libc_init_array+0x2e>
 8005a06:	bd70      	pop	{r4, r5, r6, pc}
 8005a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0c:	4798      	blx	r3
 8005a0e:	3601      	adds	r6, #1
 8005a10:	e7ee      	b.n	80059f0 <__libc_init_array+0xc>
 8005a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a16:	4798      	blx	r3
 8005a18:	3601      	adds	r6, #1
 8005a1a:	e7f2      	b.n	8005a02 <__libc_init_array+0x1e>
 8005a1c:	080082e8 	.word	0x080082e8
 8005a20:	080082e8 	.word	0x080082e8
 8005a24:	080082e8 	.word	0x080082e8
 8005a28:	080082ec 	.word	0x080082ec

08005a2c <__retarget_lock_init_recursive>:
 8005a2c:	4770      	bx	lr

08005a2e <__retarget_lock_acquire_recursive>:
 8005a2e:	4770      	bx	lr

08005a30 <__retarget_lock_release_recursive>:
 8005a30:	4770      	bx	lr

08005a32 <quorem>:
 8005a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	6903      	ldr	r3, [r0, #16]
 8005a38:	690c      	ldr	r4, [r1, #16]
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	db7e      	blt.n	8005b3e <quorem+0x10c>
 8005a40:	3c01      	subs	r4, #1
 8005a42:	f101 0814 	add.w	r8, r1, #20
 8005a46:	f100 0514 	add.w	r5, r0, #20
 8005a4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a64:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a68:	d331      	bcc.n	8005ace <quorem+0x9c>
 8005a6a:	f04f 0e00 	mov.w	lr, #0
 8005a6e:	4640      	mov	r0, r8
 8005a70:	46ac      	mov	ip, r5
 8005a72:	46f2      	mov	sl, lr
 8005a74:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a78:	b293      	uxth	r3, r2
 8005a7a:	fb06 e303 	mla	r3, r6, r3, lr
 8005a7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a82:	0c1a      	lsrs	r2, r3, #16
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	ebaa 0303 	sub.w	r3, sl, r3
 8005a8a:	f8dc a000 	ldr.w	sl, [ip]
 8005a8e:	fa13 f38a 	uxtah	r3, r3, sl
 8005a92:	fb06 220e 	mla	r2, r6, lr, r2
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	9b00      	ldr	r3, [sp, #0]
 8005a9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a9e:	b292      	uxth	r2, r2
 8005aa0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005aa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005aa8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005aac:	4581      	cmp	r9, r0
 8005aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ab2:	f84c 3b04 	str.w	r3, [ip], #4
 8005ab6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005aba:	d2db      	bcs.n	8005a74 <quorem+0x42>
 8005abc:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ac0:	b92b      	cbnz	r3, 8005ace <quorem+0x9c>
 8005ac2:	9b01      	ldr	r3, [sp, #4]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	429d      	cmp	r5, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	d32c      	bcc.n	8005b26 <quorem+0xf4>
 8005acc:	613c      	str	r4, [r7, #16]
 8005ace:	4638      	mov	r0, r7
 8005ad0:	f001 f9a8 	bl	8006e24 <__mcmp>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	db22      	blt.n	8005b1e <quorem+0xec>
 8005ad8:	3601      	adds	r6, #1
 8005ada:	4629      	mov	r1, r5
 8005adc:	2000      	movs	r0, #0
 8005ade:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ae2:	f8d1 c000 	ldr.w	ip, [r1]
 8005ae6:	b293      	uxth	r3, r2
 8005ae8:	1ac3      	subs	r3, r0, r3
 8005aea:	0c12      	lsrs	r2, r2, #16
 8005aec:	fa13 f38c 	uxtah	r3, r3, ip
 8005af0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005afe:	45c1      	cmp	r9, r8
 8005b00:	f841 3b04 	str.w	r3, [r1], #4
 8005b04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b08:	d2e9      	bcs.n	8005ade <quorem+0xac>
 8005b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b12:	b922      	cbnz	r2, 8005b1e <quorem+0xec>
 8005b14:	3b04      	subs	r3, #4
 8005b16:	429d      	cmp	r5, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	d30a      	bcc.n	8005b32 <quorem+0x100>
 8005b1c:	613c      	str	r4, [r7, #16]
 8005b1e:	4630      	mov	r0, r6
 8005b20:	b003      	add	sp, #12
 8005b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	3b04      	subs	r3, #4
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	d1ce      	bne.n	8005acc <quorem+0x9a>
 8005b2e:	3c01      	subs	r4, #1
 8005b30:	e7c9      	b.n	8005ac6 <quorem+0x94>
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	3b04      	subs	r3, #4
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	d1f0      	bne.n	8005b1c <quorem+0xea>
 8005b3a:	3c01      	subs	r4, #1
 8005b3c:	e7eb      	b.n	8005b16 <quorem+0xe4>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e7ee      	b.n	8005b20 <quorem+0xee>
 8005b42:	0000      	movs	r0, r0
 8005b44:	0000      	movs	r0, r0
	...

08005b48 <_dtoa_r>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	ed2d 8b04 	vpush	{d8-d9}
 8005b50:	69c5      	ldr	r5, [r0, #28]
 8005b52:	b093      	sub	sp, #76	; 0x4c
 8005b54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b58:	ec57 6b10 	vmov	r6, r7, d0
 8005b5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b60:	9107      	str	r1, [sp, #28]
 8005b62:	4604      	mov	r4, r0
 8005b64:	920a      	str	r2, [sp, #40]	; 0x28
 8005b66:	930d      	str	r3, [sp, #52]	; 0x34
 8005b68:	b975      	cbnz	r5, 8005b88 <_dtoa_r+0x40>
 8005b6a:	2010      	movs	r0, #16
 8005b6c:	f000 fe2a 	bl	80067c4 <malloc>
 8005b70:	4602      	mov	r2, r0
 8005b72:	61e0      	str	r0, [r4, #28]
 8005b74:	b920      	cbnz	r0, 8005b80 <_dtoa_r+0x38>
 8005b76:	4bae      	ldr	r3, [pc, #696]	; (8005e30 <_dtoa_r+0x2e8>)
 8005b78:	21ef      	movs	r1, #239	; 0xef
 8005b7a:	48ae      	ldr	r0, [pc, #696]	; (8005e34 <_dtoa_r+0x2ec>)
 8005b7c:	f001 fb1e 	bl	80071bc <__assert_func>
 8005b80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b84:	6005      	str	r5, [r0, #0]
 8005b86:	60c5      	str	r5, [r0, #12]
 8005b88:	69e3      	ldr	r3, [r4, #28]
 8005b8a:	6819      	ldr	r1, [r3, #0]
 8005b8c:	b151      	cbz	r1, 8005ba4 <_dtoa_r+0x5c>
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	604a      	str	r2, [r1, #4]
 8005b92:	2301      	movs	r3, #1
 8005b94:	4093      	lsls	r3, r2
 8005b96:	608b      	str	r3, [r1, #8]
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f000 ff07 	bl	80069ac <_Bfree>
 8005b9e:	69e3      	ldr	r3, [r4, #28]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	1e3b      	subs	r3, r7, #0
 8005ba6:	bfbb      	ittet	lt
 8005ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005bac:	9303      	strlt	r3, [sp, #12]
 8005bae:	2300      	movge	r3, #0
 8005bb0:	2201      	movlt	r2, #1
 8005bb2:	bfac      	ite	ge
 8005bb4:	f8c8 3000 	strge.w	r3, [r8]
 8005bb8:	f8c8 2000 	strlt.w	r2, [r8]
 8005bbc:	4b9e      	ldr	r3, [pc, #632]	; (8005e38 <_dtoa_r+0x2f0>)
 8005bbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005bc2:	ea33 0308 	bics.w	r3, r3, r8
 8005bc6:	d11b      	bne.n	8005c00 <_dtoa_r+0xb8>
 8005bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bca:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005bd4:	4333      	orrs	r3, r6
 8005bd6:	f000 8593 	beq.w	8006700 <_dtoa_r+0xbb8>
 8005bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bdc:	b963      	cbnz	r3, 8005bf8 <_dtoa_r+0xb0>
 8005bde:	4b97      	ldr	r3, [pc, #604]	; (8005e3c <_dtoa_r+0x2f4>)
 8005be0:	e027      	b.n	8005c32 <_dtoa_r+0xea>
 8005be2:	4b97      	ldr	r3, [pc, #604]	; (8005e40 <_dtoa_r+0x2f8>)
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	9800      	ldr	r0, [sp, #0]
 8005bee:	b013      	add	sp, #76	; 0x4c
 8005bf0:	ecbd 8b04 	vpop	{d8-d9}
 8005bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf8:	4b90      	ldr	r3, [pc, #576]	; (8005e3c <_dtoa_r+0x2f4>)
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	3303      	adds	r3, #3
 8005bfe:	e7f3      	b.n	8005be8 <_dtoa_r+0xa0>
 8005c00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c04:	2200      	movs	r2, #0
 8005c06:	ec51 0b17 	vmov	r0, r1, d7
 8005c0a:	eeb0 8a47 	vmov.f32	s16, s14
 8005c0e:	eef0 8a67 	vmov.f32	s17, s15
 8005c12:	2300      	movs	r3, #0
 8005c14:	f7fa ff78 	bl	8000b08 <__aeabi_dcmpeq>
 8005c18:	4681      	mov	r9, r0
 8005c1a:	b160      	cbz	r0, 8005c36 <_dtoa_r+0xee>
 8005c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c1e:	2301      	movs	r3, #1
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8568 	beq.w	80066fa <_dtoa_r+0xbb2>
 8005c2a:	4b86      	ldr	r3, [pc, #536]	; (8005e44 <_dtoa_r+0x2fc>)
 8005c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	e7da      	b.n	8005bec <_dtoa_r+0xa4>
 8005c36:	aa10      	add	r2, sp, #64	; 0x40
 8005c38:	a911      	add	r1, sp, #68	; 0x44
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8005c40:	eef0 0a68 	vmov.f32	s1, s17
 8005c44:	f001 f994 	bl	8006f70 <__d2b>
 8005c48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c4c:	4682      	mov	sl, r0
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	d07f      	beq.n	8005d52 <_dtoa_r+0x20a>
 8005c52:	ee18 3a90 	vmov	r3, s17
 8005c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005c5e:	ec51 0b18 	vmov	r0, r1, d8
 8005c62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005c6e:	4619      	mov	r1, r3
 8005c70:	2200      	movs	r2, #0
 8005c72:	4b75      	ldr	r3, [pc, #468]	; (8005e48 <_dtoa_r+0x300>)
 8005c74:	f7fa fb28 	bl	80002c8 <__aeabi_dsub>
 8005c78:	a367      	add	r3, pc, #412	; (adr r3, 8005e18 <_dtoa_r+0x2d0>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fcdb 	bl	8000638 <__aeabi_dmul>
 8005c82:	a367      	add	r3, pc, #412	; (adr r3, 8005e20 <_dtoa_r+0x2d8>)
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f7fa fb20 	bl	80002cc <__adddf3>
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	4628      	mov	r0, r5
 8005c90:	460f      	mov	r7, r1
 8005c92:	f7fa fc67 	bl	8000564 <__aeabi_i2d>
 8005c96:	a364      	add	r3, pc, #400	; (adr r3, 8005e28 <_dtoa_r+0x2e0>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fccc 	bl	8000638 <__aeabi_dmul>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	f7fa fb10 	bl	80002cc <__adddf3>
 8005cac:	4606      	mov	r6, r0
 8005cae:	460f      	mov	r7, r1
 8005cb0:	f7fa ff72 	bl	8000b98 <__aeabi_d2iz>
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4683      	mov	fp, r0
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4630      	mov	r0, r6
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	f7fa ff2d 	bl	8000b1c <__aeabi_dcmplt>
 8005cc2:	b148      	cbz	r0, 8005cd8 <_dtoa_r+0x190>
 8005cc4:	4658      	mov	r0, fp
 8005cc6:	f7fa fc4d 	bl	8000564 <__aeabi_i2d>
 8005cca:	4632      	mov	r2, r6
 8005ccc:	463b      	mov	r3, r7
 8005cce:	f7fa ff1b 	bl	8000b08 <__aeabi_dcmpeq>
 8005cd2:	b908      	cbnz	r0, 8005cd8 <_dtoa_r+0x190>
 8005cd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cd8:	f1bb 0f16 	cmp.w	fp, #22
 8005cdc:	d857      	bhi.n	8005d8e <_dtoa_r+0x246>
 8005cde:	4b5b      	ldr	r3, [pc, #364]	; (8005e4c <_dtoa_r+0x304>)
 8005ce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	ec51 0b18 	vmov	r0, r1, d8
 8005cec:	f7fa ff16 	bl	8000b1c <__aeabi_dcmplt>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d04e      	beq.n	8005d92 <_dtoa_r+0x24a>
 8005cf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8005cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cfe:	1b5b      	subs	r3, r3, r5
 8005d00:	1e5a      	subs	r2, r3, #1
 8005d02:	bf45      	ittet	mi
 8005d04:	f1c3 0301 	rsbmi	r3, r3, #1
 8005d08:	9305      	strmi	r3, [sp, #20]
 8005d0a:	2300      	movpl	r3, #0
 8005d0c:	2300      	movmi	r3, #0
 8005d0e:	9206      	str	r2, [sp, #24]
 8005d10:	bf54      	ite	pl
 8005d12:	9305      	strpl	r3, [sp, #20]
 8005d14:	9306      	strmi	r3, [sp, #24]
 8005d16:	f1bb 0f00 	cmp.w	fp, #0
 8005d1a:	db3c      	blt.n	8005d96 <_dtoa_r+0x24e>
 8005d1c:	9b06      	ldr	r3, [sp, #24]
 8005d1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005d22:	445b      	add	r3, fp
 8005d24:	9306      	str	r3, [sp, #24]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9308      	str	r3, [sp, #32]
 8005d2a:	9b07      	ldr	r3, [sp, #28]
 8005d2c:	2b09      	cmp	r3, #9
 8005d2e:	d868      	bhi.n	8005e02 <_dtoa_r+0x2ba>
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	bfc4      	itt	gt
 8005d34:	3b04      	subgt	r3, #4
 8005d36:	9307      	strgt	r3, [sp, #28]
 8005d38:	9b07      	ldr	r3, [sp, #28]
 8005d3a:	f1a3 0302 	sub.w	r3, r3, #2
 8005d3e:	bfcc      	ite	gt
 8005d40:	2500      	movgt	r5, #0
 8005d42:	2501      	movle	r5, #1
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	f200 8085 	bhi.w	8005e54 <_dtoa_r+0x30c>
 8005d4a:	e8df f003 	tbb	[pc, r3]
 8005d4e:	3b2e      	.short	0x3b2e
 8005d50:	5839      	.short	0x5839
 8005d52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d56:	441d      	add	r5, r3
 8005d58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	bfc1      	itttt	gt
 8005d60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d64:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005d6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005d70:	bfd6      	itet	le
 8005d72:	f1c3 0320 	rsble	r3, r3, #32
 8005d76:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d7a:	fa06 f003 	lslle.w	r0, r6, r3
 8005d7e:	f7fa fbe1 	bl	8000544 <__aeabi_ui2d>
 8005d82:	2201      	movs	r2, #1
 8005d84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005d88:	3d01      	subs	r5, #1
 8005d8a:	920e      	str	r2, [sp, #56]	; 0x38
 8005d8c:	e76f      	b.n	8005c6e <_dtoa_r+0x126>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e7b3      	b.n	8005cfa <_dtoa_r+0x1b2>
 8005d92:	900c      	str	r0, [sp, #48]	; 0x30
 8005d94:	e7b2      	b.n	8005cfc <_dtoa_r+0x1b4>
 8005d96:	9b05      	ldr	r3, [sp, #20]
 8005d98:	eba3 030b 	sub.w	r3, r3, fp
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	f1cb 0300 	rsb	r3, fp, #0
 8005da2:	9308      	str	r3, [sp, #32]
 8005da4:	2300      	movs	r3, #0
 8005da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da8:	e7bf      	b.n	8005d2a <_dtoa_r+0x1e2>
 8005daa:	2300      	movs	r3, #0
 8005dac:	9309      	str	r3, [sp, #36]	; 0x24
 8005dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	dc52      	bgt.n	8005e5a <_dtoa_r+0x312>
 8005db4:	2301      	movs	r3, #1
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	9304      	str	r3, [sp, #16]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	920a      	str	r2, [sp, #40]	; 0x28
 8005dbe:	e00b      	b.n	8005dd8 <_dtoa_r+0x290>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e7f3      	b.n	8005dac <_dtoa_r+0x264>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dca:	445b      	add	r3, fp
 8005dcc:	9301      	str	r3, [sp, #4]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	bfb8      	it	lt
 8005dd6:	2301      	movlt	r3, #1
 8005dd8:	69e0      	ldr	r0, [r4, #28]
 8005dda:	2100      	movs	r1, #0
 8005ddc:	2204      	movs	r2, #4
 8005dde:	f102 0614 	add.w	r6, r2, #20
 8005de2:	429e      	cmp	r6, r3
 8005de4:	d93d      	bls.n	8005e62 <_dtoa_r+0x31a>
 8005de6:	6041      	str	r1, [r0, #4]
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fd9f 	bl	800692c <_Balloc>
 8005dee:	9000      	str	r0, [sp, #0]
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d139      	bne.n	8005e68 <_dtoa_r+0x320>
 8005df4:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <_dtoa_r+0x308>)
 8005df6:	4602      	mov	r2, r0
 8005df8:	f240 11af 	movw	r1, #431	; 0x1af
 8005dfc:	e6bd      	b.n	8005b7a <_dtoa_r+0x32>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e7e1      	b.n	8005dc6 <_dtoa_r+0x27e>
 8005e02:	2501      	movs	r5, #1
 8005e04:	2300      	movs	r3, #0
 8005e06:	9307      	str	r3, [sp, #28]
 8005e08:	9509      	str	r5, [sp, #36]	; 0x24
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	9304      	str	r3, [sp, #16]
 8005e12:	2200      	movs	r2, #0
 8005e14:	2312      	movs	r3, #18
 8005e16:	e7d1      	b.n	8005dbc <_dtoa_r+0x274>
 8005e18:	636f4361 	.word	0x636f4361
 8005e1c:	3fd287a7 	.word	0x3fd287a7
 8005e20:	8b60c8b3 	.word	0x8b60c8b3
 8005e24:	3fc68a28 	.word	0x3fc68a28
 8005e28:	509f79fb 	.word	0x509f79fb
 8005e2c:	3fd34413 	.word	0x3fd34413
 8005e30:	08007f39 	.word	0x08007f39
 8005e34:	08007f50 	.word	0x08007f50
 8005e38:	7ff00000 	.word	0x7ff00000
 8005e3c:	08007f35 	.word	0x08007f35
 8005e40:	08007f2c 	.word	0x08007f2c
 8005e44:	08007f09 	.word	0x08007f09
 8005e48:	3ff80000 	.word	0x3ff80000
 8005e4c:	08008040 	.word	0x08008040
 8005e50:	08007fa8 	.word	0x08007fa8
 8005e54:	2301      	movs	r3, #1
 8005e56:	9309      	str	r3, [sp, #36]	; 0x24
 8005e58:	e7d7      	b.n	8005e0a <_dtoa_r+0x2c2>
 8005e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	e7ba      	b.n	8005dd8 <_dtoa_r+0x290>
 8005e62:	3101      	adds	r1, #1
 8005e64:	0052      	lsls	r2, r2, #1
 8005e66:	e7ba      	b.n	8005dde <_dtoa_r+0x296>
 8005e68:	69e3      	ldr	r3, [r4, #28]
 8005e6a:	9a00      	ldr	r2, [sp, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	9b04      	ldr	r3, [sp, #16]
 8005e70:	2b0e      	cmp	r3, #14
 8005e72:	f200 80a8 	bhi.w	8005fc6 <_dtoa_r+0x47e>
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	f000 80a5 	beq.w	8005fc6 <_dtoa_r+0x47e>
 8005e7c:	f1bb 0f00 	cmp.w	fp, #0
 8005e80:	dd38      	ble.n	8005ef4 <_dtoa_r+0x3ac>
 8005e82:	4bc0      	ldr	r3, [pc, #768]	; (8006184 <_dtoa_r+0x63c>)
 8005e84:	f00b 020f 	and.w	r2, fp, #15
 8005e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005e90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005e94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005e98:	d019      	beq.n	8005ece <_dtoa_r+0x386>
 8005e9a:	4bbb      	ldr	r3, [pc, #748]	; (8006188 <_dtoa_r+0x640>)
 8005e9c:	ec51 0b18 	vmov	r0, r1, d8
 8005ea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ea4:	f7fa fcf2 	bl	800088c <__aeabi_ddiv>
 8005ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eac:	f008 080f 	and.w	r8, r8, #15
 8005eb0:	2503      	movs	r5, #3
 8005eb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006188 <_dtoa_r+0x640>
 8005eb6:	f1b8 0f00 	cmp.w	r8, #0
 8005eba:	d10a      	bne.n	8005ed2 <_dtoa_r+0x38a>
 8005ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ec0:	4632      	mov	r2, r6
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	f7fa fce2 	bl	800088c <__aeabi_ddiv>
 8005ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ecc:	e02b      	b.n	8005f26 <_dtoa_r+0x3de>
 8005ece:	2502      	movs	r5, #2
 8005ed0:	e7ef      	b.n	8005eb2 <_dtoa_r+0x36a>
 8005ed2:	f018 0f01 	tst.w	r8, #1
 8005ed6:	d008      	beq.n	8005eea <_dtoa_r+0x3a2>
 8005ed8:	4630      	mov	r0, r6
 8005eda:	4639      	mov	r1, r7
 8005edc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ee0:	f7fa fbaa 	bl	8000638 <__aeabi_dmul>
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	460f      	mov	r7, r1
 8005eea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005eee:	f109 0908 	add.w	r9, r9, #8
 8005ef2:	e7e0      	b.n	8005eb6 <_dtoa_r+0x36e>
 8005ef4:	f000 809f 	beq.w	8006036 <_dtoa_r+0x4ee>
 8005ef8:	f1cb 0600 	rsb	r6, fp, #0
 8005efc:	4ba1      	ldr	r3, [pc, #644]	; (8006184 <_dtoa_r+0x63c>)
 8005efe:	4fa2      	ldr	r7, [pc, #648]	; (8006188 <_dtoa_r+0x640>)
 8005f00:	f006 020f 	and.w	r2, r6, #15
 8005f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	ec51 0b18 	vmov	r0, r1, d8
 8005f10:	f7fa fb92 	bl	8000638 <__aeabi_dmul>
 8005f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f18:	1136      	asrs	r6, r6, #4
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2502      	movs	r5, #2
 8005f1e:	2e00      	cmp	r6, #0
 8005f20:	d17e      	bne.n	8006020 <_dtoa_r+0x4d8>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1d0      	bne.n	8005ec8 <_dtoa_r+0x380>
 8005f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8084 	beq.w	800603a <_dtoa_r+0x4f2>
 8005f32:	4b96      	ldr	r3, [pc, #600]	; (800618c <_dtoa_r+0x644>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	4640      	mov	r0, r8
 8005f38:	4649      	mov	r1, r9
 8005f3a:	f7fa fdef 	bl	8000b1c <__aeabi_dcmplt>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d07b      	beq.n	800603a <_dtoa_r+0x4f2>
 8005f42:	9b04      	ldr	r3, [sp, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d078      	beq.n	800603a <_dtoa_r+0x4f2>
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dd39      	ble.n	8005fc2 <_dtoa_r+0x47a>
 8005f4e:	4b90      	ldr	r3, [pc, #576]	; (8006190 <_dtoa_r+0x648>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	4640      	mov	r0, r8
 8005f54:	4649      	mov	r1, r9
 8005f56:	f7fa fb6f 	bl	8000638 <__aeabi_dmul>
 8005f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f5e:	9e01      	ldr	r6, [sp, #4]
 8005f60:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005f64:	3501      	adds	r5, #1
 8005f66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f7fa fafa 	bl	8000564 <__aeabi_i2d>
 8005f70:	4642      	mov	r2, r8
 8005f72:	464b      	mov	r3, r9
 8005f74:	f7fa fb60 	bl	8000638 <__aeabi_dmul>
 8005f78:	4b86      	ldr	r3, [pc, #536]	; (8006194 <_dtoa_r+0x64c>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f7fa f9a6 	bl	80002cc <__adddf3>
 8005f80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	2e00      	cmp	r6, #0
 8005f8c:	d158      	bne.n	8006040 <_dtoa_r+0x4f8>
 8005f8e:	4b82      	ldr	r3, [pc, #520]	; (8006198 <_dtoa_r+0x650>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	4640      	mov	r0, r8
 8005f94:	4649      	mov	r1, r9
 8005f96:	f7fa f997 	bl	80002c8 <__aeabi_dsub>
 8005f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	4689      	mov	r9, r1
 8005fa2:	f7fa fdd9 	bl	8000b58 <__aeabi_dcmpgt>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f040 8296 	bne.w	80064d8 <_dtoa_r+0x990>
 8005fac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	f7fa fdb0 	bl	8000b1c <__aeabi_dcmplt>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f040 8289 	bne.w	80064d4 <_dtoa_r+0x98c>
 8005fc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f2c0 814e 	blt.w	800626a <_dtoa_r+0x722>
 8005fce:	f1bb 0f0e 	cmp.w	fp, #14
 8005fd2:	f300 814a 	bgt.w	800626a <_dtoa_r+0x722>
 8005fd6:	4b6b      	ldr	r3, [pc, #428]	; (8006184 <_dtoa_r+0x63c>)
 8005fd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f280 80dc 	bge.w	80061a0 <_dtoa_r+0x658>
 8005fe8:	9b04      	ldr	r3, [sp, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f300 80d8 	bgt.w	80061a0 <_dtoa_r+0x658>
 8005ff0:	f040 826f 	bne.w	80064d2 <_dtoa_r+0x98a>
 8005ff4:	4b68      	ldr	r3, [pc, #416]	; (8006198 <_dtoa_r+0x650>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa fb1c 	bl	8000638 <__aeabi_dmul>
 8006000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006004:	f7fa fd9e 	bl	8000b44 <__aeabi_dcmpge>
 8006008:	9e04      	ldr	r6, [sp, #16]
 800600a:	4637      	mov	r7, r6
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 8245 	bne.w	800649c <_dtoa_r+0x954>
 8006012:	9d00      	ldr	r5, [sp, #0]
 8006014:	2331      	movs	r3, #49	; 0x31
 8006016:	f805 3b01 	strb.w	r3, [r5], #1
 800601a:	f10b 0b01 	add.w	fp, fp, #1
 800601e:	e241      	b.n	80064a4 <_dtoa_r+0x95c>
 8006020:	07f2      	lsls	r2, r6, #31
 8006022:	d505      	bpl.n	8006030 <_dtoa_r+0x4e8>
 8006024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006028:	f7fa fb06 	bl	8000638 <__aeabi_dmul>
 800602c:	3501      	adds	r5, #1
 800602e:	2301      	movs	r3, #1
 8006030:	1076      	asrs	r6, r6, #1
 8006032:	3708      	adds	r7, #8
 8006034:	e773      	b.n	8005f1e <_dtoa_r+0x3d6>
 8006036:	2502      	movs	r5, #2
 8006038:	e775      	b.n	8005f26 <_dtoa_r+0x3de>
 800603a:	9e04      	ldr	r6, [sp, #16]
 800603c:	465f      	mov	r7, fp
 800603e:	e792      	b.n	8005f66 <_dtoa_r+0x41e>
 8006040:	9900      	ldr	r1, [sp, #0]
 8006042:	4b50      	ldr	r3, [pc, #320]	; (8006184 <_dtoa_r+0x63c>)
 8006044:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006048:	4431      	add	r1, r6
 800604a:	9102      	str	r1, [sp, #8]
 800604c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800604e:	eeb0 9a47 	vmov.f32	s18, s14
 8006052:	eef0 9a67 	vmov.f32	s19, s15
 8006056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800605a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800605e:	2900      	cmp	r1, #0
 8006060:	d044      	beq.n	80060ec <_dtoa_r+0x5a4>
 8006062:	494e      	ldr	r1, [pc, #312]	; (800619c <_dtoa_r+0x654>)
 8006064:	2000      	movs	r0, #0
 8006066:	f7fa fc11 	bl	800088c <__aeabi_ddiv>
 800606a:	ec53 2b19 	vmov	r2, r3, d9
 800606e:	f7fa f92b 	bl	80002c8 <__aeabi_dsub>
 8006072:	9d00      	ldr	r5, [sp, #0]
 8006074:	ec41 0b19 	vmov	d9, r0, r1
 8006078:	4649      	mov	r1, r9
 800607a:	4640      	mov	r0, r8
 800607c:	f7fa fd8c 	bl	8000b98 <__aeabi_d2iz>
 8006080:	4606      	mov	r6, r0
 8006082:	f7fa fa6f 	bl	8000564 <__aeabi_i2d>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4640      	mov	r0, r8
 800608c:	4649      	mov	r1, r9
 800608e:	f7fa f91b 	bl	80002c8 <__aeabi_dsub>
 8006092:	3630      	adds	r6, #48	; 0x30
 8006094:	f805 6b01 	strb.w	r6, [r5], #1
 8006098:	ec53 2b19 	vmov	r2, r3, d9
 800609c:	4680      	mov	r8, r0
 800609e:	4689      	mov	r9, r1
 80060a0:	f7fa fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d164      	bne.n	8006172 <_dtoa_r+0x62a>
 80060a8:	4642      	mov	r2, r8
 80060aa:	464b      	mov	r3, r9
 80060ac:	4937      	ldr	r1, [pc, #220]	; (800618c <_dtoa_r+0x644>)
 80060ae:	2000      	movs	r0, #0
 80060b0:	f7fa f90a 	bl	80002c8 <__aeabi_dsub>
 80060b4:	ec53 2b19 	vmov	r2, r3, d9
 80060b8:	f7fa fd30 	bl	8000b1c <__aeabi_dcmplt>
 80060bc:	2800      	cmp	r0, #0
 80060be:	f040 80b6 	bne.w	800622e <_dtoa_r+0x6e6>
 80060c2:	9b02      	ldr	r3, [sp, #8]
 80060c4:	429d      	cmp	r5, r3
 80060c6:	f43f af7c 	beq.w	8005fc2 <_dtoa_r+0x47a>
 80060ca:	4b31      	ldr	r3, [pc, #196]	; (8006190 <_dtoa_r+0x648>)
 80060cc:	ec51 0b19 	vmov	r0, r1, d9
 80060d0:	2200      	movs	r2, #0
 80060d2:	f7fa fab1 	bl	8000638 <__aeabi_dmul>
 80060d6:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <_dtoa_r+0x648>)
 80060d8:	ec41 0b19 	vmov	d9, r0, r1
 80060dc:	2200      	movs	r2, #0
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa faa9 	bl	8000638 <__aeabi_dmul>
 80060e6:	4680      	mov	r8, r0
 80060e8:	4689      	mov	r9, r1
 80060ea:	e7c5      	b.n	8006078 <_dtoa_r+0x530>
 80060ec:	ec51 0b17 	vmov	r0, r1, d7
 80060f0:	f7fa faa2 	bl	8000638 <__aeabi_dmul>
 80060f4:	9b02      	ldr	r3, [sp, #8]
 80060f6:	9d00      	ldr	r5, [sp, #0]
 80060f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80060fa:	ec41 0b19 	vmov	d9, r0, r1
 80060fe:	4649      	mov	r1, r9
 8006100:	4640      	mov	r0, r8
 8006102:	f7fa fd49 	bl	8000b98 <__aeabi_d2iz>
 8006106:	4606      	mov	r6, r0
 8006108:	f7fa fa2c 	bl	8000564 <__aeabi_i2d>
 800610c:	3630      	adds	r6, #48	; 0x30
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4640      	mov	r0, r8
 8006114:	4649      	mov	r1, r9
 8006116:	f7fa f8d7 	bl	80002c8 <__aeabi_dsub>
 800611a:	f805 6b01 	strb.w	r6, [r5], #1
 800611e:	9b02      	ldr	r3, [sp, #8]
 8006120:	429d      	cmp	r5, r3
 8006122:	4680      	mov	r8, r0
 8006124:	4689      	mov	r9, r1
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	d124      	bne.n	8006176 <_dtoa_r+0x62e>
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <_dtoa_r+0x654>)
 800612e:	ec51 0b19 	vmov	r0, r1, d9
 8006132:	f7fa f8cb 	bl	80002cc <__adddf3>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f7fa fd0b 	bl	8000b58 <__aeabi_dcmpgt>
 8006142:	2800      	cmp	r0, #0
 8006144:	d173      	bne.n	800622e <_dtoa_r+0x6e6>
 8006146:	ec53 2b19 	vmov	r2, r3, d9
 800614a:	4914      	ldr	r1, [pc, #80]	; (800619c <_dtoa_r+0x654>)
 800614c:	2000      	movs	r0, #0
 800614e:	f7fa f8bb 	bl	80002c8 <__aeabi_dsub>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	f7fa fcdf 	bl	8000b1c <__aeabi_dcmplt>
 800615e:	2800      	cmp	r0, #0
 8006160:	f43f af2f 	beq.w	8005fc2 <_dtoa_r+0x47a>
 8006164:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006166:	1e6b      	subs	r3, r5, #1
 8006168:	930f      	str	r3, [sp, #60]	; 0x3c
 800616a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800616e:	2b30      	cmp	r3, #48	; 0x30
 8006170:	d0f8      	beq.n	8006164 <_dtoa_r+0x61c>
 8006172:	46bb      	mov	fp, r7
 8006174:	e04a      	b.n	800620c <_dtoa_r+0x6c4>
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <_dtoa_r+0x648>)
 8006178:	f7fa fa5e 	bl	8000638 <__aeabi_dmul>
 800617c:	4680      	mov	r8, r0
 800617e:	4689      	mov	r9, r1
 8006180:	e7bd      	b.n	80060fe <_dtoa_r+0x5b6>
 8006182:	bf00      	nop
 8006184:	08008040 	.word	0x08008040
 8006188:	08008018 	.word	0x08008018
 800618c:	3ff00000 	.word	0x3ff00000
 8006190:	40240000 	.word	0x40240000
 8006194:	401c0000 	.word	0x401c0000
 8006198:	40140000 	.word	0x40140000
 800619c:	3fe00000 	.word	0x3fe00000
 80061a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061a4:	9d00      	ldr	r5, [sp, #0]
 80061a6:	4642      	mov	r2, r8
 80061a8:	464b      	mov	r3, r9
 80061aa:	4630      	mov	r0, r6
 80061ac:	4639      	mov	r1, r7
 80061ae:	f7fa fb6d 	bl	800088c <__aeabi_ddiv>
 80061b2:	f7fa fcf1 	bl	8000b98 <__aeabi_d2iz>
 80061b6:	9001      	str	r0, [sp, #4]
 80061b8:	f7fa f9d4 	bl	8000564 <__aeabi_i2d>
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	f7fa fa3a 	bl	8000638 <__aeabi_dmul>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4630      	mov	r0, r6
 80061ca:	4639      	mov	r1, r7
 80061cc:	f7fa f87c 	bl	80002c8 <__aeabi_dsub>
 80061d0:	9e01      	ldr	r6, [sp, #4]
 80061d2:	9f04      	ldr	r7, [sp, #16]
 80061d4:	3630      	adds	r6, #48	; 0x30
 80061d6:	f805 6b01 	strb.w	r6, [r5], #1
 80061da:	9e00      	ldr	r6, [sp, #0]
 80061dc:	1bae      	subs	r6, r5, r6
 80061de:	42b7      	cmp	r7, r6
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	d134      	bne.n	8006250 <_dtoa_r+0x708>
 80061e6:	f7fa f871 	bl	80002cc <__adddf3>
 80061ea:	4642      	mov	r2, r8
 80061ec:	464b      	mov	r3, r9
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	f7fa fcb1 	bl	8000b58 <__aeabi_dcmpgt>
 80061f6:	b9c8      	cbnz	r0, 800622c <_dtoa_r+0x6e4>
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	4630      	mov	r0, r6
 80061fe:	4639      	mov	r1, r7
 8006200:	f7fa fc82 	bl	8000b08 <__aeabi_dcmpeq>
 8006204:	b110      	cbz	r0, 800620c <_dtoa_r+0x6c4>
 8006206:	9b01      	ldr	r3, [sp, #4]
 8006208:	07db      	lsls	r3, r3, #31
 800620a:	d40f      	bmi.n	800622c <_dtoa_r+0x6e4>
 800620c:	4651      	mov	r1, sl
 800620e:	4620      	mov	r0, r4
 8006210:	f000 fbcc 	bl	80069ac <_Bfree>
 8006214:	2300      	movs	r3, #0
 8006216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006218:	702b      	strb	r3, [r5, #0]
 800621a:	f10b 0301 	add.w	r3, fp, #1
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006222:	2b00      	cmp	r3, #0
 8006224:	f43f ace2 	beq.w	8005bec <_dtoa_r+0xa4>
 8006228:	601d      	str	r5, [r3, #0]
 800622a:	e4df      	b.n	8005bec <_dtoa_r+0xa4>
 800622c:	465f      	mov	r7, fp
 800622e:	462b      	mov	r3, r5
 8006230:	461d      	mov	r5, r3
 8006232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006236:	2a39      	cmp	r2, #57	; 0x39
 8006238:	d106      	bne.n	8006248 <_dtoa_r+0x700>
 800623a:	9a00      	ldr	r2, [sp, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d1f7      	bne.n	8006230 <_dtoa_r+0x6e8>
 8006240:	9900      	ldr	r1, [sp, #0]
 8006242:	2230      	movs	r2, #48	; 0x30
 8006244:	3701      	adds	r7, #1
 8006246:	700a      	strb	r2, [r1, #0]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	3201      	adds	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e790      	b.n	8006172 <_dtoa_r+0x62a>
 8006250:	4ba3      	ldr	r3, [pc, #652]	; (80064e0 <_dtoa_r+0x998>)
 8006252:	2200      	movs	r2, #0
 8006254:	f7fa f9f0 	bl	8000638 <__aeabi_dmul>
 8006258:	2200      	movs	r2, #0
 800625a:	2300      	movs	r3, #0
 800625c:	4606      	mov	r6, r0
 800625e:	460f      	mov	r7, r1
 8006260:	f7fa fc52 	bl	8000b08 <__aeabi_dcmpeq>
 8006264:	2800      	cmp	r0, #0
 8006266:	d09e      	beq.n	80061a6 <_dtoa_r+0x65e>
 8006268:	e7d0      	b.n	800620c <_dtoa_r+0x6c4>
 800626a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800626c:	2a00      	cmp	r2, #0
 800626e:	f000 80ca 	beq.w	8006406 <_dtoa_r+0x8be>
 8006272:	9a07      	ldr	r2, [sp, #28]
 8006274:	2a01      	cmp	r2, #1
 8006276:	f300 80ad 	bgt.w	80063d4 <_dtoa_r+0x88c>
 800627a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800627c:	2a00      	cmp	r2, #0
 800627e:	f000 80a5 	beq.w	80063cc <_dtoa_r+0x884>
 8006282:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006286:	9e08      	ldr	r6, [sp, #32]
 8006288:	9d05      	ldr	r5, [sp, #20]
 800628a:	9a05      	ldr	r2, [sp, #20]
 800628c:	441a      	add	r2, r3
 800628e:	9205      	str	r2, [sp, #20]
 8006290:	9a06      	ldr	r2, [sp, #24]
 8006292:	2101      	movs	r1, #1
 8006294:	441a      	add	r2, r3
 8006296:	4620      	mov	r0, r4
 8006298:	9206      	str	r2, [sp, #24]
 800629a:	f000 fc3d 	bl	8006b18 <__i2b>
 800629e:	4607      	mov	r7, r0
 80062a0:	b165      	cbz	r5, 80062bc <_dtoa_r+0x774>
 80062a2:	9b06      	ldr	r3, [sp, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dd09      	ble.n	80062bc <_dtoa_r+0x774>
 80062a8:	42ab      	cmp	r3, r5
 80062aa:	9a05      	ldr	r2, [sp, #20]
 80062ac:	bfa8      	it	ge
 80062ae:	462b      	movge	r3, r5
 80062b0:	1ad2      	subs	r2, r2, r3
 80062b2:	9205      	str	r2, [sp, #20]
 80062b4:	9a06      	ldr	r2, [sp, #24]
 80062b6:	1aed      	subs	r5, r5, r3
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	9306      	str	r3, [sp, #24]
 80062bc:	9b08      	ldr	r3, [sp, #32]
 80062be:	b1f3      	cbz	r3, 80062fe <_dtoa_r+0x7b6>
 80062c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80a3 	beq.w	800640e <_dtoa_r+0x8c6>
 80062c8:	2e00      	cmp	r6, #0
 80062ca:	dd10      	ble.n	80062ee <_dtoa_r+0x7a6>
 80062cc:	4639      	mov	r1, r7
 80062ce:	4632      	mov	r2, r6
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 fce1 	bl	8006c98 <__pow5mult>
 80062d6:	4652      	mov	r2, sl
 80062d8:	4601      	mov	r1, r0
 80062da:	4607      	mov	r7, r0
 80062dc:	4620      	mov	r0, r4
 80062de:	f000 fc31 	bl	8006b44 <__multiply>
 80062e2:	4651      	mov	r1, sl
 80062e4:	4680      	mov	r8, r0
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 fb60 	bl	80069ac <_Bfree>
 80062ec:	46c2      	mov	sl, r8
 80062ee:	9b08      	ldr	r3, [sp, #32]
 80062f0:	1b9a      	subs	r2, r3, r6
 80062f2:	d004      	beq.n	80062fe <_dtoa_r+0x7b6>
 80062f4:	4651      	mov	r1, sl
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 fcce 	bl	8006c98 <__pow5mult>
 80062fc:	4682      	mov	sl, r0
 80062fe:	2101      	movs	r1, #1
 8006300:	4620      	mov	r0, r4
 8006302:	f000 fc09 	bl	8006b18 <__i2b>
 8006306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006308:	2b00      	cmp	r3, #0
 800630a:	4606      	mov	r6, r0
 800630c:	f340 8081 	ble.w	8006412 <_dtoa_r+0x8ca>
 8006310:	461a      	mov	r2, r3
 8006312:	4601      	mov	r1, r0
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fcbf 	bl	8006c98 <__pow5mult>
 800631a:	9b07      	ldr	r3, [sp, #28]
 800631c:	2b01      	cmp	r3, #1
 800631e:	4606      	mov	r6, r0
 8006320:	dd7a      	ble.n	8006418 <_dtoa_r+0x8d0>
 8006322:	f04f 0800 	mov.w	r8, #0
 8006326:	6933      	ldr	r3, [r6, #16]
 8006328:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800632c:	6918      	ldr	r0, [r3, #16]
 800632e:	f000 fba5 	bl	8006a7c <__hi0bits>
 8006332:	f1c0 0020 	rsb	r0, r0, #32
 8006336:	9b06      	ldr	r3, [sp, #24]
 8006338:	4418      	add	r0, r3
 800633a:	f010 001f 	ands.w	r0, r0, #31
 800633e:	f000 8094 	beq.w	800646a <_dtoa_r+0x922>
 8006342:	f1c0 0320 	rsb	r3, r0, #32
 8006346:	2b04      	cmp	r3, #4
 8006348:	f340 8085 	ble.w	8006456 <_dtoa_r+0x90e>
 800634c:	9b05      	ldr	r3, [sp, #20]
 800634e:	f1c0 001c 	rsb	r0, r0, #28
 8006352:	4403      	add	r3, r0
 8006354:	9305      	str	r3, [sp, #20]
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	4403      	add	r3, r0
 800635a:	4405      	add	r5, r0
 800635c:	9306      	str	r3, [sp, #24]
 800635e:	9b05      	ldr	r3, [sp, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	dd05      	ble.n	8006370 <_dtoa_r+0x828>
 8006364:	4651      	mov	r1, sl
 8006366:	461a      	mov	r2, r3
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fcef 	bl	8006d4c <__lshift>
 800636e:	4682      	mov	sl, r0
 8006370:	9b06      	ldr	r3, [sp, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	dd05      	ble.n	8006382 <_dtoa_r+0x83a>
 8006376:	4631      	mov	r1, r6
 8006378:	461a      	mov	r2, r3
 800637a:	4620      	mov	r0, r4
 800637c:	f000 fce6 	bl	8006d4c <__lshift>
 8006380:	4606      	mov	r6, r0
 8006382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d072      	beq.n	800646e <_dtoa_r+0x926>
 8006388:	4631      	mov	r1, r6
 800638a:	4650      	mov	r0, sl
 800638c:	f000 fd4a 	bl	8006e24 <__mcmp>
 8006390:	2800      	cmp	r0, #0
 8006392:	da6c      	bge.n	800646e <_dtoa_r+0x926>
 8006394:	2300      	movs	r3, #0
 8006396:	4651      	mov	r1, sl
 8006398:	220a      	movs	r2, #10
 800639a:	4620      	mov	r0, r4
 800639c:	f000 fb28 	bl	80069f0 <__multadd>
 80063a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063a6:	4682      	mov	sl, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 81b0 	beq.w	800670e <_dtoa_r+0xbc6>
 80063ae:	2300      	movs	r3, #0
 80063b0:	4639      	mov	r1, r7
 80063b2:	220a      	movs	r2, #10
 80063b4:	4620      	mov	r0, r4
 80063b6:	f000 fb1b 	bl	80069f0 <__multadd>
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	4607      	mov	r7, r0
 80063c0:	f300 8096 	bgt.w	80064f0 <_dtoa_r+0x9a8>
 80063c4:	9b07      	ldr	r3, [sp, #28]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	dc59      	bgt.n	800647e <_dtoa_r+0x936>
 80063ca:	e091      	b.n	80064f0 <_dtoa_r+0x9a8>
 80063cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063d2:	e758      	b.n	8006286 <_dtoa_r+0x73e>
 80063d4:	9b04      	ldr	r3, [sp, #16]
 80063d6:	1e5e      	subs	r6, r3, #1
 80063d8:	9b08      	ldr	r3, [sp, #32]
 80063da:	42b3      	cmp	r3, r6
 80063dc:	bfbf      	itttt	lt
 80063de:	9b08      	ldrlt	r3, [sp, #32]
 80063e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80063e2:	9608      	strlt	r6, [sp, #32]
 80063e4:	1af3      	sublt	r3, r6, r3
 80063e6:	bfb4      	ite	lt
 80063e8:	18d2      	addlt	r2, r2, r3
 80063ea:	1b9e      	subge	r6, r3, r6
 80063ec:	9b04      	ldr	r3, [sp, #16]
 80063ee:	bfbc      	itt	lt
 80063f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80063f2:	2600      	movlt	r6, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfb7      	itett	lt
 80063f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80063fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006400:	1a9d      	sublt	r5, r3, r2
 8006402:	2300      	movlt	r3, #0
 8006404:	e741      	b.n	800628a <_dtoa_r+0x742>
 8006406:	9e08      	ldr	r6, [sp, #32]
 8006408:	9d05      	ldr	r5, [sp, #20]
 800640a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800640c:	e748      	b.n	80062a0 <_dtoa_r+0x758>
 800640e:	9a08      	ldr	r2, [sp, #32]
 8006410:	e770      	b.n	80062f4 <_dtoa_r+0x7ac>
 8006412:	9b07      	ldr	r3, [sp, #28]
 8006414:	2b01      	cmp	r3, #1
 8006416:	dc19      	bgt.n	800644c <_dtoa_r+0x904>
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	b9bb      	cbnz	r3, 800644c <_dtoa_r+0x904>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006422:	b99b      	cbnz	r3, 800644c <_dtoa_r+0x904>
 8006424:	9b03      	ldr	r3, [sp, #12]
 8006426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800642a:	0d1b      	lsrs	r3, r3, #20
 800642c:	051b      	lsls	r3, r3, #20
 800642e:	b183      	cbz	r3, 8006452 <_dtoa_r+0x90a>
 8006430:	9b05      	ldr	r3, [sp, #20]
 8006432:	3301      	adds	r3, #1
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	9b06      	ldr	r3, [sp, #24]
 8006438:	3301      	adds	r3, #1
 800643a:	9306      	str	r3, [sp, #24]
 800643c:	f04f 0801 	mov.w	r8, #1
 8006440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006442:	2b00      	cmp	r3, #0
 8006444:	f47f af6f 	bne.w	8006326 <_dtoa_r+0x7de>
 8006448:	2001      	movs	r0, #1
 800644a:	e774      	b.n	8006336 <_dtoa_r+0x7ee>
 800644c:	f04f 0800 	mov.w	r8, #0
 8006450:	e7f6      	b.n	8006440 <_dtoa_r+0x8f8>
 8006452:	4698      	mov	r8, r3
 8006454:	e7f4      	b.n	8006440 <_dtoa_r+0x8f8>
 8006456:	d082      	beq.n	800635e <_dtoa_r+0x816>
 8006458:	9a05      	ldr	r2, [sp, #20]
 800645a:	331c      	adds	r3, #28
 800645c:	441a      	add	r2, r3
 800645e:	9205      	str	r2, [sp, #20]
 8006460:	9a06      	ldr	r2, [sp, #24]
 8006462:	441a      	add	r2, r3
 8006464:	441d      	add	r5, r3
 8006466:	9206      	str	r2, [sp, #24]
 8006468:	e779      	b.n	800635e <_dtoa_r+0x816>
 800646a:	4603      	mov	r3, r0
 800646c:	e7f4      	b.n	8006458 <_dtoa_r+0x910>
 800646e:	9b04      	ldr	r3, [sp, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	dc37      	bgt.n	80064e4 <_dtoa_r+0x99c>
 8006474:	9b07      	ldr	r3, [sp, #28]
 8006476:	2b02      	cmp	r3, #2
 8006478:	dd34      	ble.n	80064e4 <_dtoa_r+0x99c>
 800647a:	9b04      	ldr	r3, [sp, #16]
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	b963      	cbnz	r3, 800649c <_dtoa_r+0x954>
 8006482:	4631      	mov	r1, r6
 8006484:	2205      	movs	r2, #5
 8006486:	4620      	mov	r0, r4
 8006488:	f000 fab2 	bl	80069f0 <__multadd>
 800648c:	4601      	mov	r1, r0
 800648e:	4606      	mov	r6, r0
 8006490:	4650      	mov	r0, sl
 8006492:	f000 fcc7 	bl	8006e24 <__mcmp>
 8006496:	2800      	cmp	r0, #0
 8006498:	f73f adbb 	bgt.w	8006012 <_dtoa_r+0x4ca>
 800649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649e:	9d00      	ldr	r5, [sp, #0]
 80064a0:	ea6f 0b03 	mvn.w	fp, r3
 80064a4:	f04f 0800 	mov.w	r8, #0
 80064a8:	4631      	mov	r1, r6
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 fa7e 	bl	80069ac <_Bfree>
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	f43f aeab 	beq.w	800620c <_dtoa_r+0x6c4>
 80064b6:	f1b8 0f00 	cmp.w	r8, #0
 80064ba:	d005      	beq.n	80064c8 <_dtoa_r+0x980>
 80064bc:	45b8      	cmp	r8, r7
 80064be:	d003      	beq.n	80064c8 <_dtoa_r+0x980>
 80064c0:	4641      	mov	r1, r8
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fa72 	bl	80069ac <_Bfree>
 80064c8:	4639      	mov	r1, r7
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 fa6e 	bl	80069ac <_Bfree>
 80064d0:	e69c      	b.n	800620c <_dtoa_r+0x6c4>
 80064d2:	2600      	movs	r6, #0
 80064d4:	4637      	mov	r7, r6
 80064d6:	e7e1      	b.n	800649c <_dtoa_r+0x954>
 80064d8:	46bb      	mov	fp, r7
 80064da:	4637      	mov	r7, r6
 80064dc:	e599      	b.n	8006012 <_dtoa_r+0x4ca>
 80064de:	bf00      	nop
 80064e0:	40240000 	.word	0x40240000
 80064e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 80c8 	beq.w	800667c <_dtoa_r+0xb34>
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	2d00      	cmp	r5, #0
 80064f2:	dd05      	ble.n	8006500 <_dtoa_r+0x9b8>
 80064f4:	4639      	mov	r1, r7
 80064f6:	462a      	mov	r2, r5
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fc27 	bl	8006d4c <__lshift>
 80064fe:	4607      	mov	r7, r0
 8006500:	f1b8 0f00 	cmp.w	r8, #0
 8006504:	d05b      	beq.n	80065be <_dtoa_r+0xa76>
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	4620      	mov	r0, r4
 800650a:	f000 fa0f 	bl	800692c <_Balloc>
 800650e:	4605      	mov	r5, r0
 8006510:	b928      	cbnz	r0, 800651e <_dtoa_r+0x9d6>
 8006512:	4b83      	ldr	r3, [pc, #524]	; (8006720 <_dtoa_r+0xbd8>)
 8006514:	4602      	mov	r2, r0
 8006516:	f240 21ef 	movw	r1, #751	; 0x2ef
 800651a:	f7ff bb2e 	b.w	8005b7a <_dtoa_r+0x32>
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	3202      	adds	r2, #2
 8006522:	0092      	lsls	r2, r2, #2
 8006524:	f107 010c 	add.w	r1, r7, #12
 8006528:	300c      	adds	r0, #12
 800652a:	f000 fe39 	bl	80071a0 <memcpy>
 800652e:	2201      	movs	r2, #1
 8006530:	4629      	mov	r1, r5
 8006532:	4620      	mov	r0, r4
 8006534:	f000 fc0a 	bl	8006d4c <__lshift>
 8006538:	9b00      	ldr	r3, [sp, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006542:	4413      	add	r3, r2
 8006544:	9308      	str	r3, [sp, #32]
 8006546:	9b02      	ldr	r3, [sp, #8]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	46b8      	mov	r8, r7
 800654e:	9306      	str	r3, [sp, #24]
 8006550:	4607      	mov	r7, r0
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	4631      	mov	r1, r6
 8006556:	3b01      	subs	r3, #1
 8006558:	4650      	mov	r0, sl
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	f7ff fa69 	bl	8005a32 <quorem>
 8006560:	4641      	mov	r1, r8
 8006562:	9002      	str	r0, [sp, #8]
 8006564:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006568:	4650      	mov	r0, sl
 800656a:	f000 fc5b 	bl	8006e24 <__mcmp>
 800656e:	463a      	mov	r2, r7
 8006570:	9005      	str	r0, [sp, #20]
 8006572:	4631      	mov	r1, r6
 8006574:	4620      	mov	r0, r4
 8006576:	f000 fc71 	bl	8006e5c <__mdiff>
 800657a:	68c2      	ldr	r2, [r0, #12]
 800657c:	4605      	mov	r5, r0
 800657e:	bb02      	cbnz	r2, 80065c2 <_dtoa_r+0xa7a>
 8006580:	4601      	mov	r1, r0
 8006582:	4650      	mov	r0, sl
 8006584:	f000 fc4e 	bl	8006e24 <__mcmp>
 8006588:	4602      	mov	r2, r0
 800658a:	4629      	mov	r1, r5
 800658c:	4620      	mov	r0, r4
 800658e:	9209      	str	r2, [sp, #36]	; 0x24
 8006590:	f000 fa0c 	bl	80069ac <_Bfree>
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006598:	9d04      	ldr	r5, [sp, #16]
 800659a:	ea43 0102 	orr.w	r1, r3, r2
 800659e:	9b06      	ldr	r3, [sp, #24]
 80065a0:	4319      	orrs	r1, r3
 80065a2:	d110      	bne.n	80065c6 <_dtoa_r+0xa7e>
 80065a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065a8:	d029      	beq.n	80065fe <_dtoa_r+0xab6>
 80065aa:	9b05      	ldr	r3, [sp, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dd02      	ble.n	80065b6 <_dtoa_r+0xa6e>
 80065b0:	9b02      	ldr	r3, [sp, #8]
 80065b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80065b6:	9b01      	ldr	r3, [sp, #4]
 80065b8:	f883 9000 	strb.w	r9, [r3]
 80065bc:	e774      	b.n	80064a8 <_dtoa_r+0x960>
 80065be:	4638      	mov	r0, r7
 80065c0:	e7ba      	b.n	8006538 <_dtoa_r+0x9f0>
 80065c2:	2201      	movs	r2, #1
 80065c4:	e7e1      	b.n	800658a <_dtoa_r+0xa42>
 80065c6:	9b05      	ldr	r3, [sp, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	db04      	blt.n	80065d6 <_dtoa_r+0xa8e>
 80065cc:	9907      	ldr	r1, [sp, #28]
 80065ce:	430b      	orrs	r3, r1
 80065d0:	9906      	ldr	r1, [sp, #24]
 80065d2:	430b      	orrs	r3, r1
 80065d4:	d120      	bne.n	8006618 <_dtoa_r+0xad0>
 80065d6:	2a00      	cmp	r2, #0
 80065d8:	dded      	ble.n	80065b6 <_dtoa_r+0xa6e>
 80065da:	4651      	mov	r1, sl
 80065dc:	2201      	movs	r2, #1
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 fbb4 	bl	8006d4c <__lshift>
 80065e4:	4631      	mov	r1, r6
 80065e6:	4682      	mov	sl, r0
 80065e8:	f000 fc1c 	bl	8006e24 <__mcmp>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	dc03      	bgt.n	80065f8 <_dtoa_r+0xab0>
 80065f0:	d1e1      	bne.n	80065b6 <_dtoa_r+0xa6e>
 80065f2:	f019 0f01 	tst.w	r9, #1
 80065f6:	d0de      	beq.n	80065b6 <_dtoa_r+0xa6e>
 80065f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065fc:	d1d8      	bne.n	80065b0 <_dtoa_r+0xa68>
 80065fe:	9a01      	ldr	r2, [sp, #4]
 8006600:	2339      	movs	r3, #57	; 0x39
 8006602:	7013      	strb	r3, [r2, #0]
 8006604:	462b      	mov	r3, r5
 8006606:	461d      	mov	r5, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800660e:	2a39      	cmp	r2, #57	; 0x39
 8006610:	d06c      	beq.n	80066ec <_dtoa_r+0xba4>
 8006612:	3201      	adds	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e747      	b.n	80064a8 <_dtoa_r+0x960>
 8006618:	2a00      	cmp	r2, #0
 800661a:	dd07      	ble.n	800662c <_dtoa_r+0xae4>
 800661c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006620:	d0ed      	beq.n	80065fe <_dtoa_r+0xab6>
 8006622:	9a01      	ldr	r2, [sp, #4]
 8006624:	f109 0301 	add.w	r3, r9, #1
 8006628:	7013      	strb	r3, [r2, #0]
 800662a:	e73d      	b.n	80064a8 <_dtoa_r+0x960>
 800662c:	9b04      	ldr	r3, [sp, #16]
 800662e:	9a08      	ldr	r2, [sp, #32]
 8006630:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006634:	4293      	cmp	r3, r2
 8006636:	d043      	beq.n	80066c0 <_dtoa_r+0xb78>
 8006638:	4651      	mov	r1, sl
 800663a:	2300      	movs	r3, #0
 800663c:	220a      	movs	r2, #10
 800663e:	4620      	mov	r0, r4
 8006640:	f000 f9d6 	bl	80069f0 <__multadd>
 8006644:	45b8      	cmp	r8, r7
 8006646:	4682      	mov	sl, r0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	f04f 020a 	mov.w	r2, #10
 8006650:	4641      	mov	r1, r8
 8006652:	4620      	mov	r0, r4
 8006654:	d107      	bne.n	8006666 <_dtoa_r+0xb1e>
 8006656:	f000 f9cb 	bl	80069f0 <__multadd>
 800665a:	4680      	mov	r8, r0
 800665c:	4607      	mov	r7, r0
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	e775      	b.n	8006552 <_dtoa_r+0xa0a>
 8006666:	f000 f9c3 	bl	80069f0 <__multadd>
 800666a:	4639      	mov	r1, r7
 800666c:	4680      	mov	r8, r0
 800666e:	2300      	movs	r3, #0
 8006670:	220a      	movs	r2, #10
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f9bc 	bl	80069f0 <__multadd>
 8006678:	4607      	mov	r7, r0
 800667a:	e7f0      	b.n	800665e <_dtoa_r+0xb16>
 800667c:	9b04      	ldr	r3, [sp, #16]
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	9d00      	ldr	r5, [sp, #0]
 8006682:	4631      	mov	r1, r6
 8006684:	4650      	mov	r0, sl
 8006686:	f7ff f9d4 	bl	8005a32 <quorem>
 800668a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800668e:	9b00      	ldr	r3, [sp, #0]
 8006690:	f805 9b01 	strb.w	r9, [r5], #1
 8006694:	1aea      	subs	r2, r5, r3
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	4293      	cmp	r3, r2
 800669a:	dd07      	ble.n	80066ac <_dtoa_r+0xb64>
 800669c:	4651      	mov	r1, sl
 800669e:	2300      	movs	r3, #0
 80066a0:	220a      	movs	r2, #10
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 f9a4 	bl	80069f0 <__multadd>
 80066a8:	4682      	mov	sl, r0
 80066aa:	e7ea      	b.n	8006682 <_dtoa_r+0xb3a>
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bfc8      	it	gt
 80066b2:	461d      	movgt	r5, r3
 80066b4:	9b00      	ldr	r3, [sp, #0]
 80066b6:	bfd8      	it	le
 80066b8:	2501      	movle	r5, #1
 80066ba:	441d      	add	r5, r3
 80066bc:	f04f 0800 	mov.w	r8, #0
 80066c0:	4651      	mov	r1, sl
 80066c2:	2201      	movs	r2, #1
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 fb41 	bl	8006d4c <__lshift>
 80066ca:	4631      	mov	r1, r6
 80066cc:	4682      	mov	sl, r0
 80066ce:	f000 fba9 	bl	8006e24 <__mcmp>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	dc96      	bgt.n	8006604 <_dtoa_r+0xabc>
 80066d6:	d102      	bne.n	80066de <_dtoa_r+0xb96>
 80066d8:	f019 0f01 	tst.w	r9, #1
 80066dc:	d192      	bne.n	8006604 <_dtoa_r+0xabc>
 80066de:	462b      	mov	r3, r5
 80066e0:	461d      	mov	r5, r3
 80066e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066e6:	2a30      	cmp	r2, #48	; 0x30
 80066e8:	d0fa      	beq.n	80066e0 <_dtoa_r+0xb98>
 80066ea:	e6dd      	b.n	80064a8 <_dtoa_r+0x960>
 80066ec:	9a00      	ldr	r2, [sp, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d189      	bne.n	8006606 <_dtoa_r+0xabe>
 80066f2:	f10b 0b01 	add.w	fp, fp, #1
 80066f6:	2331      	movs	r3, #49	; 0x31
 80066f8:	e796      	b.n	8006628 <_dtoa_r+0xae0>
 80066fa:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <_dtoa_r+0xbdc>)
 80066fc:	f7ff ba99 	b.w	8005c32 <_dtoa_r+0xea>
 8006700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006702:	2b00      	cmp	r3, #0
 8006704:	f47f aa6d 	bne.w	8005be2 <_dtoa_r+0x9a>
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <_dtoa_r+0xbe0>)
 800670a:	f7ff ba92 	b.w	8005c32 <_dtoa_r+0xea>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dcb5      	bgt.n	8006680 <_dtoa_r+0xb38>
 8006714:	9b07      	ldr	r3, [sp, #28]
 8006716:	2b02      	cmp	r3, #2
 8006718:	f73f aeb1 	bgt.w	800647e <_dtoa_r+0x936>
 800671c:	e7b0      	b.n	8006680 <_dtoa_r+0xb38>
 800671e:	bf00      	nop
 8006720:	08007fa8 	.word	0x08007fa8
 8006724:	08007f08 	.word	0x08007f08
 8006728:	08007f2c 	.word	0x08007f2c

0800672c <_free_r>:
 800672c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800672e:	2900      	cmp	r1, #0
 8006730:	d044      	beq.n	80067bc <_free_r+0x90>
 8006732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006736:	9001      	str	r0, [sp, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f1a1 0404 	sub.w	r4, r1, #4
 800673e:	bfb8      	it	lt
 8006740:	18e4      	addlt	r4, r4, r3
 8006742:	f000 f8e7 	bl	8006914 <__malloc_lock>
 8006746:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <_free_r+0x94>)
 8006748:	9801      	ldr	r0, [sp, #4]
 800674a:	6813      	ldr	r3, [r2, #0]
 800674c:	b933      	cbnz	r3, 800675c <_free_r+0x30>
 800674e:	6063      	str	r3, [r4, #4]
 8006750:	6014      	str	r4, [r2, #0]
 8006752:	b003      	add	sp, #12
 8006754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006758:	f000 b8e2 	b.w	8006920 <__malloc_unlock>
 800675c:	42a3      	cmp	r3, r4
 800675e:	d908      	bls.n	8006772 <_free_r+0x46>
 8006760:	6825      	ldr	r5, [r4, #0]
 8006762:	1961      	adds	r1, r4, r5
 8006764:	428b      	cmp	r3, r1
 8006766:	bf01      	itttt	eq
 8006768:	6819      	ldreq	r1, [r3, #0]
 800676a:	685b      	ldreq	r3, [r3, #4]
 800676c:	1949      	addeq	r1, r1, r5
 800676e:	6021      	streq	r1, [r4, #0]
 8006770:	e7ed      	b.n	800674e <_free_r+0x22>
 8006772:	461a      	mov	r2, r3
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	b10b      	cbz	r3, 800677c <_free_r+0x50>
 8006778:	42a3      	cmp	r3, r4
 800677a:	d9fa      	bls.n	8006772 <_free_r+0x46>
 800677c:	6811      	ldr	r1, [r2, #0]
 800677e:	1855      	adds	r5, r2, r1
 8006780:	42a5      	cmp	r5, r4
 8006782:	d10b      	bne.n	800679c <_free_r+0x70>
 8006784:	6824      	ldr	r4, [r4, #0]
 8006786:	4421      	add	r1, r4
 8006788:	1854      	adds	r4, r2, r1
 800678a:	42a3      	cmp	r3, r4
 800678c:	6011      	str	r1, [r2, #0]
 800678e:	d1e0      	bne.n	8006752 <_free_r+0x26>
 8006790:	681c      	ldr	r4, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	6053      	str	r3, [r2, #4]
 8006796:	440c      	add	r4, r1
 8006798:	6014      	str	r4, [r2, #0]
 800679a:	e7da      	b.n	8006752 <_free_r+0x26>
 800679c:	d902      	bls.n	80067a4 <_free_r+0x78>
 800679e:	230c      	movs	r3, #12
 80067a0:	6003      	str	r3, [r0, #0]
 80067a2:	e7d6      	b.n	8006752 <_free_r+0x26>
 80067a4:	6825      	ldr	r5, [r4, #0]
 80067a6:	1961      	adds	r1, r4, r5
 80067a8:	428b      	cmp	r3, r1
 80067aa:	bf04      	itt	eq
 80067ac:	6819      	ldreq	r1, [r3, #0]
 80067ae:	685b      	ldreq	r3, [r3, #4]
 80067b0:	6063      	str	r3, [r4, #4]
 80067b2:	bf04      	itt	eq
 80067b4:	1949      	addeq	r1, r1, r5
 80067b6:	6021      	streq	r1, [r4, #0]
 80067b8:	6054      	str	r4, [r2, #4]
 80067ba:	e7ca      	b.n	8006752 <_free_r+0x26>
 80067bc:	b003      	add	sp, #12
 80067be:	bd30      	pop	{r4, r5, pc}
 80067c0:	20000500 	.word	0x20000500

080067c4 <malloc>:
 80067c4:	4b02      	ldr	r3, [pc, #8]	; (80067d0 <malloc+0xc>)
 80067c6:	4601      	mov	r1, r0
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f000 b823 	b.w	8006814 <_malloc_r>
 80067ce:	bf00      	nop
 80067d0:	20000064 	.word	0x20000064

080067d4 <sbrk_aligned>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	4e0e      	ldr	r6, [pc, #56]	; (8006810 <sbrk_aligned+0x3c>)
 80067d8:	460c      	mov	r4, r1
 80067da:	6831      	ldr	r1, [r6, #0]
 80067dc:	4605      	mov	r5, r0
 80067de:	b911      	cbnz	r1, 80067e6 <sbrk_aligned+0x12>
 80067e0:	f000 fcce 	bl	8007180 <_sbrk_r>
 80067e4:	6030      	str	r0, [r6, #0]
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 fcc9 	bl	8007180 <_sbrk_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	d00a      	beq.n	8006808 <sbrk_aligned+0x34>
 80067f2:	1cc4      	adds	r4, r0, #3
 80067f4:	f024 0403 	bic.w	r4, r4, #3
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d007      	beq.n	800680c <sbrk_aligned+0x38>
 80067fc:	1a21      	subs	r1, r4, r0
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 fcbe 	bl	8007180 <_sbrk_r>
 8006804:	3001      	adds	r0, #1
 8006806:	d101      	bne.n	800680c <sbrk_aligned+0x38>
 8006808:	f04f 34ff 	mov.w	r4, #4294967295
 800680c:	4620      	mov	r0, r4
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	20000504 	.word	0x20000504

08006814 <_malloc_r>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	1ccd      	adds	r5, r1, #3
 800681a:	f025 0503 	bic.w	r5, r5, #3
 800681e:	3508      	adds	r5, #8
 8006820:	2d0c      	cmp	r5, #12
 8006822:	bf38      	it	cc
 8006824:	250c      	movcc	r5, #12
 8006826:	2d00      	cmp	r5, #0
 8006828:	4607      	mov	r7, r0
 800682a:	db01      	blt.n	8006830 <_malloc_r+0x1c>
 800682c:	42a9      	cmp	r1, r5
 800682e:	d905      	bls.n	800683c <_malloc_r+0x28>
 8006830:	230c      	movs	r3, #12
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	2600      	movs	r6, #0
 8006836:	4630      	mov	r0, r6
 8006838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800683c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006910 <_malloc_r+0xfc>
 8006840:	f000 f868 	bl	8006914 <__malloc_lock>
 8006844:	f8d8 3000 	ldr.w	r3, [r8]
 8006848:	461c      	mov	r4, r3
 800684a:	bb5c      	cbnz	r4, 80068a4 <_malloc_r+0x90>
 800684c:	4629      	mov	r1, r5
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff ffc0 	bl	80067d4 <sbrk_aligned>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	4604      	mov	r4, r0
 8006858:	d155      	bne.n	8006906 <_malloc_r+0xf2>
 800685a:	f8d8 4000 	ldr.w	r4, [r8]
 800685e:	4626      	mov	r6, r4
 8006860:	2e00      	cmp	r6, #0
 8006862:	d145      	bne.n	80068f0 <_malloc_r+0xdc>
 8006864:	2c00      	cmp	r4, #0
 8006866:	d048      	beq.n	80068fa <_malloc_r+0xe6>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	4631      	mov	r1, r6
 800686c:	4638      	mov	r0, r7
 800686e:	eb04 0903 	add.w	r9, r4, r3
 8006872:	f000 fc85 	bl	8007180 <_sbrk_r>
 8006876:	4581      	cmp	r9, r0
 8006878:	d13f      	bne.n	80068fa <_malloc_r+0xe6>
 800687a:	6821      	ldr	r1, [r4, #0]
 800687c:	1a6d      	subs	r5, r5, r1
 800687e:	4629      	mov	r1, r5
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff ffa7 	bl	80067d4 <sbrk_aligned>
 8006886:	3001      	adds	r0, #1
 8006888:	d037      	beq.n	80068fa <_malloc_r+0xe6>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	442b      	add	r3, r5
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	f8d8 3000 	ldr.w	r3, [r8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d038      	beq.n	800690a <_malloc_r+0xf6>
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	42a2      	cmp	r2, r4
 800689c:	d12b      	bne.n	80068f6 <_malloc_r+0xe2>
 800689e:	2200      	movs	r2, #0
 80068a0:	605a      	str	r2, [r3, #4]
 80068a2:	e00f      	b.n	80068c4 <_malloc_r+0xb0>
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	1b52      	subs	r2, r2, r5
 80068a8:	d41f      	bmi.n	80068ea <_malloc_r+0xd6>
 80068aa:	2a0b      	cmp	r2, #11
 80068ac:	d917      	bls.n	80068de <_malloc_r+0xca>
 80068ae:	1961      	adds	r1, r4, r5
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	6025      	str	r5, [r4, #0]
 80068b4:	bf18      	it	ne
 80068b6:	6059      	strne	r1, [r3, #4]
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	bf08      	it	eq
 80068bc:	f8c8 1000 	streq.w	r1, [r8]
 80068c0:	5162      	str	r2, [r4, r5]
 80068c2:	604b      	str	r3, [r1, #4]
 80068c4:	4638      	mov	r0, r7
 80068c6:	f104 060b 	add.w	r6, r4, #11
 80068ca:	f000 f829 	bl	8006920 <__malloc_unlock>
 80068ce:	f026 0607 	bic.w	r6, r6, #7
 80068d2:	1d23      	adds	r3, r4, #4
 80068d4:	1af2      	subs	r2, r6, r3
 80068d6:	d0ae      	beq.n	8006836 <_malloc_r+0x22>
 80068d8:	1b9b      	subs	r3, r3, r6
 80068da:	50a3      	str	r3, [r4, r2]
 80068dc:	e7ab      	b.n	8006836 <_malloc_r+0x22>
 80068de:	42a3      	cmp	r3, r4
 80068e0:	6862      	ldr	r2, [r4, #4]
 80068e2:	d1dd      	bne.n	80068a0 <_malloc_r+0x8c>
 80068e4:	f8c8 2000 	str.w	r2, [r8]
 80068e8:	e7ec      	b.n	80068c4 <_malloc_r+0xb0>
 80068ea:	4623      	mov	r3, r4
 80068ec:	6864      	ldr	r4, [r4, #4]
 80068ee:	e7ac      	b.n	800684a <_malloc_r+0x36>
 80068f0:	4634      	mov	r4, r6
 80068f2:	6876      	ldr	r6, [r6, #4]
 80068f4:	e7b4      	b.n	8006860 <_malloc_r+0x4c>
 80068f6:	4613      	mov	r3, r2
 80068f8:	e7cc      	b.n	8006894 <_malloc_r+0x80>
 80068fa:	230c      	movs	r3, #12
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4638      	mov	r0, r7
 8006900:	f000 f80e 	bl	8006920 <__malloc_unlock>
 8006904:	e797      	b.n	8006836 <_malloc_r+0x22>
 8006906:	6025      	str	r5, [r4, #0]
 8006908:	e7dc      	b.n	80068c4 <_malloc_r+0xb0>
 800690a:	605b      	str	r3, [r3, #4]
 800690c:	deff      	udf	#255	; 0xff
 800690e:	bf00      	nop
 8006910:	20000500 	.word	0x20000500

08006914 <__malloc_lock>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__malloc_lock+0x8>)
 8006916:	f7ff b88a 	b.w	8005a2e <__retarget_lock_acquire_recursive>
 800691a:	bf00      	nop
 800691c:	200004fc 	.word	0x200004fc

08006920 <__malloc_unlock>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__malloc_unlock+0x8>)
 8006922:	f7ff b885 	b.w	8005a30 <__retarget_lock_release_recursive>
 8006926:	bf00      	nop
 8006928:	200004fc 	.word	0x200004fc

0800692c <_Balloc>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	69c6      	ldr	r6, [r0, #28]
 8006930:	4604      	mov	r4, r0
 8006932:	460d      	mov	r5, r1
 8006934:	b976      	cbnz	r6, 8006954 <_Balloc+0x28>
 8006936:	2010      	movs	r0, #16
 8006938:	f7ff ff44 	bl	80067c4 <malloc>
 800693c:	4602      	mov	r2, r0
 800693e:	61e0      	str	r0, [r4, #28]
 8006940:	b920      	cbnz	r0, 800694c <_Balloc+0x20>
 8006942:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <_Balloc+0x78>)
 8006944:	4818      	ldr	r0, [pc, #96]	; (80069a8 <_Balloc+0x7c>)
 8006946:	216b      	movs	r1, #107	; 0x6b
 8006948:	f000 fc38 	bl	80071bc <__assert_func>
 800694c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006950:	6006      	str	r6, [r0, #0]
 8006952:	60c6      	str	r6, [r0, #12]
 8006954:	69e6      	ldr	r6, [r4, #28]
 8006956:	68f3      	ldr	r3, [r6, #12]
 8006958:	b183      	cbz	r3, 800697c <_Balloc+0x50>
 800695a:	69e3      	ldr	r3, [r4, #28]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006962:	b9b8      	cbnz	r0, 8006994 <_Balloc+0x68>
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f605 	lsl.w	r6, r1, r5
 800696a:	1d72      	adds	r2, r6, #5
 800696c:	0092      	lsls	r2, r2, #2
 800696e:	4620      	mov	r0, r4
 8006970:	f000 fc42 	bl	80071f8 <_calloc_r>
 8006974:	b160      	cbz	r0, 8006990 <_Balloc+0x64>
 8006976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800697a:	e00e      	b.n	800699a <_Balloc+0x6e>
 800697c:	2221      	movs	r2, #33	; 0x21
 800697e:	2104      	movs	r1, #4
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fc39 	bl	80071f8 <_calloc_r>
 8006986:	69e3      	ldr	r3, [r4, #28]
 8006988:	60f0      	str	r0, [r6, #12]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e4      	bne.n	800695a <_Balloc+0x2e>
 8006990:	2000      	movs	r0, #0
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	6802      	ldr	r2, [r0, #0]
 8006996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800699a:	2300      	movs	r3, #0
 800699c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069a0:	e7f7      	b.n	8006992 <_Balloc+0x66>
 80069a2:	bf00      	nop
 80069a4:	08007f39 	.word	0x08007f39
 80069a8:	08007fb9 	.word	0x08007fb9

080069ac <_Bfree>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	69c6      	ldr	r6, [r0, #28]
 80069b0:	4605      	mov	r5, r0
 80069b2:	460c      	mov	r4, r1
 80069b4:	b976      	cbnz	r6, 80069d4 <_Bfree+0x28>
 80069b6:	2010      	movs	r0, #16
 80069b8:	f7ff ff04 	bl	80067c4 <malloc>
 80069bc:	4602      	mov	r2, r0
 80069be:	61e8      	str	r0, [r5, #28]
 80069c0:	b920      	cbnz	r0, 80069cc <_Bfree+0x20>
 80069c2:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <_Bfree+0x3c>)
 80069c4:	4809      	ldr	r0, [pc, #36]	; (80069ec <_Bfree+0x40>)
 80069c6:	218f      	movs	r1, #143	; 0x8f
 80069c8:	f000 fbf8 	bl	80071bc <__assert_func>
 80069cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069d0:	6006      	str	r6, [r0, #0]
 80069d2:	60c6      	str	r6, [r0, #12]
 80069d4:	b13c      	cbz	r4, 80069e6 <_Bfree+0x3a>
 80069d6:	69eb      	ldr	r3, [r5, #28]
 80069d8:	6862      	ldr	r2, [r4, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069e0:	6021      	str	r1, [r4, #0]
 80069e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
 80069e8:	08007f39 	.word	0x08007f39
 80069ec:	08007fb9 	.word	0x08007fb9

080069f0 <__multadd>:
 80069f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f4:	690d      	ldr	r5, [r1, #16]
 80069f6:	4607      	mov	r7, r0
 80069f8:	460c      	mov	r4, r1
 80069fa:	461e      	mov	r6, r3
 80069fc:	f101 0c14 	add.w	ip, r1, #20
 8006a00:	2000      	movs	r0, #0
 8006a02:	f8dc 3000 	ldr.w	r3, [ip]
 8006a06:	b299      	uxth	r1, r3
 8006a08:	fb02 6101 	mla	r1, r2, r1, r6
 8006a0c:	0c1e      	lsrs	r6, r3, #16
 8006a0e:	0c0b      	lsrs	r3, r1, #16
 8006a10:	fb02 3306 	mla	r3, r2, r6, r3
 8006a14:	b289      	uxth	r1, r1
 8006a16:	3001      	adds	r0, #1
 8006a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a1c:	4285      	cmp	r5, r0
 8006a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8006a22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a26:	dcec      	bgt.n	8006a02 <__multadd+0x12>
 8006a28:	b30e      	cbz	r6, 8006a6e <__multadd+0x7e>
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	42ab      	cmp	r3, r5
 8006a2e:	dc19      	bgt.n	8006a64 <__multadd+0x74>
 8006a30:	6861      	ldr	r1, [r4, #4]
 8006a32:	4638      	mov	r0, r7
 8006a34:	3101      	adds	r1, #1
 8006a36:	f7ff ff79 	bl	800692c <_Balloc>
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	b928      	cbnz	r0, 8006a4a <__multadd+0x5a>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <__multadd+0x84>)
 8006a42:	480d      	ldr	r0, [pc, #52]	; (8006a78 <__multadd+0x88>)
 8006a44:	21ba      	movs	r1, #186	; 0xba
 8006a46:	f000 fbb9 	bl	80071bc <__assert_func>
 8006a4a:	6922      	ldr	r2, [r4, #16]
 8006a4c:	3202      	adds	r2, #2
 8006a4e:	f104 010c 	add.w	r1, r4, #12
 8006a52:	0092      	lsls	r2, r2, #2
 8006a54:	300c      	adds	r0, #12
 8006a56:	f000 fba3 	bl	80071a0 <memcpy>
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	f7ff ffa5 	bl	80069ac <_Bfree>
 8006a62:	4644      	mov	r4, r8
 8006a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a68:	3501      	adds	r5, #1
 8006a6a:	615e      	str	r6, [r3, #20]
 8006a6c:	6125      	str	r5, [r4, #16]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a74:	08007fa8 	.word	0x08007fa8
 8006a78:	08007fb9 	.word	0x08007fb9

08006a7c <__hi0bits>:
 8006a7c:	0c03      	lsrs	r3, r0, #16
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	b9d3      	cbnz	r3, 8006ab8 <__hi0bits+0x3c>
 8006a82:	0400      	lsls	r0, r0, #16
 8006a84:	2310      	movs	r3, #16
 8006a86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a8a:	bf04      	itt	eq
 8006a8c:	0200      	lsleq	r0, r0, #8
 8006a8e:	3308      	addeq	r3, #8
 8006a90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a94:	bf04      	itt	eq
 8006a96:	0100      	lsleq	r0, r0, #4
 8006a98:	3304      	addeq	r3, #4
 8006a9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a9e:	bf04      	itt	eq
 8006aa0:	0080      	lsleq	r0, r0, #2
 8006aa2:	3302      	addeq	r3, #2
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	db05      	blt.n	8006ab4 <__hi0bits+0x38>
 8006aa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006aac:	f103 0301 	add.w	r3, r3, #1
 8006ab0:	bf08      	it	eq
 8006ab2:	2320      	moveq	r3, #32
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	4770      	bx	lr
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e7e4      	b.n	8006a86 <__hi0bits+0xa>

08006abc <__lo0bits>:
 8006abc:	6803      	ldr	r3, [r0, #0]
 8006abe:	f013 0207 	ands.w	r2, r3, #7
 8006ac2:	d00c      	beq.n	8006ade <__lo0bits+0x22>
 8006ac4:	07d9      	lsls	r1, r3, #31
 8006ac6:	d422      	bmi.n	8006b0e <__lo0bits+0x52>
 8006ac8:	079a      	lsls	r2, r3, #30
 8006aca:	bf49      	itett	mi
 8006acc:	085b      	lsrmi	r3, r3, #1
 8006ace:	089b      	lsrpl	r3, r3, #2
 8006ad0:	6003      	strmi	r3, [r0, #0]
 8006ad2:	2201      	movmi	r2, #1
 8006ad4:	bf5c      	itt	pl
 8006ad6:	6003      	strpl	r3, [r0, #0]
 8006ad8:	2202      	movpl	r2, #2
 8006ada:	4610      	mov	r0, r2
 8006adc:	4770      	bx	lr
 8006ade:	b299      	uxth	r1, r3
 8006ae0:	b909      	cbnz	r1, 8006ae6 <__lo0bits+0x2a>
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	2210      	movs	r2, #16
 8006ae6:	b2d9      	uxtb	r1, r3
 8006ae8:	b909      	cbnz	r1, 8006aee <__lo0bits+0x32>
 8006aea:	3208      	adds	r2, #8
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	0719      	lsls	r1, r3, #28
 8006af0:	bf04      	itt	eq
 8006af2:	091b      	lsreq	r3, r3, #4
 8006af4:	3204      	addeq	r2, #4
 8006af6:	0799      	lsls	r1, r3, #30
 8006af8:	bf04      	itt	eq
 8006afa:	089b      	lsreq	r3, r3, #2
 8006afc:	3202      	addeq	r2, #2
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d403      	bmi.n	8006b0a <__lo0bits+0x4e>
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	f102 0201 	add.w	r2, r2, #1
 8006b08:	d003      	beq.n	8006b12 <__lo0bits+0x56>
 8006b0a:	6003      	str	r3, [r0, #0]
 8006b0c:	e7e5      	b.n	8006ada <__lo0bits+0x1e>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	e7e3      	b.n	8006ada <__lo0bits+0x1e>
 8006b12:	2220      	movs	r2, #32
 8006b14:	e7e1      	b.n	8006ada <__lo0bits+0x1e>
	...

08006b18 <__i2b>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	f7ff ff05 	bl	800692c <_Balloc>
 8006b22:	4602      	mov	r2, r0
 8006b24:	b928      	cbnz	r0, 8006b32 <__i2b+0x1a>
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <__i2b+0x24>)
 8006b28:	4805      	ldr	r0, [pc, #20]	; (8006b40 <__i2b+0x28>)
 8006b2a:	f240 1145 	movw	r1, #325	; 0x145
 8006b2e:	f000 fb45 	bl	80071bc <__assert_func>
 8006b32:	2301      	movs	r3, #1
 8006b34:	6144      	str	r4, [r0, #20]
 8006b36:	6103      	str	r3, [r0, #16]
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08007fa8 	.word	0x08007fa8
 8006b40:	08007fb9 	.word	0x08007fb9

08006b44 <__multiply>:
 8006b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b48:	4691      	mov	r9, r2
 8006b4a:	690a      	ldr	r2, [r1, #16]
 8006b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	bfb8      	it	lt
 8006b54:	460b      	movlt	r3, r1
 8006b56:	460c      	mov	r4, r1
 8006b58:	bfbc      	itt	lt
 8006b5a:	464c      	movlt	r4, r9
 8006b5c:	4699      	movlt	r9, r3
 8006b5e:	6927      	ldr	r7, [r4, #16]
 8006b60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b64:	68a3      	ldr	r3, [r4, #8]
 8006b66:	6861      	ldr	r1, [r4, #4]
 8006b68:	eb07 060a 	add.w	r6, r7, sl
 8006b6c:	42b3      	cmp	r3, r6
 8006b6e:	b085      	sub	sp, #20
 8006b70:	bfb8      	it	lt
 8006b72:	3101      	addlt	r1, #1
 8006b74:	f7ff feda 	bl	800692c <_Balloc>
 8006b78:	b930      	cbnz	r0, 8006b88 <__multiply+0x44>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	4b44      	ldr	r3, [pc, #272]	; (8006c90 <__multiply+0x14c>)
 8006b7e:	4845      	ldr	r0, [pc, #276]	; (8006c94 <__multiply+0x150>)
 8006b80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006b84:	f000 fb1a 	bl	80071bc <__assert_func>
 8006b88:	f100 0514 	add.w	r5, r0, #20
 8006b8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b90:	462b      	mov	r3, r5
 8006b92:	2200      	movs	r2, #0
 8006b94:	4543      	cmp	r3, r8
 8006b96:	d321      	bcc.n	8006bdc <__multiply+0x98>
 8006b98:	f104 0314 	add.w	r3, r4, #20
 8006b9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ba0:	f109 0314 	add.w	r3, r9, #20
 8006ba4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ba8:	9202      	str	r2, [sp, #8]
 8006baa:	1b3a      	subs	r2, r7, r4
 8006bac:	3a15      	subs	r2, #21
 8006bae:	f022 0203 	bic.w	r2, r2, #3
 8006bb2:	3204      	adds	r2, #4
 8006bb4:	f104 0115 	add.w	r1, r4, #21
 8006bb8:	428f      	cmp	r7, r1
 8006bba:	bf38      	it	cc
 8006bbc:	2204      	movcc	r2, #4
 8006bbe:	9201      	str	r2, [sp, #4]
 8006bc0:	9a02      	ldr	r2, [sp, #8]
 8006bc2:	9303      	str	r3, [sp, #12]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d80c      	bhi.n	8006be2 <__multiply+0x9e>
 8006bc8:	2e00      	cmp	r6, #0
 8006bca:	dd03      	ble.n	8006bd4 <__multiply+0x90>
 8006bcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d05b      	beq.n	8006c8c <__multiply+0x148>
 8006bd4:	6106      	str	r6, [r0, #16]
 8006bd6:	b005      	add	sp, #20
 8006bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bdc:	f843 2b04 	str.w	r2, [r3], #4
 8006be0:	e7d8      	b.n	8006b94 <__multiply+0x50>
 8006be2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006be6:	f1ba 0f00 	cmp.w	sl, #0
 8006bea:	d024      	beq.n	8006c36 <__multiply+0xf2>
 8006bec:	f104 0e14 	add.w	lr, r4, #20
 8006bf0:	46a9      	mov	r9, r5
 8006bf2:	f04f 0c00 	mov.w	ip, #0
 8006bf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bfa:	f8d9 1000 	ldr.w	r1, [r9]
 8006bfe:	fa1f fb82 	uxth.w	fp, r2
 8006c02:	b289      	uxth	r1, r1
 8006c04:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c10:	4461      	add	r1, ip
 8006c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c16:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c1e:	b289      	uxth	r1, r1
 8006c20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c24:	4577      	cmp	r7, lr
 8006c26:	f849 1b04 	str.w	r1, [r9], #4
 8006c2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c2e:	d8e2      	bhi.n	8006bf6 <__multiply+0xb2>
 8006c30:	9a01      	ldr	r2, [sp, #4]
 8006c32:	f845 c002 	str.w	ip, [r5, r2]
 8006c36:	9a03      	ldr	r2, [sp, #12]
 8006c38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	f1b9 0f00 	cmp.w	r9, #0
 8006c42:	d021      	beq.n	8006c88 <__multiply+0x144>
 8006c44:	6829      	ldr	r1, [r5, #0]
 8006c46:	f104 0c14 	add.w	ip, r4, #20
 8006c4a:	46ae      	mov	lr, r5
 8006c4c:	f04f 0a00 	mov.w	sl, #0
 8006c50:	f8bc b000 	ldrh.w	fp, [ip]
 8006c54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c58:	fb09 220b 	mla	r2, r9, fp, r2
 8006c5c:	4452      	add	r2, sl
 8006c5e:	b289      	uxth	r1, r1
 8006c60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c64:	f84e 1b04 	str.w	r1, [lr], #4
 8006c68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c70:	f8be 1000 	ldrh.w	r1, [lr]
 8006c74:	fb09 110a 	mla	r1, r9, sl, r1
 8006c78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006c7c:	4567      	cmp	r7, ip
 8006c7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c82:	d8e5      	bhi.n	8006c50 <__multiply+0x10c>
 8006c84:	9a01      	ldr	r2, [sp, #4]
 8006c86:	50a9      	str	r1, [r5, r2]
 8006c88:	3504      	adds	r5, #4
 8006c8a:	e799      	b.n	8006bc0 <__multiply+0x7c>
 8006c8c:	3e01      	subs	r6, #1
 8006c8e:	e79b      	b.n	8006bc8 <__multiply+0x84>
 8006c90:	08007fa8 	.word	0x08007fa8
 8006c94:	08007fb9 	.word	0x08007fb9

08006c98 <__pow5mult>:
 8006c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c9c:	4615      	mov	r5, r2
 8006c9e:	f012 0203 	ands.w	r2, r2, #3
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460f      	mov	r7, r1
 8006ca6:	d007      	beq.n	8006cb8 <__pow5mult+0x20>
 8006ca8:	4c25      	ldr	r4, [pc, #148]	; (8006d40 <__pow5mult+0xa8>)
 8006caa:	3a01      	subs	r2, #1
 8006cac:	2300      	movs	r3, #0
 8006cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cb2:	f7ff fe9d 	bl	80069f0 <__multadd>
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	10ad      	asrs	r5, r5, #2
 8006cba:	d03d      	beq.n	8006d38 <__pow5mult+0xa0>
 8006cbc:	69f4      	ldr	r4, [r6, #28]
 8006cbe:	b97c      	cbnz	r4, 8006ce0 <__pow5mult+0x48>
 8006cc0:	2010      	movs	r0, #16
 8006cc2:	f7ff fd7f 	bl	80067c4 <malloc>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	61f0      	str	r0, [r6, #28]
 8006cca:	b928      	cbnz	r0, 8006cd8 <__pow5mult+0x40>
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <__pow5mult+0xac>)
 8006cce:	481e      	ldr	r0, [pc, #120]	; (8006d48 <__pow5mult+0xb0>)
 8006cd0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006cd4:	f000 fa72 	bl	80071bc <__assert_func>
 8006cd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cdc:	6004      	str	r4, [r0, #0]
 8006cde:	60c4      	str	r4, [r0, #12]
 8006ce0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006ce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ce8:	b94c      	cbnz	r4, 8006cfe <__pow5mult+0x66>
 8006cea:	f240 2171 	movw	r1, #625	; 0x271
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7ff ff12 	bl	8006b18 <__i2b>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	6003      	str	r3, [r0, #0]
 8006cfe:	f04f 0900 	mov.w	r9, #0
 8006d02:	07eb      	lsls	r3, r5, #31
 8006d04:	d50a      	bpl.n	8006d1c <__pow5mult+0x84>
 8006d06:	4639      	mov	r1, r7
 8006d08:	4622      	mov	r2, r4
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7ff ff1a 	bl	8006b44 <__multiply>
 8006d10:	4639      	mov	r1, r7
 8006d12:	4680      	mov	r8, r0
 8006d14:	4630      	mov	r0, r6
 8006d16:	f7ff fe49 	bl	80069ac <_Bfree>
 8006d1a:	4647      	mov	r7, r8
 8006d1c:	106d      	asrs	r5, r5, #1
 8006d1e:	d00b      	beq.n	8006d38 <__pow5mult+0xa0>
 8006d20:	6820      	ldr	r0, [r4, #0]
 8006d22:	b938      	cbnz	r0, 8006d34 <__pow5mult+0x9c>
 8006d24:	4622      	mov	r2, r4
 8006d26:	4621      	mov	r1, r4
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7ff ff0b 	bl	8006b44 <__multiply>
 8006d2e:	6020      	str	r0, [r4, #0]
 8006d30:	f8c0 9000 	str.w	r9, [r0]
 8006d34:	4604      	mov	r4, r0
 8006d36:	e7e4      	b.n	8006d02 <__pow5mult+0x6a>
 8006d38:	4638      	mov	r0, r7
 8006d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d3e:	bf00      	nop
 8006d40:	08008108 	.word	0x08008108
 8006d44:	08007f39 	.word	0x08007f39
 8006d48:	08007fb9 	.word	0x08007fb9

08006d4c <__lshift>:
 8006d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d50:	460c      	mov	r4, r1
 8006d52:	6849      	ldr	r1, [r1, #4]
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	4691      	mov	r9, r2
 8006d60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d64:	f108 0601 	add.w	r6, r8, #1
 8006d68:	42b3      	cmp	r3, r6
 8006d6a:	db0b      	blt.n	8006d84 <__lshift+0x38>
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f7ff fddd 	bl	800692c <_Balloc>
 8006d72:	4605      	mov	r5, r0
 8006d74:	b948      	cbnz	r0, 8006d8a <__lshift+0x3e>
 8006d76:	4602      	mov	r2, r0
 8006d78:	4b28      	ldr	r3, [pc, #160]	; (8006e1c <__lshift+0xd0>)
 8006d7a:	4829      	ldr	r0, [pc, #164]	; (8006e20 <__lshift+0xd4>)
 8006d7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006d80:	f000 fa1c 	bl	80071bc <__assert_func>
 8006d84:	3101      	adds	r1, #1
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	e7ee      	b.n	8006d68 <__lshift+0x1c>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f100 0114 	add.w	r1, r0, #20
 8006d90:	f100 0210 	add.w	r2, r0, #16
 8006d94:	4618      	mov	r0, r3
 8006d96:	4553      	cmp	r3, sl
 8006d98:	db33      	blt.n	8006e02 <__lshift+0xb6>
 8006d9a:	6920      	ldr	r0, [r4, #16]
 8006d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006da0:	f104 0314 	add.w	r3, r4, #20
 8006da4:	f019 091f 	ands.w	r9, r9, #31
 8006da8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006db0:	d02b      	beq.n	8006e0a <__lshift+0xbe>
 8006db2:	f1c9 0e20 	rsb	lr, r9, #32
 8006db6:	468a      	mov	sl, r1
 8006db8:	2200      	movs	r2, #0
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	fa00 f009 	lsl.w	r0, r0, r9
 8006dc0:	4310      	orrs	r0, r2
 8006dc2:	f84a 0b04 	str.w	r0, [sl], #4
 8006dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dca:	459c      	cmp	ip, r3
 8006dcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dd0:	d8f3      	bhi.n	8006dba <__lshift+0x6e>
 8006dd2:	ebac 0304 	sub.w	r3, ip, r4
 8006dd6:	3b15      	subs	r3, #21
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	3304      	adds	r3, #4
 8006dde:	f104 0015 	add.w	r0, r4, #21
 8006de2:	4584      	cmp	ip, r0
 8006de4:	bf38      	it	cc
 8006de6:	2304      	movcc	r3, #4
 8006de8:	50ca      	str	r2, [r1, r3]
 8006dea:	b10a      	cbz	r2, 8006df0 <__lshift+0xa4>
 8006dec:	f108 0602 	add.w	r6, r8, #2
 8006df0:	3e01      	subs	r6, #1
 8006df2:	4638      	mov	r0, r7
 8006df4:	612e      	str	r6, [r5, #16]
 8006df6:	4621      	mov	r1, r4
 8006df8:	f7ff fdd8 	bl	80069ac <_Bfree>
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e06:	3301      	adds	r3, #1
 8006e08:	e7c5      	b.n	8006d96 <__lshift+0x4a>
 8006e0a:	3904      	subs	r1, #4
 8006e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e14:	459c      	cmp	ip, r3
 8006e16:	d8f9      	bhi.n	8006e0c <__lshift+0xc0>
 8006e18:	e7ea      	b.n	8006df0 <__lshift+0xa4>
 8006e1a:	bf00      	nop
 8006e1c:	08007fa8 	.word	0x08007fa8
 8006e20:	08007fb9 	.word	0x08007fb9

08006e24 <__mcmp>:
 8006e24:	b530      	push	{r4, r5, lr}
 8006e26:	6902      	ldr	r2, [r0, #16]
 8006e28:	690c      	ldr	r4, [r1, #16]
 8006e2a:	1b12      	subs	r2, r2, r4
 8006e2c:	d10e      	bne.n	8006e4c <__mcmp+0x28>
 8006e2e:	f100 0314 	add.w	r3, r0, #20
 8006e32:	3114      	adds	r1, #20
 8006e34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e44:	42a5      	cmp	r5, r4
 8006e46:	d003      	beq.n	8006e50 <__mcmp+0x2c>
 8006e48:	d305      	bcc.n	8006e56 <__mcmp+0x32>
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	bd30      	pop	{r4, r5, pc}
 8006e50:	4283      	cmp	r3, r0
 8006e52:	d3f3      	bcc.n	8006e3c <__mcmp+0x18>
 8006e54:	e7fa      	b.n	8006e4c <__mcmp+0x28>
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	e7f7      	b.n	8006e4c <__mcmp+0x28>

08006e5c <__mdiff>:
 8006e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	460c      	mov	r4, r1
 8006e62:	4606      	mov	r6, r0
 8006e64:	4611      	mov	r1, r2
 8006e66:	4620      	mov	r0, r4
 8006e68:	4690      	mov	r8, r2
 8006e6a:	f7ff ffdb 	bl	8006e24 <__mcmp>
 8006e6e:	1e05      	subs	r5, r0, #0
 8006e70:	d110      	bne.n	8006e94 <__mdiff+0x38>
 8006e72:	4629      	mov	r1, r5
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff fd59 	bl	800692c <_Balloc>
 8006e7a:	b930      	cbnz	r0, 8006e8a <__mdiff+0x2e>
 8006e7c:	4b3a      	ldr	r3, [pc, #232]	; (8006f68 <__mdiff+0x10c>)
 8006e7e:	4602      	mov	r2, r0
 8006e80:	f240 2137 	movw	r1, #567	; 0x237
 8006e84:	4839      	ldr	r0, [pc, #228]	; (8006f6c <__mdiff+0x110>)
 8006e86:	f000 f999 	bl	80071bc <__assert_func>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e94:	bfa4      	itt	ge
 8006e96:	4643      	movge	r3, r8
 8006e98:	46a0      	movge	r8, r4
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ea0:	bfa6      	itte	ge
 8006ea2:	461c      	movge	r4, r3
 8006ea4:	2500      	movge	r5, #0
 8006ea6:	2501      	movlt	r5, #1
 8006ea8:	f7ff fd40 	bl	800692c <_Balloc>
 8006eac:	b920      	cbnz	r0, 8006eb8 <__mdiff+0x5c>
 8006eae:	4b2e      	ldr	r3, [pc, #184]	; (8006f68 <__mdiff+0x10c>)
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	f240 2145 	movw	r1, #581	; 0x245
 8006eb6:	e7e5      	b.n	8006e84 <__mdiff+0x28>
 8006eb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ebc:	6926      	ldr	r6, [r4, #16]
 8006ebe:	60c5      	str	r5, [r0, #12]
 8006ec0:	f104 0914 	add.w	r9, r4, #20
 8006ec4:	f108 0514 	add.w	r5, r8, #20
 8006ec8:	f100 0e14 	add.w	lr, r0, #20
 8006ecc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ed4:	f108 0210 	add.w	r2, r8, #16
 8006ed8:	46f2      	mov	sl, lr
 8006eda:	2100      	movs	r1, #0
 8006edc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ee0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ee4:	fa11 f88b 	uxtah	r8, r1, fp
 8006ee8:	b299      	uxth	r1, r3
 8006eea:	0c1b      	lsrs	r3, r3, #16
 8006eec:	eba8 0801 	sub.w	r8, r8, r1
 8006ef0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ef4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ef8:	fa1f f888 	uxth.w	r8, r8
 8006efc:	1419      	asrs	r1, r3, #16
 8006efe:	454e      	cmp	r6, r9
 8006f00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f04:	f84a 3b04 	str.w	r3, [sl], #4
 8006f08:	d8e8      	bhi.n	8006edc <__mdiff+0x80>
 8006f0a:	1b33      	subs	r3, r6, r4
 8006f0c:	3b15      	subs	r3, #21
 8006f0e:	f023 0303 	bic.w	r3, r3, #3
 8006f12:	3304      	adds	r3, #4
 8006f14:	3415      	adds	r4, #21
 8006f16:	42a6      	cmp	r6, r4
 8006f18:	bf38      	it	cc
 8006f1a:	2304      	movcc	r3, #4
 8006f1c:	441d      	add	r5, r3
 8006f1e:	4473      	add	r3, lr
 8006f20:	469e      	mov	lr, r3
 8006f22:	462e      	mov	r6, r5
 8006f24:	4566      	cmp	r6, ip
 8006f26:	d30e      	bcc.n	8006f46 <__mdiff+0xea>
 8006f28:	f10c 0203 	add.w	r2, ip, #3
 8006f2c:	1b52      	subs	r2, r2, r5
 8006f2e:	f022 0203 	bic.w	r2, r2, #3
 8006f32:	3d03      	subs	r5, #3
 8006f34:	45ac      	cmp	ip, r5
 8006f36:	bf38      	it	cc
 8006f38:	2200      	movcc	r2, #0
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f40:	b17a      	cbz	r2, 8006f62 <__mdiff+0x106>
 8006f42:	6107      	str	r7, [r0, #16]
 8006f44:	e7a4      	b.n	8006e90 <__mdiff+0x34>
 8006f46:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f4a:	fa11 f288 	uxtah	r2, r1, r8
 8006f4e:	1414      	asrs	r4, r2, #16
 8006f50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f54:	b292      	uxth	r2, r2
 8006f56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f5a:	f84e 2b04 	str.w	r2, [lr], #4
 8006f5e:	1421      	asrs	r1, r4, #16
 8006f60:	e7e0      	b.n	8006f24 <__mdiff+0xc8>
 8006f62:	3f01      	subs	r7, #1
 8006f64:	e7ea      	b.n	8006f3c <__mdiff+0xe0>
 8006f66:	bf00      	nop
 8006f68:	08007fa8 	.word	0x08007fa8
 8006f6c:	08007fb9 	.word	0x08007fb9

08006f70 <__d2b>:
 8006f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f74:	460f      	mov	r7, r1
 8006f76:	2101      	movs	r1, #1
 8006f78:	ec59 8b10 	vmov	r8, r9, d0
 8006f7c:	4616      	mov	r6, r2
 8006f7e:	f7ff fcd5 	bl	800692c <_Balloc>
 8006f82:	4604      	mov	r4, r0
 8006f84:	b930      	cbnz	r0, 8006f94 <__d2b+0x24>
 8006f86:	4602      	mov	r2, r0
 8006f88:	4b24      	ldr	r3, [pc, #144]	; (800701c <__d2b+0xac>)
 8006f8a:	4825      	ldr	r0, [pc, #148]	; (8007020 <__d2b+0xb0>)
 8006f8c:	f240 310f 	movw	r1, #783	; 0x30f
 8006f90:	f000 f914 	bl	80071bc <__assert_func>
 8006f94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f9c:	bb2d      	cbnz	r5, 8006fea <__d2b+0x7a>
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8006fa4:	d026      	beq.n	8006ff4 <__d2b+0x84>
 8006fa6:	4668      	mov	r0, sp
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	f7ff fd87 	bl	8006abc <__lo0bits>
 8006fae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fb2:	b1e8      	cbz	r0, 8006ff0 <__d2b+0x80>
 8006fb4:	f1c0 0320 	rsb	r3, r0, #32
 8006fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	40c2      	lsrs	r2, r0
 8006fc0:	6163      	str	r3, [r4, #20]
 8006fc2:	9201      	str	r2, [sp, #4]
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	61a3      	str	r3, [r4, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bf14      	ite	ne
 8006fcc:	2202      	movne	r2, #2
 8006fce:	2201      	moveq	r2, #1
 8006fd0:	6122      	str	r2, [r4, #16]
 8006fd2:	b1bd      	cbz	r5, 8007004 <__d2b+0x94>
 8006fd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fd8:	4405      	add	r5, r0
 8006fda:	603d      	str	r5, [r7, #0]
 8006fdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fe0:	6030      	str	r0, [r6, #0]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	b003      	add	sp, #12
 8006fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fee:	e7d6      	b.n	8006f9e <__d2b+0x2e>
 8006ff0:	6161      	str	r1, [r4, #20]
 8006ff2:	e7e7      	b.n	8006fc4 <__d2b+0x54>
 8006ff4:	a801      	add	r0, sp, #4
 8006ff6:	f7ff fd61 	bl	8006abc <__lo0bits>
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	6163      	str	r3, [r4, #20]
 8006ffe:	3020      	adds	r0, #32
 8007000:	2201      	movs	r2, #1
 8007002:	e7e5      	b.n	8006fd0 <__d2b+0x60>
 8007004:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007008:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800700c:	6038      	str	r0, [r7, #0]
 800700e:	6918      	ldr	r0, [r3, #16]
 8007010:	f7ff fd34 	bl	8006a7c <__hi0bits>
 8007014:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007018:	e7e2      	b.n	8006fe0 <__d2b+0x70>
 800701a:	bf00      	nop
 800701c:	08007fa8 	.word	0x08007fa8
 8007020:	08007fb9 	.word	0x08007fb9

08007024 <__sflush_r>:
 8007024:	898a      	ldrh	r2, [r1, #12]
 8007026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702a:	4605      	mov	r5, r0
 800702c:	0710      	lsls	r0, r2, #28
 800702e:	460c      	mov	r4, r1
 8007030:	d458      	bmi.n	80070e4 <__sflush_r+0xc0>
 8007032:	684b      	ldr	r3, [r1, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dc05      	bgt.n	8007044 <__sflush_r+0x20>
 8007038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	dc02      	bgt.n	8007044 <__sflush_r+0x20>
 800703e:	2000      	movs	r0, #0
 8007040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007046:	2e00      	cmp	r6, #0
 8007048:	d0f9      	beq.n	800703e <__sflush_r+0x1a>
 800704a:	2300      	movs	r3, #0
 800704c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007050:	682f      	ldr	r7, [r5, #0]
 8007052:	6a21      	ldr	r1, [r4, #32]
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	d032      	beq.n	80070be <__sflush_r+0x9a>
 8007058:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	075a      	lsls	r2, r3, #29
 800705e:	d505      	bpl.n	800706c <__sflush_r+0x48>
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	1ac0      	subs	r0, r0, r3
 8007064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007066:	b10b      	cbz	r3, 800706c <__sflush_r+0x48>
 8007068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800706a:	1ac0      	subs	r0, r0, r3
 800706c:	2300      	movs	r3, #0
 800706e:	4602      	mov	r2, r0
 8007070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007072:	6a21      	ldr	r1, [r4, #32]
 8007074:	4628      	mov	r0, r5
 8007076:	47b0      	blx	r6
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	d106      	bne.n	800708c <__sflush_r+0x68>
 800707e:	6829      	ldr	r1, [r5, #0]
 8007080:	291d      	cmp	r1, #29
 8007082:	d82b      	bhi.n	80070dc <__sflush_r+0xb8>
 8007084:	4a29      	ldr	r2, [pc, #164]	; (800712c <__sflush_r+0x108>)
 8007086:	410a      	asrs	r2, r1
 8007088:	07d6      	lsls	r6, r2, #31
 800708a:	d427      	bmi.n	80070dc <__sflush_r+0xb8>
 800708c:	2200      	movs	r2, #0
 800708e:	6062      	str	r2, [r4, #4]
 8007090:	04d9      	lsls	r1, r3, #19
 8007092:	6922      	ldr	r2, [r4, #16]
 8007094:	6022      	str	r2, [r4, #0]
 8007096:	d504      	bpl.n	80070a2 <__sflush_r+0x7e>
 8007098:	1c42      	adds	r2, r0, #1
 800709a:	d101      	bne.n	80070a0 <__sflush_r+0x7c>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b903      	cbnz	r3, 80070a2 <__sflush_r+0x7e>
 80070a0:	6560      	str	r0, [r4, #84]	; 0x54
 80070a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070a4:	602f      	str	r7, [r5, #0]
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d0c9      	beq.n	800703e <__sflush_r+0x1a>
 80070aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ae:	4299      	cmp	r1, r3
 80070b0:	d002      	beq.n	80070b8 <__sflush_r+0x94>
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7ff fb3a 	bl	800672c <_free_r>
 80070b8:	2000      	movs	r0, #0
 80070ba:	6360      	str	r0, [r4, #52]	; 0x34
 80070bc:	e7c0      	b.n	8007040 <__sflush_r+0x1c>
 80070be:	2301      	movs	r3, #1
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b0      	blx	r6
 80070c4:	1c41      	adds	r1, r0, #1
 80070c6:	d1c8      	bne.n	800705a <__sflush_r+0x36>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0c5      	beq.n	800705a <__sflush_r+0x36>
 80070ce:	2b1d      	cmp	r3, #29
 80070d0:	d001      	beq.n	80070d6 <__sflush_r+0xb2>
 80070d2:	2b16      	cmp	r3, #22
 80070d4:	d101      	bne.n	80070da <__sflush_r+0xb6>
 80070d6:	602f      	str	r7, [r5, #0]
 80070d8:	e7b1      	b.n	800703e <__sflush_r+0x1a>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e0:	81a3      	strh	r3, [r4, #12]
 80070e2:	e7ad      	b.n	8007040 <__sflush_r+0x1c>
 80070e4:	690f      	ldr	r7, [r1, #16]
 80070e6:	2f00      	cmp	r7, #0
 80070e8:	d0a9      	beq.n	800703e <__sflush_r+0x1a>
 80070ea:	0793      	lsls	r3, r2, #30
 80070ec:	680e      	ldr	r6, [r1, #0]
 80070ee:	bf08      	it	eq
 80070f0:	694b      	ldreq	r3, [r1, #20]
 80070f2:	600f      	str	r7, [r1, #0]
 80070f4:	bf18      	it	ne
 80070f6:	2300      	movne	r3, #0
 80070f8:	eba6 0807 	sub.w	r8, r6, r7
 80070fc:	608b      	str	r3, [r1, #8]
 80070fe:	f1b8 0f00 	cmp.w	r8, #0
 8007102:	dd9c      	ble.n	800703e <__sflush_r+0x1a>
 8007104:	6a21      	ldr	r1, [r4, #32]
 8007106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007108:	4643      	mov	r3, r8
 800710a:	463a      	mov	r2, r7
 800710c:	4628      	mov	r0, r5
 800710e:	47b0      	blx	r6
 8007110:	2800      	cmp	r0, #0
 8007112:	dc06      	bgt.n	8007122 <__sflush_r+0xfe>
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800711a:	81a3      	strh	r3, [r4, #12]
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	e78e      	b.n	8007040 <__sflush_r+0x1c>
 8007122:	4407      	add	r7, r0
 8007124:	eba8 0800 	sub.w	r8, r8, r0
 8007128:	e7e9      	b.n	80070fe <__sflush_r+0xda>
 800712a:	bf00      	nop
 800712c:	dfbffffe 	.word	0xdfbffffe

08007130 <_fflush_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	690b      	ldr	r3, [r1, #16]
 8007134:	4605      	mov	r5, r0
 8007136:	460c      	mov	r4, r1
 8007138:	b913      	cbnz	r3, 8007140 <_fflush_r+0x10>
 800713a:	2500      	movs	r5, #0
 800713c:	4628      	mov	r0, r5
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	b118      	cbz	r0, 800714a <_fflush_r+0x1a>
 8007142:	6a03      	ldr	r3, [r0, #32]
 8007144:	b90b      	cbnz	r3, 800714a <_fflush_r+0x1a>
 8007146:	f7fe fb7b 	bl	8005840 <__sinit>
 800714a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f3      	beq.n	800713a <_fflush_r+0xa>
 8007152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007154:	07d0      	lsls	r0, r2, #31
 8007156:	d404      	bmi.n	8007162 <_fflush_r+0x32>
 8007158:	0599      	lsls	r1, r3, #22
 800715a:	d402      	bmi.n	8007162 <_fflush_r+0x32>
 800715c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800715e:	f7fe fc66 	bl	8005a2e <__retarget_lock_acquire_recursive>
 8007162:	4628      	mov	r0, r5
 8007164:	4621      	mov	r1, r4
 8007166:	f7ff ff5d 	bl	8007024 <__sflush_r>
 800716a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800716c:	07da      	lsls	r2, r3, #31
 800716e:	4605      	mov	r5, r0
 8007170:	d4e4      	bmi.n	800713c <_fflush_r+0xc>
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	059b      	lsls	r3, r3, #22
 8007176:	d4e1      	bmi.n	800713c <_fflush_r+0xc>
 8007178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800717a:	f7fe fc59 	bl	8005a30 <__retarget_lock_release_recursive>
 800717e:	e7dd      	b.n	800713c <_fflush_r+0xc>

08007180 <_sbrk_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4d06      	ldr	r5, [pc, #24]	; (800719c <_sbrk_r+0x1c>)
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	602b      	str	r3, [r5, #0]
 800718c:	f7fa fd10 	bl	8001bb0 <_sbrk>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_sbrk_r+0x1a>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_sbrk_r+0x1a>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	200004f8 	.word	0x200004f8

080071a0 <memcpy>:
 80071a0:	440a      	add	r2, r1
 80071a2:	4291      	cmp	r1, r2
 80071a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071a8:	d100      	bne.n	80071ac <memcpy+0xc>
 80071aa:	4770      	bx	lr
 80071ac:	b510      	push	{r4, lr}
 80071ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b6:	4291      	cmp	r1, r2
 80071b8:	d1f9      	bne.n	80071ae <memcpy+0xe>
 80071ba:	bd10      	pop	{r4, pc}

080071bc <__assert_func>:
 80071bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071be:	4614      	mov	r4, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <__assert_func+0x2c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4605      	mov	r5, r0
 80071c8:	68d8      	ldr	r0, [r3, #12]
 80071ca:	b14c      	cbz	r4, 80071e0 <__assert_func+0x24>
 80071cc:	4b07      	ldr	r3, [pc, #28]	; (80071ec <__assert_func+0x30>)
 80071ce:	9100      	str	r1, [sp, #0]
 80071d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071d4:	4906      	ldr	r1, [pc, #24]	; (80071f0 <__assert_func+0x34>)
 80071d6:	462b      	mov	r3, r5
 80071d8:	f000 f844 	bl	8007264 <fiprintf>
 80071dc:	f000 f854 	bl	8007288 <abort>
 80071e0:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <__assert_func+0x38>)
 80071e2:	461c      	mov	r4, r3
 80071e4:	e7f3      	b.n	80071ce <__assert_func+0x12>
 80071e6:	bf00      	nop
 80071e8:	20000064 	.word	0x20000064
 80071ec:	0800811e 	.word	0x0800811e
 80071f0:	0800812b 	.word	0x0800812b
 80071f4:	08008159 	.word	0x08008159

080071f8 <_calloc_r>:
 80071f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071fa:	fba1 2402 	umull	r2, r4, r1, r2
 80071fe:	b94c      	cbnz	r4, 8007214 <_calloc_r+0x1c>
 8007200:	4611      	mov	r1, r2
 8007202:	9201      	str	r2, [sp, #4]
 8007204:	f7ff fb06 	bl	8006814 <_malloc_r>
 8007208:	9a01      	ldr	r2, [sp, #4]
 800720a:	4605      	mov	r5, r0
 800720c:	b930      	cbnz	r0, 800721c <_calloc_r+0x24>
 800720e:	4628      	mov	r0, r5
 8007210:	b003      	add	sp, #12
 8007212:	bd30      	pop	{r4, r5, pc}
 8007214:	220c      	movs	r2, #12
 8007216:	6002      	str	r2, [r0, #0]
 8007218:	2500      	movs	r5, #0
 800721a:	e7f8      	b.n	800720e <_calloc_r+0x16>
 800721c:	4621      	mov	r1, r4
 800721e:	f7fe fb88 	bl	8005932 <memset>
 8007222:	e7f4      	b.n	800720e <_calloc_r+0x16>

08007224 <__ascii_mbtowc>:
 8007224:	b082      	sub	sp, #8
 8007226:	b901      	cbnz	r1, 800722a <__ascii_mbtowc+0x6>
 8007228:	a901      	add	r1, sp, #4
 800722a:	b142      	cbz	r2, 800723e <__ascii_mbtowc+0x1a>
 800722c:	b14b      	cbz	r3, 8007242 <__ascii_mbtowc+0x1e>
 800722e:	7813      	ldrb	r3, [r2, #0]
 8007230:	600b      	str	r3, [r1, #0]
 8007232:	7812      	ldrb	r2, [r2, #0]
 8007234:	1e10      	subs	r0, r2, #0
 8007236:	bf18      	it	ne
 8007238:	2001      	movne	r0, #1
 800723a:	b002      	add	sp, #8
 800723c:	4770      	bx	lr
 800723e:	4610      	mov	r0, r2
 8007240:	e7fb      	b.n	800723a <__ascii_mbtowc+0x16>
 8007242:	f06f 0001 	mvn.w	r0, #1
 8007246:	e7f8      	b.n	800723a <__ascii_mbtowc+0x16>

08007248 <__ascii_wctomb>:
 8007248:	b149      	cbz	r1, 800725e <__ascii_wctomb+0x16>
 800724a:	2aff      	cmp	r2, #255	; 0xff
 800724c:	bf85      	ittet	hi
 800724e:	238a      	movhi	r3, #138	; 0x8a
 8007250:	6003      	strhi	r3, [r0, #0]
 8007252:	700a      	strbls	r2, [r1, #0]
 8007254:	f04f 30ff 	movhi.w	r0, #4294967295
 8007258:	bf98      	it	ls
 800725a:	2001      	movls	r0, #1
 800725c:	4770      	bx	lr
 800725e:	4608      	mov	r0, r1
 8007260:	4770      	bx	lr
	...

08007264 <fiprintf>:
 8007264:	b40e      	push	{r1, r2, r3}
 8007266:	b503      	push	{r0, r1, lr}
 8007268:	4601      	mov	r1, r0
 800726a:	ab03      	add	r3, sp, #12
 800726c:	4805      	ldr	r0, [pc, #20]	; (8007284 <fiprintf+0x20>)
 800726e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007272:	6800      	ldr	r0, [r0, #0]
 8007274:	9301      	str	r3, [sp, #4]
 8007276:	f000 f837 	bl	80072e8 <_vfiprintf_r>
 800727a:	b002      	add	sp, #8
 800727c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007280:	b003      	add	sp, #12
 8007282:	4770      	bx	lr
 8007284:	20000064 	.word	0x20000064

08007288 <abort>:
 8007288:	b508      	push	{r3, lr}
 800728a:	2006      	movs	r0, #6
 800728c:	f000 fa04 	bl	8007698 <raise>
 8007290:	2001      	movs	r0, #1
 8007292:	f7fa fc15 	bl	8001ac0 <_exit>

08007296 <__sfputc_r>:
 8007296:	6893      	ldr	r3, [r2, #8]
 8007298:	3b01      	subs	r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	b410      	push	{r4}
 800729e:	6093      	str	r3, [r2, #8]
 80072a0:	da08      	bge.n	80072b4 <__sfputc_r+0x1e>
 80072a2:	6994      	ldr	r4, [r2, #24]
 80072a4:	42a3      	cmp	r3, r4
 80072a6:	db01      	blt.n	80072ac <__sfputc_r+0x16>
 80072a8:	290a      	cmp	r1, #10
 80072aa:	d103      	bne.n	80072b4 <__sfputc_r+0x1e>
 80072ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b0:	f000 b934 	b.w	800751c <__swbuf_r>
 80072b4:	6813      	ldr	r3, [r2, #0]
 80072b6:	1c58      	adds	r0, r3, #1
 80072b8:	6010      	str	r0, [r2, #0]
 80072ba:	7019      	strb	r1, [r3, #0]
 80072bc:	4608      	mov	r0, r1
 80072be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <__sfputs_r>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	4606      	mov	r6, r0
 80072c8:	460f      	mov	r7, r1
 80072ca:	4614      	mov	r4, r2
 80072cc:	18d5      	adds	r5, r2, r3
 80072ce:	42ac      	cmp	r4, r5
 80072d0:	d101      	bne.n	80072d6 <__sfputs_r+0x12>
 80072d2:	2000      	movs	r0, #0
 80072d4:	e007      	b.n	80072e6 <__sfputs_r+0x22>
 80072d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072da:	463a      	mov	r2, r7
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff ffda 	bl	8007296 <__sfputc_r>
 80072e2:	1c43      	adds	r3, r0, #1
 80072e4:	d1f3      	bne.n	80072ce <__sfputs_r+0xa>
 80072e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072e8 <_vfiprintf_r>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	460d      	mov	r5, r1
 80072ee:	b09d      	sub	sp, #116	; 0x74
 80072f0:	4614      	mov	r4, r2
 80072f2:	4698      	mov	r8, r3
 80072f4:	4606      	mov	r6, r0
 80072f6:	b118      	cbz	r0, 8007300 <_vfiprintf_r+0x18>
 80072f8:	6a03      	ldr	r3, [r0, #32]
 80072fa:	b90b      	cbnz	r3, 8007300 <_vfiprintf_r+0x18>
 80072fc:	f7fe faa0 	bl	8005840 <__sinit>
 8007300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007302:	07d9      	lsls	r1, r3, #31
 8007304:	d405      	bmi.n	8007312 <_vfiprintf_r+0x2a>
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	059a      	lsls	r2, r3, #22
 800730a:	d402      	bmi.n	8007312 <_vfiprintf_r+0x2a>
 800730c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800730e:	f7fe fb8e 	bl	8005a2e <__retarget_lock_acquire_recursive>
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	071b      	lsls	r3, r3, #28
 8007316:	d501      	bpl.n	800731c <_vfiprintf_r+0x34>
 8007318:	692b      	ldr	r3, [r5, #16]
 800731a:	b99b      	cbnz	r3, 8007344 <_vfiprintf_r+0x5c>
 800731c:	4629      	mov	r1, r5
 800731e:	4630      	mov	r0, r6
 8007320:	f000 f93a 	bl	8007598 <__swsetup_r>
 8007324:	b170      	cbz	r0, 8007344 <_vfiprintf_r+0x5c>
 8007326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007328:	07dc      	lsls	r4, r3, #31
 800732a:	d504      	bpl.n	8007336 <_vfiprintf_r+0x4e>
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	b01d      	add	sp, #116	; 0x74
 8007332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007336:	89ab      	ldrh	r3, [r5, #12]
 8007338:	0598      	lsls	r0, r3, #22
 800733a:	d4f7      	bmi.n	800732c <_vfiprintf_r+0x44>
 800733c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800733e:	f7fe fb77 	bl	8005a30 <__retarget_lock_release_recursive>
 8007342:	e7f3      	b.n	800732c <_vfiprintf_r+0x44>
 8007344:	2300      	movs	r3, #0
 8007346:	9309      	str	r3, [sp, #36]	; 0x24
 8007348:	2320      	movs	r3, #32
 800734a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800734e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007352:	2330      	movs	r3, #48	; 0x30
 8007354:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007508 <_vfiprintf_r+0x220>
 8007358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800735c:	f04f 0901 	mov.w	r9, #1
 8007360:	4623      	mov	r3, r4
 8007362:	469a      	mov	sl, r3
 8007364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007368:	b10a      	cbz	r2, 800736e <_vfiprintf_r+0x86>
 800736a:	2a25      	cmp	r2, #37	; 0x25
 800736c:	d1f9      	bne.n	8007362 <_vfiprintf_r+0x7a>
 800736e:	ebba 0b04 	subs.w	fp, sl, r4
 8007372:	d00b      	beq.n	800738c <_vfiprintf_r+0xa4>
 8007374:	465b      	mov	r3, fp
 8007376:	4622      	mov	r2, r4
 8007378:	4629      	mov	r1, r5
 800737a:	4630      	mov	r0, r6
 800737c:	f7ff ffa2 	bl	80072c4 <__sfputs_r>
 8007380:	3001      	adds	r0, #1
 8007382:	f000 80a9 	beq.w	80074d8 <_vfiprintf_r+0x1f0>
 8007386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007388:	445a      	add	r2, fp
 800738a:	9209      	str	r2, [sp, #36]	; 0x24
 800738c:	f89a 3000 	ldrb.w	r3, [sl]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80a1 	beq.w	80074d8 <_vfiprintf_r+0x1f0>
 8007396:	2300      	movs	r3, #0
 8007398:	f04f 32ff 	mov.w	r2, #4294967295
 800739c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a0:	f10a 0a01 	add.w	sl, sl, #1
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	9307      	str	r3, [sp, #28]
 80073a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ac:	931a      	str	r3, [sp, #104]	; 0x68
 80073ae:	4654      	mov	r4, sl
 80073b0:	2205      	movs	r2, #5
 80073b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b6:	4854      	ldr	r0, [pc, #336]	; (8007508 <_vfiprintf_r+0x220>)
 80073b8:	f7f8 ff2a 	bl	8000210 <memchr>
 80073bc:	9a04      	ldr	r2, [sp, #16]
 80073be:	b9d8      	cbnz	r0, 80073f8 <_vfiprintf_r+0x110>
 80073c0:	06d1      	lsls	r1, r2, #27
 80073c2:	bf44      	itt	mi
 80073c4:	2320      	movmi	r3, #32
 80073c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ca:	0713      	lsls	r3, r2, #28
 80073cc:	bf44      	itt	mi
 80073ce:	232b      	movmi	r3, #43	; 0x2b
 80073d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d4:	f89a 3000 	ldrb.w	r3, [sl]
 80073d8:	2b2a      	cmp	r3, #42	; 0x2a
 80073da:	d015      	beq.n	8007408 <_vfiprintf_r+0x120>
 80073dc:	9a07      	ldr	r2, [sp, #28]
 80073de:	4654      	mov	r4, sl
 80073e0:	2000      	movs	r0, #0
 80073e2:	f04f 0c0a 	mov.w	ip, #10
 80073e6:	4621      	mov	r1, r4
 80073e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ec:	3b30      	subs	r3, #48	; 0x30
 80073ee:	2b09      	cmp	r3, #9
 80073f0:	d94d      	bls.n	800748e <_vfiprintf_r+0x1a6>
 80073f2:	b1b0      	cbz	r0, 8007422 <_vfiprintf_r+0x13a>
 80073f4:	9207      	str	r2, [sp, #28]
 80073f6:	e014      	b.n	8007422 <_vfiprintf_r+0x13a>
 80073f8:	eba0 0308 	sub.w	r3, r0, r8
 80073fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007400:	4313      	orrs	r3, r2
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	46a2      	mov	sl, r4
 8007406:	e7d2      	b.n	80073ae <_vfiprintf_r+0xc6>
 8007408:	9b03      	ldr	r3, [sp, #12]
 800740a:	1d19      	adds	r1, r3, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	9103      	str	r1, [sp, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	bfbb      	ittet	lt
 8007414:	425b      	neglt	r3, r3
 8007416:	f042 0202 	orrlt.w	r2, r2, #2
 800741a:	9307      	strge	r3, [sp, #28]
 800741c:	9307      	strlt	r3, [sp, #28]
 800741e:	bfb8      	it	lt
 8007420:	9204      	strlt	r2, [sp, #16]
 8007422:	7823      	ldrb	r3, [r4, #0]
 8007424:	2b2e      	cmp	r3, #46	; 0x2e
 8007426:	d10c      	bne.n	8007442 <_vfiprintf_r+0x15a>
 8007428:	7863      	ldrb	r3, [r4, #1]
 800742a:	2b2a      	cmp	r3, #42	; 0x2a
 800742c:	d134      	bne.n	8007498 <_vfiprintf_r+0x1b0>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	1d1a      	adds	r2, r3, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	9203      	str	r2, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfb8      	it	lt
 800743a:	f04f 33ff 	movlt.w	r3, #4294967295
 800743e:	3402      	adds	r4, #2
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007518 <_vfiprintf_r+0x230>
 8007446:	7821      	ldrb	r1, [r4, #0]
 8007448:	2203      	movs	r2, #3
 800744a:	4650      	mov	r0, sl
 800744c:	f7f8 fee0 	bl	8000210 <memchr>
 8007450:	b138      	cbz	r0, 8007462 <_vfiprintf_r+0x17a>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	eba0 000a 	sub.w	r0, r0, sl
 8007458:	2240      	movs	r2, #64	; 0x40
 800745a:	4082      	lsls	r2, r0
 800745c:	4313      	orrs	r3, r2
 800745e:	3401      	adds	r4, #1
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007466:	4829      	ldr	r0, [pc, #164]	; (800750c <_vfiprintf_r+0x224>)
 8007468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746c:	2206      	movs	r2, #6
 800746e:	f7f8 fecf 	bl	8000210 <memchr>
 8007472:	2800      	cmp	r0, #0
 8007474:	d03f      	beq.n	80074f6 <_vfiprintf_r+0x20e>
 8007476:	4b26      	ldr	r3, [pc, #152]	; (8007510 <_vfiprintf_r+0x228>)
 8007478:	bb1b      	cbnz	r3, 80074c2 <_vfiprintf_r+0x1da>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	3307      	adds	r3, #7
 800747e:	f023 0307 	bic.w	r3, r3, #7
 8007482:	3308      	adds	r3, #8
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	443b      	add	r3, r7
 800748a:	9309      	str	r3, [sp, #36]	; 0x24
 800748c:	e768      	b.n	8007360 <_vfiprintf_r+0x78>
 800748e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007492:	460c      	mov	r4, r1
 8007494:	2001      	movs	r0, #1
 8007496:	e7a6      	b.n	80073e6 <_vfiprintf_r+0xfe>
 8007498:	2300      	movs	r3, #0
 800749a:	3401      	adds	r4, #1
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	4619      	mov	r1, r3
 80074a0:	f04f 0c0a 	mov.w	ip, #10
 80074a4:	4620      	mov	r0, r4
 80074a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074aa:	3a30      	subs	r2, #48	; 0x30
 80074ac:	2a09      	cmp	r2, #9
 80074ae:	d903      	bls.n	80074b8 <_vfiprintf_r+0x1d0>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0c6      	beq.n	8007442 <_vfiprintf_r+0x15a>
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	e7c4      	b.n	8007442 <_vfiprintf_r+0x15a>
 80074b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074bc:	4604      	mov	r4, r0
 80074be:	2301      	movs	r3, #1
 80074c0:	e7f0      	b.n	80074a4 <_vfiprintf_r+0x1bc>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4b12      	ldr	r3, [pc, #72]	; (8007514 <_vfiprintf_r+0x22c>)
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7fd fd65 	bl	8004f9c <_printf_float>
 80074d2:	4607      	mov	r7, r0
 80074d4:	1c78      	adds	r0, r7, #1
 80074d6:	d1d6      	bne.n	8007486 <_vfiprintf_r+0x19e>
 80074d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	d405      	bmi.n	80074ea <_vfiprintf_r+0x202>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	059a      	lsls	r2, r3, #22
 80074e2:	d402      	bmi.n	80074ea <_vfiprintf_r+0x202>
 80074e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074e6:	f7fe faa3 	bl	8005a30 <__retarget_lock_release_recursive>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	065b      	lsls	r3, r3, #25
 80074ee:	f53f af1d 	bmi.w	800732c <_vfiprintf_r+0x44>
 80074f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074f4:	e71c      	b.n	8007330 <_vfiprintf_r+0x48>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <_vfiprintf_r+0x22c>)
 80074fe:	a904      	add	r1, sp, #16
 8007500:	4630      	mov	r0, r6
 8007502:	f7fd ffef 	bl	80054e4 <_printf_i>
 8007506:	e7e4      	b.n	80074d2 <_vfiprintf_r+0x1ea>
 8007508:	0800825b 	.word	0x0800825b
 800750c:	08008265 	.word	0x08008265
 8007510:	08004f9d 	.word	0x08004f9d
 8007514:	080072c5 	.word	0x080072c5
 8007518:	08008261 	.word	0x08008261

0800751c <__swbuf_r>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	460e      	mov	r6, r1
 8007520:	4614      	mov	r4, r2
 8007522:	4605      	mov	r5, r0
 8007524:	b118      	cbz	r0, 800752e <__swbuf_r+0x12>
 8007526:	6a03      	ldr	r3, [r0, #32]
 8007528:	b90b      	cbnz	r3, 800752e <__swbuf_r+0x12>
 800752a:	f7fe f989 	bl	8005840 <__sinit>
 800752e:	69a3      	ldr	r3, [r4, #24]
 8007530:	60a3      	str	r3, [r4, #8]
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	071a      	lsls	r2, r3, #28
 8007536:	d525      	bpl.n	8007584 <__swbuf_r+0x68>
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	b31b      	cbz	r3, 8007584 <__swbuf_r+0x68>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	6922      	ldr	r2, [r4, #16]
 8007540:	1a98      	subs	r0, r3, r2
 8007542:	6963      	ldr	r3, [r4, #20]
 8007544:	b2f6      	uxtb	r6, r6
 8007546:	4283      	cmp	r3, r0
 8007548:	4637      	mov	r7, r6
 800754a:	dc04      	bgt.n	8007556 <__swbuf_r+0x3a>
 800754c:	4621      	mov	r1, r4
 800754e:	4628      	mov	r0, r5
 8007550:	f7ff fdee 	bl	8007130 <_fflush_r>
 8007554:	b9e0      	cbnz	r0, 8007590 <__swbuf_r+0x74>
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	3b01      	subs	r3, #1
 800755a:	60a3      	str	r3, [r4, #8]
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	6022      	str	r2, [r4, #0]
 8007562:	701e      	strb	r6, [r3, #0]
 8007564:	6962      	ldr	r2, [r4, #20]
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	429a      	cmp	r2, r3
 800756a:	d004      	beq.n	8007576 <__swbuf_r+0x5a>
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	07db      	lsls	r3, r3, #31
 8007570:	d506      	bpl.n	8007580 <__swbuf_r+0x64>
 8007572:	2e0a      	cmp	r6, #10
 8007574:	d104      	bne.n	8007580 <__swbuf_r+0x64>
 8007576:	4621      	mov	r1, r4
 8007578:	4628      	mov	r0, r5
 800757a:	f7ff fdd9 	bl	8007130 <_fflush_r>
 800757e:	b938      	cbnz	r0, 8007590 <__swbuf_r+0x74>
 8007580:	4638      	mov	r0, r7
 8007582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007584:	4621      	mov	r1, r4
 8007586:	4628      	mov	r0, r5
 8007588:	f000 f806 	bl	8007598 <__swsetup_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	d0d5      	beq.n	800753c <__swbuf_r+0x20>
 8007590:	f04f 37ff 	mov.w	r7, #4294967295
 8007594:	e7f4      	b.n	8007580 <__swbuf_r+0x64>
	...

08007598 <__swsetup_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4b2a      	ldr	r3, [pc, #168]	; (8007644 <__swsetup_r+0xac>)
 800759c:	4605      	mov	r5, r0
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	460c      	mov	r4, r1
 80075a2:	b118      	cbz	r0, 80075ac <__swsetup_r+0x14>
 80075a4:	6a03      	ldr	r3, [r0, #32]
 80075a6:	b90b      	cbnz	r3, 80075ac <__swsetup_r+0x14>
 80075a8:	f7fe f94a 	bl	8005840 <__sinit>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075b2:	0718      	lsls	r0, r3, #28
 80075b4:	d422      	bmi.n	80075fc <__swsetup_r+0x64>
 80075b6:	06d9      	lsls	r1, r3, #27
 80075b8:	d407      	bmi.n	80075ca <__swsetup_r+0x32>
 80075ba:	2309      	movs	r3, #9
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e034      	b.n	8007634 <__swsetup_r+0x9c>
 80075ca:	0758      	lsls	r0, r3, #29
 80075cc:	d512      	bpl.n	80075f4 <__swsetup_r+0x5c>
 80075ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075d0:	b141      	cbz	r1, 80075e4 <__swsetup_r+0x4c>
 80075d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075d6:	4299      	cmp	r1, r3
 80075d8:	d002      	beq.n	80075e0 <__swsetup_r+0x48>
 80075da:	4628      	mov	r0, r5
 80075dc:	f7ff f8a6 	bl	800672c <_free_r>
 80075e0:	2300      	movs	r3, #0
 80075e2:	6363      	str	r3, [r4, #52]	; 0x34
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	2300      	movs	r3, #0
 80075ee:	6063      	str	r3, [r4, #4]
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f043 0308 	orr.w	r3, r3, #8
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	b94b      	cbnz	r3, 8007614 <__swsetup_r+0x7c>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760a:	d003      	beq.n	8007614 <__swsetup_r+0x7c>
 800760c:	4621      	mov	r1, r4
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f884 	bl	800771c <__smakebuf_r>
 8007614:	89a0      	ldrh	r0, [r4, #12]
 8007616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800761a:	f010 0301 	ands.w	r3, r0, #1
 800761e:	d00a      	beq.n	8007636 <__swsetup_r+0x9e>
 8007620:	2300      	movs	r3, #0
 8007622:	60a3      	str	r3, [r4, #8]
 8007624:	6963      	ldr	r3, [r4, #20]
 8007626:	425b      	negs	r3, r3
 8007628:	61a3      	str	r3, [r4, #24]
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	b943      	cbnz	r3, 8007640 <__swsetup_r+0xa8>
 800762e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007632:	d1c4      	bne.n	80075be <__swsetup_r+0x26>
 8007634:	bd38      	pop	{r3, r4, r5, pc}
 8007636:	0781      	lsls	r1, r0, #30
 8007638:	bf58      	it	pl
 800763a:	6963      	ldrpl	r3, [r4, #20]
 800763c:	60a3      	str	r3, [r4, #8]
 800763e:	e7f4      	b.n	800762a <__swsetup_r+0x92>
 8007640:	2000      	movs	r0, #0
 8007642:	e7f7      	b.n	8007634 <__swsetup_r+0x9c>
 8007644:	20000064 	.word	0x20000064

08007648 <_raise_r>:
 8007648:	291f      	cmp	r1, #31
 800764a:	b538      	push	{r3, r4, r5, lr}
 800764c:	4604      	mov	r4, r0
 800764e:	460d      	mov	r5, r1
 8007650:	d904      	bls.n	800765c <_raise_r+0x14>
 8007652:	2316      	movs	r3, #22
 8007654:	6003      	str	r3, [r0, #0]
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800765e:	b112      	cbz	r2, 8007666 <_raise_r+0x1e>
 8007660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007664:	b94b      	cbnz	r3, 800767a <_raise_r+0x32>
 8007666:	4620      	mov	r0, r4
 8007668:	f000 f830 	bl	80076cc <_getpid_r>
 800766c:	462a      	mov	r2, r5
 800766e:	4601      	mov	r1, r0
 8007670:	4620      	mov	r0, r4
 8007672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007676:	f000 b817 	b.w	80076a8 <_kill_r>
 800767a:	2b01      	cmp	r3, #1
 800767c:	d00a      	beq.n	8007694 <_raise_r+0x4c>
 800767e:	1c59      	adds	r1, r3, #1
 8007680:	d103      	bne.n	800768a <_raise_r+0x42>
 8007682:	2316      	movs	r3, #22
 8007684:	6003      	str	r3, [r0, #0]
 8007686:	2001      	movs	r0, #1
 8007688:	e7e7      	b.n	800765a <_raise_r+0x12>
 800768a:	2400      	movs	r4, #0
 800768c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007690:	4628      	mov	r0, r5
 8007692:	4798      	blx	r3
 8007694:	2000      	movs	r0, #0
 8007696:	e7e0      	b.n	800765a <_raise_r+0x12>

08007698 <raise>:
 8007698:	4b02      	ldr	r3, [pc, #8]	; (80076a4 <raise+0xc>)
 800769a:	4601      	mov	r1, r0
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	f7ff bfd3 	b.w	8007648 <_raise_r>
 80076a2:	bf00      	nop
 80076a4:	20000064 	.word	0x20000064

080076a8 <_kill_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d07      	ldr	r5, [pc, #28]	; (80076c8 <_kill_r+0x20>)
 80076ac:	2300      	movs	r3, #0
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	602b      	str	r3, [r5, #0]
 80076b6:	f7fa f9f3 	bl	8001aa0 <_kill>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	d102      	bne.n	80076c4 <_kill_r+0x1c>
 80076be:	682b      	ldr	r3, [r5, #0]
 80076c0:	b103      	cbz	r3, 80076c4 <_kill_r+0x1c>
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	bd38      	pop	{r3, r4, r5, pc}
 80076c6:	bf00      	nop
 80076c8:	200004f8 	.word	0x200004f8

080076cc <_getpid_r>:
 80076cc:	f7fa b9e0 	b.w	8001a90 <_getpid>

080076d0 <__swhatbuf_r>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	460c      	mov	r4, r1
 80076d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d8:	2900      	cmp	r1, #0
 80076da:	b096      	sub	sp, #88	; 0x58
 80076dc:	4615      	mov	r5, r2
 80076de:	461e      	mov	r6, r3
 80076e0:	da0d      	bge.n	80076fe <__swhatbuf_r+0x2e>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076e8:	f04f 0100 	mov.w	r1, #0
 80076ec:	bf0c      	ite	eq
 80076ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80076f2:	2340      	movne	r3, #64	; 0x40
 80076f4:	2000      	movs	r0, #0
 80076f6:	6031      	str	r1, [r6, #0]
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	b016      	add	sp, #88	; 0x58
 80076fc:	bd70      	pop	{r4, r5, r6, pc}
 80076fe:	466a      	mov	r2, sp
 8007700:	f000 f848 	bl	8007794 <_fstat_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	dbec      	blt.n	80076e2 <__swhatbuf_r+0x12>
 8007708:	9901      	ldr	r1, [sp, #4]
 800770a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800770e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007712:	4259      	negs	r1, r3
 8007714:	4159      	adcs	r1, r3
 8007716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800771a:	e7eb      	b.n	80076f4 <__swhatbuf_r+0x24>

0800771c <__smakebuf_r>:
 800771c:	898b      	ldrh	r3, [r1, #12]
 800771e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007720:	079d      	lsls	r5, r3, #30
 8007722:	4606      	mov	r6, r0
 8007724:	460c      	mov	r4, r1
 8007726:	d507      	bpl.n	8007738 <__smakebuf_r+0x1c>
 8007728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	2301      	movs	r3, #1
 8007732:	6163      	str	r3, [r4, #20]
 8007734:	b002      	add	sp, #8
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	ab01      	add	r3, sp, #4
 800773a:	466a      	mov	r2, sp
 800773c:	f7ff ffc8 	bl	80076d0 <__swhatbuf_r>
 8007740:	9900      	ldr	r1, [sp, #0]
 8007742:	4605      	mov	r5, r0
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff f865 	bl	8006814 <_malloc_r>
 800774a:	b948      	cbnz	r0, 8007760 <__smakebuf_r+0x44>
 800774c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007750:	059a      	lsls	r2, r3, #22
 8007752:	d4ef      	bmi.n	8007734 <__smakebuf_r+0x18>
 8007754:	f023 0303 	bic.w	r3, r3, #3
 8007758:	f043 0302 	orr.w	r3, r3, #2
 800775c:	81a3      	strh	r3, [r4, #12]
 800775e:	e7e3      	b.n	8007728 <__smakebuf_r+0xc>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	6020      	str	r0, [r4, #0]
 8007764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	9b00      	ldr	r3, [sp, #0]
 800776c:	6163      	str	r3, [r4, #20]
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	6120      	str	r0, [r4, #16]
 8007772:	b15b      	cbz	r3, 800778c <__smakebuf_r+0x70>
 8007774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007778:	4630      	mov	r0, r6
 800777a:	f000 f81d 	bl	80077b8 <_isatty_r>
 800777e:	b128      	cbz	r0, 800778c <__smakebuf_r+0x70>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f023 0303 	bic.w	r3, r3, #3
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	431d      	orrs	r5, r3
 8007790:	81a5      	strh	r5, [r4, #12]
 8007792:	e7cf      	b.n	8007734 <__smakebuf_r+0x18>

08007794 <_fstat_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4d07      	ldr	r5, [pc, #28]	; (80077b4 <_fstat_r+0x20>)
 8007798:	2300      	movs	r3, #0
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	602b      	str	r3, [r5, #0]
 80077a2:	f7fa f9dc 	bl	8001b5e <_fstat>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d102      	bne.n	80077b0 <_fstat_r+0x1c>
 80077aa:	682b      	ldr	r3, [r5, #0]
 80077ac:	b103      	cbz	r3, 80077b0 <_fstat_r+0x1c>
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	bd38      	pop	{r3, r4, r5, pc}
 80077b2:	bf00      	nop
 80077b4:	200004f8 	.word	0x200004f8

080077b8 <_isatty_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4d06      	ldr	r5, [pc, #24]	; (80077d4 <_isatty_r+0x1c>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	f7fa f9db 	bl	8001b7e <_isatty>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_isatty_r+0x1a>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_isatty_r+0x1a>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	200004f8 	.word	0x200004f8

080077d8 <atan2>:
 80077d8:	f000 b906 	b.w	80079e8 <__ieee754_atan2>

080077dc <sqrt>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	ed2d 8b02 	vpush	{d8}
 80077e2:	ec55 4b10 	vmov	r4, r5, d0
 80077e6:	f000 f825 	bl	8007834 <__ieee754_sqrt>
 80077ea:	4622      	mov	r2, r4
 80077ec:	462b      	mov	r3, r5
 80077ee:	4620      	mov	r0, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	eeb0 8a40 	vmov.f32	s16, s0
 80077f6:	eef0 8a60 	vmov.f32	s17, s1
 80077fa:	f7f9 f9b7 	bl	8000b6c <__aeabi_dcmpun>
 80077fe:	b990      	cbnz	r0, 8007826 <sqrt+0x4a>
 8007800:	2200      	movs	r2, #0
 8007802:	2300      	movs	r3, #0
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f9 f988 	bl	8000b1c <__aeabi_dcmplt>
 800780c:	b158      	cbz	r0, 8007826 <sqrt+0x4a>
 800780e:	f7fe f8e3 	bl	80059d8 <__errno>
 8007812:	2321      	movs	r3, #33	; 0x21
 8007814:	6003      	str	r3, [r0, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	2300      	movs	r3, #0
 800781a:	4610      	mov	r0, r2
 800781c:	4619      	mov	r1, r3
 800781e:	f7f9 f835 	bl	800088c <__aeabi_ddiv>
 8007822:	ec41 0b18 	vmov	d8, r0, r1
 8007826:	eeb0 0a48 	vmov.f32	s0, s16
 800782a:	eef0 0a68 	vmov.f32	s1, s17
 800782e:	ecbd 8b02 	vpop	{d8}
 8007832:	bd38      	pop	{r3, r4, r5, pc}

08007834 <__ieee754_sqrt>:
 8007834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	ec55 4b10 	vmov	r4, r5, d0
 800783c:	4e67      	ldr	r6, [pc, #412]	; (80079dc <__ieee754_sqrt+0x1a8>)
 800783e:	43ae      	bics	r6, r5
 8007840:	ee10 0a10 	vmov	r0, s0
 8007844:	ee10 2a10 	vmov	r2, s0
 8007848:	4629      	mov	r1, r5
 800784a:	462b      	mov	r3, r5
 800784c:	d10d      	bne.n	800786a <__ieee754_sqrt+0x36>
 800784e:	f7f8 fef3 	bl	8000638 <__aeabi_dmul>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fd37 	bl	80002cc <__adddf3>
 800785e:	4604      	mov	r4, r0
 8007860:	460d      	mov	r5, r1
 8007862:	ec45 4b10 	vmov	d0, r4, r5
 8007866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786a:	2d00      	cmp	r5, #0
 800786c:	dc0b      	bgt.n	8007886 <__ieee754_sqrt+0x52>
 800786e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007872:	4326      	orrs	r6, r4
 8007874:	d0f5      	beq.n	8007862 <__ieee754_sqrt+0x2e>
 8007876:	b135      	cbz	r5, 8007886 <__ieee754_sqrt+0x52>
 8007878:	f7f8 fd26 	bl	80002c8 <__aeabi_dsub>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	f7f9 f804 	bl	800088c <__aeabi_ddiv>
 8007884:	e7eb      	b.n	800785e <__ieee754_sqrt+0x2a>
 8007886:	1509      	asrs	r1, r1, #20
 8007888:	f000 808d 	beq.w	80079a6 <__ieee754_sqrt+0x172>
 800788c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007890:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007898:	07c9      	lsls	r1, r1, #31
 800789a:	bf5c      	itt	pl
 800789c:	005b      	lslpl	r3, r3, #1
 800789e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80078a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80078a6:	bf58      	it	pl
 80078a8:	0052      	lslpl	r2, r2, #1
 80078aa:	2500      	movs	r5, #0
 80078ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80078b0:	1076      	asrs	r6, r6, #1
 80078b2:	0052      	lsls	r2, r2, #1
 80078b4:	f04f 0e16 	mov.w	lr, #22
 80078b8:	46ac      	mov	ip, r5
 80078ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078be:	eb0c 0001 	add.w	r0, ip, r1
 80078c2:	4298      	cmp	r0, r3
 80078c4:	bfde      	ittt	le
 80078c6:	1a1b      	suble	r3, r3, r0
 80078c8:	eb00 0c01 	addle.w	ip, r0, r1
 80078cc:	186d      	addle	r5, r5, r1
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	f1be 0e01 	subs.w	lr, lr, #1
 80078d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80078d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80078dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80078e0:	d1ed      	bne.n	80078be <__ieee754_sqrt+0x8a>
 80078e2:	4674      	mov	r4, lr
 80078e4:	2720      	movs	r7, #32
 80078e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80078ea:	4563      	cmp	r3, ip
 80078ec:	eb01 000e 	add.w	r0, r1, lr
 80078f0:	dc02      	bgt.n	80078f8 <__ieee754_sqrt+0xc4>
 80078f2:	d113      	bne.n	800791c <__ieee754_sqrt+0xe8>
 80078f4:	4290      	cmp	r0, r2
 80078f6:	d811      	bhi.n	800791c <__ieee754_sqrt+0xe8>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	eb00 0e01 	add.w	lr, r0, r1
 80078fe:	da57      	bge.n	80079b0 <__ieee754_sqrt+0x17c>
 8007900:	f1be 0f00 	cmp.w	lr, #0
 8007904:	db54      	blt.n	80079b0 <__ieee754_sqrt+0x17c>
 8007906:	f10c 0801 	add.w	r8, ip, #1
 800790a:	eba3 030c 	sub.w	r3, r3, ip
 800790e:	4290      	cmp	r0, r2
 8007910:	bf88      	it	hi
 8007912:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007916:	1a12      	subs	r2, r2, r0
 8007918:	440c      	add	r4, r1
 800791a:	46c4      	mov	ip, r8
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	3f01      	subs	r7, #1
 8007920:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007924:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007928:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800792c:	d1dd      	bne.n	80078ea <__ieee754_sqrt+0xb6>
 800792e:	4313      	orrs	r3, r2
 8007930:	d01b      	beq.n	800796a <__ieee754_sqrt+0x136>
 8007932:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80079e0 <__ieee754_sqrt+0x1ac>
 8007936:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80079e4 <__ieee754_sqrt+0x1b0>
 800793a:	e9da 0100 	ldrd	r0, r1, [sl]
 800793e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007942:	f7f8 fcc1 	bl	80002c8 <__aeabi_dsub>
 8007946:	e9da 8900 	ldrd	r8, r9, [sl]
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4640      	mov	r0, r8
 8007950:	4649      	mov	r1, r9
 8007952:	f7f9 f8ed 	bl	8000b30 <__aeabi_dcmple>
 8007956:	b140      	cbz	r0, 800796a <__ieee754_sqrt+0x136>
 8007958:	f1b4 3fff 	cmp.w	r4, #4294967295
 800795c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007960:	e9db 2300 	ldrd	r2, r3, [fp]
 8007964:	d126      	bne.n	80079b4 <__ieee754_sqrt+0x180>
 8007966:	3501      	adds	r5, #1
 8007968:	463c      	mov	r4, r7
 800796a:	106a      	asrs	r2, r5, #1
 800796c:	0863      	lsrs	r3, r4, #1
 800796e:	07e9      	lsls	r1, r5, #31
 8007970:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007974:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007978:	bf48      	it	mi
 800797a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800797e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007982:	461c      	mov	r4, r3
 8007984:	e76d      	b.n	8007862 <__ieee754_sqrt+0x2e>
 8007986:	0ad3      	lsrs	r3, r2, #11
 8007988:	3815      	subs	r0, #21
 800798a:	0552      	lsls	r2, r2, #21
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0fa      	beq.n	8007986 <__ieee754_sqrt+0x152>
 8007990:	02dc      	lsls	r4, r3, #11
 8007992:	d50a      	bpl.n	80079aa <__ieee754_sqrt+0x176>
 8007994:	f1c1 0420 	rsb	r4, r1, #32
 8007998:	fa22 f404 	lsr.w	r4, r2, r4
 800799c:	1e4d      	subs	r5, r1, #1
 800799e:	408a      	lsls	r2, r1
 80079a0:	4323      	orrs	r3, r4
 80079a2:	1b41      	subs	r1, r0, r5
 80079a4:	e772      	b.n	800788c <__ieee754_sqrt+0x58>
 80079a6:	4608      	mov	r0, r1
 80079a8:	e7f0      	b.n	800798c <__ieee754_sqrt+0x158>
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	3101      	adds	r1, #1
 80079ae:	e7ef      	b.n	8007990 <__ieee754_sqrt+0x15c>
 80079b0:	46e0      	mov	r8, ip
 80079b2:	e7aa      	b.n	800790a <__ieee754_sqrt+0xd6>
 80079b4:	f7f8 fc8a 	bl	80002cc <__adddf3>
 80079b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4640      	mov	r0, r8
 80079c2:	4649      	mov	r1, r9
 80079c4:	f7f9 f8aa 	bl	8000b1c <__aeabi_dcmplt>
 80079c8:	b120      	cbz	r0, 80079d4 <__ieee754_sqrt+0x1a0>
 80079ca:	1ca0      	adds	r0, r4, #2
 80079cc:	bf08      	it	eq
 80079ce:	3501      	addeq	r5, #1
 80079d0:	3402      	adds	r4, #2
 80079d2:	e7ca      	b.n	800796a <__ieee754_sqrt+0x136>
 80079d4:	3401      	adds	r4, #1
 80079d6:	f024 0401 	bic.w	r4, r4, #1
 80079da:	e7c6      	b.n	800796a <__ieee754_sqrt+0x136>
 80079dc:	7ff00000 	.word	0x7ff00000
 80079e0:	200001d8 	.word	0x200001d8
 80079e4:	200001e0 	.word	0x200001e0

080079e8 <__ieee754_atan2>:
 80079e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	ec57 6b11 	vmov	r6, r7, d1
 80079f0:	4273      	negs	r3, r6
 80079f2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007b70 <__ieee754_atan2+0x188>
 80079f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80079fa:	4333      	orrs	r3, r6
 80079fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007a00:	4543      	cmp	r3, r8
 8007a02:	ec51 0b10 	vmov	r0, r1, d0
 8007a06:	ee11 5a10 	vmov	r5, s2
 8007a0a:	d80a      	bhi.n	8007a22 <__ieee754_atan2+0x3a>
 8007a0c:	4244      	negs	r4, r0
 8007a0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a12:	4304      	orrs	r4, r0
 8007a14:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007a18:	4544      	cmp	r4, r8
 8007a1a:	ee10 9a10 	vmov	r9, s0
 8007a1e:	468e      	mov	lr, r1
 8007a20:	d907      	bls.n	8007a32 <__ieee754_atan2+0x4a>
 8007a22:	4632      	mov	r2, r6
 8007a24:	463b      	mov	r3, r7
 8007a26:	f7f8 fc51 	bl	80002cc <__adddf3>
 8007a2a:	ec41 0b10 	vmov	d0, r0, r1
 8007a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a32:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007a36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007a3a:	4334      	orrs	r4, r6
 8007a3c:	d103      	bne.n	8007a46 <__ieee754_atan2+0x5e>
 8007a3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a42:	f000 b899 	b.w	8007b78 <atan>
 8007a46:	17bc      	asrs	r4, r7, #30
 8007a48:	f004 0402 	and.w	r4, r4, #2
 8007a4c:	ea53 0909 	orrs.w	r9, r3, r9
 8007a50:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007a54:	d107      	bne.n	8007a66 <__ieee754_atan2+0x7e>
 8007a56:	2c02      	cmp	r4, #2
 8007a58:	d05f      	beq.n	8007b1a <__ieee754_atan2+0x132>
 8007a5a:	2c03      	cmp	r4, #3
 8007a5c:	d1e5      	bne.n	8007a2a <__ieee754_atan2+0x42>
 8007a5e:	a140      	add	r1, pc, #256	; (adr r1, 8007b60 <__ieee754_atan2+0x178>)
 8007a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a64:	e7e1      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007a66:	4315      	orrs	r5, r2
 8007a68:	d106      	bne.n	8007a78 <__ieee754_atan2+0x90>
 8007a6a:	f1be 0f00 	cmp.w	lr, #0
 8007a6e:	da5f      	bge.n	8007b30 <__ieee754_atan2+0x148>
 8007a70:	a13d      	add	r1, pc, #244	; (adr r1, 8007b68 <__ieee754_atan2+0x180>)
 8007a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a76:	e7d8      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007a78:	4542      	cmp	r2, r8
 8007a7a:	d10f      	bne.n	8007a9c <__ieee754_atan2+0xb4>
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a82:	d107      	bne.n	8007a94 <__ieee754_atan2+0xac>
 8007a84:	2c02      	cmp	r4, #2
 8007a86:	d84c      	bhi.n	8007b22 <__ieee754_atan2+0x13a>
 8007a88:	4b33      	ldr	r3, [pc, #204]	; (8007b58 <__ieee754_atan2+0x170>)
 8007a8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a92:	e7ca      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007a94:	2c02      	cmp	r4, #2
 8007a96:	d848      	bhi.n	8007b2a <__ieee754_atan2+0x142>
 8007a98:	4b30      	ldr	r3, [pc, #192]	; (8007b5c <__ieee754_atan2+0x174>)
 8007a9a:	e7f6      	b.n	8007a8a <__ieee754_atan2+0xa2>
 8007a9c:	4543      	cmp	r3, r8
 8007a9e:	d0e4      	beq.n	8007a6a <__ieee754_atan2+0x82>
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007aa6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007aaa:	da1e      	bge.n	8007aea <__ieee754_atan2+0x102>
 8007aac:	2f00      	cmp	r7, #0
 8007aae:	da01      	bge.n	8007ab4 <__ieee754_atan2+0xcc>
 8007ab0:	323c      	adds	r2, #60	; 0x3c
 8007ab2:	db1e      	blt.n	8007af2 <__ieee754_atan2+0x10a>
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	f7f8 fee8 	bl	800088c <__aeabi_ddiv>
 8007abc:	ec41 0b10 	vmov	d0, r0, r1
 8007ac0:	f000 f9fa 	bl	8007eb8 <fabs>
 8007ac4:	f000 f858 	bl	8007b78 <atan>
 8007ac8:	ec51 0b10 	vmov	r0, r1, d0
 8007acc:	2c01      	cmp	r4, #1
 8007ace:	d013      	beq.n	8007af8 <__ieee754_atan2+0x110>
 8007ad0:	2c02      	cmp	r4, #2
 8007ad2:	d015      	beq.n	8007b00 <__ieee754_atan2+0x118>
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	d0a8      	beq.n	8007a2a <__ieee754_atan2+0x42>
 8007ad8:	a317      	add	r3, pc, #92	; (adr r3, 8007b38 <__ieee754_atan2+0x150>)
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f7f8 fbf3 	bl	80002c8 <__aeabi_dsub>
 8007ae2:	a317      	add	r3, pc, #92	; (adr r3, 8007b40 <__ieee754_atan2+0x158>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	e014      	b.n	8007b14 <__ieee754_atan2+0x12c>
 8007aea:	a117      	add	r1, pc, #92	; (adr r1, 8007b48 <__ieee754_atan2+0x160>)
 8007aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af0:	e7ec      	b.n	8007acc <__ieee754_atan2+0xe4>
 8007af2:	2000      	movs	r0, #0
 8007af4:	2100      	movs	r1, #0
 8007af6:	e7e9      	b.n	8007acc <__ieee754_atan2+0xe4>
 8007af8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007afc:	4619      	mov	r1, r3
 8007afe:	e794      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007b00:	a30d      	add	r3, pc, #52	; (adr r3, 8007b38 <__ieee754_atan2+0x150>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fbdf 	bl	80002c8 <__aeabi_dsub>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	a10c      	add	r1, pc, #48	; (adr r1, 8007b40 <__ieee754_atan2+0x158>)
 8007b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b14:	f7f8 fbd8 	bl	80002c8 <__aeabi_dsub>
 8007b18:	e787      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007b1a:	a109      	add	r1, pc, #36	; (adr r1, 8007b40 <__ieee754_atan2+0x158>)
 8007b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b20:	e783      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007b22:	a10b      	add	r1, pc, #44	; (adr r1, 8007b50 <__ieee754_atan2+0x168>)
 8007b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b28:	e77f      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	e77c      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007b30:	a105      	add	r1, pc, #20	; (adr r1, 8007b48 <__ieee754_atan2+0x160>)
 8007b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b36:	e778      	b.n	8007a2a <__ieee754_atan2+0x42>
 8007b38:	33145c07 	.word	0x33145c07
 8007b3c:	3ca1a626 	.word	0x3ca1a626
 8007b40:	54442d18 	.word	0x54442d18
 8007b44:	400921fb 	.word	0x400921fb
 8007b48:	54442d18 	.word	0x54442d18
 8007b4c:	3ff921fb 	.word	0x3ff921fb
 8007b50:	54442d18 	.word	0x54442d18
 8007b54:	3fe921fb 	.word	0x3fe921fb
 8007b58:	08008270 	.word	0x08008270
 8007b5c:	08008288 	.word	0x08008288
 8007b60:	54442d18 	.word	0x54442d18
 8007b64:	c00921fb 	.word	0xc00921fb
 8007b68:	54442d18 	.word	0x54442d18
 8007b6c:	bff921fb 	.word	0xbff921fb
 8007b70:	7ff00000 	.word	0x7ff00000
 8007b74:	00000000 	.word	0x00000000

08007b78 <atan>:
 8007b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	ec55 4b10 	vmov	r4, r5, d0
 8007b80:	4bc3      	ldr	r3, [pc, #780]	; (8007e90 <atan+0x318>)
 8007b82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b86:	429e      	cmp	r6, r3
 8007b88:	46ab      	mov	fp, r5
 8007b8a:	dd18      	ble.n	8007bbe <atan+0x46>
 8007b8c:	4bc1      	ldr	r3, [pc, #772]	; (8007e94 <atan+0x31c>)
 8007b8e:	429e      	cmp	r6, r3
 8007b90:	dc01      	bgt.n	8007b96 <atan+0x1e>
 8007b92:	d109      	bne.n	8007ba8 <atan+0x30>
 8007b94:	b144      	cbz	r4, 8007ba8 <atan+0x30>
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f7f8 fb95 	bl	80002cc <__adddf3>
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	e006      	b.n	8007bb6 <atan+0x3e>
 8007ba8:	f1bb 0f00 	cmp.w	fp, #0
 8007bac:	f300 8131 	bgt.w	8007e12 <atan+0x29a>
 8007bb0:	a59b      	add	r5, pc, #620	; (adr r5, 8007e20 <atan+0x2a8>)
 8007bb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007bb6:	ec45 4b10 	vmov	d0, r4, r5
 8007bba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbe:	4bb6      	ldr	r3, [pc, #728]	; (8007e98 <atan+0x320>)
 8007bc0:	429e      	cmp	r6, r3
 8007bc2:	dc14      	bgt.n	8007bee <atan+0x76>
 8007bc4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007bc8:	429e      	cmp	r6, r3
 8007bca:	dc0d      	bgt.n	8007be8 <atan+0x70>
 8007bcc:	a396      	add	r3, pc, #600	; (adr r3, 8007e28 <atan+0x2b0>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	ee10 0a10 	vmov	r0, s0
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	f7f8 fb78 	bl	80002cc <__adddf3>
 8007bdc:	4baf      	ldr	r3, [pc, #700]	; (8007e9c <atan+0x324>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	f7f8 ffba 	bl	8000b58 <__aeabi_dcmpgt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d1e6      	bne.n	8007bb6 <atan+0x3e>
 8007be8:	f04f 3aff 	mov.w	sl, #4294967295
 8007bec:	e02b      	b.n	8007c46 <atan+0xce>
 8007bee:	f000 f963 	bl	8007eb8 <fabs>
 8007bf2:	4bab      	ldr	r3, [pc, #684]	; (8007ea0 <atan+0x328>)
 8007bf4:	429e      	cmp	r6, r3
 8007bf6:	ec55 4b10 	vmov	r4, r5, d0
 8007bfa:	f300 80bf 	bgt.w	8007d7c <atan+0x204>
 8007bfe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007c02:	429e      	cmp	r6, r3
 8007c04:	f300 80a0 	bgt.w	8007d48 <atan+0x1d0>
 8007c08:	ee10 2a10 	vmov	r2, s0
 8007c0c:	ee10 0a10 	vmov	r0, s0
 8007c10:	462b      	mov	r3, r5
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 fb5a 	bl	80002cc <__adddf3>
 8007c18:	4ba0      	ldr	r3, [pc, #640]	; (8007e9c <atan+0x324>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f7f8 fb54 	bl	80002c8 <__aeabi_dsub>
 8007c20:	2200      	movs	r2, #0
 8007c22:	4606      	mov	r6, r0
 8007c24:	460f      	mov	r7, r1
 8007c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	f7f8 fb4d 	bl	80002cc <__adddf3>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4630      	mov	r0, r6
 8007c38:	4639      	mov	r1, r7
 8007c3a:	f7f8 fe27 	bl	800088c <__aeabi_ddiv>
 8007c3e:	f04f 0a00 	mov.w	sl, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	460d      	mov	r5, r1
 8007c46:	4622      	mov	r2, r4
 8007c48:	462b      	mov	r3, r5
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7f8 fcf3 	bl	8000638 <__aeabi_dmul>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4680      	mov	r8, r0
 8007c58:	4689      	mov	r9, r1
 8007c5a:	f7f8 fced 	bl	8000638 <__aeabi_dmul>
 8007c5e:	a374      	add	r3, pc, #464	; (adr r3, 8007e30 <atan+0x2b8>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	4606      	mov	r6, r0
 8007c66:	460f      	mov	r7, r1
 8007c68:	f7f8 fce6 	bl	8000638 <__aeabi_dmul>
 8007c6c:	a372      	add	r3, pc, #456	; (adr r3, 8007e38 <atan+0x2c0>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f7f8 fb2b 	bl	80002cc <__adddf3>
 8007c76:	4632      	mov	r2, r6
 8007c78:	463b      	mov	r3, r7
 8007c7a:	f7f8 fcdd 	bl	8000638 <__aeabi_dmul>
 8007c7e:	a370      	add	r3, pc, #448	; (adr r3, 8007e40 <atan+0x2c8>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f7f8 fb22 	bl	80002cc <__adddf3>
 8007c88:	4632      	mov	r2, r6
 8007c8a:	463b      	mov	r3, r7
 8007c8c:	f7f8 fcd4 	bl	8000638 <__aeabi_dmul>
 8007c90:	a36d      	add	r3, pc, #436	; (adr r3, 8007e48 <atan+0x2d0>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f7f8 fb19 	bl	80002cc <__adddf3>
 8007c9a:	4632      	mov	r2, r6
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	f7f8 fccb 	bl	8000638 <__aeabi_dmul>
 8007ca2:	a36b      	add	r3, pc, #428	; (adr r3, 8007e50 <atan+0x2d8>)
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f7f8 fb10 	bl	80002cc <__adddf3>
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	f7f8 fcc2 	bl	8000638 <__aeabi_dmul>
 8007cb4:	a368      	add	r3, pc, #416	; (adr r3, 8007e58 <atan+0x2e0>)
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	f7f8 fb07 	bl	80002cc <__adddf3>
 8007cbe:	4642      	mov	r2, r8
 8007cc0:	464b      	mov	r3, r9
 8007cc2:	f7f8 fcb9 	bl	8000638 <__aeabi_dmul>
 8007cc6:	a366      	add	r3, pc, #408	; (adr r3, 8007e60 <atan+0x2e8>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	4680      	mov	r8, r0
 8007cce:	4689      	mov	r9, r1
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	f7f8 fcb0 	bl	8000638 <__aeabi_dmul>
 8007cd8:	a363      	add	r3, pc, #396	; (adr r3, 8007e68 <atan+0x2f0>)
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	f7f8 faf3 	bl	80002c8 <__aeabi_dsub>
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	f7f8 fca7 	bl	8000638 <__aeabi_dmul>
 8007cea:	a361      	add	r3, pc, #388	; (adr r3, 8007e70 <atan+0x2f8>)
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	f7f8 faea 	bl	80002c8 <__aeabi_dsub>
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	f7f8 fc9e 	bl	8000638 <__aeabi_dmul>
 8007cfc:	a35e      	add	r3, pc, #376	; (adr r3, 8007e78 <atan+0x300>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f7f8 fae1 	bl	80002c8 <__aeabi_dsub>
 8007d06:	4632      	mov	r2, r6
 8007d08:	463b      	mov	r3, r7
 8007d0a:	f7f8 fc95 	bl	8000638 <__aeabi_dmul>
 8007d0e:	a35c      	add	r3, pc, #368	; (adr r3, 8007e80 <atan+0x308>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fad8 	bl	80002c8 <__aeabi_dsub>
 8007d18:	4632      	mov	r2, r6
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	f7f8 fc8c 	bl	8000638 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4640      	mov	r0, r8
 8007d26:	4649      	mov	r1, r9
 8007d28:	f7f8 fad0 	bl	80002cc <__adddf3>
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	462b      	mov	r3, r5
 8007d30:	f7f8 fc82 	bl	8000638 <__aeabi_dmul>
 8007d34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	d14b      	bne.n	8007dd6 <atan+0x25e>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fac1 	bl	80002c8 <__aeabi_dsub>
 8007d46:	e72c      	b.n	8007ba2 <atan+0x2a>
 8007d48:	ee10 0a10 	vmov	r0, s0
 8007d4c:	4b53      	ldr	r3, [pc, #332]	; (8007e9c <atan+0x324>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	4629      	mov	r1, r5
 8007d52:	f7f8 fab9 	bl	80002c8 <__aeabi_dsub>
 8007d56:	4b51      	ldr	r3, [pc, #324]	; (8007e9c <atan+0x324>)
 8007d58:	4606      	mov	r6, r0
 8007d5a:	460f      	mov	r7, r1
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7f8 fab3 	bl	80002cc <__adddf3>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	4639      	mov	r1, r7
 8007d6e:	f7f8 fd8d 	bl	800088c <__aeabi_ddiv>
 8007d72:	f04f 0a01 	mov.w	sl, #1
 8007d76:	4604      	mov	r4, r0
 8007d78:	460d      	mov	r5, r1
 8007d7a:	e764      	b.n	8007c46 <atan+0xce>
 8007d7c:	4b49      	ldr	r3, [pc, #292]	; (8007ea4 <atan+0x32c>)
 8007d7e:	429e      	cmp	r6, r3
 8007d80:	da1d      	bge.n	8007dbe <atan+0x246>
 8007d82:	ee10 0a10 	vmov	r0, s0
 8007d86:	4b48      	ldr	r3, [pc, #288]	; (8007ea8 <atan+0x330>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	f7f8 fa9c 	bl	80002c8 <__aeabi_dsub>
 8007d90:	4b45      	ldr	r3, [pc, #276]	; (8007ea8 <atan+0x330>)
 8007d92:	4606      	mov	r6, r0
 8007d94:	460f      	mov	r7, r1
 8007d96:	2200      	movs	r2, #0
 8007d98:	4620      	mov	r0, r4
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	f7f8 fc4c 	bl	8000638 <__aeabi_dmul>
 8007da0:	4b3e      	ldr	r3, [pc, #248]	; (8007e9c <atan+0x324>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	f7f8 fa92 	bl	80002cc <__adddf3>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	f7f8 fd6c 	bl	800088c <__aeabi_ddiv>
 8007db4:	f04f 0a02 	mov.w	sl, #2
 8007db8:	4604      	mov	r4, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	e743      	b.n	8007c46 <atan+0xce>
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	ee10 2a10 	vmov	r2, s0
 8007dc4:	4939      	ldr	r1, [pc, #228]	; (8007eac <atan+0x334>)
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f7f8 fd60 	bl	800088c <__aeabi_ddiv>
 8007dcc:	f04f 0a03 	mov.w	sl, #3
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	e737      	b.n	8007c46 <atan+0xce>
 8007dd6:	4b36      	ldr	r3, [pc, #216]	; (8007eb0 <atan+0x338>)
 8007dd8:	4e36      	ldr	r6, [pc, #216]	; (8007eb4 <atan+0x33c>)
 8007dda:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 fa71 	bl	80002c8 <__aeabi_dsub>
 8007de6:	4622      	mov	r2, r4
 8007de8:	462b      	mov	r3, r5
 8007dea:	f7f8 fa6d 	bl	80002c8 <__aeabi_dsub>
 8007dee:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007dfa:	f7f8 fa65 	bl	80002c8 <__aeabi_dsub>
 8007dfe:	f1bb 0f00 	cmp.w	fp, #0
 8007e02:	4604      	mov	r4, r0
 8007e04:	460d      	mov	r5, r1
 8007e06:	f6bf aed6 	bge.w	8007bb6 <atan+0x3e>
 8007e0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e0e:	461d      	mov	r5, r3
 8007e10:	e6d1      	b.n	8007bb6 <atan+0x3e>
 8007e12:	a51d      	add	r5, pc, #116	; (adr r5, 8007e88 <atan+0x310>)
 8007e14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e18:	e6cd      	b.n	8007bb6 <atan+0x3e>
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w
 8007e20:	54442d18 	.word	0x54442d18
 8007e24:	bff921fb 	.word	0xbff921fb
 8007e28:	8800759c 	.word	0x8800759c
 8007e2c:	7e37e43c 	.word	0x7e37e43c
 8007e30:	e322da11 	.word	0xe322da11
 8007e34:	3f90ad3a 	.word	0x3f90ad3a
 8007e38:	24760deb 	.word	0x24760deb
 8007e3c:	3fa97b4b 	.word	0x3fa97b4b
 8007e40:	a0d03d51 	.word	0xa0d03d51
 8007e44:	3fb10d66 	.word	0x3fb10d66
 8007e48:	c54c206e 	.word	0xc54c206e
 8007e4c:	3fb745cd 	.word	0x3fb745cd
 8007e50:	920083ff 	.word	0x920083ff
 8007e54:	3fc24924 	.word	0x3fc24924
 8007e58:	5555550d 	.word	0x5555550d
 8007e5c:	3fd55555 	.word	0x3fd55555
 8007e60:	2c6a6c2f 	.word	0x2c6a6c2f
 8007e64:	bfa2b444 	.word	0xbfa2b444
 8007e68:	52defd9a 	.word	0x52defd9a
 8007e6c:	3fadde2d 	.word	0x3fadde2d
 8007e70:	af749a6d 	.word	0xaf749a6d
 8007e74:	3fb3b0f2 	.word	0x3fb3b0f2
 8007e78:	fe231671 	.word	0xfe231671
 8007e7c:	3fbc71c6 	.word	0x3fbc71c6
 8007e80:	9998ebc4 	.word	0x9998ebc4
 8007e84:	3fc99999 	.word	0x3fc99999
 8007e88:	54442d18 	.word	0x54442d18
 8007e8c:	3ff921fb 	.word	0x3ff921fb
 8007e90:	440fffff 	.word	0x440fffff
 8007e94:	7ff00000 	.word	0x7ff00000
 8007e98:	3fdbffff 	.word	0x3fdbffff
 8007e9c:	3ff00000 	.word	0x3ff00000
 8007ea0:	3ff2ffff 	.word	0x3ff2ffff
 8007ea4:	40038000 	.word	0x40038000
 8007ea8:	3ff80000 	.word	0x3ff80000
 8007eac:	bff00000 	.word	0xbff00000
 8007eb0:	080082c0 	.word	0x080082c0
 8007eb4:	080082a0 	.word	0x080082a0

08007eb8 <fabs>:
 8007eb8:	ec51 0b10 	vmov	r0, r1, d0
 8007ebc:	ee10 2a10 	vmov	r2, s0
 8007ec0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ec4:	ec43 2b10 	vmov	d0, r2, r3
 8007ec8:	4770      	bx	lr
	...

08007ecc <_init>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr

08007ed8 <_fini>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	bf00      	nop
 8007edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ede:	bc08      	pop	{r3}
 8007ee0:	469e      	mov	lr, r3
 8007ee2:	4770      	bx	lr
